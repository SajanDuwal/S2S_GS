
COM_GS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa60  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000710  0800aba0  0800aba0  0001aba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b2b0  0800b2b0  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  0800b2b0  0800b2b0  0001b2b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b2b8  0800b2b8  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b2b8  0800b2b8  0001b2b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b2bc  0800b2bc  0001b2bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800b2c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000065c  20000060  0800b320  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006bc  0800b320  000206bc  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008a  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fed1  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000450f  00000000  00000000  0003ff9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e08  00000000  00000000  000444b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016f9  00000000  00000000  000462b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021455  00000000  00000000  000479b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f4d9  00000000  00000000  00068e06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c422c  00000000  00000000  000882df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000822c  00000000  00000000  0014c50c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00154738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000060 	.word	0x20000060
 800015c:	00000000 	.word	0x00000000
 8000160:	0800ab88 	.word	0x0800ab88

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000064 	.word	0x20000064
 800017c:	0800ab88 	.word	0x0800ab88

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000234:	f000 b970 	b.w	8000518 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	460f      	mov	r7, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d965      	bls.n	8000332 <__udivmoddi4+0xe2>
 8000266:	fab2 f382 	clz	r3, r2
 800026a:	b143      	cbz	r3, 800027e <__udivmoddi4+0x2e>
 800026c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000270:	f1c3 0220 	rsb	r2, r3, #32
 8000274:	409f      	lsls	r7, r3
 8000276:	fa20 f202 	lsr.w	r2, r0, r2
 800027a:	4317      	orrs	r7, r2
 800027c:	409c      	lsls	r4, r3
 800027e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000282:	fa1f f58c 	uxth.w	r5, ip
 8000286:	fbb7 f1fe 	udiv	r1, r7, lr
 800028a:	0c22      	lsrs	r2, r4, #16
 800028c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000290:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000294:	fb01 f005 	mul.w	r0, r1, r5
 8000298:	4290      	cmp	r0, r2
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029c:	eb1c 0202 	adds.w	r2, ip, r2
 80002a0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002a4:	f080 811b 	bcs.w	80004de <__udivmoddi4+0x28e>
 80002a8:	4290      	cmp	r0, r2
 80002aa:	f240 8118 	bls.w	80004de <__udivmoddi4+0x28e>
 80002ae:	3902      	subs	r1, #2
 80002b0:	4462      	add	r2, ip
 80002b2:	1a12      	subs	r2, r2, r0
 80002b4:	b2a4      	uxth	r4, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002c2:	fb00 f505 	mul.w	r5, r0, r5
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	d90a      	bls.n	80002e0 <__udivmoddi4+0x90>
 80002ca:	eb1c 0404 	adds.w	r4, ip, r4
 80002ce:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002d2:	f080 8106 	bcs.w	80004e2 <__udivmoddi4+0x292>
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	f240 8103 	bls.w	80004e2 <__udivmoddi4+0x292>
 80002dc:	4464      	add	r4, ip
 80002de:	3802      	subs	r0, #2
 80002e0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e4:	1b64      	subs	r4, r4, r5
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11e      	cbz	r6, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40dc      	lsrs	r4, r3
 80002ec:	2300      	movs	r3, #0
 80002ee:	e9c6 4300 	strd	r4, r3, [r6]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d908      	bls.n	800030c <__udivmoddi4+0xbc>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80ec 	beq.w	80004d8 <__udivmoddi4+0x288>
 8000300:	2100      	movs	r1, #0
 8000302:	e9c6 0500 	strd	r0, r5, [r6]
 8000306:	4608      	mov	r0, r1
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	fab3 f183 	clz	r1, r3
 8000310:	2900      	cmp	r1, #0
 8000312:	d149      	bne.n	80003a8 <__udivmoddi4+0x158>
 8000314:	42ab      	cmp	r3, r5
 8000316:	d302      	bcc.n	800031e <__udivmoddi4+0xce>
 8000318:	4282      	cmp	r2, r0
 800031a:	f200 80f7 	bhi.w	800050c <__udivmoddi4+0x2bc>
 800031e:	1a84      	subs	r4, r0, r2
 8000320:	eb65 0203 	sbc.w	r2, r5, r3
 8000324:	2001      	movs	r0, #1
 8000326:	4617      	mov	r7, r2
 8000328:	2e00      	cmp	r6, #0
 800032a:	d0e2      	beq.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	e9c6 4700 	strd	r4, r7, [r6]
 8000330:	e7df      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000332:	b902      	cbnz	r2, 8000336 <__udivmoddi4+0xe6>
 8000334:	deff      	udf	#255	; 0xff
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	2b00      	cmp	r3, #0
 800033c:	f040 808f 	bne.w	800045e <__udivmoddi4+0x20e>
 8000340:	1a8a      	subs	r2, r1, r2
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2101      	movs	r1, #1
 800034c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000350:	fb07 2015 	mls	r0, r7, r5, r2
 8000354:	0c22      	lsrs	r2, r4, #16
 8000356:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800035a:	fb0e f005 	mul.w	r0, lr, r5
 800035e:	4290      	cmp	r0, r2
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x124>
 8000362:	eb1c 0202 	adds.w	r2, ip, r2
 8000366:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4290      	cmp	r0, r2
 800036e:	f200 80ca 	bhi.w	8000506 <__udivmoddi4+0x2b6>
 8000372:	4645      	mov	r5, r8
 8000374:	1a12      	subs	r2, r2, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb2 f0f7 	udiv	r0, r2, r7
 800037c:	fb07 2210 	mls	r2, r7, r0, r2
 8000380:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x14e>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x14c>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80ba 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800039c:	4610      	mov	r0, r2
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003a6:	e79f      	b.n	80002e8 <__udivmoddi4+0x98>
 80003a8:	f1c1 0720 	rsb	r7, r1, #32
 80003ac:	408b      	lsls	r3, r1
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa05 f401 	lsl.w	r4, r5, r1
 80003ba:	fa20 f307 	lsr.w	r3, r0, r7
 80003be:	40fd      	lsrs	r5, r7
 80003c0:	4323      	orrs	r3, r4
 80003c2:	fa00 f901 	lsl.w	r9, r0, r1
 80003c6:	ea4f 401c 	mov.w	r0, ip, lsr #16
 80003ca:	fa1f fe8c 	uxth.w	lr, ip
 80003ce:	fbb5 f8f0 	udiv	r8, r5, r0
 80003d2:	0c1c      	lsrs	r4, r3, #16
 80003d4:	fb00 5518 	mls	r5, r0, r8, r5
 80003d8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003dc:	fb08 f50e 	mul.w	r5, r8, lr
 80003e0:	42a5      	cmp	r5, r4
 80003e2:	fa02 f201 	lsl.w	r2, r2, r1
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003f0:	f080 8087 	bcs.w	8000502 <__udivmoddi4+0x2b2>
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	f240 8084 	bls.w	8000502 <__udivmoddi4+0x2b2>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4464      	add	r4, ip
 8000400:	1b64      	subs	r4, r4, r5
 8000402:	b29d      	uxth	r5, r3
 8000404:	fbb4 f3f0 	udiv	r3, r4, r0
 8000408:	fb00 4413 	mls	r4, r0, r3, r4
 800040c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000410:	fb03 fe0e 	mul.w	lr, r3, lr
 8000414:	45a6      	cmp	lr, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1c 0404 	adds.w	r4, ip, r4
 800041c:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 8000420:	d26b      	bcs.n	80004fa <__udivmoddi4+0x2aa>
 8000422:	45a6      	cmp	lr, r4
 8000424:	d969      	bls.n	80004fa <__udivmoddi4+0x2aa>
 8000426:	3b02      	subs	r3, #2
 8000428:	4464      	add	r4, ip
 800042a:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800042e:	fba0 8302 	umull	r8, r3, r0, r2
 8000432:	eba4 040e 	sub.w	r4, r4, lr
 8000436:	429c      	cmp	r4, r3
 8000438:	46c6      	mov	lr, r8
 800043a:	461d      	mov	r5, r3
 800043c:	d355      	bcc.n	80004ea <__udivmoddi4+0x29a>
 800043e:	d052      	beq.n	80004e6 <__udivmoddi4+0x296>
 8000440:	b156      	cbz	r6, 8000458 <__udivmoddi4+0x208>
 8000442:	ebb9 030e 	subs.w	r3, r9, lr
 8000446:	eb64 0405 	sbc.w	r4, r4, r5
 800044a:	fa04 f707 	lsl.w	r7, r4, r7
 800044e:	40cb      	lsrs	r3, r1
 8000450:	40cc      	lsrs	r4, r1
 8000452:	431f      	orrs	r7, r3
 8000454:	e9c6 7400 	strd	r7, r4, [r6]
 8000458:	2100      	movs	r1, #0
 800045a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045e:	f1c3 0120 	rsb	r1, r3, #32
 8000462:	fa02 fc03 	lsl.w	ip, r2, r3
 8000466:	fa20 f201 	lsr.w	r2, r0, r1
 800046a:	fa25 f101 	lsr.w	r1, r5, r1
 800046e:	409d      	lsls	r5, r3
 8000470:	432a      	orrs	r2, r5
 8000472:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000476:	fa1f fe8c 	uxth.w	lr, ip
 800047a:	fbb1 f0f7 	udiv	r0, r1, r7
 800047e:	fb07 1510 	mls	r5, r7, r0, r1
 8000482:	0c11      	lsrs	r1, r2, #16
 8000484:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000488:	fb00 f50e 	mul.w	r5, r0, lr
 800048c:	428d      	cmp	r5, r1
 800048e:	fa04 f403 	lsl.w	r4, r4, r3
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x256>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800049c:	d22f      	bcs.n	80004fe <__udivmoddi4+0x2ae>
 800049e:	428d      	cmp	r5, r1
 80004a0:	d92d      	bls.n	80004fe <__udivmoddi4+0x2ae>
 80004a2:	3802      	subs	r0, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1b49      	subs	r1, r1, r5
 80004a8:	b292      	uxth	r2, r2
 80004aa:	fbb1 f5f7 	udiv	r5, r1, r7
 80004ae:	fb07 1115 	mls	r1, r7, r5, r1
 80004b2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b6:	fb05 f10e 	mul.w	r1, r5, lr
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x280>
 80004be:	eb1c 0202 	adds.w	r2, ip, r2
 80004c2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004c6:	d216      	bcs.n	80004f6 <__udivmoddi4+0x2a6>
 80004c8:	4291      	cmp	r1, r2
 80004ca:	d914      	bls.n	80004f6 <__udivmoddi4+0x2a6>
 80004cc:	3d02      	subs	r5, #2
 80004ce:	4462      	add	r2, ip
 80004d0:	1a52      	subs	r2, r2, r1
 80004d2:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d6:	e739      	b.n	800034c <__udivmoddi4+0xfc>
 80004d8:	4631      	mov	r1, r6
 80004da:	4630      	mov	r0, r6
 80004dc:	e709      	b.n	80002f2 <__udivmoddi4+0xa2>
 80004de:	4639      	mov	r1, r7
 80004e0:	e6e7      	b.n	80002b2 <__udivmoddi4+0x62>
 80004e2:	4610      	mov	r0, r2
 80004e4:	e6fc      	b.n	80002e0 <__udivmoddi4+0x90>
 80004e6:	45c1      	cmp	r9, r8
 80004e8:	d2aa      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004ea:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ee:	eb63 050c 	sbc.w	r5, r3, ip
 80004f2:	3801      	subs	r0, #1
 80004f4:	e7a4      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f6:	4645      	mov	r5, r8
 80004f8:	e7ea      	b.n	80004d0 <__udivmoddi4+0x280>
 80004fa:	4603      	mov	r3, r0
 80004fc:	e795      	b.n	800042a <__udivmoddi4+0x1da>
 80004fe:	4640      	mov	r0, r8
 8000500:	e7d1      	b.n	80004a6 <__udivmoddi4+0x256>
 8000502:	46d0      	mov	r8, sl
 8000504:	e77c      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000506:	3d02      	subs	r5, #2
 8000508:	4462      	add	r2, ip
 800050a:	e733      	b.n	8000374 <__udivmoddi4+0x124>
 800050c:	4608      	mov	r0, r1
 800050e:	e70b      	b.n	8000328 <__udivmoddi4+0xd8>
 8000510:	4464      	add	r4, ip
 8000512:	3802      	subs	r0, #2
 8000514:	e743      	b.n	800039e <__udivmoddi4+0x14e>
 8000516:	bf00      	nop

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <AX_25PacketFormation>:

#define CMD_PAYLOAD	(35)

extern uint8_t tx_cmd[CMD_PAYLOAD];

void AX_25PacketFormation(uint8_t *main_cmd) {
 800051c:	b580      	push	{r7, lr}
 800051e:	b08c      	sub	sp, #48	; 0x30
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]

	myDebug("AX.25 information field: \r\n");
 8000524:	486b      	ldr	r0, [pc, #428]	; (80006d4 <AX_25PacketFormation+0x1b8>)
 8000526:	f000 f8fb 	bl	8000720 <myDebug>
	for (int i = 0; i < 13; i++) {
 800052a:	2300      	movs	r3, #0
 800052c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800052e:	e00a      	b.n	8000546 <AX_25PacketFormation+0x2a>
		myDebug("%x ", main_cmd[i]);
 8000530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000532:	687a      	ldr	r2, [r7, #4]
 8000534:	4413      	add	r3, r2
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	4619      	mov	r1, r3
 800053a:	4867      	ldr	r0, [pc, #412]	; (80006d8 <AX_25PacketFormation+0x1bc>)
 800053c:	f000 f8f0 	bl	8000720 <myDebug>
	for (int i = 0; i < 13; i++) {
 8000540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000542:	3301      	adds	r3, #1
 8000544:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000548:	2b0c      	cmp	r3, #12
 800054a:	ddf1      	ble.n	8000530 <AX_25PacketFormation+0x14>
	}
	myDebug("\r\n");
 800054c:	4863      	ldr	r0, [pc, #396]	; (80006dc <AX_25PacketFormation+0x1c0>)
 800054e:	f000 f8e7 	bl	8000720 <myDebug>

	uint8_t buff_head[17];
	// AX.25 Packet header
	tx_cmd[0] = 0x73;
 8000552:	4b63      	ldr	r3, [pc, #396]	; (80006e0 <AX_25PacketFormation+0x1c4>)
 8000554:	2273      	movs	r2, #115	; 0x73
 8000556:	701a      	strb	r2, [r3, #0]

	// destination callsign
	tx_cmd[1] = 0x72;    // callsign  9
 8000558:	4b61      	ldr	r3, [pc, #388]	; (80006e0 <AX_25PacketFormation+0x1c4>)
 800055a:	2272      	movs	r2, #114	; 0x72
 800055c:	705a      	strb	r2, [r3, #1]
	tx_cmd[2] = 0x9C;	//callsign	N
 800055e:	4b60      	ldr	r3, [pc, #384]	; (80006e0 <AX_25PacketFormation+0x1c4>)
 8000560:	229c      	movs	r2, #156	; 0x9c
 8000562:	709a      	strb	r2, [r3, #2]
	tx_cmd[3] = 0x64;	//callsign	2
 8000564:	4b5e      	ldr	r3, [pc, #376]	; (80006e0 <AX_25PacketFormation+0x1c4>)
 8000566:	2264      	movs	r2, #100	; 0x64
 8000568:	70da      	strb	r2, [r3, #3]
	tx_cmd[4] = 0xA6;	//callsign	S
 800056a:	4b5d      	ldr	r3, [pc, #372]	; (80006e0 <AX_25PacketFormation+0x1c4>)
 800056c:	22a6      	movs	r2, #166	; 0xa6
 800056e:	711a      	strb	r2, [r3, #4]
	tx_cmd[5] = 0x92;	//callsign	I
 8000570:	4b5b      	ldr	r3, [pc, #364]	; (80006e0 <AX_25PacketFormation+0x1c4>)
 8000572:	2292      	movs	r2, #146	; 0x92
 8000574:	715a      	strb	r2, [r3, #5]
	tx_cmd[6] = 0x40;	// callsign    space 0x20 -> 1bit left shift 0x40
 8000576:	4b5a      	ldr	r3, [pc, #360]	; (80006e0 <AX_25PacketFormation+0x1c4>)
 8000578:	2240      	movs	r2, #64	; 0x40
 800057a:	719a      	strb	r2, [r3, #6]
	tx_cmd[7] = 0xE0;	// destination SSID
 800057c:	4b58      	ldr	r3, [pc, #352]	; (80006e0 <AX_25PacketFormation+0x1c4>)
 800057e:	22e0      	movs	r2, #224	; 0xe0
 8000580:	71da      	strb	r2, [r3, #7]

	// source callsign					Sajan
	tx_cmd[8] = 0x53;    // callsign S
 8000582:	4b57      	ldr	r3, [pc, #348]	; (80006e0 <AX_25PacketFormation+0x1c4>)
 8000584:	2253      	movs	r2, #83	; 0x53
 8000586:	721a      	strb	r2, [r3, #8]
	tx_cmd[9] = 0x41;	//callsign	A
 8000588:	4b55      	ldr	r3, [pc, #340]	; (80006e0 <AX_25PacketFormation+0x1c4>)
 800058a:	2241      	movs	r2, #65	; 0x41
 800058c:	725a      	strb	r2, [r3, #9]
	tx_cmd[10] = 0x4A;	//callsign	J
 800058e:	4b54      	ldr	r3, [pc, #336]	; (80006e0 <AX_25PacketFormation+0x1c4>)
 8000590:	224a      	movs	r2, #74	; 0x4a
 8000592:	729a      	strb	r2, [r3, #10]
	tx_cmd[11] = 0x41;	//callsign	A
 8000594:	4b52      	ldr	r3, [pc, #328]	; (80006e0 <AX_25PacketFormation+0x1c4>)
 8000596:	2241      	movs	r2, #65	; 0x41
 8000598:	72da      	strb	r2, [r3, #11]
	tx_cmd[12] = 0x4E;	//callsign	N
 800059a:	4b51      	ldr	r3, [pc, #324]	; (80006e0 <AX_25PacketFormation+0x1c4>)
 800059c:	224e      	movs	r2, #78	; 0x4e
 800059e:	731a      	strb	r2, [r3, #12]
	tx_cmd[13] = 0x40;	// callsign space
 80005a0:	4b4f      	ldr	r3, [pc, #316]	; (80006e0 <AX_25PacketFormation+0x1c4>)
 80005a2:	2240      	movs	r2, #64	; 0x40
 80005a4:	735a      	strb	r2, [r3, #13]
	tx_cmd[14] = 0x36;	// source SSID
 80005a6:	4b4e      	ldr	r3, [pc, #312]	; (80006e0 <AX_25PacketFormation+0x1c4>)
 80005a8:	2236      	movs	r2, #54	; 0x36
 80005aa:	739a      	strb	r2, [r3, #14]

	// control field
	tx_cmd[15] = 0x03;
 80005ac:	4b4c      	ldr	r3, [pc, #304]	; (80006e0 <AX_25PacketFormation+0x1c4>)
 80005ae:	2203      	movs	r2, #3
 80005b0:	73da      	strb	r2, [r3, #15]

	// PID control bit
	tx_cmd[16] = 0xF0;
 80005b2:	4b4b      	ldr	r3, [pc, #300]	; (80006e0 <AX_25PacketFormation+0x1c4>)
 80005b4:	22f0      	movs	r2, #240	; 0xf0
 80005b6:	741a      	strb	r2, [r3, #16]

	for (int a = 0; a < 17; a++) {
 80005b8:	2300      	movs	r3, #0
 80005ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80005bc:	e00c      	b.n	80005d8 <AX_25PacketFormation+0xbc>
		buff_head[a] = tx_cmd[a];
 80005be:	4a48      	ldr	r2, [pc, #288]	; (80006e0 <AX_25PacketFormation+0x1c4>)
 80005c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005c2:	4413      	add	r3, r2
 80005c4:	7819      	ldrb	r1, [r3, #0]
 80005c6:	f107 0208 	add.w	r2, r7, #8
 80005ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005cc:	4413      	add	r3, r2
 80005ce:	460a      	mov	r2, r1
 80005d0:	701a      	strb	r2, [r3, #0]
	for (int a = 0; a < 17; a++) {
 80005d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005d4:	3301      	adds	r3, #1
 80005d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80005d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005da:	2b10      	cmp	r3, #16
 80005dc:	ddef      	ble.n	80005be <AX_25PacketFormation+0xa2>
	}

	// Calculate CRC-CCITT for the packet data starting from tx_cmd[0] to tx_cmd[16]

	uint16_t crc = 0;
 80005de:	2300      	movs	r3, #0
 80005e0:	837b      	strh	r3, [r7, #26]
	crc = calculateCRC_CCITT_AX25(buff_head, sizeof(buff_head));
 80005e2:	f107 0308 	add.w	r3, r7, #8
 80005e6:	2111      	movs	r1, #17
 80005e8:	4618      	mov	r0, r3
 80005ea:	f000 f8d3 	bl	8000794 <calculateCRC_CCITT_AX25>
 80005ee:	4603      	mov	r3, r0
 80005f0:	837b      	strh	r3, [r7, #26]

	tx_cmd[17] = (crc >> 8) && 0xFF;
 80005f2:	8b7b      	ldrh	r3, [r7, #26]
 80005f4:	0a1b      	lsrs	r3, r3, #8
 80005f6:	b29b      	uxth	r3, r3
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	bf14      	ite	ne
 80005fc:	2301      	movne	r3, #1
 80005fe:	2300      	moveq	r3, #0
 8000600:	b2db      	uxtb	r3, r3
 8000602:	461a      	mov	r2, r3
 8000604:	4b36      	ldr	r3, [pc, #216]	; (80006e0 <AX_25PacketFormation+0x1c4>)
 8000606:	745a      	strb	r2, [r3, #17]
	tx_cmd[18] = crc & 0xFF;
 8000608:	8b7b      	ldrh	r3, [r7, #26]
 800060a:	b2da      	uxtb	r2, r3
 800060c:	4b34      	ldr	r3, [pc, #208]	; (80006e0 <AX_25PacketFormation+0x1c4>)
 800060e:	749a      	strb	r2, [r3, #18]

	// information field
	int i = 19;
 8000610:	2313      	movs	r3, #19
 8000612:	627b      	str	r3, [r7, #36]	; 0x24
	for (int k = 0; k < 13; k++) {
 8000614:	2300      	movs	r3, #0
 8000616:	623b      	str	r3, [r7, #32]
 8000618:	e00e      	b.n	8000638 <AX_25PacketFormation+0x11c>
		tx_cmd[i] = main_cmd[k];
 800061a:	6a3b      	ldr	r3, [r7, #32]
 800061c:	687a      	ldr	r2, [r7, #4]
 800061e:	4413      	add	r3, r2
 8000620:	7819      	ldrb	r1, [r3, #0]
 8000622:	4a2f      	ldr	r2, [pc, #188]	; (80006e0 <AX_25PacketFormation+0x1c4>)
 8000624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000626:	4413      	add	r3, r2
 8000628:	460a      	mov	r2, r1
 800062a:	701a      	strb	r2, [r3, #0]
		i++;
 800062c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800062e:	3301      	adds	r3, #1
 8000630:	627b      	str	r3, [r7, #36]	; 0x24
	for (int k = 0; k < 13; k++) {
 8000632:	6a3b      	ldr	r3, [r7, #32]
 8000634:	3301      	adds	r3, #1
 8000636:	623b      	str	r3, [r7, #32]
 8000638:	6a3b      	ldr	r3, [r7, #32]
 800063a:	2b0c      	cmp	r3, #12
 800063c:	dded      	ble.n	800061a <AX_25PacketFormation+0xfe>
	}

	// Calculate CRC-CCITT for the packet data starting from packet[1]
	crc = 0;
 800063e:	2300      	movs	r3, #0
 8000640:	837b      	strh	r3, [r7, #26]
	crc = calculateCRC_CCITT_AX25(main_cmd, 13);
 8000642:	210d      	movs	r1, #13
 8000644:	6878      	ldr	r0, [r7, #4]
 8000646:	f000 f8a5 	bl	8000794 <calculateCRC_CCITT_AX25>
 800064a:	4603      	mov	r3, r0
 800064c:	837b      	strh	r3, [r7, #26]

	memset(main_cmd, '\0', 13);
 800064e:	220d      	movs	r2, #13
 8000650:	2100      	movs	r1, #0
 8000652:	6878      	ldr	r0, [r7, #4]
 8000654:	f009 fe16 	bl	800a284 <memset>

	// Store CRC result in the packet array (from packet[1] to end of for loop)
	tx_cmd[i] = (crc >> 8) & 0xFF; // Most significant byte
 8000658:	8b7b      	ldrh	r3, [r7, #26]
 800065a:	0a1b      	lsrs	r3, r3, #8
 800065c:	b29b      	uxth	r3, r3
 800065e:	b2d9      	uxtb	r1, r3
 8000660:	4a1f      	ldr	r2, [pc, #124]	; (80006e0 <AX_25PacketFormation+0x1c4>)
 8000662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000664:	4413      	add	r3, r2
 8000666:	460a      	mov	r2, r1
 8000668:	701a      	strb	r2, [r3, #0]
	i++;
 800066a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800066c:	3301      	adds	r3, #1
 800066e:	627b      	str	r3, [r7, #36]	; 0x24
	tx_cmd[i] = crc & 0xFF;        // Least significant byte
 8000670:	8b7b      	ldrh	r3, [r7, #26]
 8000672:	b2d9      	uxtb	r1, r3
 8000674:	4a1a      	ldr	r2, [pc, #104]	; (80006e0 <AX_25PacketFormation+0x1c4>)
 8000676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000678:	4413      	add	r3, r2
 800067a:	460a      	mov	r2, r1
 800067c:	701a      	strb	r2, [r3, #0]
	i++;
 800067e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000680:	3301      	adds	r3, #1
 8000682:	627b      	str	r3, [r7, #36]	; 0x24
	// AX.25 Packet footer
	tx_cmd[i] = 0x73;
 8000684:	4a16      	ldr	r2, [pc, #88]	; (80006e0 <AX_25PacketFormation+0x1c4>)
 8000686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000688:	4413      	add	r3, r2
 800068a:	2273      	movs	r2, #115	; 0x73
 800068c:	701a      	strb	r2, [r3, #0]
	myDebug("\npacket_len: %d\r\n", i + 1);
 800068e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000690:	3301      	adds	r3, #1
 8000692:	4619      	mov	r1, r3
 8000694:	4813      	ldr	r0, [pc, #76]	; (80006e4 <AX_25PacketFormation+0x1c8>)
 8000696:	f000 f843 	bl	8000720 <myDebug>
	myDebug("packet: 0x%x\r\n", tx_cmd);
 800069a:	4911      	ldr	r1, [pc, #68]	; (80006e0 <AX_25PacketFormation+0x1c4>)
 800069c:	4812      	ldr	r0, [pc, #72]	; (80006e8 <AX_25PacketFormation+0x1cc>)
 800069e:	f000 f83f 	bl	8000720 <myDebug>
	for (int j = 0; j <= i; j++) {
 80006a2:	2300      	movs	r3, #0
 80006a4:	61fb      	str	r3, [r7, #28]
 80006a6:	e00a      	b.n	80006be <AX_25PacketFormation+0x1a2>
		myDebug("%x ", tx_cmd[j]);
 80006a8:	4a0d      	ldr	r2, [pc, #52]	; (80006e0 <AX_25PacketFormation+0x1c4>)
 80006aa:	69fb      	ldr	r3, [r7, #28]
 80006ac:	4413      	add	r3, r2
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	4619      	mov	r1, r3
 80006b2:	4809      	ldr	r0, [pc, #36]	; (80006d8 <AX_25PacketFormation+0x1bc>)
 80006b4:	f000 f834 	bl	8000720 <myDebug>
	for (int j = 0; j <= i; j++) {
 80006b8:	69fb      	ldr	r3, [r7, #28]
 80006ba:	3301      	adds	r3, #1
 80006bc:	61fb      	str	r3, [r7, #28]
 80006be:	69fa      	ldr	r2, [r7, #28]
 80006c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006c2:	429a      	cmp	r2, r3
 80006c4:	ddf0      	ble.n	80006a8 <AX_25PacketFormation+0x18c>
	}
	myDebug("\r\n");
 80006c6:	4805      	ldr	r0, [pc, #20]	; (80006dc <AX_25PacketFormation+0x1c0>)
 80006c8:	f000 f82a 	bl	8000720 <myDebug>
}
 80006cc:	bf00      	nop
 80006ce:	3730      	adds	r7, #48	; 0x30
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	0800aba0 	.word	0x0800aba0
 80006d8:	0800abbc 	.word	0x0800abbc
 80006dc:	0800abc0 	.word	0x0800abc0
 80006e0:	20000380 	.word	0x20000380
 80006e4:	0800abc4 	.word	0x0800abc4
 80006e8:	0800abd8 	.word	0x0800abd8

080006ec <delay_us>:
#include "com_debug.h"
#include "stdio.h"
#include "stdarg.h"
#include "stdint.h"

void delay_us(uint32_t us) {
 80006ec:	b480      	push	{r7}
 80006ee:	b085      	sub	sp, #20
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
	uint32_t delay_counter_disp;
	__HAL_TIM_SET_COUNTER(&htim2, 0);  // set the counter value a 0
 80006f4:	4b09      	ldr	r3, [pc, #36]	; (800071c <delay_us+0x30>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	2200      	movs	r2, #0
 80006fa:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us)
 80006fc:	e002      	b.n	8000704 <delay_us+0x18>
		delay_counter_disp++;
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	3301      	adds	r3, #1
 8000702:	60fb      	str	r3, [r7, #12]
	while (__HAL_TIM_GET_COUNTER(&htim2) < us)
 8000704:	4b05      	ldr	r3, [pc, #20]	; (800071c <delay_us+0x30>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800070a:	687a      	ldr	r2, [r7, #4]
 800070c:	429a      	cmp	r2, r3
 800070e:	d8f6      	bhi.n	80006fe <delay_us+0x12>
	// wait for the counter to reach the us input in the parameter
}
 8000710:	bf00      	nop
 8000712:	bf00      	nop
 8000714:	3714      	adds	r7, #20
 8000716:	46bd      	mov	sp, r7
 8000718:	bc80      	pop	{r7}
 800071a:	4770      	bx	lr
 800071c:	20000168 	.word	0x20000168

08000720 <myDebug>:

void myDebug(const char *fmt, ...) {
 8000720:	b40f      	push	{r0, r1, r2, r3}
 8000722:	b580      	push	{r7, lr}
 8000724:	b082      	sub	sp, #8
 8000726:	af00      	add	r7, sp, #0
	static char temp[100];
	va_list args;
	va_start(args, fmt);
 8000728:	f107 0314 	add.w	r3, r7, #20
 800072c:	603b      	str	r3, [r7, #0]
	vsnprintf(temp, sizeof(temp), fmt, args);
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	693a      	ldr	r2, [r7, #16]
 8000732:	2164      	movs	r1, #100	; 0x64
 8000734:	480a      	ldr	r0, [pc, #40]	; (8000760 <myDebug+0x40>)
 8000736:	f009 fd97 	bl	800a268 <vsniprintf>
	va_end(args);
	int len = bufferSize(temp);
 800073a:	4809      	ldr	r0, [pc, #36]	; (8000760 <myDebug+0x40>)
 800073c:	f000 f814 	bl	8000768 <bufferSize>
 8000740:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) temp, len, 1000);
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	b29a      	uxth	r2, r3
 8000746:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800074a:	4905      	ldr	r1, [pc, #20]	; (8000760 <myDebug+0x40>)
 800074c:	4805      	ldr	r0, [pc, #20]	; (8000764 <myDebug+0x44>)
 800074e:	f004 fc0f 	bl	8004f70 <HAL_UART_Transmit>
}
 8000752:	bf00      	nop
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800075c:	b004      	add	sp, #16
 800075e:	4770      	bx	lr
 8000760:	2000007c 	.word	0x2000007c
 8000764:	200001b4 	.word	0x200001b4

08000768 <bufferSize>:

int bufferSize(char *buffer) {
 8000768:	b480      	push	{r7}
 800076a:	b085      	sub	sp, #20
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
	int i = 0;
 8000770:	2300      	movs	r3, #0
 8000772:	60fb      	str	r3, [r7, #12]
	while (*buffer++ != '\0')
 8000774:	e002      	b.n	800077c <bufferSize+0x14>
		i++;
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	3301      	adds	r3, #1
 800077a:	60fb      	str	r3, [r7, #12]
	while (*buffer++ != '\0')
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	1c5a      	adds	r2, r3, #1
 8000780:	607a      	str	r2, [r7, #4]
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d1f6      	bne.n	8000776 <bufferSize+0xe>
	return i;
 8000788:	68fb      	ldr	r3, [r7, #12]
}
 800078a:	4618      	mov	r0, r3
 800078c:	3714      	adds	r7, #20
 800078e:	46bd      	mov	sp, r7
 8000790:	bc80      	pop	{r7}
 8000792:	4770      	bx	lr

08000794 <calculateCRC_CCITT_AX25>:
 */

#include "error_detection.h"

// Function to calculate CRC-CCITT for AX.25 frames
uint16_t calculateCRC_CCITT_AX25(const uint8_t *data, size_t length) {
 8000794:	b480      	push	{r7}
 8000796:	b087      	sub	sp, #28
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
 800079c:	6039      	str	r1, [r7, #0]
	uint16_t crc = 0xFFFF; // Initialize CRC register with 0xFFFF
 800079e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007a2:	82fb      	strh	r3, [r7, #22]
	uint16_t CRC_POLY = 0x1021; // CRC polynomial for CCITT (0x1021)
 80007a4:	f241 0321 	movw	r3, #4129	; 0x1021
 80007a8:	817b      	strh	r3, [r7, #10]

	// Iterate through each byte of the input data
	for (size_t i = 0; i < length; i++) {
 80007aa:	2300      	movs	r3, #0
 80007ac:	613b      	str	r3, [r7, #16]
 80007ae:	e026      	b.n	80007fe <calculateCRC_CCITT_AX25+0x6a>
		crc ^= ((uint16_t) data[i] << 8); // XOR CRC with next byte of input data
 80007b0:	687a      	ldr	r2, [r7, #4]
 80007b2:	693b      	ldr	r3, [r7, #16]
 80007b4:	4413      	add	r3, r2
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	021b      	lsls	r3, r3, #8
 80007ba:	b21a      	sxth	r2, r3
 80007bc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80007c0:	4053      	eors	r3, r2
 80007c2:	b21b      	sxth	r3, r3
 80007c4:	82fb      	strh	r3, [r7, #22]

		// Iterate through each bit of the current byte
		for (int j = 0; j < 8; j++) {
 80007c6:	2300      	movs	r3, #0
 80007c8:	60fb      	str	r3, [r7, #12]
 80007ca:	e012      	b.n	80007f2 <calculateCRC_CCITT_AX25+0x5e>
			if (crc & 0x8000) { // If MSB of CRC is 1
 80007cc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	da08      	bge.n	80007e6 <calculateCRC_CCITT_AX25+0x52>
				crc = (crc << 1) ^ CRC_POLY; // Left shift CRC and XOR with polynomial
 80007d4:	8afb      	ldrh	r3, [r7, #22]
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	b21a      	sxth	r2, r3
 80007da:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80007de:	4053      	eors	r3, r2
 80007e0:	b21b      	sxth	r3, r3
 80007e2:	82fb      	strh	r3, [r7, #22]
 80007e4:	e002      	b.n	80007ec <calculateCRC_CCITT_AX25+0x58>
			} else {
				crc <<= 1; // Left shift CRC
 80007e6:	8afb      	ldrh	r3, [r7, #22]
 80007e8:	005b      	lsls	r3, r3, #1
 80007ea:	82fb      	strh	r3, [r7, #22]
		for (int j = 0; j < 8; j++) {
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	3301      	adds	r3, #1
 80007f0:	60fb      	str	r3, [r7, #12]
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	2b07      	cmp	r3, #7
 80007f6:	dde9      	ble.n	80007cc <calculateCRC_CCITT_AX25+0x38>
	for (size_t i = 0; i < length; i++) {
 80007f8:	693b      	ldr	r3, [r7, #16]
 80007fa:	3301      	adds	r3, #1
 80007fc:	613b      	str	r3, [r7, #16]
 80007fe:	693a      	ldr	r2, [r7, #16]
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	429a      	cmp	r2, r3
 8000804:	d3d4      	bcc.n	80007b0 <calculateCRC_CCITT_AX25+0x1c>
			}
		}
	}

	return crc; // Return calculated CRC
 8000806:	8afb      	ldrh	r3, [r7, #22]
}
 8000808:	4618      	mov	r0, r3
 800080a:	371c      	adds	r7, #28
 800080c:	46bd      	mov	sp, r7
 800080e:	bc80      	pop	{r7}
 8000810:	4770      	bx	lr

08000812 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_DMAMUX1
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000812:	b480      	push	{r7}
 8000814:	b085      	sub	sp, #20
 8000816:	af00      	add	r7, sp, #0
 8000818:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800081a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800081e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000820:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	4313      	orrs	r3, r2
 8000828:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800082a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800082e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	4013      	ands	r3, r2
 8000834:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000836:	68fb      	ldr	r3, [r7, #12]
}
 8000838:	bf00      	nop
 800083a:	3714      	adds	r7, #20
 800083c:	46bd      	mov	sp, r7
 800083e:	bc80      	pop	{r7}
 8000840:	4770      	bx	lr

08000842 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000842:	b480      	push	{r7}
 8000844:	b085      	sub	sp, #20
 8000846:	af00      	add	r7, sp, #0
 8000848:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800084a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800084e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000850:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	4313      	orrs	r3, r2
 8000858:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800085a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800085e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	4013      	ands	r3, r2
 8000864:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000866:	68fb      	ldr	r3, [r7, #12]
}
 8000868:	bf00      	nop
 800086a:	3714      	adds	r7, #20
 800086c:	46bd      	mov	sp, r7
 800086e:	bc80      	pop	{r7}
 8000870:	4770      	bx	lr
	...

08000874 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000874:	b580      	push	{r7, lr}
 8000876:	b086      	sub	sp, #24
 8000878:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800087a:	f001 f889 	bl	8001990 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800087e:	f000 f9fd 	bl	8000c7c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000882:	f000 fb75 	bl	8000f70 <MX_GPIO_Init>
	MX_DMA_Init();
 8000886:	f000 fb59 	bl	8000f3c <MX_DMA_Init>
	MX_TIM1_Init();
 800088a:	f000 fa69 	bl	8000d60 <MX_TIM1_Init>
	MX_TIM2_Init();
 800088e:	f000 fabb 	bl	8000e08 <MX_TIM2_Init>
	MX_SubGHz_Phy_Init();
 8000892:	f009 f938 	bl	8009b06 <MX_SubGHz_Phy_Init>
	MX_USART2_UART_Init();
 8000896:	f000 fb05 	bl	8000ea4 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim2);
 800089a:	48c2      	ldr	r0, [pc, #776]	; (8000ba4 <main+0x330>)
 800089c:	f003 ff2a 	bl	80046f4 <HAL_TIM_Base_Start>

	myDebug("########## Slippers2Sat Ground Station: BEGIN ##########\r\n");
 80008a0:	48c1      	ldr	r0, [pc, #772]	; (8000ba8 <main+0x334>)
 80008a2:	f7ff ff3d 	bl	8000720 <myDebug>
	myDebug("########## COMMUNICATION PARAMETERS ##########\r\n");
 80008a6:	48c1      	ldr	r0, [pc, #772]	; (8000bac <main+0x338>)
 80008a8:	f7ff ff3a 	bl	8000720 <myDebug>
	myDebug("Modulation: GFSK PACKET\r\n");
 80008ac:	48c0      	ldr	r0, [pc, #768]	; (8000bb0 <main+0x33c>)
 80008ae:	f7ff ff37 	bl	8000720 <myDebug>
	myDebug("FREQUENCY MODES: DOWNLINK FREQ: %luHz, UPLINK FREQ: %lu Hz\r\n",
 80008b2:	4ac0      	ldr	r2, [pc, #768]	; (8000bb4 <main+0x340>)
 80008b4:	49c0      	ldr	r1, [pc, #768]	; (8000bb8 <main+0x344>)
 80008b6:	48c1      	ldr	r0, [pc, #772]	; (8000bbc <main+0x348>)
 80008b8:	f7ff ff32 	bl	8000720 <myDebug>
	FREQ_437_MHZ, FREQ_435_MHZ);
	myDebug("STM32 BSP_SubGHz-WL Radio: Low Power\n");
 80008bc:	48c0      	ldr	r0, [pc, #768]	; (8000bc0 <main+0x34c>)
 80008be:	f7ff ff2f 	bl	8000720 <myDebug>
	myDebug("POWER CONFIG:::: \n"
 80008c2:	230e      	movs	r3, #14
 80008c4:	9300      	str	r3, [sp, #0]
 80008c6:	2301      	movs	r3, #1
 80008c8:	2200      	movs	r2, #0
 80008ca:	2104      	movs	r1, #4
 80008cc:	48bd      	ldr	r0, [pc, #756]	; (8000bc4 <main+0x350>)
 80008ce:	f7ff ff27 	bl	8000720 <myDebug>
			"PA_DUTY_CYCLE: %x, HP_MAX: %x, PA_SEL: %x, POWER TX: %u dBm\r\n",
	PA_DUTY_CYCLE, HP_MAX, PA_SEL, POWER);

	myDebug("\n########## Operation Starts ##########\r\n");
 80008d2:	48bd      	ldr	r0, [pc, #756]	; (8000bc8 <main+0x354>)
 80008d4:	f7ff ff24 	bl	8000720 <myDebug>
	myDebug("________________Waiting Beacon Type_1 ____________\r\n");
 80008d8:	48bc      	ldr	r0, [pc, #752]	; (8000bcc <main+0x358>)
 80008da:	f7ff ff21 	bl	8000720 <myDebug>

	pkt_params.PacketType = PACKET_TYPE_GFSK;
 80008de:	4bbc      	ldr	r3, [pc, #752]	; (8000bd0 <main+0x35c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	701a      	strb	r2, [r3, #0]
	pkt_params.Params.Gfsk.PayloadLength = PAYLOAD_LENGTH;
 80008e4:	4bba      	ldr	r3, [pc, #744]	; (8000bd0 <main+0x35c>)
 80008e6:	2266      	movs	r2, #102	; 0x66
 80008e8:	721a      	strb	r2, [r3, #8]
	pkt_params.Params.Gfsk.PreambleLength = 8; /*Convert byte into bit*/
 80008ea:	4bb9      	ldr	r3, [pc, #740]	; (8000bd0 <main+0x35c>)
 80008ec:	2208      	movs	r2, #8
 80008ee:	805a      	strh	r2, [r3, #2]
	pkt_params.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80008f0:	4bb7      	ldr	r3, [pc, #732]	; (8000bd0 <main+0x35c>)
 80008f2:	2204      	movs	r2, #4
 80008f4:	711a      	strb	r2, [r3, #4]
	pkt_params.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 80008f6:	4bb6      	ldr	r3, [pc, #728]	; (8000bd0 <main+0x35c>)
 80008f8:	2218      	movs	r2, #24
 80008fa:	715a      	strb	r2, [r3, #5]
	pkt_params.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80008fc:	4bb4      	ldr	r3, [pc, #720]	; (8000bd0 <main+0x35c>)
 80008fe:	2200      	movs	r2, #0
 8000900:	719a      	strb	r2, [r3, #6]
	pkt_params.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8000902:	4bb3      	ldr	r3, [pc, #716]	; (8000bd0 <main+0x35c>)
 8000904:	2200      	movs	r2, #0
 8000906:	71da      	strb	r2, [r3, #7]
	pkt_params.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8000908:	4bb1      	ldr	r3, [pc, #708]	; (8000bd0 <main+0x35c>)
 800090a:	22f2      	movs	r2, #242	; 0xf2
 800090c:	725a      	strb	r2, [r3, #9]
	pkt_params.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800090e:	4bb0      	ldr	r3, [pc, #704]	; (8000bd0 <main+0x35c>)
 8000910:	2201      	movs	r2, #1
 8000912:	729a      	strb	r2, [r3, #10]

	mod_params.PacketType = PACKET_TYPE_GFSK;
 8000914:	4baf      	ldr	r3, [pc, #700]	; (8000bd4 <main+0x360>)
 8000916:	2200      	movs	r2, #0
 8000918:	701a      	strb	r2, [r3, #0]
	mod_params.Params.Gfsk.Bandwidth = RX_BW_29300; /*Not used in TX*/
 800091a:	4bae      	ldr	r3, [pc, #696]	; (8000bd4 <main+0x360>)
 800091c:	220d      	movs	r2, #13
 800091e:	735a      	strb	r2, [r3, #13]
	mod_params.Params.Gfsk.BitRate = DEMO_DEFAULT_BR_4800;
 8000920:	4bac      	ldr	r3, [pc, #688]	; (8000bd4 <main+0x360>)
 8000922:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8000926:	605a      	str	r2, [r3, #4]
	mod_params.Params.Gfsk.Fdev = DEMO_DEFAULT_FDEV_4800;
 8000928:	4baa      	ldr	r3, [pc, #680]	; (8000bd4 <main+0x360>)
 800092a:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 800092e:	609a      	str	r2, [r3, #8]
	mod_params.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8000930:	4ba8      	ldr	r3, [pc, #672]	; (8000bd4 <main+0x360>)
 8000932:	220b      	movs	r2, #11
 8000934:	731a      	strb	r2, [r3, #12]

	SUBGRF_Init(DioIrqHndlr);
 8000936:	48a8      	ldr	r0, [pc, #672]	; (8000bd8 <main+0x364>)
 8000938:	f007 fe9c 	bl	8008674 <SUBGRF_Init>
	SUBGRF_SetBufferBaseAddress(0x00, 0x00);
 800093c:	2100      	movs	r1, #0
 800093e:	2000      	movs	r0, #0
 8000940:	f008 fd04 	bl	800934c <SUBGRF_SetBufferBaseAddress>

	SUBGRF_SetPacketParams(&pkt_params);
 8000944:	48a2      	ldr	r0, [pc, #648]	; (8000bd0 <main+0x35c>)
 8000946:	f008 fc63 	bl	8009210 <SUBGRF_SetPacketParams>
	SUBGRF_SetSyncWord(( uint8_t[] ) { 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00,
 800094a:	4aa4      	ldr	r2, [pc, #656]	; (8000bdc <main+0x368>)
 800094c:	f107 0308 	add.w	r3, r7, #8
 8000950:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000954:	e883 0003 	stmia.w	r3, {r0, r1}
 8000958:	f107 0308 	add.w	r3, r7, #8
 800095c:	4618      	mov	r0, r3
 800095e:	f007 ff20 	bl	80087a2 <SUBGRF_SetSyncWord>
					0x00 });
	SUBGRF_SetWhiteningSeed(0x01FF);
 8000962:	f240 10ff 	movw	r0, #511	; 0x1ff
 8000966:	f007 ff6b 	bl	8008840 <SUBGRF_SetWhiteningSeed>
	SUBGRF_SetRfFrequency(FREQ_437_MHZ);
 800096a:	4893      	ldr	r0, [pc, #588]	; (8000bb8 <main+0x344>)
 800096c:	f008 fa44 	bl	8008df8 <SUBGRF_SetRfFrequency>
	SUBGRF_SetPaConfig(PA_DUTY_CYCLE, HP_MAX, PA_SEL, 0x01);
 8000970:	2301      	movs	r3, #1
 8000972:	2201      	movs	r2, #1
 8000974:	2100      	movs	r1, #0
 8000976:	2004      	movs	r0, #4
 8000978:	f008 f9c0 	bl	8008cfc <SUBGRF_SetPaConfig>
	//SUBGRF_SetTxParams(RFO_HP, POWER, RAMP_TIME);
	SUBGRF_SetTxParams(RFO_LP, POWER, RAMP_TIME);
 800097c:	2202      	movs	r2, #2
 800097e:	210e      	movs	r1, #14
 8000980:	2001      	movs	r0, #1
 8000982:	f008 faa5 	bl	8008ed0 <SUBGRF_SetTxParams>
	SUBGRF_SetModulationParams(&mod_params);
 8000986:	4893      	ldr	r0, [pc, #588]	; (8000bd4 <main+0x360>)
 8000988:	f008 fb70 	bl	800906c <SUBGRF_SetModulationParams>
	SUBGRF_SetDioIrqParams(
 800098c:	2300      	movs	r3, #0
 800098e:	2200      	movs	r2, #0
 8000990:	f240 210f 	movw	r1, #527	; 0x20f
 8000994:	f240 200f 	movw	r0, #527	; 0x20f
 8000998:	f008 f9d2 	bl	8008d40 <SUBGRF_SetDioIrqParams>
					| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID,
			IRQ_TX_DONE | IRQ_PREAMBLE_DETECTED | IRQ_RX_DONE
					| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID, IRQ_RADIO_NONE,
			IRQ_RADIO_NONE);

	myDebug("\n########## RX Configuration: ##########\n");
 800099c:	4890      	ldr	r0, [pc, #576]	; (8000be0 <main+0x36c>)
 800099e:	f7ff febf 	bl	8000720 <myDebug>

	myDebug("FREQUENCY MODS: Downlink FREQ: %lu Hz\r\n", FREQ_437_MHZ);
 80009a2:	4985      	ldr	r1, [pc, #532]	; (8000bb8 <main+0x344>)
 80009a4:	488f      	ldr	r0, [pc, #572]	; (8000be4 <main+0x370>)
 80009a6:	f7ff febb 	bl	8000720 <myDebug>
	myDebug("Bit Rate: 	%d\n\r", mod_params.Params.Gfsk.BitRate);
 80009aa:	4b8a      	ldr	r3, [pc, #552]	; (8000bd4 <main+0x360>)
 80009ac:	685b      	ldr	r3, [r3, #4]
 80009ae:	4619      	mov	r1, r3
 80009b0:	488d      	ldr	r0, [pc, #564]	; (8000be8 <main+0x374>)
 80009b2:	f7ff feb5 	bl	8000720 <myDebug>
	myDebug("Frequency Deviation: 	%d\n\r", mod_params.Params.Gfsk.Fdev);
 80009b6:	4b87      	ldr	r3, [pc, #540]	; (8000bd4 <main+0x360>)
 80009b8:	689b      	ldr	r3, [r3, #8]
 80009ba:	4619      	mov	r1, r3
 80009bc:	488b      	ldr	r0, [pc, #556]	; (8000bec <main+0x378>)
 80009be:	f7ff feaf 	bl	8000720 <myDebug>
	myDebug("RECEVING BANDWIDTH: 	%d\n\r", mod_params.Params.Gfsk.Bandwidth);
 80009c2:	4b84      	ldr	r3, [pc, #528]	; (8000bd4 <main+0x360>)
 80009c4:	7b5b      	ldrb	r3, [r3, #13]
 80009c6:	4619      	mov	r1, r3
 80009c8:	4889      	ldr	r0, [pc, #548]	; (8000bf0 <main+0x37c>)
 80009ca:	f7ff fea9 	bl	8000720 <myDebug>
	myDebug("Packet Type 			%d\n\r", pkt_params.PacketType);
 80009ce:	4b80      	ldr	r3, [pc, #512]	; (8000bd0 <main+0x35c>)
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	4619      	mov	r1, r3
 80009d4:	4887      	ldr	r0, [pc, #540]	; (8000bf4 <main+0x380>)
 80009d6:	f7ff fea3 	bl	8000720 <myDebug>
	myDebug("PayloadLength 			%d\n\r", pkt_params.Params.Gfsk.PayloadLength);
 80009da:	4b7d      	ldr	r3, [pc, #500]	; (8000bd0 <main+0x35c>)
 80009dc:	7a1b      	ldrb	r3, [r3, #8]
 80009de:	4619      	mov	r1, r3
 80009e0:	4885      	ldr	r0, [pc, #532]	; (8000bf8 <main+0x384>)
 80009e2:	f7ff fe9d 	bl	8000720 <myDebug>
	myDebug("PreambleLength 		%d\n\r", pkt_params.Params.Gfsk.PreambleLength);
 80009e6:	4b7a      	ldr	r3, [pc, #488]	; (8000bd0 <main+0x35c>)
 80009e8:	885b      	ldrh	r3, [r3, #2]
 80009ea:	4619      	mov	r1, r3
 80009ec:	4883      	ldr	r0, [pc, #524]	; (8000bfc <main+0x388>)
 80009ee:	f7ff fe97 	bl	8000720 <myDebug>
	myDebug("PreambleMinDetect		%d\n\r",
			pkt_params.Params.Gfsk.PreambleMinDetect);
 80009f2:	4b77      	ldr	r3, [pc, #476]	; (8000bd0 <main+0x35c>)
 80009f4:	791b      	ldrb	r3, [r3, #4]
	myDebug("PreambleMinDetect		%d\n\r",
 80009f6:	4619      	mov	r1, r3
 80009f8:	4881      	ldr	r0, [pc, #516]	; (8000c00 <main+0x38c>)
 80009fa:	f7ff fe91 	bl	8000720 <myDebug>
	myDebug("HeaderType 			%d\n\r", pkt_params.Params.Gfsk.HeaderType);
 80009fe:	4b74      	ldr	r3, [pc, #464]	; (8000bd0 <main+0x35c>)
 8000a00:	79db      	ldrb	r3, [r3, #7]
 8000a02:	4619      	mov	r1, r3
 8000a04:	487f      	ldr	r0, [pc, #508]	; (8000c04 <main+0x390>)
 8000a06:	f7ff fe8b 	bl	8000720 <myDebug>
	myDebug("______________*******************______________\r\n");
 8000a0a:	487f      	ldr	r0, [pc, #508]	; (8000c08 <main+0x394>)
 8000a0c:	f7ff fe88 	bl	8000720 <myDebug>

	SUBGRF_SetRfFrequency(FREQ_437_MHZ);
 8000a10:	4869      	ldr	r0, [pc, #420]	; (8000bb8 <main+0x344>)
 8000a12:	f008 f9f1 	bl	8008df8 <SUBGRF_SetRfFrequency>
	SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX); /*Set RF switch*/
 8000a16:	2100      	movs	r1, #0
 8000a18:	2001      	movs	r0, #1
 8000a1a:	f008 fe35 	bl	8009688 <SUBGRF_SetSwitch>
	SUBGRF_SetRxBoosted(0xFFFFFF);
 8000a1e:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8000a22:	f008 f815 	bl	8008a50 <SUBGRF_SetRxBoosted>

	HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_SET);
 8000a26:	2201      	movs	r2, #1
 8000a28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a2c:	4877      	ldr	r0, [pc, #476]	; (8000c0c <main+0x398>)
 8000a2e:	f001 fe09 	bl	8002644 <HAL_GPIO_WritePin>
	delay_us(500000);  // 500ms delay
 8000a32:	4877      	ldr	r0, [pc, #476]	; (8000c10 <main+0x39c>)
 8000a34:	f7ff fe5a 	bl	80006ec <delay_us>
	HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_RESET);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a3e:	4873      	ldr	r0, [pc, #460]	; (8000c0c <main+0x398>)
 8000a40:	f001 fe00 	bl	8002644 <HAL_GPIO_WritePin>
	delay_us(500000);
 8000a44:	4872      	ldr	r0, [pc, #456]	; (8000c10 <main+0x39c>)
 8000a46:	f7ff fe51 	bl	80006ec <delay_us>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_RESET);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a50:	486e      	ldr	r0, [pc, #440]	; (8000c0c <main+0x398>)
 8000a52:	f001 fdf7 	bl	8002644 <HAL_GPIO_WritePin>
		delay_us(500000);
 8000a56:	486e      	ldr	r0, [pc, #440]	; (8000c10 <main+0x39c>)
 8000a58:	f7ff fe48 	bl	80006ec <delay_us>
		HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_SET);
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a62:	486a      	ldr	r0, [pc, #424]	; (8000c0c <main+0x398>)
 8000a64:	f001 fdee 	bl	8002644 <HAL_GPIO_WritePin>
		delay_us(500000);
 8000a68:	4869      	ldr	r0, [pc, #420]	; (8000c10 <main+0x39c>)
 8000a6a:	f7ff fe3f 	bl	80006ec <delay_us>

		if (TX_FLAG) {
 8000a6e:	4b69      	ldr	r3, [pc, #420]	; (8000c14 <main+0x3a0>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	f000 80f3 	beq.w	8000c5e <main+0x3ea>

			AX_25PacketFormation(rx_buffer);
 8000a78:	4867      	ldr	r0, [pc, #412]	; (8000c18 <main+0x3a4>)
 8000a7a:	f7ff fd4f 	bl	800051c <AX_25PacketFormation>

			memset(rx_buffer, '\0', sizeof(rx_buffer));
 8000a7e:	220d      	movs	r2, #13
 8000a80:	2100      	movs	r1, #0
 8000a82:	4865      	ldr	r0, [pc, #404]	; (8000c18 <main+0x3a4>)
 8000a84:	f009 fbfe 	bl	800a284 <memset>

			pkt_params.PacketType = PACKET_TYPE_GFSK;
 8000a88:	4b51      	ldr	r3, [pc, #324]	; (8000bd0 <main+0x35c>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	701a      	strb	r2, [r3, #0]
			pkt_params.Params.Gfsk.PayloadLength = CMD_PAYLOAD;
 8000a8e:	4b50      	ldr	r3, [pc, #320]	; (8000bd0 <main+0x35c>)
 8000a90:	2223      	movs	r2, #35	; 0x23
 8000a92:	721a      	strb	r2, [r3, #8]
			pkt_params.Params.Gfsk.PreambleLength = 8; /*Convert byte into bit*/
 8000a94:	4b4e      	ldr	r3, [pc, #312]	; (8000bd0 <main+0x35c>)
 8000a96:	2208      	movs	r2, #8
 8000a98:	805a      	strh	r2, [r3, #2]
			pkt_params.Params.Gfsk.PreambleMinDetect =
 8000a9a:	4b4d      	ldr	r3, [pc, #308]	; (8000bd0 <main+0x35c>)
 8000a9c:	2204      	movs	r2, #4
 8000a9e:	711a      	strb	r2, [r3, #4]
					RADIO_PREAMBLE_DETECTOR_08_BITS;
			pkt_params.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8000aa0:	4b4b      	ldr	r3, [pc, #300]	; (8000bd0 <main+0x35c>)
 8000aa2:	2218      	movs	r2, #24
 8000aa4:	715a      	strb	r2, [r3, #5]
			pkt_params.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8000aa6:	4b4a      	ldr	r3, [pc, #296]	; (8000bd0 <main+0x35c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	719a      	strb	r2, [r3, #6]
			pkt_params.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8000aac:	4b48      	ldr	r3, [pc, #288]	; (8000bd0 <main+0x35c>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	71da      	strb	r2, [r3, #7]
			pkt_params.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8000ab2:	4b47      	ldr	r3, [pc, #284]	; (8000bd0 <main+0x35c>)
 8000ab4:	22f2      	movs	r2, #242	; 0xf2
 8000ab6:	725a      	strb	r2, [r3, #9]
			pkt_params.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8000ab8:	4b45      	ldr	r3, [pc, #276]	; (8000bd0 <main+0x35c>)
 8000aba:	2201      	movs	r2, #1
 8000abc:	729a      	strb	r2, [r3, #10]

			mod_params.PacketType = PACKET_TYPE_GFSK;
 8000abe:	4b45      	ldr	r3, [pc, #276]	; (8000bd4 <main+0x360>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	701a      	strb	r2, [r3, #0]
			mod_params.Params.Gfsk.Bandwidth = RX_BW_29300; /*Not used in TX*/
 8000ac4:	4b43      	ldr	r3, [pc, #268]	; (8000bd4 <main+0x360>)
 8000ac6:	220d      	movs	r2, #13
 8000ac8:	735a      	strb	r2, [r3, #13]
			mod_params.Params.Gfsk.BitRate = DEMO_DEFAULT_BR_1200;
 8000aca:	4b42      	ldr	r3, [pc, #264]	; (8000bd4 <main+0x360>)
 8000acc:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8000ad0:	605a      	str	r2, [r3, #4]
			mod_params.Params.Gfsk.Fdev = DEMO_DEFAULT_FDEV_1200;
 8000ad2:	4b40      	ldr	r3, [pc, #256]	; (8000bd4 <main+0x360>)
 8000ad4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000ad8:	609a      	str	r2, [r3, #8]
			mod_params.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8000ada:	4b3e      	ldr	r3, [pc, #248]	; (8000bd4 <main+0x360>)
 8000adc:	220b      	movs	r2, #11
 8000ade:	731a      	strb	r2, [r3, #12]

			SUBGRF_Init(DioIrqHndlr);
 8000ae0:	483d      	ldr	r0, [pc, #244]	; (8000bd8 <main+0x364>)
 8000ae2:	f007 fdc7 	bl	8008674 <SUBGRF_Init>
			SUBGRF_SetBufferBaseAddress(0x00, 0x00);
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	2000      	movs	r0, #0
 8000aea:	f008 fc2f 	bl	800934c <SUBGRF_SetBufferBaseAddress>
			SUBGRF_SetPayload(tx_cmd, CMD_PAYLOAD);
 8000aee:	2123      	movs	r1, #35	; 0x23
 8000af0:	484a      	ldr	r0, [pc, #296]	; (8000c1c <main+0x3a8>)
 8000af2:	f007 fe11 	bl	8008718 <SUBGRF_SetPayload>
			SUBGRF_SetPacketParams(&pkt_params);
 8000af6:	4836      	ldr	r0, [pc, #216]	; (8000bd0 <main+0x35c>)
 8000af8:	f008 fb8a 	bl	8009210 <SUBGRF_SetPacketParams>
			SUBGRF_SetSyncWord(( uint8_t[] ) { 0xC1, 0x94, 0xC1, 0x00, 0x00,
 8000afc:	4a37      	ldr	r2, [pc, #220]	; (8000bdc <main+0x368>)
 8000afe:	463b      	mov	r3, r7
 8000b00:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b04:	e883 0003 	stmia.w	r3, {r0, r1}
 8000b08:	463b      	mov	r3, r7
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f007 fe49 	bl	80087a2 <SUBGRF_SetSyncWord>
							0x00, 0x00, 0x00 });
			SUBGRF_SetWhiteningSeed(0x01FF);
 8000b10:	f240 10ff 	movw	r0, #511	; 0x1ff
 8000b14:	f007 fe94 	bl	8008840 <SUBGRF_SetWhiteningSeed>
			SUBGRF_SetRfFrequency(FREQ_435_MHZ);
 8000b18:	4826      	ldr	r0, [pc, #152]	; (8000bb4 <main+0x340>)
 8000b1a:	f008 f96d 	bl	8008df8 <SUBGRF_SetRfFrequency>
			SUBGRF_SetPaConfig(PA_DUTY_CYCLE, HP_MAX, PA_SEL, 0x01);
 8000b1e:	2301      	movs	r3, #1
 8000b20:	2201      	movs	r2, #1
 8000b22:	2100      	movs	r1, #0
 8000b24:	2004      	movs	r0, #4
 8000b26:	f008 f8e9 	bl	8008cfc <SUBGRF_SetPaConfig>
			//SUBGRF_SetTxParams(RFO_HP, POWER, RAMP_TIME);
			SUBGRF_SetTxParams(RFO_LP, POWER, RAMP_TIME);
 8000b2a:	2202      	movs	r2, #2
 8000b2c:	210e      	movs	r1, #14
 8000b2e:	2001      	movs	r0, #1
 8000b30:	f008 f9ce 	bl	8008ed0 <SUBGRF_SetTxParams>
			SUBGRF_SetModulationParams(&mod_params);
 8000b34:	4827      	ldr	r0, [pc, #156]	; (8000bd4 <main+0x360>)
 8000b36:	f008 fa99 	bl	800906c <SUBGRF_SetModulationParams>
			SUBGRF_SetDioIrqParams(
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	f240 210f 	movw	r1, #527	; 0x20f
 8000b42:	f240 200f 	movw	r0, #527	; 0x20f
 8000b46:	f008 f8fb 	bl	8008d40 <SUBGRF_SetDioIrqParams>
							| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID,
					IRQ_TX_DONE | IRQ_PREAMBLE_DETECTED | IRQ_RX_DONE
							| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID,
					IRQ_RADIO_NONE, IRQ_RADIO_NONE);

			myDebug("########## TX Configuration: ##########\n");
 8000b4a:	4835      	ldr	r0, [pc, #212]	; (8000c20 <main+0x3ac>)
 8000b4c:	f7ff fde8 	bl	8000720 <myDebug>

			myDebug("FREQUENCY MODS: UPLINK FREQ: %lu Hz\r\n", FREQ_435_MHZ);
 8000b50:	4918      	ldr	r1, [pc, #96]	; (8000bb4 <main+0x340>)
 8000b52:	4834      	ldr	r0, [pc, #208]	; (8000c24 <main+0x3b0>)
 8000b54:	f7ff fde4 	bl	8000720 <myDebug>
			myDebug("Bit Rate: 	%d\n\r", mod_params.Params.Gfsk.BitRate);
 8000b58:	4b1e      	ldr	r3, [pc, #120]	; (8000bd4 <main+0x360>)
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4822      	ldr	r0, [pc, #136]	; (8000be8 <main+0x374>)
 8000b60:	f7ff fdde 	bl	8000720 <myDebug>
			myDebug("Frequency Deviation: 	%d\n\r",
 8000b64:	4b1b      	ldr	r3, [pc, #108]	; (8000bd4 <main+0x360>)
 8000b66:	689b      	ldr	r3, [r3, #8]
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4820      	ldr	r0, [pc, #128]	; (8000bec <main+0x378>)
 8000b6c:	f7ff fdd8 	bl	8000720 <myDebug>
					mod_params.Params.Gfsk.Fdev);
			myDebug("RECEVING BANDWIDTH: 	%d\n\r",
					mod_params.Params.Gfsk.Bandwidth);
 8000b70:	4b18      	ldr	r3, [pc, #96]	; (8000bd4 <main+0x360>)
 8000b72:	7b5b      	ldrb	r3, [r3, #13]
			myDebug("RECEVING BANDWIDTH: 	%d\n\r",
 8000b74:	4619      	mov	r1, r3
 8000b76:	481e      	ldr	r0, [pc, #120]	; (8000bf0 <main+0x37c>)
 8000b78:	f7ff fdd2 	bl	8000720 <myDebug>
			myDebug("Packet Type 			%d\n\r", pkt_params.PacketType);
 8000b7c:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <main+0x35c>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	4619      	mov	r1, r3
 8000b82:	481c      	ldr	r0, [pc, #112]	; (8000bf4 <main+0x380>)
 8000b84:	f7ff fdcc 	bl	8000720 <myDebug>
			myDebug("PayloadLength 			%d\n\r",
					pkt_params.Params.Gfsk.PayloadLength);
 8000b88:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <main+0x35c>)
 8000b8a:	7a1b      	ldrb	r3, [r3, #8]
			myDebug("PayloadLength 			%d\n\r",
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	481a      	ldr	r0, [pc, #104]	; (8000bf8 <main+0x384>)
 8000b90:	f7ff fdc6 	bl	8000720 <myDebug>
			myDebug("PreambleLength 		%d\n\r",
					pkt_params.Params.Gfsk.PreambleLength);
 8000b94:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <main+0x35c>)
 8000b96:	885b      	ldrh	r3, [r3, #2]
			myDebug("PreambleLength 		%d\n\r",
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4818      	ldr	r0, [pc, #96]	; (8000bfc <main+0x388>)
 8000b9c:	f7ff fdc0 	bl	8000720 <myDebug>
 8000ba0:	e042      	b.n	8000c28 <main+0x3b4>
 8000ba2:	bf00      	nop
 8000ba4:	20000168 	.word	0x20000168
 8000ba8:	0800abe8 	.word	0x0800abe8
 8000bac:	0800ac24 	.word	0x0800ac24
 8000bb0:	0800ac58 	.word	0x0800ac58
 8000bb4:	19f25968 	.word	0x19f25968
 8000bb8:	1a11d018 	.word	0x1a11d018
 8000bbc:	0800ac74 	.word	0x0800ac74
 8000bc0:	0800acb4 	.word	0x0800acb4
 8000bc4:	0800acdc 	.word	0x0800acdc
 8000bc8:	0800ad2c 	.word	0x0800ad2c
 8000bcc:	0800ad58 	.word	0x0800ad58
 8000bd0:	200000e0 	.word	0x200000e0
 8000bd4:	200000f4 	.word	0x200000f4
 8000bd8:	080010b1 	.word	0x080010b1
 8000bdc:	0800af24 	.word	0x0800af24
 8000be0:	0800ad90 	.word	0x0800ad90
 8000be4:	0800adbc 	.word	0x0800adbc
 8000be8:	0800ade4 	.word	0x0800ade4
 8000bec:	0800adf4 	.word	0x0800adf4
 8000bf0:	0800ae10 	.word	0x0800ae10
 8000bf4:	0800ae2c 	.word	0x0800ae2c
 8000bf8:	0800ae40 	.word	0x0800ae40
 8000bfc:	0800ae58 	.word	0x0800ae58
 8000c00:	0800ae70 	.word	0x0800ae70
 8000c04:	0800ae88 	.word	0x0800ae88
 8000c08:	0800ae9c 	.word	0x0800ae9c
 8000c0c:	48000400 	.word	0x48000400
 8000c10:	0007a120 	.word	0x0007a120
 8000c14:	200003a4 	.word	0x200003a4
 8000c18:	20000370 	.word	0x20000370
 8000c1c:	20000380 	.word	0x20000380
 8000c20:	0800aed0 	.word	0x0800aed0
 8000c24:	0800aefc 	.word	0x0800aefc
			myDebug("PreambleMinDetect		%d\n\r",
					pkt_params.Params.Gfsk.PreambleMinDetect);
 8000c28:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <main+0x3f0>)
 8000c2a:	791b      	ldrb	r3, [r3, #4]
			myDebug("PreambleMinDetect		%d\n\r",
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	480e      	ldr	r0, [pc, #56]	; (8000c68 <main+0x3f4>)
 8000c30:	f7ff fd76 	bl	8000720 <myDebug>
			myDebug("HeaderType 			%d\n\r", pkt_params.Params.Gfsk.HeaderType);
 8000c34:	4b0b      	ldr	r3, [pc, #44]	; (8000c64 <main+0x3f0>)
 8000c36:	79db      	ldrb	r3, [r3, #7]
 8000c38:	4619      	mov	r1, r3
 8000c3a:	480c      	ldr	r0, [pc, #48]	; (8000c6c <main+0x3f8>)
 8000c3c:	f7ff fd70 	bl	8000720 <myDebug>
			myDebug("______________*******************______________\r\n");
 8000c40:	480b      	ldr	r0, [pc, #44]	; (8000c70 <main+0x3fc>)
 8000c42:	f7ff fd6d 	bl	8000720 <myDebug>

			SUBGRF_SetRfFrequency(FREQ_435_MHZ);
 8000c46:	480b      	ldr	r0, [pc, #44]	; (8000c74 <main+0x400>)
 8000c48:	f008 f8d6 	bl	8008df8 <SUBGRF_SetRfFrequency>
			SUBGRF_SetSwitch(RFO_LP, RFSWITCH_TX); /*Set RF switch*/
 8000c4c:	2101      	movs	r1, #1
 8000c4e:	2001      	movs	r0, #1
 8000c50:	f008 fd1a 	bl	8009688 <SUBGRF_SetSwitch>
			SUBGRF_SendPayload(tx_cmd, CMD_PAYLOAD, 0);
 8000c54:	2200      	movs	r2, #0
 8000c56:	2123      	movs	r1, #35	; 0x23
 8000c58:	4807      	ldr	r0, [pc, #28]	; (8000c78 <main+0x404>)
 8000c5a:	f007 fd8f 	bl	800877c <SUBGRF_SendPayload>
		}

		/* USER CODE END WHILE */
		MX_SubGHz_Phy_Process();
 8000c5e:	f008 ff5a 	bl	8009b16 <MX_SubGHz_Phy_Process>
		HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_RESET);
 8000c62:	e6f2      	b.n	8000a4a <main+0x1d6>
 8000c64:	200000e0 	.word	0x200000e0
 8000c68:	0800ae70 	.word	0x0800ae70
 8000c6c:	0800ae88 	.word	0x0800ae88
 8000c70:	0800ae9c 	.word	0x0800ae9c
 8000c74:	19f25968 	.word	0x19f25968
 8000c78:	20000380 	.word	0x20000380

08000c7c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b09a      	sub	sp, #104	; 0x68
 8000c80:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000c82:	f107 0320 	add.w	r3, r7, #32
 8000c86:	2248      	movs	r2, #72	; 0x48
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f009 fafa 	bl	800a284 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000c90:	1d3b      	adds	r3, r7, #4
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]
 8000c9a:	60da      	str	r2, [r3, #12]
 8000c9c:	611a      	str	r2, [r3, #16]
 8000c9e:	615a      	str	r2, [r3, #20]
 8000ca0:	619a      	str	r2, [r3, #24]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ca2:	4b25      	ldr	r3, [pc, #148]	; (8000d38 <SystemClock_Config+0xbc>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000caa:	4a23      	ldr	r2, [pc, #140]	; (8000d38 <SystemClock_Config+0xbc>)
 8000cac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cb0:	6013      	str	r3, [r2, #0]
 8000cb2:	4b21      	ldr	r3, [pc, #132]	; (8000d38 <SystemClock_Config+0xbc>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000cba:	603b      	str	r3, [r7, #0]
 8000cbc:	683b      	ldr	r3, [r7, #0]

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_PWR;
 8000cc2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000cc6:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSEDiv = RCC_HSE_DIV1;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000cd4:	2310      	movs	r3, #16
 8000cd6:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLN = 6;
 8000cd8:	2306      	movs	r3, #6
 8000cda:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cdc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ce0:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ce2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000ce6:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ce8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000cec:	663b      	str	r3, [r7, #96]	; 0x60
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000cee:	f107 0320 	add.w	r3, r7, #32
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f001 ff90 	bl	8002c18 <HAL_RCC_OscConfig>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <SystemClock_Config+0x86>
		Error_Handler();
 8000cfe:	f000 fb8b 	bl	8001418 <Error_Handler>
	}

	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3 | RCC_CLOCKTYPE_HCLK
 8000d02:	234f      	movs	r3, #79	; 0x4f
 8000d04:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d06:	2303      	movs	r3, #3
 8000d08:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d12:	2300      	movs	r3, #0
 8000d14:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000d1a:	1d3b      	adds	r3, r7, #4
 8000d1c:	2102      	movs	r1, #2
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f002 fafc 	bl	800331c <HAL_RCC_ClockConfig>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <SystemClock_Config+0xb2>
		Error_Handler();
 8000d2a:	f000 fb75 	bl	8001418 <Error_Handler>
	}
}
 8000d2e:	bf00      	nop
 8000d30:	3768      	adds	r7, #104	; 0x68
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	58000400 	.word	0x58000400

08000d3c <MX_SUBGHZ_Init>:
/**
 * @brief SUBGHZ Initialization Function
 * @param None
 * @retval None
 */
void MX_SUBGHZ_Init(void) {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
	/* USER CODE END SUBGHZ_Init 0 */

	/* USER CODE BEGIN SUBGHZ_Init 1 */

	/* USER CODE END SUBGHZ_Init 1 */
	hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_8;
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <MX_SUBGHZ_Init+0x20>)
 8000d42:	2210      	movs	r2, #16
 8000d44:	601a      	str	r2, [r3, #0]
	if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK) {
 8000d46:	4805      	ldr	r0, [pc, #20]	; (8000d5c <MX_SUBGHZ_Init+0x20>)
 8000d48:	f003 f85c 	bl	8003e04 <HAL_SUBGHZ_Init>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_SUBGHZ_Init+0x1a>
		Error_Handler();
 8000d52:	f000 fb61 	bl	8001418 <Error_Handler>
	}
	/* USER CODE BEGIN SUBGHZ_Init 2 */

	/* USER CODE END SUBGHZ_Init 2 */

}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000110 	.word	0x20000110

08000d60 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b088      	sub	sp, #32
 8000d64:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000d66:	f107 0310 	add.w	r3, r7, #16
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	605a      	str	r2, [r3, #4]
 8000d70:	609a      	str	r2, [r3, #8]
 8000d72:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000d74:	1d3b      	adds	r3, r7, #4
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	605a      	str	r2, [r3, #4]
 8000d7c:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000d7e:	4b20      	ldr	r3, [pc, #128]	; (8000e00 <MX_TIM1_Init+0xa0>)
 8000d80:	4a20      	ldr	r2, [pc, #128]	; (8000e04 <MX_TIM1_Init+0xa4>)
 8000d82:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 48 - 1;
 8000d84:	4b1e      	ldr	r3, [pc, #120]	; (8000e00 <MX_TIM1_Init+0xa0>)
 8000d86:	222f      	movs	r2, #47	; 0x2f
 8000d88:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d8a:	4b1d      	ldr	r3, [pc, #116]	; (8000e00 <MX_TIM1_Init+0xa0>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1000 - 1;
 8000d90:	4b1b      	ldr	r3, [pc, #108]	; (8000e00 <MX_TIM1_Init+0xa0>)
 8000d92:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d96:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d98:	4b19      	ldr	r3, [pc, #100]	; (8000e00 <MX_TIM1_Init+0xa0>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000d9e:	4b18      	ldr	r3, [pc, #96]	; (8000e00 <MX_TIM1_Init+0xa0>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000da4:	4b16      	ldr	r3, [pc, #88]	; (8000e00 <MX_TIM1_Init+0xa0>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8000daa:	4815      	ldr	r0, [pc, #84]	; (8000e00 <MX_TIM1_Init+0xa0>)
 8000dac:	f003 fc4a 	bl	8004644 <HAL_TIM_Base_Init>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_TIM1_Init+0x5a>
		Error_Handler();
 8000db6:	f000 fb2f 	bl	8001418 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dbe:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8000dc0:	f107 0310 	add.w	r3, r7, #16
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	480e      	ldr	r0, [pc, #56]	; (8000e00 <MX_TIM1_Init+0xa0>)
 8000dc8:	f003 fdf7 	bl	80049ba <HAL_TIM_ConfigClockSource>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_TIM1_Init+0x76>
		Error_Handler();
 8000dd2:	f000 fb21 	bl	8001418 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dde:	2300      	movs	r3, #0
 8000de0:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8000de2:	1d3b      	adds	r3, r7, #4
 8000de4:	4619      	mov	r1, r3
 8000de6:	4806      	ldr	r0, [pc, #24]	; (8000e00 <MX_TIM1_Init+0xa0>)
 8000de8:	f003 ffd8 	bl	8004d9c <HAL_TIMEx_MasterConfigSynchronization>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_TIM1_Init+0x96>
			!= HAL_OK) {
		Error_Handler();
 8000df2:	f000 fb11 	bl	8001418 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8000df6:	bf00      	nop
 8000df8:	3720      	adds	r7, #32
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	2000011c 	.word	0x2000011c
 8000e04:	40012c00 	.word	0x40012c00

08000e08 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b088      	sub	sp, #32
 8000e0c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000e0e:	f107 0310 	add.w	r3, r7, #16
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	605a      	str	r2, [r3, #4]
 8000e18:	609a      	str	r2, [r3, #8]
 8000e1a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000e1c:	1d3b      	adds	r3, r7, #4
 8000e1e:	2200      	movs	r2, #0
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	605a      	str	r2, [r3, #4]
 8000e24:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000e26:	4b1d      	ldr	r3, [pc, #116]	; (8000e9c <MX_TIM2_Init+0x94>)
 8000e28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e2c:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 48;
 8000e2e:	4b1b      	ldr	r3, [pc, #108]	; (8000e9c <MX_TIM2_Init+0x94>)
 8000e30:	2230      	movs	r2, #48	; 0x30
 8000e32:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e34:	4b19      	ldr	r3, [pc, #100]	; (8000e9c <MX_TIM2_Init+0x94>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000001 - 1;
 8000e3a:	4b18      	ldr	r3, [pc, #96]	; (8000e9c <MX_TIM2_Init+0x94>)
 8000e3c:	4a18      	ldr	r2, [pc, #96]	; (8000ea0 <MX_TIM2_Init+0x98>)
 8000e3e:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e40:	4b16      	ldr	r3, [pc, #88]	; (8000e9c <MX_TIM2_Init+0x94>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e46:	4b15      	ldr	r3, [pc, #84]	; (8000e9c <MX_TIM2_Init+0x94>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000e4c:	4813      	ldr	r0, [pc, #76]	; (8000e9c <MX_TIM2_Init+0x94>)
 8000e4e:	f003 fbf9 	bl	8004644 <HAL_TIM_Base_Init>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_TIM2_Init+0x54>
		Error_Handler();
 8000e58:	f000 fade 	bl	8001418 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e60:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000e62:	f107 0310 	add.w	r3, r7, #16
 8000e66:	4619      	mov	r1, r3
 8000e68:	480c      	ldr	r0, [pc, #48]	; (8000e9c <MX_TIM2_Init+0x94>)
 8000e6a:	f003 fda6 	bl	80049ba <HAL_TIM_ConfigClockSource>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_TIM2_Init+0x70>
		Error_Handler();
 8000e74:	f000 fad0 	bl	8001418 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000e80:	1d3b      	adds	r3, r7, #4
 8000e82:	4619      	mov	r1, r3
 8000e84:	4805      	ldr	r0, [pc, #20]	; (8000e9c <MX_TIM2_Init+0x94>)
 8000e86:	f003 ff89 	bl	8004d9c <HAL_TIMEx_MasterConfigSynchronization>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8000e90:	f000 fac2 	bl	8001418 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000e94:	bf00      	nop
 8000e96:	3720      	adds	r7, #32
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	20000168 	.word	0x20000168
 8000ea0:	000f4240 	.word	0x000f4240

08000ea4 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000ea8:	4b22      	ldr	r3, [pc, #136]	; (8000f34 <MX_USART2_UART_Init+0x90>)
 8000eaa:	4a23      	ldr	r2, [pc, #140]	; (8000f38 <MX_USART2_UART_Init+0x94>)
 8000eac:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000eae:	4b21      	ldr	r3, [pc, #132]	; (8000f34 <MX_USART2_UART_Init+0x90>)
 8000eb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000eb4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000eb6:	4b1f      	ldr	r3, [pc, #124]	; (8000f34 <MX_USART2_UART_Init+0x90>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000ebc:	4b1d      	ldr	r3, [pc, #116]	; (8000f34 <MX_USART2_UART_Init+0x90>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000ec2:	4b1c      	ldr	r3, [pc, #112]	; (8000f34 <MX_USART2_UART_Init+0x90>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000ec8:	4b1a      	ldr	r3, [pc, #104]	; (8000f34 <MX_USART2_UART_Init+0x90>)
 8000eca:	220c      	movs	r2, #12
 8000ecc:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ece:	4b19      	ldr	r3, [pc, #100]	; (8000f34 <MX_USART2_UART_Init+0x90>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ed4:	4b17      	ldr	r3, [pc, #92]	; (8000f34 <MX_USART2_UART_Init+0x90>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eda:	4b16      	ldr	r3, [pc, #88]	; (8000f34 <MX_USART2_UART_Init+0x90>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ee0:	4b14      	ldr	r3, [pc, #80]	; (8000f34 <MX_USART2_UART_Init+0x90>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	625a      	str	r2, [r3, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ee6:	4b13      	ldr	r3, [pc, #76]	; (8000f34 <MX_USART2_UART_Init+0x90>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000eec:	4811      	ldr	r0, [pc, #68]	; (8000f34 <MX_USART2_UART_Init+0x90>)
 8000eee:	f003 ffef 	bl	8004ed0 <HAL_UART_Init>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_USART2_UART_Init+0x58>
		Error_Handler();
 8000ef8:	f000 fa8e 	bl	8001418 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 8000efc:	2100      	movs	r1, #0
 8000efe:	480d      	ldr	r0, [pc, #52]	; (8000f34 <MX_USART2_UART_Init+0x90>)
 8000f00:	f005 fb52 	bl	80065a8 <HAL_UARTEx_SetTxFifoThreshold>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_USART2_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8000f0a:	f000 fa85 	bl	8001418 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 8000f0e:	2100      	movs	r1, #0
 8000f10:	4808      	ldr	r0, [pc, #32]	; (8000f34 <MX_USART2_UART_Init+0x90>)
 8000f12:	f005 fb87 	bl	8006624 <HAL_UARTEx_SetRxFifoThreshold>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_USART2_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8000f1c:	f000 fa7c 	bl	8001418 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 8000f20:	4804      	ldr	r0, [pc, #16]	; (8000f34 <MX_USART2_UART_Init+0x90>)
 8000f22:	f005 fb09 	bl	8006538 <HAL_UARTEx_DisableFifoMode>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_USART2_UART_Init+0x8c>
		Error_Handler();
 8000f2c:	f000 fa74 	bl	8001418 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	200001b4 	.word	0x200001b4
 8000f38:	40004400 	.word	0x40004400

08000f3c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000f40:	2004      	movs	r0, #4
 8000f42:	f7ff fc66 	bl	8000812 <LL_AHB1_GRP1_EnableClock>
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000f46:	2001      	movs	r0, #1
 8000f48:	f7ff fc63 	bl	8000812 <LL_AHB1_GRP1_EnableClock>

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	2100      	movs	r1, #0
 8000f50:	200b      	movs	r0, #11
 8000f52:	f000 fe60 	bl	8001c16 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f56:	200b      	movs	r0, #11
 8000f58:	f000 fe77 	bl	8001c4a <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	2100      	movs	r1, #0
 8000f60:	200c      	movs	r0, #12
 8000f62:	f000 fe58 	bl	8001c16 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000f66:	200c      	movs	r0, #12
 8000f68:	f000 fe6f 	bl	8001c4a <HAL_NVIC_EnableIRQ>

}
 8000f6c:	bf00      	nop
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000f76:	1d3b      	adds	r3, r7, #4
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
 8000f82:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000f84:	2001      	movs	r0, #1
 8000f86:	f7ff fc5c 	bl	8000842 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8a:	2002      	movs	r0, #2
 8000f8c:	f7ff fc59 	bl	8000842 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000f90:	2004      	movs	r0, #4
 8000f92:	f7ff fc56 	bl	8000842 <LL_AHB2_GRP1_EnableClock>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LED1_Pin | LED2_Pin | LED3_Pin, GPIO_PIN_RESET);
 8000f96:	2200      	movs	r2, #0
 8000f98:	f44f 410a 	mov.w	r1, #35328	; 0x8a00
 8000f9c:	4828      	ldr	r0, [pc, #160]	; (8001040 <MX_GPIO_Init+0xd0>)
 8000f9e:	f001 fb51 	bl	8002644 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin | FE_CTRL2_Pin | FE_CTRL1_Pin,
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2138      	movs	r1, #56	; 0x38
 8000fa6:	4827      	ldr	r0, [pc, #156]	; (8001044 <MX_GPIO_Init+0xd4>)
 8000fa8:	f001 fb4c 	bl	8002644 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
	GPIO_InitStruct.Pin = LED1_Pin | LED2_Pin | LED3_Pin;
 8000fac:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 8000fb0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fbe:	1d3b      	adds	r3, r7, #4
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	481f      	ldr	r0, [pc, #124]	; (8001040 <MX_GPIO_Init+0xd0>)
 8000fc4:	f001 f9de 	bl	8002384 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA10 PA9 */
	GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_9;
 8000fc8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000fcc:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fda:	2307      	movs	r3, #7
 8000fdc:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fde:	1d3b      	adds	r3, r7, #4
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fe6:	f001 f9cd 	bl	8002384 <HAL_GPIO_Init>

	/*Configure GPIO pins : FE_CTRL3_Pin FE_CTRL2_Pin FE_CTRL1_Pin */
	GPIO_InitStruct.Pin = FE_CTRL3_Pin | FE_CTRL2_Pin | FE_CTRL1_Pin;
 8000fea:	2338      	movs	r3, #56	; 0x38
 8000fec:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ffa:	1d3b      	adds	r3, r7, #4
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4811      	ldr	r0, [pc, #68]	; (8001044 <MX_GPIO_Init+0xd4>)
 8001000:	f001 f9c0 	bl	8002384 <HAL_GPIO_Init>

	/*Configure GPIO pins : B1_Pin B2_Pin */
	GPIO_InitStruct.Pin = B1_Pin | B2_Pin;
 8001004:	2303      	movs	r3, #3
 8001006:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001008:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800100c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800100e:	2301      	movs	r3, #1
 8001010:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001012:	1d3b      	adds	r3, r7, #4
 8001014:	4619      	mov	r1, r3
 8001016:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800101a:	f001 f9b3 	bl	8002384 <HAL_GPIO_Init>

	/*Configure GPIO pin : B3_Pin */
	GPIO_InitStruct.Pin = B3_Pin;
 800101e:	2340      	movs	r3, #64	; 0x40
 8001020:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001022:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001026:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001028:	2301      	movs	r3, #1
 800102a:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 800102c:	1d3b      	adds	r3, r7, #4
 800102e:	4619      	mov	r1, r3
 8001030:	4804      	ldr	r0, [pc, #16]	; (8001044 <MX_GPIO_Init+0xd4>)
 8001032:	f001 f9a7 	bl	8002384 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001036:	bf00      	nop
 8001038:	3718      	adds	r7, #24
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	48000400 	.word	0x48000400
 8001044:	48000800 	.word	0x48000800

08001048 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) {
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4a11      	ldr	r2, [pc, #68]	; (8001098 <HAL_UART_RxCpltCallback+0x50>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d11a      	bne.n	800108e <HAL_UART_RxCpltCallback+0x46>
		myDebug("\n-->Main command Received: 0x%x\r\n", rx_buffer);
 8001058:	4910      	ldr	r1, [pc, #64]	; (800109c <HAL_UART_RxCpltCallback+0x54>)
 800105a:	4811      	ldr	r0, [pc, #68]	; (80010a0 <HAL_UART_RxCpltCallback+0x58>)
 800105c:	f7ff fb60 	bl	8000720 <myDebug>
		for (int i = 0; i < sizeof(rx_buffer); i++) {
 8001060:	2300      	movs	r3, #0
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	e00a      	b.n	800107c <HAL_UART_RxCpltCallback+0x34>
			myDebug("%x ", rx_buffer[i]);
 8001066:	4a0d      	ldr	r2, [pc, #52]	; (800109c <HAL_UART_RxCpltCallback+0x54>)
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	4413      	add	r3, r2
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	4619      	mov	r1, r3
 8001070:	480c      	ldr	r0, [pc, #48]	; (80010a4 <HAL_UART_RxCpltCallback+0x5c>)
 8001072:	f7ff fb55 	bl	8000720 <myDebug>
		for (int i = 0; i < sizeof(rx_buffer); i++) {
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	3301      	adds	r3, #1
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	2b0c      	cmp	r3, #12
 8001080:	d9f1      	bls.n	8001066 <HAL_UART_RxCpltCallback+0x1e>
		}
		myDebug("\r\n");
 8001082:	4809      	ldr	r0, [pc, #36]	; (80010a8 <HAL_UART_RxCpltCallback+0x60>)
 8001084:	f7ff fb4c 	bl	8000720 <myDebug>

		TX_FLAG = 1;
 8001088:	4b08      	ldr	r3, [pc, #32]	; (80010ac <HAL_UART_RxCpltCallback+0x64>)
 800108a:	2201      	movs	r2, #1
 800108c:	701a      	strb	r2, [r3, #0]
	}
}
 800108e:	bf00      	nop
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	200001b4 	.word	0x200001b4
 800109c:	20000370 	.word	0x20000370
 80010a0:	0800af2c 	.word	0x0800af2c
 80010a4:	0800af50 	.word	0x0800af50
 80010a8:	0800af54 	.word	0x0800af54
 80010ac:	200003a4 	.word	0x200003a4

080010b0 <DioIrqHndlr>:

void DioIrqHndlr(RadioIrqMasks_t radioIrq) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	80fb      	strh	r3, [r7, #6]
	if (radioIrq == IRQ_RX_DONE) {
 80010ba:	88fb      	ldrh	r3, [r7, #6]
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d17a      	bne.n	80011b6 <DioIrqHndlr+0x106>
		SUBGRF_GetPayload(rx_cmd, &p_len, PAYLOAD_LENGTH);
 80010c0:	2266      	movs	r2, #102	; 0x66
 80010c2:	49b2      	ldr	r1, [pc, #712]	; (800138c <DioIrqHndlr+0x2dc>)
 80010c4:	48b2      	ldr	r0, [pc, #712]	; (8001390 <DioIrqHndlr+0x2e0>)
 80010c6:	f007 fb37 	bl	8008738 <SUBGRF_GetPayload>
		rssi_value = SUBGRF_GetRssiInst();
 80010ca:	f008 f956 	bl	800937a <SUBGRF_GetRssiInst>
 80010ce:	4603      	mov	r3, r0
 80010d0:	b2da      	uxtb	r2, r3
 80010d2:	4bb0      	ldr	r3, [pc, #704]	; (8001394 <DioIrqHndlr+0x2e4>)
 80010d4:	701a      	strb	r2, [r3, #0]
		myDebug("Satellite Data Received:\r\n");
 80010d6:	48b0      	ldr	r0, [pc, #704]	; (8001398 <DioIrqHndlr+0x2e8>)
 80010d8:	f7ff fb22 	bl	8000720 <myDebug>
		for (int i = 0; i < sizeof(rx_cmd); i++) {
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]
 80010e0:	e00a      	b.n	80010f8 <DioIrqHndlr+0x48>
			myDebug("%x ", rx_cmd[i]);
 80010e2:	4aab      	ldr	r2, [pc, #684]	; (8001390 <DioIrqHndlr+0x2e0>)
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	4413      	add	r3, r2
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	4619      	mov	r1, r3
 80010ec:	48ab      	ldr	r0, [pc, #684]	; (800139c <DioIrqHndlr+0x2ec>)
 80010ee:	f7ff fb17 	bl	8000720 <myDebug>
		for (int i = 0; i < sizeof(rx_cmd); i++) {
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	3301      	adds	r3, #1
 80010f6:	617b      	str	r3, [r7, #20]
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	2b65      	cmp	r3, #101	; 0x65
 80010fc:	d9f1      	bls.n	80010e2 <DioIrqHndlr+0x32>
		}
		myDebug("\r\n");
 80010fe:	48a8      	ldr	r0, [pc, #672]	; (80013a0 <DioIrqHndlr+0x2f0>)
 8001100:	f7ff fb0e 	bl	8000720 <myDebug>

		memset(rx_cmd, '\0', sizeof(rx_cmd));
 8001104:	2266      	movs	r2, #102	; 0x66
 8001106:	2100      	movs	r1, #0
 8001108:	48a1      	ldr	r0, [pc, #644]	; (8001390 <DioIrqHndlr+0x2e0>)
 800110a:	f009 f8bb 	bl	800a284 <memset>

		delay_us(1000000);
 800110e:	48a5      	ldr	r0, [pc, #660]	; (80013a4 <DioIrqHndlr+0x2f4>)
 8001110:	f7ff faec 	bl	80006ec <delay_us>

		myDebug("\n########## RX Configuration: ##########\n");
 8001114:	48a4      	ldr	r0, [pc, #656]	; (80013a8 <DioIrqHndlr+0x2f8>)
 8001116:	f7ff fb03 	bl	8000720 <myDebug>
		myDebug("FREQUENCY MODS: DOWNLINK FREQ: %lu Hz\r\n", FREQ_437_MHZ);
 800111a:	49a4      	ldr	r1, [pc, #656]	; (80013ac <DioIrqHndlr+0x2fc>)
 800111c:	48a4      	ldr	r0, [pc, #656]	; (80013b0 <DioIrqHndlr+0x300>)
 800111e:	f7ff faff 	bl	8000720 <myDebug>
		myDebug("Bit Rate: 	%d\n\r", mod_params.Params.Gfsk.BitRate);
 8001122:	4ba4      	ldr	r3, [pc, #656]	; (80013b4 <DioIrqHndlr+0x304>)
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	4619      	mov	r1, r3
 8001128:	48a3      	ldr	r0, [pc, #652]	; (80013b8 <DioIrqHndlr+0x308>)
 800112a:	f7ff faf9 	bl	8000720 <myDebug>
		myDebug("Frequency Deviation: 	%d\n\r", mod_params.Params.Gfsk.Fdev);
 800112e:	4ba1      	ldr	r3, [pc, #644]	; (80013b4 <DioIrqHndlr+0x304>)
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	4619      	mov	r1, r3
 8001134:	48a1      	ldr	r0, [pc, #644]	; (80013bc <DioIrqHndlr+0x30c>)
 8001136:	f7ff faf3 	bl	8000720 <myDebug>
		myDebug("RECEVING BANDWIDTH: 	%d\n\r",
				mod_params.Params.Gfsk.Bandwidth);
 800113a:	4b9e      	ldr	r3, [pc, #632]	; (80013b4 <DioIrqHndlr+0x304>)
 800113c:	7b5b      	ldrb	r3, [r3, #13]
		myDebug("RECEVING BANDWIDTH: 	%d\n\r",
 800113e:	4619      	mov	r1, r3
 8001140:	489f      	ldr	r0, [pc, #636]	; (80013c0 <DioIrqHndlr+0x310>)
 8001142:	f7ff faed 	bl	8000720 <myDebug>
		myDebug("Packet Type 			%d\n\r", pkt_params.PacketType);
 8001146:	4b9f      	ldr	r3, [pc, #636]	; (80013c4 <DioIrqHndlr+0x314>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	4619      	mov	r1, r3
 800114c:	489e      	ldr	r0, [pc, #632]	; (80013c8 <DioIrqHndlr+0x318>)
 800114e:	f7ff fae7 	bl	8000720 <myDebug>
		myDebug("PayloadLength 			%d\n\r",
				pkt_params.Params.Gfsk.PayloadLength);
 8001152:	4b9c      	ldr	r3, [pc, #624]	; (80013c4 <DioIrqHndlr+0x314>)
 8001154:	7a1b      	ldrb	r3, [r3, #8]
		myDebug("PayloadLength 			%d\n\r",
 8001156:	4619      	mov	r1, r3
 8001158:	489c      	ldr	r0, [pc, #624]	; (80013cc <DioIrqHndlr+0x31c>)
 800115a:	f7ff fae1 	bl	8000720 <myDebug>
		myDebug("PreambleLength 		%d\n\r",
				pkt_params.Params.Gfsk.PreambleLength);
 800115e:	4b99      	ldr	r3, [pc, #612]	; (80013c4 <DioIrqHndlr+0x314>)
 8001160:	885b      	ldrh	r3, [r3, #2]
		myDebug("PreambleLength 		%d\n\r",
 8001162:	4619      	mov	r1, r3
 8001164:	489a      	ldr	r0, [pc, #616]	; (80013d0 <DioIrqHndlr+0x320>)
 8001166:	f7ff fadb 	bl	8000720 <myDebug>
		myDebug("PreambleMinDetect		%d\n\r",
				pkt_params.Params.Gfsk.PreambleMinDetect);
 800116a:	4b96      	ldr	r3, [pc, #600]	; (80013c4 <DioIrqHndlr+0x314>)
 800116c:	791b      	ldrb	r3, [r3, #4]
		myDebug("PreambleMinDetect		%d\n\r",
 800116e:	4619      	mov	r1, r3
 8001170:	4898      	ldr	r0, [pc, #608]	; (80013d4 <DioIrqHndlr+0x324>)
 8001172:	f7ff fad5 	bl	8000720 <myDebug>
		myDebug("HeaderType 			%d\n\r", pkt_params.Params.Gfsk.HeaderType);
 8001176:	4b93      	ldr	r3, [pc, #588]	; (80013c4 <DioIrqHndlr+0x314>)
 8001178:	79db      	ldrb	r3, [r3, #7]
 800117a:	4619      	mov	r1, r3
 800117c:	4896      	ldr	r0, [pc, #600]	; (80013d8 <DioIrqHndlr+0x328>)
 800117e:	f7ff facf 	bl	8000720 <myDebug>
		myDebug("______________*******************______________\r\n");
 8001182:	4896      	ldr	r0, [pc, #600]	; (80013dc <DioIrqHndlr+0x32c>)
 8001184:	f7ff facc 	bl	8000720 <myDebug>
		myDebug("\n_____Satellite Receiver_____OR_____Command Transmitter\r\n");
 8001188:	4895      	ldr	r0, [pc, #596]	; (80013e0 <DioIrqHndlr+0x330>)
 800118a:	f7ff fac9 	bl	8000720 <myDebug>

		SUBGRF_SetRfFrequency(FREQ_437_MHZ);
 800118e:	4887      	ldr	r0, [pc, #540]	; (80013ac <DioIrqHndlr+0x2fc>)
 8001190:	f007 fe32 	bl	8008df8 <SUBGRF_SetRfFrequency>
		SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX); /*Set RF switch*/
 8001194:	2100      	movs	r1, #0
 8001196:	2001      	movs	r0, #1
 8001198:	f008 fa76 	bl	8009688 <SUBGRF_SetSwitch>
		SUBGRF_SetRxBoosted(0xFFFFFF);
 800119c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80011a0:	f007 fc56 	bl	8008a50 <SUBGRF_SetRxBoosted>

		HAL_UART_Receive_DMA(&huart2, rx_buffer, main_cmd_plen);
 80011a4:	4b8f      	ldr	r3, [pc, #572]	; (80013e4 <DioIrqHndlr+0x334>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	461a      	mov	r2, r3
 80011ac:	498e      	ldr	r1, [pc, #568]	; (80013e8 <DioIrqHndlr+0x338>)
 80011ae:	488f      	ldr	r0, [pc, #572]	; (80013ec <DioIrqHndlr+0x33c>)
 80011b0:	f003 ff64 	bl	800507c <HAL_UART_Receive_DMA>
		HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_RESET);
		delay_us(500000);

		HAL_UART_Receive_DMA(&huart2, rx_buffer, main_cmd_plen);
	}
}
 80011b4:	e0e6      	b.n	8001384 <DioIrqHndlr+0x2d4>
	} else if (radioIrq == IRQ_TX_DONE) {
 80011b6:	88fb      	ldrh	r3, [r7, #6]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	f040 80e3 	bne.w	8001384 <DioIrqHndlr+0x2d4>
		TX_FLAG = 0;
 80011be:	4b8c      	ldr	r3, [pc, #560]	; (80013f0 <DioIrqHndlr+0x340>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	701a      	strb	r2, [r3, #0]
		myDebug("\n\rS2S Command Transmitted Successful:\r\n");
 80011c4:	488b      	ldr	r0, [pc, #556]	; (80013f4 <DioIrqHndlr+0x344>)
 80011c6:	f7ff faab 	bl	8000720 <myDebug>
		for (int i = 0; i < sizeof(tx_cmd); i++) {
 80011ca:	2300      	movs	r3, #0
 80011cc:	613b      	str	r3, [r7, #16]
 80011ce:	e00a      	b.n	80011e6 <DioIrqHndlr+0x136>
			myDebug("%02x ", tx_cmd[i]);
 80011d0:	4a89      	ldr	r2, [pc, #548]	; (80013f8 <DioIrqHndlr+0x348>)
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	4413      	add	r3, r2
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	4619      	mov	r1, r3
 80011da:	4888      	ldr	r0, [pc, #544]	; (80013fc <DioIrqHndlr+0x34c>)
 80011dc:	f7ff faa0 	bl	8000720 <myDebug>
		for (int i = 0; i < sizeof(tx_cmd); i++) {
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	3301      	adds	r3, #1
 80011e4:	613b      	str	r3, [r7, #16]
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	2b22      	cmp	r3, #34	; 0x22
 80011ea:	d9f1      	bls.n	80011d0 <DioIrqHndlr+0x120>
		myDebug("\r\n");
 80011ec:	486c      	ldr	r0, [pc, #432]	; (80013a0 <DioIrqHndlr+0x2f0>)
 80011ee:	f7ff fa97 	bl	8000720 <myDebug>
		memset(tx_cmd, '\0', sizeof(tx_cmd));
 80011f2:	2223      	movs	r2, #35	; 0x23
 80011f4:	2100      	movs	r1, #0
 80011f6:	4880      	ldr	r0, [pc, #512]	; (80013f8 <DioIrqHndlr+0x348>)
 80011f8:	f009 f844 	bl	800a284 <memset>
		delay_us(1000000);
 80011fc:	4869      	ldr	r0, [pc, #420]	; (80013a4 <DioIrqHndlr+0x2f4>)
 80011fe:	f7ff fa75 	bl	80006ec <delay_us>
		pkt_params.PacketType = PACKET_TYPE_GFSK;
 8001202:	4b70      	ldr	r3, [pc, #448]	; (80013c4 <DioIrqHndlr+0x314>)
 8001204:	2200      	movs	r2, #0
 8001206:	701a      	strb	r2, [r3, #0]
		pkt_params.Params.Gfsk.PayloadLength = PAYLOAD_LENGTH;
 8001208:	4b6e      	ldr	r3, [pc, #440]	; (80013c4 <DioIrqHndlr+0x314>)
 800120a:	2266      	movs	r2, #102	; 0x66
 800120c:	721a      	strb	r2, [r3, #8]
		pkt_params.Params.Gfsk.PreambleLength = 8; /*Convert byte into bit*/
 800120e:	4b6d      	ldr	r3, [pc, #436]	; (80013c4 <DioIrqHndlr+0x314>)
 8001210:	2208      	movs	r2, #8
 8001212:	805a      	strh	r2, [r3, #2]
		pkt_params.Params.Gfsk.PreambleMinDetect =
 8001214:	4b6b      	ldr	r3, [pc, #428]	; (80013c4 <DioIrqHndlr+0x314>)
 8001216:	2204      	movs	r2, #4
 8001218:	711a      	strb	r2, [r3, #4]
		pkt_params.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 800121a:	4b6a      	ldr	r3, [pc, #424]	; (80013c4 <DioIrqHndlr+0x314>)
 800121c:	2218      	movs	r2, #24
 800121e:	715a      	strb	r2, [r3, #5]
		pkt_params.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8001220:	4b68      	ldr	r3, [pc, #416]	; (80013c4 <DioIrqHndlr+0x314>)
 8001222:	2200      	movs	r2, #0
 8001224:	719a      	strb	r2, [r3, #6]
		pkt_params.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8001226:	4b67      	ldr	r3, [pc, #412]	; (80013c4 <DioIrqHndlr+0x314>)
 8001228:	2200      	movs	r2, #0
 800122a:	71da      	strb	r2, [r3, #7]
		pkt_params.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800122c:	4b65      	ldr	r3, [pc, #404]	; (80013c4 <DioIrqHndlr+0x314>)
 800122e:	22f2      	movs	r2, #242	; 0xf2
 8001230:	725a      	strb	r2, [r3, #9]
		pkt_params.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8001232:	4b64      	ldr	r3, [pc, #400]	; (80013c4 <DioIrqHndlr+0x314>)
 8001234:	2201      	movs	r2, #1
 8001236:	729a      	strb	r2, [r3, #10]
		mod_params.PacketType = PACKET_TYPE_GFSK;
 8001238:	4b5e      	ldr	r3, [pc, #376]	; (80013b4 <DioIrqHndlr+0x304>)
 800123a:	2200      	movs	r2, #0
 800123c:	701a      	strb	r2, [r3, #0]
		mod_params.Params.Gfsk.Bandwidth = RX_BW_29300; /*Not used in TX*/
 800123e:	4b5d      	ldr	r3, [pc, #372]	; (80013b4 <DioIrqHndlr+0x304>)
 8001240:	220d      	movs	r2, #13
 8001242:	735a      	strb	r2, [r3, #13]
		mod_params.Params.Gfsk.BitRate = DEMO_DEFAULT_BR_4800;
 8001244:	4b5b      	ldr	r3, [pc, #364]	; (80013b4 <DioIrqHndlr+0x304>)
 8001246:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 800124a:	605a      	str	r2, [r3, #4]
		mod_params.Params.Gfsk.Fdev = DEMO_DEFAULT_FDEV_4800;
 800124c:	4b59      	ldr	r3, [pc, #356]	; (80013b4 <DioIrqHndlr+0x304>)
 800124e:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8001252:	609a      	str	r2, [r3, #8]
		mod_params.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8001254:	4b57      	ldr	r3, [pc, #348]	; (80013b4 <DioIrqHndlr+0x304>)
 8001256:	220b      	movs	r2, #11
 8001258:	731a      	strb	r2, [r3, #12]
		myDebug("\n########## RX Configuration: ##########\n");
 800125a:	4853      	ldr	r0, [pc, #332]	; (80013a8 <DioIrqHndlr+0x2f8>)
 800125c:	f7ff fa60 	bl	8000720 <myDebug>
		myDebug("FREQUENCY MODS: UPLINK FREQ: %lu Hz\r\n", FREQ_435_MHZ);
 8001260:	4967      	ldr	r1, [pc, #412]	; (8001400 <DioIrqHndlr+0x350>)
 8001262:	4868      	ldr	r0, [pc, #416]	; (8001404 <DioIrqHndlr+0x354>)
 8001264:	f7ff fa5c 	bl	8000720 <myDebug>
		myDebug("Bit Rate: 	%d\n\r", mod_params.Params.Gfsk.BitRate);
 8001268:	4b52      	ldr	r3, [pc, #328]	; (80013b4 <DioIrqHndlr+0x304>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	4619      	mov	r1, r3
 800126e:	4852      	ldr	r0, [pc, #328]	; (80013b8 <DioIrqHndlr+0x308>)
 8001270:	f7ff fa56 	bl	8000720 <myDebug>
		myDebug("Frequency Deviation: 	%d\n\r", mod_params.Params.Gfsk.Fdev);
 8001274:	4b4f      	ldr	r3, [pc, #316]	; (80013b4 <DioIrqHndlr+0x304>)
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	4619      	mov	r1, r3
 800127a:	4850      	ldr	r0, [pc, #320]	; (80013bc <DioIrqHndlr+0x30c>)
 800127c:	f7ff fa50 	bl	8000720 <myDebug>
				mod_params.Params.Gfsk.Bandwidth);
 8001280:	4b4c      	ldr	r3, [pc, #304]	; (80013b4 <DioIrqHndlr+0x304>)
 8001282:	7b5b      	ldrb	r3, [r3, #13]
		myDebug("RECEVING BANDWIDTH: 	%d\n\r",
 8001284:	4619      	mov	r1, r3
 8001286:	484e      	ldr	r0, [pc, #312]	; (80013c0 <DioIrqHndlr+0x310>)
 8001288:	f7ff fa4a 	bl	8000720 <myDebug>
		myDebug("Packet Type 			%d\n\r", pkt_params.PacketType);
 800128c:	4b4d      	ldr	r3, [pc, #308]	; (80013c4 <DioIrqHndlr+0x314>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	4619      	mov	r1, r3
 8001292:	484d      	ldr	r0, [pc, #308]	; (80013c8 <DioIrqHndlr+0x318>)
 8001294:	f7ff fa44 	bl	8000720 <myDebug>
				pkt_params.Params.Gfsk.PayloadLength);
 8001298:	4b4a      	ldr	r3, [pc, #296]	; (80013c4 <DioIrqHndlr+0x314>)
 800129a:	7a1b      	ldrb	r3, [r3, #8]
		myDebug("PayloadLength 			%d\n\r",
 800129c:	4619      	mov	r1, r3
 800129e:	484b      	ldr	r0, [pc, #300]	; (80013cc <DioIrqHndlr+0x31c>)
 80012a0:	f7ff fa3e 	bl	8000720 <myDebug>
				pkt_params.Params.Gfsk.PreambleLength);
 80012a4:	4b47      	ldr	r3, [pc, #284]	; (80013c4 <DioIrqHndlr+0x314>)
 80012a6:	885b      	ldrh	r3, [r3, #2]
		myDebug("PreambleLength 		%d\n\r",
 80012a8:	4619      	mov	r1, r3
 80012aa:	4849      	ldr	r0, [pc, #292]	; (80013d0 <DioIrqHndlr+0x320>)
 80012ac:	f7ff fa38 	bl	8000720 <myDebug>
				pkt_params.Params.Gfsk.PreambleMinDetect);
 80012b0:	4b44      	ldr	r3, [pc, #272]	; (80013c4 <DioIrqHndlr+0x314>)
 80012b2:	791b      	ldrb	r3, [r3, #4]
		myDebug("PreambleMinDetect		%d\n\r",
 80012b4:	4619      	mov	r1, r3
 80012b6:	4847      	ldr	r0, [pc, #284]	; (80013d4 <DioIrqHndlr+0x324>)
 80012b8:	f7ff fa32 	bl	8000720 <myDebug>
		myDebug("HeaderType 			%d\n\r", pkt_params.Params.Gfsk.HeaderType);
 80012bc:	4b41      	ldr	r3, [pc, #260]	; (80013c4 <DioIrqHndlr+0x314>)
 80012be:	79db      	ldrb	r3, [r3, #7]
 80012c0:	4619      	mov	r1, r3
 80012c2:	4845      	ldr	r0, [pc, #276]	; (80013d8 <DioIrqHndlr+0x328>)
 80012c4:	f7ff fa2c 	bl	8000720 <myDebug>
		myDebug("______________*******************______________\r\n");
 80012c8:	4844      	ldr	r0, [pc, #272]	; (80013dc <DioIrqHndlr+0x32c>)
 80012ca:	f7ff fa29 	bl	8000720 <myDebug>
		myDebug("\n_____Satellite Receiver_____OR_____Command Transmitter\r\n");
 80012ce:	4844      	ldr	r0, [pc, #272]	; (80013e0 <DioIrqHndlr+0x330>)
 80012d0:	f7ff fa26 	bl	8000720 <myDebug>
		SUBGRF_Init(DioIrqHndlr);
 80012d4:	484c      	ldr	r0, [pc, #304]	; (8001408 <DioIrqHndlr+0x358>)
 80012d6:	f007 f9cd 	bl	8008674 <SUBGRF_Init>
		SUBGRF_SetBufferBaseAddress(0x00, 0x00);
 80012da:	2100      	movs	r1, #0
 80012dc:	2000      	movs	r0, #0
 80012de:	f008 f835 	bl	800934c <SUBGRF_SetBufferBaseAddress>
		SUBGRF_SetPacketParams(&pkt_params);
 80012e2:	4838      	ldr	r0, [pc, #224]	; (80013c4 <DioIrqHndlr+0x314>)
 80012e4:	f007 ff94 	bl	8009210 <SUBGRF_SetPacketParams>
		SUBGRF_SetSyncWord(( uint8_t[] ) { 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00,
 80012e8:	4a48      	ldr	r2, [pc, #288]	; (800140c <DioIrqHndlr+0x35c>)
 80012ea:	f107 0308 	add.w	r3, r7, #8
 80012ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012f2:	e883 0003 	stmia.w	r3, {r0, r1}
 80012f6:	f107 0308 	add.w	r3, r7, #8
 80012fa:	4618      	mov	r0, r3
 80012fc:	f007 fa51 	bl	80087a2 <SUBGRF_SetSyncWord>
		SUBGRF_SetWhiteningSeed(0x01FF);
 8001300:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001304:	f007 fa9c 	bl	8008840 <SUBGRF_SetWhiteningSeed>
		SUBGRF_SetRfFrequency(FREQ_437_MHZ);
 8001308:	4828      	ldr	r0, [pc, #160]	; (80013ac <DioIrqHndlr+0x2fc>)
 800130a:	f007 fd75 	bl	8008df8 <SUBGRF_SetRfFrequency>
		SUBGRF_SetPaConfig(PA_DUTY_CYCLE, HP_MAX, PA_SEL, 0x01);
 800130e:	2301      	movs	r3, #1
 8001310:	2201      	movs	r2, #1
 8001312:	2100      	movs	r1, #0
 8001314:	2004      	movs	r0, #4
 8001316:	f007 fcf1 	bl	8008cfc <SUBGRF_SetPaConfig>
		SUBGRF_SetTxParams(RFO_LP, POWER, RAMP_TIME);
 800131a:	2202      	movs	r2, #2
 800131c:	210e      	movs	r1, #14
 800131e:	2001      	movs	r0, #1
 8001320:	f007 fdd6 	bl	8008ed0 <SUBGRF_SetTxParams>
		SUBGRF_SetModulationParams(&mod_params);
 8001324:	4823      	ldr	r0, [pc, #140]	; (80013b4 <DioIrqHndlr+0x304>)
 8001326:	f007 fea1 	bl	800906c <SUBGRF_SetModulationParams>
		SUBGRF_SetDioIrqParams(
 800132a:	2300      	movs	r3, #0
 800132c:	2200      	movs	r2, #0
 800132e:	f240 210f 	movw	r1, #527	; 0x20f
 8001332:	f240 200f 	movw	r0, #527	; 0x20f
 8001336:	f007 fd03 	bl	8008d40 <SUBGRF_SetDioIrqParams>
		SUBGRF_SetRfFrequency(FREQ_437_MHZ);
 800133a:	481c      	ldr	r0, [pc, #112]	; (80013ac <DioIrqHndlr+0x2fc>)
 800133c:	f007 fd5c 	bl	8008df8 <SUBGRF_SetRfFrequency>
		SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX); /*Set RF switch*/
 8001340:	2100      	movs	r1, #0
 8001342:	2001      	movs	r0, #1
 8001344:	f008 f9a0 	bl	8009688 <SUBGRF_SetSwitch>
		SUBGRF_SetRxBoosted(0xFFFFFF);
 8001348:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800134c:	f007 fb80 	bl	8008a50 <SUBGRF_SetRxBoosted>
		HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_SET);
 8001350:	2201      	movs	r2, #1
 8001352:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001356:	482e      	ldr	r0, [pc, #184]	; (8001410 <DioIrqHndlr+0x360>)
 8001358:	f001 f974 	bl	8002644 <HAL_GPIO_WritePin>
		delay_us(500000);  // 500ms delay
 800135c:	482d      	ldr	r0, [pc, #180]	; (8001414 <DioIrqHndlr+0x364>)
 800135e:	f7ff f9c5 	bl	80006ec <delay_us>
		HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_RESET);
 8001362:	2200      	movs	r2, #0
 8001364:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001368:	4829      	ldr	r0, [pc, #164]	; (8001410 <DioIrqHndlr+0x360>)
 800136a:	f001 f96b 	bl	8002644 <HAL_GPIO_WritePin>
		delay_us(500000);
 800136e:	4829      	ldr	r0, [pc, #164]	; (8001414 <DioIrqHndlr+0x364>)
 8001370:	f7ff f9bc 	bl	80006ec <delay_us>
		HAL_UART_Receive_DMA(&huart2, rx_buffer, main_cmd_plen);
 8001374:	4b1b      	ldr	r3, [pc, #108]	; (80013e4 <DioIrqHndlr+0x334>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	b29b      	uxth	r3, r3
 800137a:	461a      	mov	r2, r3
 800137c:	491a      	ldr	r1, [pc, #104]	; (80013e8 <DioIrqHndlr+0x338>)
 800137e:	481b      	ldr	r0, [pc, #108]	; (80013ec <DioIrqHndlr+0x33c>)
 8001380:	f003 fe7c 	bl	800507c <HAL_UART_Receive_DMA>
}
 8001384:	bf00      	nop
 8001386:	3718      	adds	r7, #24
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20000000 	.word	0x20000000
 8001390:	20000308 	.word	0x20000308
 8001394:	200003a3 	.word	0x200003a3
 8001398:	0800af58 	.word	0x0800af58
 800139c:	0800af50 	.word	0x0800af50
 80013a0:	0800af54 	.word	0x0800af54
 80013a4:	000f4240 	.word	0x000f4240
 80013a8:	0800ad90 	.word	0x0800ad90
 80013ac:	1a11d018 	.word	0x1a11d018
 80013b0:	0800af74 	.word	0x0800af74
 80013b4:	200000f4 	.word	0x200000f4
 80013b8:	0800ade4 	.word	0x0800ade4
 80013bc:	0800adf4 	.word	0x0800adf4
 80013c0:	0800ae10 	.word	0x0800ae10
 80013c4:	200000e0 	.word	0x200000e0
 80013c8:	0800ae2c 	.word	0x0800ae2c
 80013cc:	0800ae40 	.word	0x0800ae40
 80013d0:	0800ae58 	.word	0x0800ae58
 80013d4:	0800ae70 	.word	0x0800ae70
 80013d8:	0800ae88 	.word	0x0800ae88
 80013dc:	0800ae9c 	.word	0x0800ae9c
 80013e0:	0800af9c 	.word	0x0800af9c
 80013e4:	20000001 	.word	0x20000001
 80013e8:	20000370 	.word	0x20000370
 80013ec:	200001b4 	.word	0x200001b4
 80013f0:	200003a4 	.word	0x200003a4
 80013f4:	0800afd8 	.word	0x0800afd8
 80013f8:	20000380 	.word	0x20000380
 80013fc:	0800b000 	.word	0x0800b000
 8001400:	19f25968 	.word	0x19f25968
 8001404:	0800aefc 	.word	0x0800aefc
 8001408:	080010b1 	.word	0x080010b1
 800140c:	0800af24 	.word	0x0800af24
 8001410:	48000400 	.word	0x48000400
 8001414:	0007a120 	.word	0x0007a120

08001418 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800141c:	b672      	cpsid	i
}
 800141e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001420:	e7fe      	b.n	8001420 <Error_Handler+0x8>

08001422 <LL_AHB2_GRP1_EnableClock>:
{
 8001422:	b480      	push	{r7}
 8001424:	b085      	sub	sp, #20
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800142a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800142e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001430:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	4313      	orrs	r3, r2
 8001438:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800143a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800143e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4013      	ands	r3, r2
 8001444:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001446:	68fb      	ldr	r3, [r7, #12]
}
 8001448:	bf00      	nop
 800144a:	3714      	adds	r7, #20
 800144c:	46bd      	mov	sp, r7
 800144e:	bc80      	pop	{r7}
 8001450:	4770      	bx	lr

08001452 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001452:	b480      	push	{r7}
 8001454:	b085      	sub	sp, #20
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800145a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800145e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001460:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4313      	orrs	r3, r2
 8001468:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800146a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800146e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	4013      	ands	r3, r2
 8001474:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001476:	68fb      	ldr	r3, [r7, #12]
}
 8001478:	bf00      	nop
 800147a:	3714      	adds	r7, #20
 800147c:	46bd      	mov	sp, r7
 800147e:	bc80      	pop	{r7}
 8001480:	4770      	bx	lr

08001482 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001482:	b480      	push	{r7}
 8001484:	b085      	sub	sp, #20
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800148a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800148e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001490:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4313      	orrs	r3, r2
 8001498:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800149a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800149e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4013      	ands	r3, r2
 80014a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014a6:	68fb      	ldr	r3, [r7, #12]
}
 80014a8:	bf00      	nop
 80014aa:	3714      	adds	r7, #20
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bc80      	pop	{r7}
 80014b0:	4770      	bx	lr

080014b2 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 80014b2:	b480      	push	{r7}
 80014b4:	b085      	sub	sp, #20
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 80014ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014be:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80014c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 80014ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014ce:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	4013      	ands	r3, r2
 80014d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014d6:	68fb      	ldr	r3, [r7, #12]
}
 80014d8:	bf00      	nop
 80014da:	3714      	adds	r7, #20
 80014dc:	46bd      	mov	sp, r7
 80014de:	bc80      	pop	{r7}
 80014e0:	4770      	bx	lr

080014e2 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014e2:	b480      	push	{r7}
 80014e4:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014e6:	bf00      	nop
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bc80      	pop	{r7}
 80014ec:	4770      	bx	lr

080014ee <HAL_SUBGHZ_MspInit>:
* This function configures the hardware resources used in this example
* @param hsubghz: SUBGHZ handle pointer
* @retval None
*/
void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* hsubghz)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b082      	sub	sp, #8
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 80014f6:	2001      	movs	r0, #1
 80014f8:	f7ff ffdb 	bl	80014b2 <LL_APB3_GRP1_EnableClock>
    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80014fc:	2200      	movs	r2, #0
 80014fe:	2100      	movs	r1, #0
 8001500:	2032      	movs	r0, #50	; 0x32
 8001502:	f000 fb88 	bl	8001c16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001506:	2032      	movs	r0, #50	; 0x32
 8001508:	f000 fb9f 	bl	8001c4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */

}
 800150c:	bf00      	nop
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a0d      	ldr	r2, [pc, #52]	; (8001558 <HAL_TIM_Base_MspInit+0x44>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d10c      	bne.n	8001540 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001526:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800152a:	f7ff ffaa 	bl	8001482 <LL_APB2_GRP1_EnableClock>
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800152e:	2200      	movs	r2, #0
 8001530:	2100      	movs	r1, #0
 8001532:	2018      	movs	r0, #24
 8001534:	f000 fb6f 	bl	8001c16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001538:	2018      	movs	r0, #24
 800153a:	f000 fb86 	bl	8001c4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800153e:	e007      	b.n	8001550 <HAL_TIM_Base_MspInit+0x3c>
  else if(htim_base->Instance==TIM2)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001548:	d102      	bne.n	8001550 <HAL_TIM_Base_MspInit+0x3c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800154a:	2001      	movs	r0, #1
 800154c:	f7ff ff81 	bl	8001452 <LL_APB1_GRP1_EnableClock>
}
 8001550:	bf00      	nop
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40012c00 	.word	0x40012c00

0800155c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b096      	sub	sp, #88	; 0x58
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001564:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]
 8001572:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001574:	f107 030c 	add.w	r3, r7, #12
 8001578:	2238      	movs	r2, #56	; 0x38
 800157a:	2100      	movs	r1, #0
 800157c:	4618      	mov	r0, r3
 800157e:	f008 fe81 	bl	800a284 <memset>
  if(huart->Instance==USART2)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a4e      	ldr	r2, [pc, #312]	; (80016c0 <HAL_UART_MspInit+0x164>)
 8001588:	4293      	cmp	r3, r2
 800158a:	f040 8094 	bne.w	80016b6 <HAL_UART_MspInit+0x15a>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800158e:	2302      	movs	r3, #2
 8001590:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001592:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001596:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001598:	f107 030c 	add.w	r3, r7, #12
 800159c:	4618      	mov	r0, r3
 800159e:	f002 fa7d 	bl	8003a9c <HAL_RCCEx_PeriphCLKConfig>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80015a8:	f7ff ff36 	bl	8001418 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015ac:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80015b0:	f7ff ff4f 	bl	8001452 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b4:	2001      	movs	r0, #1
 80015b6:	f7ff ff34 	bl	8001422 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 80015ba:	230c      	movs	r3, #12
 80015bc:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015be:	2302      	movs	r3, #2
 80015c0:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c6:	2300      	movs	r3, #0
 80015c8:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015ca:	2307      	movs	r3, #7
 80015cc:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ce:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80015d2:	4619      	mov	r1, r3
 80015d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015d8:	f000 fed4 	bl	8002384 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 80015dc:	4b39      	ldr	r3, [pc, #228]	; (80016c4 <HAL_UART_MspInit+0x168>)
 80015de:	4a3a      	ldr	r2, [pc, #232]	; (80016c8 <HAL_UART_MspInit+0x16c>)
 80015e0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80015e2:	4b38      	ldr	r3, [pc, #224]	; (80016c4 <HAL_UART_MspInit+0x168>)
 80015e4:	2213      	movs	r2, #19
 80015e6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015e8:	4b36      	ldr	r3, [pc, #216]	; (80016c4 <HAL_UART_MspInit+0x168>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015ee:	4b35      	ldr	r3, [pc, #212]	; (80016c4 <HAL_UART_MspInit+0x168>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015f4:	4b33      	ldr	r3, [pc, #204]	; (80016c4 <HAL_UART_MspInit+0x168>)
 80015f6:	2280      	movs	r2, #128	; 0x80
 80015f8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015fa:	4b32      	ldr	r3, [pc, #200]	; (80016c4 <HAL_UART_MspInit+0x168>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001600:	4b30      	ldr	r3, [pc, #192]	; (80016c4 <HAL_UART_MspInit+0x168>)
 8001602:	2200      	movs	r2, #0
 8001604:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001606:	4b2f      	ldr	r3, [pc, #188]	; (80016c4 <HAL_UART_MspInit+0x168>)
 8001608:	2200      	movs	r2, #0
 800160a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800160c:	4b2d      	ldr	r3, [pc, #180]	; (80016c4 <HAL_UART_MspInit+0x168>)
 800160e:	2200      	movs	r2, #0
 8001610:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001612:	482c      	ldr	r0, [pc, #176]	; (80016c4 <HAL_UART_MspInit+0x168>)
 8001614:	f000 fb34 	bl	8001c80 <HAL_DMA_Init>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 800161e:	f7ff fefb 	bl	8001418 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001622:	2110      	movs	r1, #16
 8001624:	4827      	ldr	r0, [pc, #156]	; (80016c4 <HAL_UART_MspInit+0x168>)
 8001626:	f000 fdd5 	bl	80021d4 <HAL_DMA_ConfigChannelAttributes>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <HAL_UART_MspInit+0xd8>
    {
      Error_Handler();
 8001630:	f7ff fef2 	bl	8001418 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4a23      	ldr	r2, [pc, #140]	; (80016c4 <HAL_UART_MspInit+0x168>)
 8001638:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800163c:	4a21      	ldr	r2, [pc, #132]	; (80016c4 <HAL_UART_MspInit+0x168>)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8001642:	4b22      	ldr	r3, [pc, #136]	; (80016cc <HAL_UART_MspInit+0x170>)
 8001644:	4a22      	ldr	r2, [pc, #136]	; (80016d0 <HAL_UART_MspInit+0x174>)
 8001646:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001648:	4b20      	ldr	r3, [pc, #128]	; (80016cc <HAL_UART_MspInit+0x170>)
 800164a:	2214      	movs	r2, #20
 800164c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800164e:	4b1f      	ldr	r3, [pc, #124]	; (80016cc <HAL_UART_MspInit+0x170>)
 8001650:	2210      	movs	r2, #16
 8001652:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001654:	4b1d      	ldr	r3, [pc, #116]	; (80016cc <HAL_UART_MspInit+0x170>)
 8001656:	2200      	movs	r2, #0
 8001658:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800165a:	4b1c      	ldr	r3, [pc, #112]	; (80016cc <HAL_UART_MspInit+0x170>)
 800165c:	2280      	movs	r2, #128	; 0x80
 800165e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001660:	4b1a      	ldr	r3, [pc, #104]	; (80016cc <HAL_UART_MspInit+0x170>)
 8001662:	2200      	movs	r2, #0
 8001664:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001666:	4b19      	ldr	r3, [pc, #100]	; (80016cc <HAL_UART_MspInit+0x170>)
 8001668:	2200      	movs	r2, #0
 800166a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800166c:	4b17      	ldr	r3, [pc, #92]	; (80016cc <HAL_UART_MspInit+0x170>)
 800166e:	2200      	movs	r2, #0
 8001670:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001672:	4b16      	ldr	r3, [pc, #88]	; (80016cc <HAL_UART_MspInit+0x170>)
 8001674:	2200      	movs	r2, #0
 8001676:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001678:	4814      	ldr	r0, [pc, #80]	; (80016cc <HAL_UART_MspInit+0x170>)
 800167a:	f000 fb01 	bl	8001c80 <HAL_DMA_Init>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8001684:	f7ff fec8 	bl	8001418 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001688:	2110      	movs	r1, #16
 800168a:	4810      	ldr	r0, [pc, #64]	; (80016cc <HAL_UART_MspInit+0x170>)
 800168c:	f000 fda2 	bl	80021d4 <HAL_DMA_ConfigChannelAttributes>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <HAL_UART_MspInit+0x13e>
    {
      Error_Handler();
 8001696:	f7ff febf 	bl	8001418 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a0b      	ldr	r2, [pc, #44]	; (80016cc <HAL_UART_MspInit+0x170>)
 800169e:	67da      	str	r2, [r3, #124]	; 0x7c
 80016a0:	4a0a      	ldr	r2, [pc, #40]	; (80016cc <HAL_UART_MspInit+0x170>)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80016a6:	2200      	movs	r2, #0
 80016a8:	2100      	movs	r1, #0
 80016aa:	2025      	movs	r0, #37	; 0x25
 80016ac:	f000 fab3 	bl	8001c16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80016b0:	2025      	movs	r0, #37	; 0x25
 80016b2:	f000 faca 	bl	8001c4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016b6:	bf00      	nop
 80016b8:	3758      	adds	r7, #88	; 0x58
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40004400 	.word	0x40004400
 80016c4:	20000248 	.word	0x20000248
 80016c8:	40020008 	.word	0x40020008
 80016cc:	200002a8 	.word	0x200002a8
 80016d0:	4002001c 	.word	0x4002001c

080016d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016d8:	e7fe      	b.n	80016d8 <NMI_Handler+0x4>

080016da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016da:	b480      	push	{r7}
 80016dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016de:	e7fe      	b.n	80016de <HardFault_Handler+0x4>

080016e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016e4:	e7fe      	b.n	80016e4 <MemManage_Handler+0x4>

080016e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016e6:	b480      	push	{r7}
 80016e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ea:	e7fe      	b.n	80016ea <BusFault_Handler+0x4>

080016ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016f0:	e7fe      	b.n	80016f0 <UsageFault_Handler+0x4>

080016f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016f2:	b480      	push	{r7}
 80016f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bc80      	pop	{r7}
 80016fc:	4770      	bx	lr

080016fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016fe:	b480      	push	{r7}
 8001700:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	46bd      	mov	sp, r7
 8001706:	bc80      	pop	{r7}
 8001708:	4770      	bx	lr

0800170a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800170a:	b480      	push	{r7}
 800170c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	46bd      	mov	sp, r7
 8001712:	bc80      	pop	{r7}
 8001714:	4770      	bx	lr

08001716 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800171a:	f000 f993 	bl	8001a44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
	...

08001724 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001728:	4802      	ldr	r0, [pc, #8]	; (8001734 <DMA1_Channel1_IRQHandler+0x10>)
 800172a:	f000 fc8d 	bl	8002048 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	20000248 	.word	0x20000248

08001738 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 2 Interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800173c:	4802      	ldr	r0, [pc, #8]	; (8001748 <DMA1_Channel2_IRQHandler+0x10>)
 800173e:	f000 fc83 	bl	8002048 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	200002a8 	.word	0x200002a8

0800174c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update Interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001750:	4802      	ldr	r0, [pc, #8]	; (800175c <TIM1_UP_IRQHandler+0x10>)
 8001752:	f003 f813 	bl	800477c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	2000011c 	.word	0x2000011c

08001760 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001764:	4802      	ldr	r0, [pc, #8]	; (8001770 <USART2_IRQHandler+0x10>)
 8001766:	f003 fcd5 	bl	8005114 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	200001b4 	.word	0x200001b4

08001774 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001778:	4802      	ldr	r0, [pc, #8]	; (8001784 <SUBGHZ_Radio_IRQHandler+0x10>)
 800177a:	f002 fdc5 	bl	8004308 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20000110 	.word	0x20000110

08001788 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	bc80      	pop	{r7}
 8001792:	4770      	bx	lr

08001794 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800179a:	2300      	movs	r3, #0
 800179c:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 800179e:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <HAL_GetTick+0x24>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d002      	beq.n	80017ac <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 80017a6:	f000 f892 	bl	80018ce <TIMER_IF_GetTimerValue>
 80017aa:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 80017ac:	687b      	ldr	r3, [r7, #4]
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	200003a5 	.word	0x200003a5

080017bc <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f000 f8af 	bl	800192a <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 80017cc:	bf00      	nop
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017dc:	4a14      	ldr	r2, [pc, #80]	; (8001830 <_sbrk+0x5c>)
 80017de:	4b15      	ldr	r3, [pc, #84]	; (8001834 <_sbrk+0x60>)
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017e8:	4b13      	ldr	r3, [pc, #76]	; (8001838 <_sbrk+0x64>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d102      	bne.n	80017f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017f0:	4b11      	ldr	r3, [pc, #68]	; (8001838 <_sbrk+0x64>)
 80017f2:	4a12      	ldr	r2, [pc, #72]	; (800183c <_sbrk+0x68>)
 80017f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017f6:	4b10      	ldr	r3, [pc, #64]	; (8001838 <_sbrk+0x64>)
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4413      	add	r3, r2
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	429a      	cmp	r2, r3
 8001802:	d207      	bcs.n	8001814 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001804:	f008 fd46 	bl	800a294 <__errno>
 8001808:	4603      	mov	r3, r0
 800180a:	220c      	movs	r2, #12
 800180c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800180e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001812:	e009      	b.n	8001828 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001814:	4b08      	ldr	r3, [pc, #32]	; (8001838 <_sbrk+0x64>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800181a:	4b07      	ldr	r3, [pc, #28]	; (8001838 <_sbrk+0x64>)
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4413      	add	r3, r2
 8001822:	4a05      	ldr	r2, [pc, #20]	; (8001838 <_sbrk+0x64>)
 8001824:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001826:	68fb      	ldr	r3, [r7, #12]
}
 8001828:	4618      	mov	r0, r3
 800182a:	3718      	adds	r7, #24
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	20010000 	.word	0x20010000
 8001834:	00000400 	.word	0x00000400
 8001838:	200003a8 	.word	0x200003a8
 800183c:	200006c0 	.word	0x200006c0

08001840 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	bc80      	pop	{r7}
 800184a:	4770      	bx	lr

0800184c <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001852:	2300      	movs	r3, #0
 8001854:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  return ret;
 8001856:	79fb      	ldrb	r3, [r7, #7]
}
 8001858:	4618      	mov	r0, r3
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	bc80      	pop	{r7}
 8001860:	4770      	bx	lr

08001862 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8001862:	b480      	push	{r7}
 8001864:	b085      	sub	sp, #20
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 800186a:	2300      	movs	r3, #0
 800186c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  return ret;
 800186e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001870:	4618      	mov	r0, r3
 8001872:	3714      	adds	r7, #20
 8001874:	46bd      	mov	sp, r7
 8001876:	bc80      	pop	{r7}
 8001878:	4770      	bx	lr

0800187a <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 800187a:	b480      	push	{r7}
 800187c:	b083      	sub	sp, #12
 800187e:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001880:	2300      	movs	r3, #0
 8001882:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  return ret;
 8001884:	79fb      	ldrb	r3, [r7, #7]
}
 8001886:	4618      	mov	r0, r3
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	bc80      	pop	{r7}
 800188e:	4770      	bx	lr

08001890 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_SetTimerContext */

  /* USER CODE END TIMER_IF_SetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 8001894:	4b02      	ldr	r3, [pc, #8]	; (80018a0 <TIMER_IF_SetTimerContext+0x10>)
 8001896:	681b      	ldr	r3, [r3, #0]
}
 8001898:	4618      	mov	r0, r3
 800189a:	46bd      	mov	sp, r7
 800189c:	bc80      	pop	{r7}
 800189e:	4770      	bx	lr
 80018a0:	200003ac 	.word	0x200003ac

080018a4 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_GetTimerContext */

  /* USER CODE END TIMER_IF_GetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 80018a8:	4b02      	ldr	r3, [pc, #8]	; (80018b4 <TIMER_IF_GetTimerContext+0x10>)
 80018aa:	681b      	ldr	r3, [r3, #0]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bc80      	pop	{r7}
 80018b2:	4770      	bx	lr
 80018b4:	200003ac 	.word	0x200003ac

080018b8 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80018be:	2300      	movs	r3, #0
 80018c0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  return ret;
 80018c2:	687b      	ldr	r3, [r7, #4]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bc80      	pop	{r7}
 80018cc:	4770      	bx	lr

080018ce <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 80018ce:	b480      	push	{r7}
 80018d0:	b083      	sub	sp, #12
 80018d2:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80018d4:	2300      	movs	r3, #0
 80018d6:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  return ret;
 80018d8:	687b      	ldr	r3, [r7, #4]
}
 80018da:	4618      	mov	r0, r3
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr

080018e4 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80018ea:	2300      	movs	r3, #0
 80018ec:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  return ret;
 80018ee:	687b      	ldr	r3, [r7, #4]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bc80      	pop	{r7}
 80018f8:	4770      	bx	lr

080018fa <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 80018fa:	b480      	push	{r7}
 80018fc:	b085      	sub	sp, #20
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8001902:	2300      	movs	r3, #0
 8001904:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  return ret;
 8001906:	68fb      	ldr	r3, [r7, #12]
}
 8001908:	4618      	mov	r0, r3
 800190a:	3714      	adds	r7, #20
 800190c:	46bd      	mov	sp, r7
 800190e:	bc80      	pop	{r7}
 8001910:	4770      	bx	lr

08001912 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8001912:	b480      	push	{r7}
 8001914:	b085      	sub	sp, #20
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 800191a:	2300      	movs	r3, #0
 800191c:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  return ret;
 800191e:	68fb      	ldr	r3, [r7, #12]
}
 8001920:	4618      	mov	r0, r3
 8001922:	3714      	adds	r7, #20
 8001924:	46bd      	mov	sp, r7
 8001926:	bc80      	pop	{r7}
 8001928:	4770      	bx	lr

0800192a <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 800192a:	b480      	push	{r7}
 800192c:	b083      	sub	sp, #12
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
}
 8001932:	bf00      	nop
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	bc80      	pop	{r7}
 800193a:	4770      	bx	lr

0800193c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800193c:	480d      	ldr	r0, [pc, #52]	; (8001974 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800193e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001940:	f7ff ff7e 	bl	8001840 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001944:	480c      	ldr	r0, [pc, #48]	; (8001978 <LoopForever+0x6>)
  ldr r1, =_edata
 8001946:	490d      	ldr	r1, [pc, #52]	; (800197c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001948:	4a0d      	ldr	r2, [pc, #52]	; (8001980 <LoopForever+0xe>)
  movs r3, #0
 800194a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800194c:	e002      	b.n	8001954 <LoopCopyDataInit>

0800194e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800194e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001950:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001952:	3304      	adds	r3, #4

08001954 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001954:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001956:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001958:	d3f9      	bcc.n	800194e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800195a:	4a0a      	ldr	r2, [pc, #40]	; (8001984 <LoopForever+0x12>)
  ldr r4, =_ebss
 800195c:	4c0a      	ldr	r4, [pc, #40]	; (8001988 <LoopForever+0x16>)
  movs r3, #0
 800195e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001960:	e001      	b.n	8001966 <LoopFillZerobss>

08001962 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001962:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001964:	3204      	adds	r2, #4

08001966 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001966:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001968:	d3fb      	bcc.n	8001962 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800196a:	f008 fc99 	bl	800a2a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800196e:	f7fe ff81 	bl	8000874 <main>

08001972 <LoopForever>:

LoopForever:
    b LoopForever
 8001972:	e7fe      	b.n	8001972 <LoopForever>
  ldr   r0, =_estack
 8001974:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001978:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800197c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001980:	0800b2c0 	.word	0x0800b2c0
  ldr r2, =_sbss
 8001984:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001988:	200006bc 	.word	0x200006bc

0800198c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800198c:	e7fe      	b.n	800198c <ADC_IRQHandler>
	...

08001990 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001996:	2300      	movs	r3, #0
 8001998:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800199a:	2003      	movs	r0, #3
 800199c:	f000 f930 	bl	8001c00 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80019a0:	f001 fe9e 	bl	80036e0 <HAL_RCC_GetHCLKFreq>
 80019a4:	4603      	mov	r3, r0
 80019a6:	4a09      	ldr	r2, [pc, #36]	; (80019cc <HAL_Init+0x3c>)
 80019a8:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019aa:	2000      	movs	r0, #0
 80019ac:	f000 f810 	bl	80019d0 <HAL_InitTick>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d002      	beq.n	80019bc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	71fb      	strb	r3, [r7, #7]
 80019ba:	e001      	b.n	80019c0 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019bc:	f7ff fd91 	bl	80014e2 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019c0:	79fb      	ldrb	r3, [r7, #7]
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20000004 	.word	0x20000004

080019d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019d8:	2300      	movs	r3, #0
 80019da:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80019dc:	4b17      	ldr	r3, [pc, #92]	; (8001a3c <HAL_InitTick+0x6c>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d024      	beq.n	8001a2e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80019e4:	f001 fe7c 	bl	80036e0 <HAL_RCC_GetHCLKFreq>
 80019e8:	4602      	mov	r2, r0
 80019ea:	4b14      	ldr	r3, [pc, #80]	; (8001a3c <HAL_InitTick+0x6c>)
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	4619      	mov	r1, r3
 80019f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019f4:	fbb3 f3f1 	udiv	r3, r3, r1
 80019f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80019fc:	4618      	mov	r0, r3
 80019fe:	f000 f932 	bl	8001c66 <HAL_SYSTICK_Config>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d10f      	bne.n	8001a28 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2b0f      	cmp	r3, #15
 8001a0c:	d809      	bhi.n	8001a22 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a0e:	2200      	movs	r2, #0
 8001a10:	6879      	ldr	r1, [r7, #4]
 8001a12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a16:	f000 f8fe 	bl	8001c16 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a1a:	4a09      	ldr	r2, [pc, #36]	; (8001a40 <HAL_InitTick+0x70>)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6013      	str	r3, [r2, #0]
 8001a20:	e007      	b.n	8001a32 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	73fb      	strb	r3, [r7, #15]
 8001a26:	e004      	b.n	8001a32 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	73fb      	strb	r3, [r7, #15]
 8001a2c:	e001      	b.n	8001a32 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3710      	adds	r7, #16
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	2000000c 	.word	0x2000000c
 8001a40:	20000008 	.word	0x20000008

08001a44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a48:	4b05      	ldr	r3, [pc, #20]	; (8001a60 <HAL_IncTick+0x1c>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	4b05      	ldr	r3, [pc, #20]	; (8001a64 <HAL_IncTick+0x20>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4413      	add	r3, r2
 8001a54:	4a03      	ldr	r2, [pc, #12]	; (8001a64 <HAL_IncTick+0x20>)
 8001a56:	6013      	str	r3, [r2, #0]
}
 8001a58:	bf00      	nop
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bc80      	pop	{r7}
 8001a5e:	4770      	bx	lr
 8001a60:	2000000c 	.word	0x2000000c
 8001a64:	200003b0 	.word	0x200003b0

08001a68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f003 0307 	and.w	r3, r3, #7
 8001a76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a78:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <__NVIC_SetPriorityGrouping+0x44>)
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a7e:	68ba      	ldr	r2, [r7, #8]
 8001a80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a84:	4013      	ands	r3, r2
 8001a86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a9a:	4a04      	ldr	r2, [pc, #16]	; (8001aac <__NVIC_SetPriorityGrouping+0x44>)
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	60d3      	str	r3, [r2, #12]
}
 8001aa0:	bf00      	nop
 8001aa2:	3714      	adds	r7, #20
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bc80      	pop	{r7}
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ab4:	4b04      	ldr	r3, [pc, #16]	; (8001ac8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	0a1b      	lsrs	r3, r3, #8
 8001aba:	f003 0307 	and.w	r3, r3, #7
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bc80      	pop	{r7}
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	e000ed00 	.word	0xe000ed00

08001acc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	db0b      	blt.n	8001af6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ade:	79fb      	ldrb	r3, [r7, #7]
 8001ae0:	f003 021f 	and.w	r2, r3, #31
 8001ae4:	4906      	ldr	r1, [pc, #24]	; (8001b00 <__NVIC_EnableIRQ+0x34>)
 8001ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aea:	095b      	lsrs	r3, r3, #5
 8001aec:	2001      	movs	r0, #1
 8001aee:	fa00 f202 	lsl.w	r2, r0, r2
 8001af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bc80      	pop	{r7}
 8001afe:	4770      	bx	lr
 8001b00:	e000e100 	.word	0xe000e100

08001b04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	6039      	str	r1, [r7, #0]
 8001b0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	db0a      	blt.n	8001b2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	b2da      	uxtb	r2, r3
 8001b1c:	490c      	ldr	r1, [pc, #48]	; (8001b50 <__NVIC_SetPriority+0x4c>)
 8001b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b22:	0112      	lsls	r2, r2, #4
 8001b24:	b2d2      	uxtb	r2, r2
 8001b26:	440b      	add	r3, r1
 8001b28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b2c:	e00a      	b.n	8001b44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	b2da      	uxtb	r2, r3
 8001b32:	4908      	ldr	r1, [pc, #32]	; (8001b54 <__NVIC_SetPriority+0x50>)
 8001b34:	79fb      	ldrb	r3, [r7, #7]
 8001b36:	f003 030f 	and.w	r3, r3, #15
 8001b3a:	3b04      	subs	r3, #4
 8001b3c:	0112      	lsls	r2, r2, #4
 8001b3e:	b2d2      	uxtb	r2, r2
 8001b40:	440b      	add	r3, r1
 8001b42:	761a      	strb	r2, [r3, #24]
}
 8001b44:	bf00      	nop
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bc80      	pop	{r7}
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	e000e100 	.word	0xe000e100
 8001b54:	e000ed00 	.word	0xe000ed00

08001b58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b089      	sub	sp, #36	; 0x24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f003 0307 	and.w	r3, r3, #7
 8001b6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	f1c3 0307 	rsb	r3, r3, #7
 8001b72:	2b04      	cmp	r3, #4
 8001b74:	bf28      	it	cs
 8001b76:	2304      	movcs	r3, #4
 8001b78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	3304      	adds	r3, #4
 8001b7e:	2b06      	cmp	r3, #6
 8001b80:	d902      	bls.n	8001b88 <NVIC_EncodePriority+0x30>
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	3b03      	subs	r3, #3
 8001b86:	e000      	b.n	8001b8a <NVIC_EncodePriority+0x32>
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	43da      	mvns	r2, r3
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	401a      	ands	r2, r3
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ba0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8001baa:	43d9      	mvns	r1, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb0:	4313      	orrs	r3, r2
         );
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3724      	adds	r7, #36	; 0x24
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bc80      	pop	{r7}
 8001bba:	4770      	bx	lr

08001bbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bcc:	d301      	bcc.n	8001bd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e00f      	b.n	8001bf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bd2:	4a0a      	ldr	r2, [pc, #40]	; (8001bfc <SysTick_Config+0x40>)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bda:	210f      	movs	r1, #15
 8001bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001be0:	f7ff ff90 	bl	8001b04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001be4:	4b05      	ldr	r3, [pc, #20]	; (8001bfc <SysTick_Config+0x40>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bea:	4b04      	ldr	r3, [pc, #16]	; (8001bfc <SysTick_Config+0x40>)
 8001bec:	2207      	movs	r2, #7
 8001bee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	e000e010 	.word	0xe000e010

08001c00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f7ff ff2d 	bl	8001a68 <__NVIC_SetPriorityGrouping>
}
 8001c0e:	bf00      	nop
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b086      	sub	sp, #24
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	60b9      	str	r1, [r7, #8]
 8001c20:	607a      	str	r2, [r7, #4]
 8001c22:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c24:	f7ff ff44 	bl	8001ab0 <__NVIC_GetPriorityGrouping>
 8001c28:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	68b9      	ldr	r1, [r7, #8]
 8001c2e:	6978      	ldr	r0, [r7, #20]
 8001c30:	f7ff ff92 	bl	8001b58 <NVIC_EncodePriority>
 8001c34:	4602      	mov	r2, r0
 8001c36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c3a:	4611      	mov	r1, r2
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff ff61 	bl	8001b04 <__NVIC_SetPriority>
}
 8001c42:	bf00      	nop
 8001c44:	3718      	adds	r7, #24
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b082      	sub	sp, #8
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	4603      	mov	r3, r0
 8001c52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff ff37 	bl	8001acc <__NVIC_EnableIRQ>
}
 8001c5e:	bf00      	nop
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b082      	sub	sp, #8
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f7ff ffa4 	bl	8001bbc <SysTick_Config>
 8001c74:	4603      	mov	r3, r0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
	...

08001c80 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d101      	bne.n	8001c92 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e08e      	b.n	8001db0 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	461a      	mov	r2, r3
 8001c98:	4b47      	ldr	r3, [pc, #284]	; (8001db8 <HAL_DMA_Init+0x138>)
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d80f      	bhi.n	8001cbe <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	4b45      	ldr	r3, [pc, #276]	; (8001dbc <HAL_DMA_Init+0x13c>)
 8001ca6:	4413      	add	r3, r2
 8001ca8:	4a45      	ldr	r2, [pc, #276]	; (8001dc0 <HAL_DMA_Init+0x140>)
 8001caa:	fba2 2303 	umull	r2, r3, r2, r3
 8001cae:	091b      	lsrs	r3, r3, #4
 8001cb0:	009a      	lsls	r2, r3, #2
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a42      	ldr	r2, [pc, #264]	; (8001dc4 <HAL_DMA_Init+0x144>)
 8001cba:	641a      	str	r2, [r3, #64]	; 0x40
 8001cbc:	e00e      	b.n	8001cdc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	4b40      	ldr	r3, [pc, #256]	; (8001dc8 <HAL_DMA_Init+0x148>)
 8001cc6:	4413      	add	r3, r2
 8001cc8:	4a3d      	ldr	r2, [pc, #244]	; (8001dc0 <HAL_DMA_Init+0x140>)
 8001cca:	fba2 2303 	umull	r2, r3, r2, r3
 8001cce:	091b      	lsrs	r3, r3, #4
 8001cd0:	009a      	lsls	r2, r3, #2
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a3c      	ldr	r2, [pc, #240]	; (8001dcc <HAL_DMA_Init+0x14c>)
 8001cda:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2202      	movs	r2, #2
 8001ce0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	6812      	ldr	r2, [r2, #0]
 8001cee:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cf6:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	6819      	ldr	r1, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	689a      	ldr	r2, [r3, #8]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	431a      	orrs	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	691b      	ldr	r3, [r3, #16]
 8001d0c:	431a      	orrs	r2, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	695b      	ldr	r3, [r3, #20]
 8001d12:	431a      	orrs	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	431a      	orrs	r2, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	431a      	orrs	r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a1b      	ldr	r3, [r3, #32]
 8001d24:	431a      	orrs	r2, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 fabc 	bl	80022ac <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d3c:	d102      	bne.n	8001d44 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685a      	ldr	r2, [r3, #4]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d4c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d50:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001d5a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d010      	beq.n	8001d86 <HAL_DMA_Init+0x106>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	2b04      	cmp	r3, #4
 8001d6a:	d80c      	bhi.n	8001d86 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f000 fae5 	bl	800233c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d76:	2200      	movs	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001d82:	605a      	str	r2, [r3, #4]
 8001d84:	e008      	b.n	8001d98 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2201      	movs	r2, #1
 8001da2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001dae:	2300      	movs	r3, #0
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3708      	adds	r7, #8
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40020407 	.word	0x40020407
 8001dbc:	bffdfff8 	.word	0xbffdfff8
 8001dc0:	cccccccd 	.word	0xcccccccd
 8001dc4:	40020000 	.word	0x40020000
 8001dc8:	bffdfbf8 	.word	0xbffdfbf8
 8001dcc:	40020400 	.word	0x40020400

08001dd0 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
 8001ddc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001dde:	2300      	movs	r3, #0
 8001de0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d101      	bne.n	8001df0 <HAL_DMA_Start_IT+0x20>
 8001dec:	2302      	movs	r3, #2
 8001dee:	e069      	b.n	8001ec4 <HAL_DMA_Start_IT+0xf4>
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d155      	bne.n	8001eb0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2202      	movs	r2, #2
 8001e08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f022 0201 	bic.w	r2, r2, #1
 8001e20:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	68b9      	ldr	r1, [r7, #8]
 8001e28:	68f8      	ldr	r0, [r7, #12]
 8001e2a:	f000 fa02 	bl	8002232 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d008      	beq.n	8001e48 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f042 020e 	orr.w	r2, r2, #14
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	e00f      	b.n	8001e68 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f022 0204 	bic.w	r2, r2, #4
 8001e56:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f042 020a 	orr.w	r2, r2, #10
 8001e66:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d007      	beq.n	8001e86 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e84:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d007      	beq.n	8001e9e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e9c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f042 0201 	orr.w	r2, r2, #1
 8001eac:	601a      	str	r2, [r3, #0]
 8001eae:	e008      	b.n	8001ec2 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2280      	movs	r2, #128	; 0x80
 8001eb4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001ec2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3718      	adds	r7, #24
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d101      	bne.n	8001ede <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e04f      	b.n	8001f7e <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d008      	beq.n	8001efc <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2204      	movs	r2, #4
 8001eee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e040      	b.n	8001f7e <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f022 020e 	bic.w	r2, r2, #14
 8001f0a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f16:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f1a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f022 0201 	bic.w	r2, r2, #1
 8001f2a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f30:	f003 021c 	and.w	r2, r3, #28
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f38:	2101      	movs	r1, #1
 8001f3a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f3e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001f48:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d00c      	beq.n	8001f6c <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f60:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001f6a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bc80      	pop	{r7}
 8001f86:	4770      	bx	lr

08001f88 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f90:	2300      	movs	r3, #0
 8001f92:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d005      	beq.n	8001fac <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2204      	movs	r2, #4
 8001fa4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	73fb      	strb	r3, [r7, #15]
 8001faa:	e047      	b.n	800203c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f022 020e 	bic.w	r2, r2, #14
 8001fba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f022 0201 	bic.w	r2, r2, #1
 8001fca:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fd6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fda:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe0:	f003 021c 	and.w	r2, r3, #28
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe8:	2101      	movs	r1, #1
 8001fea:	fa01 f202 	lsl.w	r2, r1, r2
 8001fee:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001ff8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d00c      	beq.n	800201c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800200c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002010:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800201a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002030:	2b00      	cmp	r3, #0
 8002032:	d003      	beq.n	800203c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	4798      	blx	r3
    }
  }
  return status;
 800203c:	7bfb      	ldrb	r3, [r7, #15]
}
 800203e:	4618      	mov	r0, r3
 8002040:	3710      	adds	r7, #16
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
	...

08002048 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002064:	f003 031c 	and.w	r3, r3, #28
 8002068:	2204      	movs	r2, #4
 800206a:	409a      	lsls	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	4013      	ands	r3, r2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d027      	beq.n	80020c4 <HAL_DMA_IRQHandler+0x7c>
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	f003 0304 	and.w	r3, r3, #4
 800207a:	2b00      	cmp	r3, #0
 800207c:	d022      	beq.n	80020c4 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0320 	and.w	r3, r3, #32
 8002088:	2b00      	cmp	r3, #0
 800208a:	d107      	bne.n	800209c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f022 0204 	bic.w	r2, r2, #4
 800209a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a0:	f003 021c 	and.w	r2, r3, #28
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a8:	2104      	movs	r1, #4
 80020aa:	fa01 f202 	lsl.w	r2, r1, r2
 80020ae:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f000 8081 	beq.w	80021bc <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80020c2:	e07b      	b.n	80021bc <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c8:	f003 031c 	and.w	r3, r3, #28
 80020cc:	2202      	movs	r2, #2
 80020ce:	409a      	lsls	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	4013      	ands	r3, r2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d03d      	beq.n	8002154 <HAL_DMA_IRQHandler+0x10c>
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d038      	beq.n	8002154 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0320 	and.w	r3, r3, #32
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d10b      	bne.n	8002108 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f022 020a 	bic.w	r2, r2, #10
 80020fe:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	461a      	mov	r2, r3
 800210e:	4b2e      	ldr	r3, [pc, #184]	; (80021c8 <HAL_DMA_IRQHandler+0x180>)
 8002110:	429a      	cmp	r2, r3
 8002112:	d909      	bls.n	8002128 <HAL_DMA_IRQHandler+0xe0>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002118:	f003 031c 	and.w	r3, r3, #28
 800211c:	4a2b      	ldr	r2, [pc, #172]	; (80021cc <HAL_DMA_IRQHandler+0x184>)
 800211e:	2102      	movs	r1, #2
 8002120:	fa01 f303 	lsl.w	r3, r1, r3
 8002124:	6053      	str	r3, [r2, #4]
 8002126:	e008      	b.n	800213a <HAL_DMA_IRQHandler+0xf2>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212c:	f003 031c 	and.w	r3, r3, #28
 8002130:	4a27      	ldr	r2, [pc, #156]	; (80021d0 <HAL_DMA_IRQHandler+0x188>)
 8002132:	2102      	movs	r1, #2
 8002134:	fa01 f303 	lsl.w	r3, r1, r3
 8002138:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002146:	2b00      	cmp	r3, #0
 8002148:	d038      	beq.n	80021bc <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8002152:	e033      	b.n	80021bc <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002158:	f003 031c 	and.w	r3, r3, #28
 800215c:	2208      	movs	r2, #8
 800215e:	409a      	lsls	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	4013      	ands	r3, r2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d02a      	beq.n	80021be <HAL_DMA_IRQHandler+0x176>
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	f003 0308 	and.w	r3, r3, #8
 800216e:	2b00      	cmp	r3, #0
 8002170:	d025      	beq.n	80021be <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f022 020e 	bic.w	r2, r2, #14
 8002180:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002186:	f003 021c 	and.w	r2, r3, #28
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	2101      	movs	r1, #1
 8002190:	fa01 f202 	lsl.w	r2, r1, r2
 8002194:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2201      	movs	r2, #1
 800219a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d004      	beq.n	80021be <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80021bc:	bf00      	nop
 80021be:	bf00      	nop
}
 80021c0:	3710      	adds	r7, #16
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40020080 	.word	0x40020080
 80021cc:	40020400 	.word	0x40020400
 80021d0:	40020000 	.word	0x40020000

080021d4 <HAL_DMA_ConfigChannelAttributes>:
  * @param ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *        This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021de:	2300      	movs	r3, #0
 80021e0:	72fb      	strb	r3, [r7, #11]
#if defined (CORE_CM0PLUS)
  uint32_t ccr_SECM;
#endif /* CORE_CM0PLUS */

  /* Check the DMA peripheral handle */
  if (hdma == NULL)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d103      	bne.n	80021f0 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	72fb      	strb	r3, [r7, #11]
    return status;
 80021ec:	7afb      	ldrb	r3, [r7, #11]
 80021ee:	e01b      	b.n	8002228 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	f003 0310 	and.w	r3, r3, #16
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00d      	beq.n	800221e <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d004      	beq.n	8002216 <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002212:	60fb      	str	r3, [r7, #12]
 8002214:	e003      	b.n	800221e <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800221c:	60fb      	str	r3, [r7, #12]
  }

#endif /* CORE_CM0PLUS */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	601a      	str	r2, [r3, #0]

  return status;
 8002226:	7afb      	ldrb	r3, [r7, #11]
}
 8002228:	4618      	mov	r0, r3
 800222a:	3714      	adds	r7, #20
 800222c:	46bd      	mov	sp, r7
 800222e:	bc80      	pop	{r7}
 8002230:	4770      	bx	lr

08002232 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002232:	b480      	push	{r7}
 8002234:	b085      	sub	sp, #20
 8002236:	af00      	add	r7, sp, #0
 8002238:	60f8      	str	r0, [r7, #12]
 800223a:	60b9      	str	r1, [r7, #8]
 800223c:	607a      	str	r2, [r7, #4]
 800223e:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002244:	68fa      	ldr	r2, [r7, #12]
 8002246:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002248:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800224e:	2b00      	cmp	r3, #0
 8002250:	d004      	beq.n	800225c <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800225a:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002260:	f003 021c 	and.w	r2, r3, #28
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002268:	2101      	movs	r1, #1
 800226a:	fa01 f202 	lsl.w	r2, r1, r2
 800226e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	683a      	ldr	r2, [r7, #0]
 8002276:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	2b10      	cmp	r3, #16
 800227e:	d108      	bne.n	8002292 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68ba      	ldr	r2, [r7, #8]
 800228e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002290:	e007      	b.n	80022a2 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68ba      	ldr	r2, [r7, #8]
 8002298:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	60da      	str	r2, [r3, #12]
}
 80022a2:	bf00      	nop
 80022a4:	3714      	adds	r7, #20
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bc80      	pop	{r7}
 80022aa:	4770      	bx	lr

080022ac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	461a      	mov	r2, r3
 80022ba:	4b1c      	ldr	r3, [pc, #112]	; (800232c <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 80022bc:	429a      	cmp	r2, r3
 80022be:	d813      	bhi.n	80022e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c4:	089b      	lsrs	r3, r3, #2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80022cc:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	3b08      	subs	r3, #8
 80022dc:	4a14      	ldr	r2, [pc, #80]	; (8002330 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80022de:	fba2 2303 	umull	r2, r3, r2, r3
 80022e2:	091b      	lsrs	r3, r3, #4
 80022e4:	60fb      	str	r3, [r7, #12]
 80022e6:	e011      	b.n	800230c <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ec:	089b      	lsrs	r3, r3, #2
 80022ee:	009a      	lsls	r2, r3, #2
 80022f0:	4b10      	ldr	r3, [pc, #64]	; (8002334 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 80022f2:	4413      	add	r3, r2
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	3b08      	subs	r3, #8
 8002300:	4a0b      	ldr	r2, [pc, #44]	; (8002330 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8002302:	fba2 2303 	umull	r2, r3, r2, r3
 8002306:	091b      	lsrs	r3, r3, #4
 8002308:	3307      	adds	r3, #7
 800230a:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4a0a      	ldr	r2, [pc, #40]	; (8002338 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8002310:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f003 031f 	and.w	r3, r3, #31
 8002318:	2201      	movs	r2, #1
 800231a:	409a      	lsls	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002320:	bf00      	nop
 8002322:	3714      	adds	r7, #20
 8002324:	46bd      	mov	sp, r7
 8002326:	bc80      	pop	{r7}
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	40020407 	.word	0x40020407
 8002330:	cccccccd 	.word	0xcccccccd
 8002334:	4002081c 	.word	0x4002081c
 8002338:	40020880 	.word	0x40020880

0800233c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800234c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800234e:	68fa      	ldr	r2, [r7, #12]
 8002350:	4b0a      	ldr	r3, [pc, #40]	; (800237c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002352:	4413      	add	r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	461a      	mov	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4a08      	ldr	r2, [pc, #32]	; (8002380 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002360:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	3b01      	subs	r3, #1
 8002366:	f003 0303 	and.w	r3, r3, #3
 800236a:	2201      	movs	r2, #1
 800236c:	409a      	lsls	r2, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002372:	bf00      	nop
 8002374:	3714      	adds	r7, #20
 8002376:	46bd      	mov	sp, r7
 8002378:	bc80      	pop	{r7}
 800237a:	4770      	bx	lr
 800237c:	1000823f 	.word	0x1000823f
 8002380:	40020940 	.word	0x40020940

08002384 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002384:	b480      	push	{r7}
 8002386:	b087      	sub	sp, #28
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800238e:	2300      	movs	r3, #0
 8002390:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002392:	e140      	b.n	8002616 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	2101      	movs	r1, #1
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	fa01 f303 	lsl.w	r3, r1, r3
 80023a0:	4013      	ands	r3, r2
 80023a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	f000 8132 	beq.w	8002610 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f003 0303 	and.w	r3, r3, #3
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d005      	beq.n	80023c4 <HAL_GPIO_Init+0x40>
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f003 0303 	and.w	r3, r3, #3
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d130      	bne.n	8002426 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	2203      	movs	r2, #3
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	43db      	mvns	r3, r3
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	4013      	ands	r3, r2
 80023da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	68da      	ldr	r2, [r3, #12]
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	005b      	lsls	r3, r3, #1
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	693a      	ldr	r2, [r7, #16]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023fa:	2201      	movs	r2, #1
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	43db      	mvns	r3, r3
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	4013      	ands	r3, r2
 8002408:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	091b      	lsrs	r3, r3, #4
 8002410:	f003 0201 	and.w	r2, r3, #1
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	4313      	orrs	r3, r2
 800241e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f003 0303 	and.w	r3, r3, #3
 800242e:	2b03      	cmp	r3, #3
 8002430:	d017      	beq.n	8002462 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	2203      	movs	r2, #3
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	43db      	mvns	r3, r3
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	4013      	ands	r3, r2
 8002448:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	689a      	ldr	r2, [r3, #8]
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	4313      	orrs	r3, r2
 800245a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f003 0303 	and.w	r3, r3, #3
 800246a:	2b02      	cmp	r3, #2
 800246c:	d123      	bne.n	80024b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	08da      	lsrs	r2, r3, #3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	3208      	adds	r2, #8
 8002476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800247a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	f003 0307 	and.w	r3, r3, #7
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	220f      	movs	r2, #15
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	43db      	mvns	r3, r3
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	4013      	ands	r3, r2
 8002490:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	691a      	ldr	r2, [r3, #16]
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	f003 0307 	and.w	r3, r3, #7
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	08da      	lsrs	r2, r3, #3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3208      	adds	r2, #8
 80024b0:	6939      	ldr	r1, [r7, #16]
 80024b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	2203      	movs	r2, #3
 80024c2:	fa02 f303 	lsl.w	r3, r2, r3
 80024c6:	43db      	mvns	r3, r3
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	4013      	ands	r3, r2
 80024cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f003 0203 	and.w	r2, r3, #3
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	f000 808c 	beq.w	8002610 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80024f8:	4a4e      	ldr	r2, [pc, #312]	; (8002634 <HAL_GPIO_Init+0x2b0>)
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	089b      	lsrs	r3, r3, #2
 80024fe:	3302      	adds	r3, #2
 8002500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002504:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	f003 0303 	and.w	r3, r3, #3
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	2207      	movs	r2, #7
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	43db      	mvns	r3, r3
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	4013      	ands	r3, r2
 800251a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002522:	d00d      	beq.n	8002540 <HAL_GPIO_Init+0x1bc>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4a44      	ldr	r2, [pc, #272]	; (8002638 <HAL_GPIO_Init+0x2b4>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d007      	beq.n	800253c <HAL_GPIO_Init+0x1b8>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4a43      	ldr	r2, [pc, #268]	; (800263c <HAL_GPIO_Init+0x2b8>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d101      	bne.n	8002538 <HAL_GPIO_Init+0x1b4>
 8002534:	2302      	movs	r3, #2
 8002536:	e004      	b.n	8002542 <HAL_GPIO_Init+0x1be>
 8002538:	2307      	movs	r3, #7
 800253a:	e002      	b.n	8002542 <HAL_GPIO_Init+0x1be>
 800253c:	2301      	movs	r3, #1
 800253e:	e000      	b.n	8002542 <HAL_GPIO_Init+0x1be>
 8002540:	2300      	movs	r3, #0
 8002542:	697a      	ldr	r2, [r7, #20]
 8002544:	f002 0203 	and.w	r2, r2, #3
 8002548:	0092      	lsls	r2, r2, #2
 800254a:	4093      	lsls	r3, r2
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	4313      	orrs	r3, r2
 8002550:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002552:	4938      	ldr	r1, [pc, #224]	; (8002634 <HAL_GPIO_Init+0x2b0>)
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	089b      	lsrs	r3, r3, #2
 8002558:	3302      	adds	r3, #2
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002560:	4b37      	ldr	r3, [pc, #220]	; (8002640 <HAL_GPIO_Init+0x2bc>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	43db      	mvns	r3, r3
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	4013      	ands	r3, r2
 800256e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d003      	beq.n	8002584 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 800257c:	693a      	ldr	r2, [r7, #16]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	4313      	orrs	r3, r2
 8002582:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002584:	4a2e      	ldr	r2, [pc, #184]	; (8002640 <HAL_GPIO_Init+0x2bc>)
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800258a:	4b2d      	ldr	r3, [pc, #180]	; (8002640 <HAL_GPIO_Init+0x2bc>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	43db      	mvns	r3, r3
 8002594:	693a      	ldr	r2, [r7, #16]
 8002596:	4013      	ands	r3, r2
 8002598:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80025ae:	4a24      	ldr	r2, [pc, #144]	; (8002640 <HAL_GPIO_Init+0x2bc>)
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80025b4:	4b22      	ldr	r3, [pc, #136]	; (8002640 <HAL_GPIO_Init+0x2bc>)
 80025b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025ba:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	43db      	mvns	r3, r3
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	4013      	ands	r3, r2
 80025c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d003      	beq.n	80025da <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80025d2:	693a      	ldr	r2, [r7, #16]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80025da:	4a19      	ldr	r2, [pc, #100]	; (8002640 <HAL_GPIO_Init+0x2bc>)
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80025e2:	4b17      	ldr	r3, [pc, #92]	; (8002640 <HAL_GPIO_Init+0x2bc>)
 80025e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025e8:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	43db      	mvns	r3, r3
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	4013      	ands	r3, r2
 80025f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d003      	beq.n	8002608 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002600:	693a      	ldr	r2, [r7, #16]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	4313      	orrs	r3, r2
 8002606:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8002608:	4a0d      	ldr	r2, [pc, #52]	; (8002640 <HAL_GPIO_Init+0x2bc>)
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	3301      	adds	r3, #1
 8002614:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	fa22 f303 	lsr.w	r3, r2, r3
 8002620:	2b00      	cmp	r3, #0
 8002622:	f47f aeb7 	bne.w	8002394 <HAL_GPIO_Init+0x10>
  }
}
 8002626:	bf00      	nop
 8002628:	bf00      	nop
 800262a:	371c      	adds	r7, #28
 800262c:	46bd      	mov	sp, r7
 800262e:	bc80      	pop	{r7}
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	40010000 	.word	0x40010000
 8002638:	48000400 	.word	0x48000400
 800263c:	48000800 	.word	0x48000800
 8002640:	58000800 	.word	0x58000800

08002644 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	460b      	mov	r3, r1
 800264e:	807b      	strh	r3, [r7, #2]
 8002650:	4613      	mov	r3, r2
 8002652:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002654:	787b      	ldrb	r3, [r7, #1]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d003      	beq.n	8002662 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800265a:	887a      	ldrh	r2, [r7, #2]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002660:	e002      	b.n	8002668 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002662:	887a      	ldrh	r2, [r7, #2]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	bc80      	pop	{r7}
 8002670:	4770      	bx	lr
	...

08002674 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002678:	4b04      	ldr	r3, [pc, #16]	; (800268c <HAL_PWR_EnableBkUpAccess+0x18>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a03      	ldr	r2, [pc, #12]	; (800268c <HAL_PWR_EnableBkUpAccess+0x18>)
 800267e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002682:	6013      	str	r3, [r2, #0]
}
 8002684:	bf00      	nop
 8002686:	46bd      	mov	sp, r7
 8002688:	bc80      	pop	{r7}
 800268a:	4770      	bx	lr
 800268c:	58000400 	.word	0x58000400

08002690 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002694:	4b03      	ldr	r3, [pc, #12]	; (80026a4 <HAL_PWREx_GetVoltageRange+0x14>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800269c:	4618      	mov	r0, r3
 800269e:	46bd      	mov	sp, r7
 80026a0:	bc80      	pop	{r7}
 80026a2:	4770      	bx	lr
 80026a4:	58000400 	.word	0x58000400

080026a8 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80026ac:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026b8:	d101      	bne.n	80026be <LL_PWR_IsEnabledBkUpAccess+0x16>
 80026ba:	2301      	movs	r3, #1
 80026bc:	e000      	b.n	80026c0 <LL_PWR_IsEnabledBkUpAccess+0x18>
 80026be:	2300      	movs	r3, #0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bc80      	pop	{r7}
 80026c6:	4770      	bx	lr
 80026c8:	58000400 	.word	0x58000400

080026cc <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80026d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80026de:	6013      	str	r3, [r2, #0]
}
 80026e0:	bf00      	nop
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bc80      	pop	{r7}
 80026e6:	4770      	bx	lr

080026e8 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80026ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80026fa:	6013      	str	r3, [r2, #0]
}
 80026fc:	bf00      	nop
 80026fe:	46bd      	mov	sp, r7
 8002700:	bc80      	pop	{r7}
 8002702:	4770      	bx	lr

08002704 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002708:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002712:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002716:	d101      	bne.n	800271c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002718:	2301      	movs	r3, #1
 800271a:	e000      	b.n	800271e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	46bd      	mov	sp, r7
 8002722:	bc80      	pop	{r7}
 8002724:	4770      	bx	lr

08002726 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8002726:	b480      	push	{r7}
 8002728:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800272a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002734:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002738:	6013      	str	r3, [r2, #0]
}
 800273a:	bf00      	nop
 800273c:	46bd      	mov	sp, r7
 800273e:	bc80      	pop	{r7}
 8002740:	4770      	bx	lr

08002742 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8002742:	b480      	push	{r7}
 8002744:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002746:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002750:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002754:	6013      	str	r3, [r2, #0]
}
 8002756:	bf00      	nop
 8002758:	46bd      	mov	sp, r7
 800275a:	bc80      	pop	{r7}
 800275c:	4770      	bx	lr

0800275e <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800275e:	b480      	push	{r7}
 8002760:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002762:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002770:	d101      	bne.n	8002776 <LL_RCC_HSE_IsReady+0x18>
 8002772:	2301      	movs	r3, #1
 8002774:	e000      	b.n	8002778 <LL_RCC_HSE_IsReady+0x1a>
 8002776:	2300      	movs	r3, #0
}
 8002778:	4618      	mov	r0, r3
 800277a:	46bd      	mov	sp, r7
 800277c:	bc80      	pop	{r7}
 800277e:	4770      	bx	lr

08002780 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002784:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800278e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002792:	6013      	str	r3, [r2, #0]
}
 8002794:	bf00      	nop
 8002796:	46bd      	mov	sp, r7
 8002798:	bc80      	pop	{r7}
 800279a:	4770      	bx	lr

0800279c <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80027a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027ae:	6013      	str	r3, [r2, #0]
}
 80027b0:	bf00      	nop
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bc80      	pop	{r7}
 80027b6:	4770      	bx	lr

080027b8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80027bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027ca:	d101      	bne.n	80027d0 <LL_RCC_HSI_IsReady+0x18>
 80027cc:	2301      	movs	r3, #1
 80027ce:	e000      	b.n	80027d2 <LL_RCC_HSI_IsReady+0x1a>
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bc80      	pop	{r7}
 80027d8:	4770      	bx	lr

080027da <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80027da:	b480      	push	{r7}
 80027dc:	b083      	sub	sp, #12
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80027e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	061b      	lsls	r3, r3, #24
 80027f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027f4:	4313      	orrs	r3, r2
 80027f6:	604b      	str	r3, [r1, #4]
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bc80      	pop	{r7}
 8002800:	4770      	bx	lr

08002802 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002802:	b480      	push	{r7}
 8002804:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002806:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800280a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b02      	cmp	r3, #2
 8002814:	d101      	bne.n	800281a <LL_RCC_LSE_IsReady+0x18>
 8002816:	2301      	movs	r3, #1
 8002818:	e000      	b.n	800281c <LL_RCC_LSE_IsReady+0x1a>
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	46bd      	mov	sp, r7
 8002820:	bc80      	pop	{r7}
 8002822:	4770      	bx	lr

08002824 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8002828:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800282c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002830:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002834:	f043 0301 	orr.w	r3, r3, #1
 8002838:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800283c:	bf00      	nop
 800283e:	46bd      	mov	sp, r7
 8002840:	bc80      	pop	{r7}
 8002842:	4770      	bx	lr

08002844 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002848:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800284c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002850:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002854:	f023 0301 	bic.w	r3, r3, #1
 8002858:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800285c:	bf00      	nop
 800285e:	46bd      	mov	sp, r7
 8002860:	bc80      	pop	{r7}
 8002862:	4770      	bx	lr

08002864 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002868:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800286c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	2b02      	cmp	r3, #2
 8002876:	d101      	bne.n	800287c <LL_RCC_LSI_IsReady+0x18>
 8002878:	2301      	movs	r3, #1
 800287a:	e000      	b.n	800287e <LL_RCC_LSI_IsReady+0x1a>
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	46bd      	mov	sp, r7
 8002882:	bc80      	pop	{r7}
 8002884:	4770      	bx	lr

08002886 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002886:	b480      	push	{r7}
 8002888:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800288a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002894:	f043 0301 	orr.w	r3, r3, #1
 8002898:	6013      	str	r3, [r2, #0]
}
 800289a:	bf00      	nop
 800289c:	46bd      	mov	sp, r7
 800289e:	bc80      	pop	{r7}
 80028a0:	4770      	bx	lr

080028a2 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80028a2:	b480      	push	{r7}
 80028a4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80028a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028b0:	f023 0301 	bic.w	r3, r3, #1
 80028b4:	6013      	str	r3, [r2, #0]
}
 80028b6:	bf00      	nop
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bc80      	pop	{r7}
 80028bc:	4770      	bx	lr

080028be <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80028be:	b480      	push	{r7}
 80028c0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80028c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0302 	and.w	r3, r3, #2
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d101      	bne.n	80028d4 <LL_RCC_MSI_IsReady+0x16>
 80028d0:	2301      	movs	r3, #1
 80028d2:	e000      	b.n	80028d6 <LL_RCC_MSI_IsReady+0x18>
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	46bd      	mov	sp, r7
 80028da:	bc80      	pop	{r7}
 80028dc:	4770      	bx	lr

080028de <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 80028de:	b480      	push	{r7}
 80028e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80028e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0308 	and.w	r3, r3, #8
 80028ec:	2b08      	cmp	r3, #8
 80028ee:	d101      	bne.n	80028f4 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80028f0:	2301      	movs	r3, #1
 80028f2:	e000      	b.n	80028f6 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bc80      	pop	{r7}
 80028fc:	4770      	bx	lr

080028fe <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80028fe:	b480      	push	{r7}
 8002900:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8002902:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800290c:	4618      	mov	r0, r3
 800290e:	46bd      	mov	sp, r7
 8002910:	bc80      	pop	{r7}
 8002912:	4770      	bx	lr

08002914 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002918:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800291c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002920:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8002924:	4618      	mov	r0, r3
 8002926:	46bd      	mov	sp, r7
 8002928:	bc80      	pop	{r7}
 800292a:	4770      	bx	lr

0800292c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002934:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	021b      	lsls	r3, r3, #8
 8002942:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002946:	4313      	orrs	r3, r2
 8002948:	604b      	str	r3, [r1, #4]
}
 800294a:	bf00      	nop
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	bc80      	pop	{r7}
 8002952:	4770      	bx	lr

08002954 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800295c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f023 0203 	bic.w	r2, r3, #3
 8002966:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4313      	orrs	r3, r2
 800296e:	608b      	str	r3, [r1, #8]
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	bc80      	pop	{r7}
 8002978:	4770      	bx	lr

0800297a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800297a:	b480      	push	{r7}
 800297c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800297e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f003 030c 	and.w	r3, r3, #12
}
 8002988:	4618      	mov	r0, r3
 800298a:	46bd      	mov	sp, r7
 800298c:	bc80      	pop	{r7}
 800298e:	4770      	bx	lr

08002990 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002998:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	608b      	str	r3, [r1, #8]
}
 80029ac:	bf00      	nop
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bc80      	pop	{r7}
 80029b4:	4770      	bx	lr

080029b6 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80029b6:	b480      	push	{r7}
 80029b8:	b083      	sub	sp, #12
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80029be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029c2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80029c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80029d6:	bf00      	nop
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	bc80      	pop	{r7}
 80029de:	4770      	bx	lr

080029e0 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80029e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ec:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80029f0:	f023 020f 	bic.w	r2, r3, #15
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	091b      	lsrs	r3, r3, #4
 80029f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029fc:	4313      	orrs	r3, r2
 80029fe:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002a02:	bf00      	nop
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bc80      	pop	{r7}
 8002a0a:	4770      	bx	lr

08002a0c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002a14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	608b      	str	r3, [r1, #8]
}
 8002a28:	bf00      	nop
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bc80      	pop	{r7}
 8002a30:	4770      	bx	lr

08002a32 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002a32:	b480      	push	{r7}
 8002a34:	b083      	sub	sp, #12
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002a3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	608b      	str	r3, [r1, #8]
}
 8002a4e:	bf00      	nop
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bc80      	pop	{r7}
 8002a56:	4770      	bx	lr

08002a58 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002a5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bc80      	pop	{r7}
 8002a6c:	4770      	bx	lr

08002a6e <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002a72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a76:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002a7a:	011b      	lsls	r3, r3, #4
 8002a7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bc80      	pop	{r7}
 8002a86:	4770      	bx	lr

08002a88 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002a8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bc80      	pop	{r7}
 8002a9c:	4770      	bx	lr

08002a9e <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002aa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bc80      	pop	{r7}
 8002ab2:	4770      	bx	lr

08002ab4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002ab8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ac2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ac6:	6013      	str	r3, [r2, #0]
}
 8002ac8:	bf00      	nop
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bc80      	pop	{r7}
 8002ace:	4770      	bx	lr

08002ad0 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002ad4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ade:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ae2:	6013      	str	r3, [r2, #0]
}
 8002ae4:	bf00      	nop
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bc80      	pop	{r7}
 8002aea:	4770      	bx	lr

08002aec <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002af0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002afa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002afe:	d101      	bne.n	8002b04 <LL_RCC_PLL_IsReady+0x18>
 8002b00:	2301      	movs	r3, #1
 8002b02:	e000      	b.n	8002b06 <LL_RCC_PLL_IsReady+0x1a>
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bc80      	pop	{r7}
 8002b0c:	4770      	bx	lr

08002b0e <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002b12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	0a1b      	lsrs	r3, r3, #8
 8002b1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bc80      	pop	{r7}
 8002b24:	4770      	bx	lr

08002b26 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002b26:	b480      	push	{r7}
 8002b28:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002b2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bc80      	pop	{r7}
 8002b3a:	4770      	bx	lr

08002b3c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002b40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bc80      	pop	{r7}
 8002b50:	4770      	bx	lr

08002b52 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002b52:	b480      	push	{r7}
 8002b54:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002b56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	f003 0303 	and.w	r3, r3, #3
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bc80      	pop	{r7}
 8002b66:	4770      	bx	lr

08002b68 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002b6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b7a:	d101      	bne.n	8002b80 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e000      	b.n	8002b82 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bc80      	pop	{r7}
 8002b88:	4770      	bx	lr

08002b8a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002b8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b92:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b9e:	d101      	bne.n	8002ba4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e000      	b.n	8002ba6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bc80      	pop	{r7}
 8002bac:	4770      	bx	lr

08002bae <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002bae:	b480      	push	{r7}
 8002bb0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002bb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bb6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002bba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bc2:	d101      	bne.n	8002bc8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e000      	b.n	8002bca <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bc80      	pop	{r7}
 8002bd0:	4770      	bx	lr

08002bd2 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002bd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002be4:	d101      	bne.n	8002bea <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002be6:	2301      	movs	r3, #1
 8002be8:	e000      	b.n	8002bec <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bc80      	pop	{r7}
 8002bf2:	4770      	bx	lr

08002bf4 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002bf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c02:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c06:	d101      	bne.n	8002c0c <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e000      	b.n	8002c0e <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bc80      	pop	{r7}
 8002c14:	4770      	bx	lr
	...

08002c18 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b088      	sub	sp, #32
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e36f      	b.n	800330a <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c2a:	f7ff fea6 	bl	800297a <LL_RCC_GetSysClkSource>
 8002c2e:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c30:	f7ff ff8f 	bl	8002b52 <LL_RCC_PLL_GetMainSource>
 8002c34:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0320 	and.w	r3, r3, #32
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	f000 80c4 	beq.w	8002dcc <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d005      	beq.n	8002c56 <HAL_RCC_OscConfig+0x3e>
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	2b0c      	cmp	r3, #12
 8002c4e:	d176      	bne.n	8002d3e <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d173      	bne.n	8002d3e <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a1b      	ldr	r3, [r3, #32]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d101      	bne.n	8002c62 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e353      	b.n	800330a <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0308 	and.w	r3, r3, #8
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d005      	beq.n	8002c80 <HAL_RCC_OscConfig+0x68>
 8002c74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c7e:	e006      	b.n	8002c8e <HAL_RCC_OscConfig+0x76>
 8002c80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c88:	091b      	lsrs	r3, r3, #4
 8002c8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d222      	bcs.n	8002cd8 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c96:	4618      	mov	r0, r3
 8002c98:	f000 fd5a 	bl	8003750 <RCC_SetFlashLatencyFromMSIRange>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e331      	b.n	800330a <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ca6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cb0:	f043 0308 	orr.w	r3, r3, #8
 8002cb4:	6013      	str	r3, [r2, #0]
 8002cb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7ff fe2b 	bl	800292c <LL_RCC_MSI_SetCalibTrimming>
 8002cd6:	e021      	b.n	8002d1c <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ce2:	f043 0308 	orr.w	r3, r3, #8
 8002ce6:	6013      	str	r3, [r2, #0]
 8002ce8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7ff fe12 	bl	800292c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f000 fd1f 	bl	8003750 <RCC_SetFlashLatencyFromMSIRange>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d001      	beq.n	8002d1c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e2f6      	b.n	800330a <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002d1c:	f000 fce0 	bl	80036e0 <HAL_RCC_GetHCLKFreq>
 8002d20:	4603      	mov	r3, r0
 8002d22:	4aa7      	ldr	r2, [pc, #668]	; (8002fc0 <HAL_RCC_OscConfig+0x3a8>)
 8002d24:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8002d26:	4ba7      	ldr	r3, [pc, #668]	; (8002fc4 <HAL_RCC_OscConfig+0x3ac>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7fe fe50 	bl	80019d0 <HAL_InitTick>
 8002d30:	4603      	mov	r3, r0
 8002d32:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8002d34:	7cfb      	ldrb	r3, [r7, #19]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d047      	beq.n	8002dca <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8002d3a:	7cfb      	ldrb	r3, [r7, #19]
 8002d3c:	e2e5      	b.n	800330a <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a1b      	ldr	r3, [r3, #32]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d02c      	beq.n	8002da0 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002d46:	f7ff fd9e 	bl	8002886 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d4a:	f7fe fd23 	bl	8001794 <HAL_GetTick>
 8002d4e:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002d50:	e008      	b.n	8002d64 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d52:	f7fe fd1f 	bl	8001794 <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d901      	bls.n	8002d64 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e2d2      	b.n	800330a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002d64:	f7ff fdab 	bl	80028be <LL_RCC_MSI_IsReady>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d0f1      	beq.n	8002d52 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d78:	f043 0308 	orr.w	r3, r3, #8
 8002d7c:	6013      	str	r3, [r2, #0]
 8002d7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d90:	4313      	orrs	r3, r2
 8002d92:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7ff fdc7 	bl	800292c <LL_RCC_MSI_SetCalibTrimming>
 8002d9e:	e015      	b.n	8002dcc <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002da0:	f7ff fd7f 	bl	80028a2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002da4:	f7fe fcf6 	bl	8001794 <HAL_GetTick>
 8002da8:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002daa:	e008      	b.n	8002dbe <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002dac:	f7fe fcf2 	bl	8001794 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e2a5      	b.n	800330a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002dbe:	f7ff fd7e 	bl	80028be <LL_RCC_MSI_IsReady>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d1f1      	bne.n	8002dac <HAL_RCC_OscConfig+0x194>
 8002dc8:	e000      	b.n	8002dcc <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002dca:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0301 	and.w	r3, r3, #1
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d058      	beq.n	8002e8a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	2b08      	cmp	r3, #8
 8002ddc:	d005      	beq.n	8002dea <HAL_RCC_OscConfig+0x1d2>
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	2b0c      	cmp	r3, #12
 8002de2:	d108      	bne.n	8002df6 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	2b03      	cmp	r3, #3
 8002de8:	d105      	bne.n	8002df6 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d14b      	bne.n	8002e8a <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e289      	b.n	800330a <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8002df6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e14:	d102      	bne.n	8002e1c <HAL_RCC_OscConfig+0x204>
 8002e16:	f7ff fc86 	bl	8002726 <LL_RCC_HSE_Enable>
 8002e1a:	e00d      	b.n	8002e38 <HAL_RCC_OscConfig+0x220>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002e24:	d104      	bne.n	8002e30 <HAL_RCC_OscConfig+0x218>
 8002e26:	f7ff fc51 	bl	80026cc <LL_RCC_HSE_EnableTcxo>
 8002e2a:	f7ff fc7c 	bl	8002726 <LL_RCC_HSE_Enable>
 8002e2e:	e003      	b.n	8002e38 <HAL_RCC_OscConfig+0x220>
 8002e30:	f7ff fc87 	bl	8002742 <LL_RCC_HSE_Disable>
 8002e34:	f7ff fc58 	bl	80026e8 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d012      	beq.n	8002e66 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e40:	f7fe fca8 	bl	8001794 <HAL_GetTick>
 8002e44:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002e46:	e008      	b.n	8002e5a <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e48:	f7fe fca4 	bl	8001794 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b64      	cmp	r3, #100	; 0x64
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e257      	b.n	800330a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002e5a:	f7ff fc80 	bl	800275e <LL_RCC_HSE_IsReady>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d0f1      	beq.n	8002e48 <HAL_RCC_OscConfig+0x230>
 8002e64:	e011      	b.n	8002e8a <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e66:	f7fe fc95 	bl	8001794 <HAL_GetTick>
 8002e6a:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002e6c:	e008      	b.n	8002e80 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e6e:	f7fe fc91 	bl	8001794 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b64      	cmp	r3, #100	; 0x64
 8002e7a:	d901      	bls.n	8002e80 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e244      	b.n	800330a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002e80:	f7ff fc6d 	bl	800275e <LL_RCC_HSE_IsReady>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1f1      	bne.n	8002e6e <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d046      	beq.n	8002f24 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	2b04      	cmp	r3, #4
 8002e9a:	d005      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x290>
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	2b0c      	cmp	r3, #12
 8002ea0:	d10e      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d10b      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	691b      	ldr	r3, [r3, #16]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d101      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e22a      	b.n	800330a <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	695b      	ldr	r3, [r3, #20]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7ff fc8e 	bl	80027da <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002ebe:	e031      	b.n	8002f24 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	691b      	ldr	r3, [r3, #16]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d019      	beq.n	8002efc <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ec8:	f7ff fc5a 	bl	8002780 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ecc:	f7fe fc62 	bl	8001794 <HAL_GetTick>
 8002ed0:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002ed2:	e008      	b.n	8002ee6 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ed4:	f7fe fc5e 	bl	8001794 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e211      	b.n	800330a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002ee6:	f7ff fc67 	bl	80027b8 <LL_RCC_HSI_IsReady>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d0f1      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	695b      	ldr	r3, [r3, #20]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7ff fc70 	bl	80027da <LL_RCC_HSI_SetCalibTrimming>
 8002efa:	e013      	b.n	8002f24 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002efc:	f7ff fc4e 	bl	800279c <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f00:	f7fe fc48 	bl	8001794 <HAL_GetTick>
 8002f04:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f08:	f7fe fc44 	bl	8001794 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e1f7      	b.n	800330a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002f1a:	f7ff fc4d 	bl	80027b8 <LL_RCC_HSI_IsReady>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d1f1      	bne.n	8002f08 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0308 	and.w	r3, r3, #8
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d06e      	beq.n	800300e <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d056      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8002f38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f40:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	69da      	ldr	r2, [r3, #28]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f003 0310 	and.w	r3, r3, #16
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d031      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d006      	beq.n	8002f68 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d101      	bne.n	8002f68 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e1d0      	b.n	800330a <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d013      	beq.n	8002f9a <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8002f72:	f7ff fc67 	bl	8002844 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f76:	f7fe fc0d 	bl	8001794 <HAL_GetTick>
 8002f7a:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8002f7c:	e008      	b.n	8002f90 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f7e:	f7fe fc09 	bl	8001794 <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	2b11      	cmp	r3, #17
 8002f8a:	d901      	bls.n	8002f90 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e1bc      	b.n	800330a <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8002f90:	f7ff fc68 	bl	8002864 <LL_RCC_LSI_IsReady>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1f1      	bne.n	8002f7e <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8002f9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fa2:	f023 0210 	bic.w	r2, r3, #16
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	69db      	ldr	r3, [r3, #28]
 8002faa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fb4:	f7ff fc36 	bl	8002824 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fb8:	f7fe fbec 	bl	8001794 <HAL_GetTick>
 8002fbc:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8002fbe:	e00c      	b.n	8002fda <HAL_RCC_OscConfig+0x3c2>
 8002fc0:	20000004 	.word	0x20000004
 8002fc4:	20000008 	.word	0x20000008
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fc8:	f7fe fbe4 	bl	8001794 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b11      	cmp	r3, #17
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e197      	b.n	800330a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8002fda:	f7ff fc43 	bl	8002864 <LL_RCC_LSI_IsReady>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d0f1      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x3b0>
 8002fe4:	e013      	b.n	800300e <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fe6:	f7ff fc2d 	bl	8002844 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fea:	f7fe fbd3 	bl	8001794 <HAL_GetTick>
 8002fee:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8002ff0:	e008      	b.n	8003004 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ff2:	f7fe fbcf 	bl	8001794 <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	2b11      	cmp	r3, #17
 8002ffe:	d901      	bls.n	8003004 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e182      	b.n	800330a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8003004:	f7ff fc2e 	bl	8002864 <LL_RCC_LSI_IsReady>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d1f1      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0304 	and.w	r3, r3, #4
 8003016:	2b00      	cmp	r3, #0
 8003018:	f000 80d8 	beq.w	80031cc <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800301c:	f7ff fb44 	bl	80026a8 <LL_PWR_IsEnabledBkUpAccess>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d113      	bne.n	800304e <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003026:	f7ff fb25 	bl	8002674 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800302a:	f7fe fbb3 	bl	8001794 <HAL_GetTick>
 800302e:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003030:	e008      	b.n	8003044 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003032:	f7fe fbaf 	bl	8001794 <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	2b02      	cmp	r3, #2
 800303e:	d901      	bls.n	8003044 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e162      	b.n	800330a <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003044:	f7ff fb30 	bl	80026a8 <LL_PWR_IsEnabledBkUpAccess>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d0f1      	beq.n	8003032 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d07b      	beq.n	800314e <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	2b85      	cmp	r3, #133	; 0x85
 800305c:	d003      	beq.n	8003066 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	2b05      	cmp	r3, #5
 8003064:	d109      	bne.n	800307a <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003066:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800306a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800306e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003072:	f043 0304 	orr.w	r3, r3, #4
 8003076:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800307a:	f7fe fb8b 	bl	8001794 <HAL_GetTick>
 800307e:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003080:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003088:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800308c:	f043 0301 	orr.w	r3, r3, #1
 8003090:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003094:	e00a      	b.n	80030ac <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003096:	f7fe fb7d 	bl	8001794 <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d901      	bls.n	80030ac <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e12e      	b.n	800330a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 80030ac:	f7ff fba9 	bl	8002802 <LL_RCC_LSE_IsReady>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d0ef      	beq.n	8003096 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	2b81      	cmp	r3, #129	; 0x81
 80030bc:	d003      	beq.n	80030c6 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	2b85      	cmp	r3, #133	; 0x85
 80030c4:	d121      	bne.n	800310a <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c6:	f7fe fb65 	bl	8001794 <HAL_GetTick>
 80030ca:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80030cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80030e0:	e00a      	b.n	80030f8 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030e2:	f7fe fb57 	bl	8001794 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d901      	bls.n	80030f8 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e108      	b.n	800330a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80030f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003100:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003104:	2b00      	cmp	r3, #0
 8003106:	d0ec      	beq.n	80030e2 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8003108:	e060      	b.n	80031cc <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800310a:	f7fe fb43 	bl	8001794 <HAL_GetTick>
 800310e:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003110:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003118:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800311c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003120:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003124:	e00a      	b.n	800313c <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003126:	f7fe fb35 	bl	8001794 <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	f241 3288 	movw	r2, #5000	; 0x1388
 8003134:	4293      	cmp	r3, r2
 8003136:	d901      	bls.n	800313c <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e0e6      	b.n	800330a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800313c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003144:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003148:	2b00      	cmp	r3, #0
 800314a:	d1ec      	bne.n	8003126 <HAL_RCC_OscConfig+0x50e>
 800314c:	e03e      	b.n	80031cc <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800314e:	f7fe fb21 	bl	8001794 <HAL_GetTick>
 8003152:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003154:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800315c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003160:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003164:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003168:	e00a      	b.n	8003180 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800316a:	f7fe fb13 	bl	8001794 <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	f241 3288 	movw	r2, #5000	; 0x1388
 8003178:	4293      	cmp	r3, r2
 800317a:	d901      	bls.n	8003180 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e0c4      	b.n	800330a <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003180:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003188:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1ec      	bne.n	800316a <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003190:	f7fe fb00 	bl	8001794 <HAL_GetTick>
 8003194:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003196:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800319a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800319e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031a2:	f023 0301 	bic.w	r3, r3, #1
 80031a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80031aa:	e00a      	b.n	80031c2 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ac:	f7fe faf2 	bl	8001794 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e0a3      	b.n	800330a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 80031c2:	f7ff fb1e 	bl	8002802 <LL_RCC_LSE_IsReady>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d1ef      	bne.n	80031ac <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	f000 8099 	beq.w	8003308 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	2b0c      	cmp	r3, #12
 80031da:	d06c      	beq.n	80032b6 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d14b      	bne.n	800327c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031e4:	f7ff fc74 	bl	8002ad0 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e8:	f7fe fad4 	bl	8001794 <HAL_GetTick>
 80031ec:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031f0:	f7fe fad0 	bl	8001794 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b0a      	cmp	r3, #10
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e083      	b.n	800330a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8003202:	f7ff fc73 	bl	8002aec <LL_RCC_PLL_IsReady>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1f1      	bne.n	80031f0 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800320c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003210:	68da      	ldr	r2, [r3, #12]
 8003212:	4b40      	ldr	r3, [pc, #256]	; (8003314 <HAL_RCC_OscConfig+0x6fc>)
 8003214:	4013      	ands	r3, r2
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800321e:	4311      	orrs	r1, r2
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003224:	0212      	lsls	r2, r2, #8
 8003226:	4311      	orrs	r1, r2
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800322c:	4311      	orrs	r1, r2
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003232:	4311      	orrs	r1, r2
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003238:	430a      	orrs	r2, r1
 800323a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800323e:	4313      	orrs	r3, r2
 8003240:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003242:	f7ff fc37 	bl	8002ab4 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003246:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003250:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003254:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003256:	f7fe fa9d 	bl	8001794 <HAL_GetTick>
 800325a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 800325c:	e008      	b.n	8003270 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800325e:	f7fe fa99 	bl	8001794 <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	2b0a      	cmp	r3, #10
 800326a:	d901      	bls.n	8003270 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e04c      	b.n	800330a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8003270:	f7ff fc3c 	bl	8002aec <LL_RCC_PLL_IsReady>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d0f1      	beq.n	800325e <HAL_RCC_OscConfig+0x646>
 800327a:	e045      	b.n	8003308 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800327c:	f7ff fc28 	bl	8002ad0 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003280:	f7fe fa88 	bl	8001794 <HAL_GetTick>
 8003284:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8003286:	e008      	b.n	800329a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003288:	f7fe fa84 	bl	8001794 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b0a      	cmp	r3, #10
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e037      	b.n	800330a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800329a:	f7ff fc27 	bl	8002aec <LL_RCC_PLL_IsReady>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d1f1      	bne.n	8003288 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80032a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032a8:	68da      	ldr	r2, [r3, #12]
 80032aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032ae:	4b1a      	ldr	r3, [pc, #104]	; (8003318 <HAL_RCC_OscConfig+0x700>)
 80032b0:	4013      	ands	r3, r2
 80032b2:	60cb      	str	r3, [r1, #12]
 80032b4:	e028      	b.n	8003308 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d101      	bne.n	80032c2 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e023      	b.n	800330a <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	f003 0203 	and.w	r2, r3, #3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d115      	bne.n	8003304 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d10e      	bne.n	8003304 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f0:	021b      	lsls	r3, r3, #8
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d106      	bne.n	8003304 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003300:	429a      	cmp	r2, r3
 8003302:	d001      	beq.n	8003308 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e000      	b.n	800330a <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3720      	adds	r7, #32
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	11c1808c 	.word	0x11c1808c
 8003318:	eefefffc 	.word	0xeefefffc

0800331c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d101      	bne.n	8003330 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e12c      	b.n	800358a <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003330:	4b98      	ldr	r3, [pc, #608]	; (8003594 <HAL_RCC_ClockConfig+0x278>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0307 	and.w	r3, r3, #7
 8003338:	683a      	ldr	r2, [r7, #0]
 800333a:	429a      	cmp	r2, r3
 800333c:	d91b      	bls.n	8003376 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800333e:	4b95      	ldr	r3, [pc, #596]	; (8003594 <HAL_RCC_ClockConfig+0x278>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f023 0207 	bic.w	r2, r3, #7
 8003346:	4993      	ldr	r1, [pc, #588]	; (8003594 <HAL_RCC_ClockConfig+0x278>)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	4313      	orrs	r3, r2
 800334c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800334e:	f7fe fa21 	bl	8001794 <HAL_GetTick>
 8003352:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003354:	e008      	b.n	8003368 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003356:	f7fe fa1d 	bl	8001794 <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	2b02      	cmp	r3, #2
 8003362:	d901      	bls.n	8003368 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e110      	b.n	800358a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003368:	4b8a      	ldr	r3, [pc, #552]	; (8003594 <HAL_RCC_ClockConfig+0x278>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0307 	and.w	r3, r3, #7
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	429a      	cmp	r2, r3
 8003374:	d1ef      	bne.n	8003356 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	2b00      	cmp	r3, #0
 8003380:	d016      	beq.n	80033b0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	4618      	mov	r0, r3
 8003388:	f7ff fb02 	bl	8002990 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800338c:	f7fe fa02 	bl	8001794 <HAL_GetTick>
 8003390:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003392:	e008      	b.n	80033a6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003394:	f7fe f9fe 	bl	8001794 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e0f1      	b.n	800358a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80033a6:	f7ff fbdf 	bl	8002b68 <LL_RCC_IsActiveFlag_HPRE>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d0f1      	beq.n	8003394 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0320 	and.w	r3, r3, #32
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d016      	beq.n	80033ea <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	695b      	ldr	r3, [r3, #20]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7ff faf8 	bl	80029b6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80033c6:	f7fe f9e5 	bl	8001794 <HAL_GetTick>
 80033ca:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80033cc:	e008      	b.n	80033e0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80033ce:	f7fe f9e1 	bl	8001794 <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d901      	bls.n	80033e0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	e0d4      	b.n	800358a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80033e0:	f7ff fbd3 	bl	8002b8a <LL_RCC_IsActiveFlag_C2HPRE>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d0f1      	beq.n	80033ce <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d016      	beq.n	8003424 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7ff faf0 	bl	80029e0 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003400:	f7fe f9c8 	bl	8001794 <HAL_GetTick>
 8003404:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003406:	e008      	b.n	800341a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003408:	f7fe f9c4 	bl	8001794 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b02      	cmp	r3, #2
 8003414:	d901      	bls.n	800341a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e0b7      	b.n	800358a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800341a:	f7ff fbc8 	bl	8002bae <LL_RCC_IsActiveFlag_SHDHPRE>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d0f1      	beq.n	8003408 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0304 	and.w	r3, r3, #4
 800342c:	2b00      	cmp	r3, #0
 800342e:	d016      	beq.n	800345e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	4618      	mov	r0, r3
 8003436:	f7ff fae9 	bl	8002a0c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800343a:	f7fe f9ab 	bl	8001794 <HAL_GetTick>
 800343e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003440:	e008      	b.n	8003454 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003442:	f7fe f9a7 	bl	8001794 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d901      	bls.n	8003454 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e09a      	b.n	800358a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003454:	f7ff fbbd 	bl	8002bd2 <LL_RCC_IsActiveFlag_PPRE1>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d0f1      	beq.n	8003442 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0308 	and.w	r3, r3, #8
 8003466:	2b00      	cmp	r3, #0
 8003468:	d017      	beq.n	800349a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	00db      	lsls	r3, r3, #3
 8003470:	4618      	mov	r0, r3
 8003472:	f7ff fade 	bl	8002a32 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003476:	f7fe f98d 	bl	8001794 <HAL_GetTick>
 800347a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800347c:	e008      	b.n	8003490 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800347e:	f7fe f989 	bl	8001794 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	2b02      	cmp	r3, #2
 800348a:	d901      	bls.n	8003490 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e07c      	b.n	800358a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003490:	f7ff fbb0 	bl	8002bf4 <LL_RCC_IsActiveFlag_PPRE2>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d0f1      	beq.n	800347e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0301 	and.w	r3, r3, #1
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d043      	beq.n	800352e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d106      	bne.n	80034bc <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80034ae:	f7ff f956 	bl	800275e <LL_RCC_HSE_IsReady>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d11e      	bne.n	80034f6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e066      	b.n	800358a <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	2b03      	cmp	r3, #3
 80034c2:	d106      	bne.n	80034d2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80034c4:	f7ff fb12 	bl	8002aec <LL_RCC_PLL_IsReady>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d113      	bne.n	80034f6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e05b      	b.n	800358a <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d106      	bne.n	80034e8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80034da:	f7ff f9f0 	bl	80028be <LL_RCC_MSI_IsReady>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d108      	bne.n	80034f6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e050      	b.n	800358a <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80034e8:	f7ff f966 	bl	80027b8 <LL_RCC_HSI_IsReady>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e049      	b.n	800358a <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7ff fa2a 	bl	8002954 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003500:	f7fe f948 	bl	8001794 <HAL_GetTick>
 8003504:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003506:	e00a      	b.n	800351e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003508:	f7fe f944 	bl	8001794 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	f241 3288 	movw	r2, #5000	; 0x1388
 8003516:	4293      	cmp	r3, r2
 8003518:	d901      	bls.n	800351e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e035      	b.n	800358a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800351e:	f7ff fa2c 	bl	800297a <LL_RCC_GetSysClkSource>
 8003522:	4602      	mov	r2, r0
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	429a      	cmp	r2, r3
 800352c:	d1ec      	bne.n	8003508 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800352e:	4b19      	ldr	r3, [pc, #100]	; (8003594 <HAL_RCC_ClockConfig+0x278>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0307 	and.w	r3, r3, #7
 8003536:	683a      	ldr	r2, [r7, #0]
 8003538:	429a      	cmp	r2, r3
 800353a:	d21b      	bcs.n	8003574 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800353c:	4b15      	ldr	r3, [pc, #84]	; (8003594 <HAL_RCC_ClockConfig+0x278>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f023 0207 	bic.w	r2, r3, #7
 8003544:	4913      	ldr	r1, [pc, #76]	; (8003594 <HAL_RCC_ClockConfig+0x278>)
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	4313      	orrs	r3, r2
 800354a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800354c:	f7fe f922 	bl	8001794 <HAL_GetTick>
 8003550:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003552:	e008      	b.n	8003566 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003554:	f7fe f91e 	bl	8001794 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d901      	bls.n	8003566 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e011      	b.n	800358a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003566:	4b0b      	ldr	r3, [pc, #44]	; (8003594 <HAL_RCC_ClockConfig+0x278>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0307 	and.w	r3, r3, #7
 800356e:	683a      	ldr	r2, [r7, #0]
 8003570:	429a      	cmp	r2, r3
 8003572:	d1ef      	bne.n	8003554 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003574:	f000 f8b4 	bl	80036e0 <HAL_RCC_GetHCLKFreq>
 8003578:	4603      	mov	r3, r0
 800357a:	4a07      	ldr	r2, [pc, #28]	; (8003598 <HAL_RCC_ClockConfig+0x27c>)
 800357c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 800357e:	4b07      	ldr	r3, [pc, #28]	; (800359c <HAL_RCC_ClockConfig+0x280>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4618      	mov	r0, r3
 8003584:	f7fe fa24 	bl	80019d0 <HAL_InitTick>
 8003588:	4603      	mov	r3, r0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	58004000 	.word	0x58004000
 8003598:	20000004 	.word	0x20000004
 800359c:	20000008 	.word	0x20000008

080035a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035a0:	b590      	push	{r4, r7, lr}
 80035a2:	b087      	sub	sp, #28
 80035a4:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80035a6:	2300      	movs	r3, #0
 80035a8:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80035aa:	2300      	movs	r3, #0
 80035ac:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035ae:	f7ff f9e4 	bl	800297a <LL_RCC_GetSysClkSource>
 80035b2:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035b4:	f7ff facd 	bl	8002b52 <LL_RCC_PLL_GetMainSource>
 80035b8:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d005      	beq.n	80035cc <HAL_RCC_GetSysClockFreq+0x2c>
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	2b0c      	cmp	r3, #12
 80035c4:	d139      	bne.n	800363a <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d136      	bne.n	800363a <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80035cc:	f7ff f987 	bl	80028de <LL_RCC_MSI_IsEnabledRangeSelect>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d115      	bne.n	8003602 <HAL_RCC_GetSysClockFreq+0x62>
 80035d6:	f7ff f982 	bl	80028de <LL_RCC_MSI_IsEnabledRangeSelect>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d106      	bne.n	80035ee <HAL_RCC_GetSysClockFreq+0x4e>
 80035e0:	f7ff f98d 	bl	80028fe <LL_RCC_MSI_GetRange>
 80035e4:	4603      	mov	r3, r0
 80035e6:	0a1b      	lsrs	r3, r3, #8
 80035e8:	f003 030f 	and.w	r3, r3, #15
 80035ec:	e005      	b.n	80035fa <HAL_RCC_GetSysClockFreq+0x5a>
 80035ee:	f7ff f991 	bl	8002914 <LL_RCC_MSI_GetRangeAfterStandby>
 80035f2:	4603      	mov	r3, r0
 80035f4:	0a1b      	lsrs	r3, r3, #8
 80035f6:	f003 030f 	and.w	r3, r3, #15
 80035fa:	4a36      	ldr	r2, [pc, #216]	; (80036d4 <HAL_RCC_GetSysClockFreq+0x134>)
 80035fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003600:	e014      	b.n	800362c <HAL_RCC_GetSysClockFreq+0x8c>
 8003602:	f7ff f96c 	bl	80028de <LL_RCC_MSI_IsEnabledRangeSelect>
 8003606:	4603      	mov	r3, r0
 8003608:	2b01      	cmp	r3, #1
 800360a:	d106      	bne.n	800361a <HAL_RCC_GetSysClockFreq+0x7a>
 800360c:	f7ff f977 	bl	80028fe <LL_RCC_MSI_GetRange>
 8003610:	4603      	mov	r3, r0
 8003612:	091b      	lsrs	r3, r3, #4
 8003614:	f003 030f 	and.w	r3, r3, #15
 8003618:	e005      	b.n	8003626 <HAL_RCC_GetSysClockFreq+0x86>
 800361a:	f7ff f97b 	bl	8002914 <LL_RCC_MSI_GetRangeAfterStandby>
 800361e:	4603      	mov	r3, r0
 8003620:	091b      	lsrs	r3, r3, #4
 8003622:	f003 030f 	and.w	r3, r3, #15
 8003626:	4a2b      	ldr	r2, [pc, #172]	; (80036d4 <HAL_RCC_GetSysClockFreq+0x134>)
 8003628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800362c:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d115      	bne.n	8003660 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003638:	e012      	b.n	8003660 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	2b04      	cmp	r3, #4
 800363e:	d102      	bne.n	8003646 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003640:	4b25      	ldr	r3, [pc, #148]	; (80036d8 <HAL_RCC_GetSysClockFreq+0x138>)
 8003642:	617b      	str	r3, [r7, #20]
 8003644:	e00c      	b.n	8003660 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	2b08      	cmp	r3, #8
 800364a:	d109      	bne.n	8003660 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800364c:	f7ff f85a 	bl	8002704 <LL_RCC_HSE_IsEnabledDiv2>
 8003650:	4603      	mov	r3, r0
 8003652:	2b01      	cmp	r3, #1
 8003654:	d102      	bne.n	800365c <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003656:	4b20      	ldr	r3, [pc, #128]	; (80036d8 <HAL_RCC_GetSysClockFreq+0x138>)
 8003658:	617b      	str	r3, [r7, #20]
 800365a:	e001      	b.n	8003660 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800365c:	4b1f      	ldr	r3, [pc, #124]	; (80036dc <HAL_RCC_GetSysClockFreq+0x13c>)
 800365e:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003660:	f7ff f98b 	bl	800297a <LL_RCC_GetSysClkSource>
 8003664:	4603      	mov	r3, r0
 8003666:	2b0c      	cmp	r3, #12
 8003668:	d12f      	bne.n	80036ca <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800366a:	f7ff fa72 	bl	8002b52 <LL_RCC_PLL_GetMainSource>
 800366e:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2b02      	cmp	r3, #2
 8003674:	d003      	beq.n	800367e <HAL_RCC_GetSysClockFreq+0xde>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2b03      	cmp	r3, #3
 800367a:	d003      	beq.n	8003684 <HAL_RCC_GetSysClockFreq+0xe4>
 800367c:	e00d      	b.n	800369a <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800367e:	4b16      	ldr	r3, [pc, #88]	; (80036d8 <HAL_RCC_GetSysClockFreq+0x138>)
 8003680:	60fb      	str	r3, [r7, #12]
        break;
 8003682:	e00d      	b.n	80036a0 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003684:	f7ff f83e 	bl	8002704 <LL_RCC_HSE_IsEnabledDiv2>
 8003688:	4603      	mov	r3, r0
 800368a:	2b01      	cmp	r3, #1
 800368c:	d102      	bne.n	8003694 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800368e:	4b12      	ldr	r3, [pc, #72]	; (80036d8 <HAL_RCC_GetSysClockFreq+0x138>)
 8003690:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003692:	e005      	b.n	80036a0 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8003694:	4b11      	ldr	r3, [pc, #68]	; (80036dc <HAL_RCC_GetSysClockFreq+0x13c>)
 8003696:	60fb      	str	r3, [r7, #12]
        break;
 8003698:	e002      	b.n	80036a0 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	60fb      	str	r3, [r7, #12]
        break;
 800369e:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80036a0:	f7ff fa35 	bl	8002b0e <LL_RCC_PLL_GetN>
 80036a4:	4602      	mov	r2, r0
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	fb03 f402 	mul.w	r4, r3, r2
 80036ac:	f7ff fa46 	bl	8002b3c <LL_RCC_PLL_GetDivider>
 80036b0:	4603      	mov	r3, r0
 80036b2:	091b      	lsrs	r3, r3, #4
 80036b4:	3301      	adds	r3, #1
 80036b6:	fbb4 f4f3 	udiv	r4, r4, r3
 80036ba:	f7ff fa34 	bl	8002b26 <LL_RCC_PLL_GetR>
 80036be:	4603      	mov	r3, r0
 80036c0:	0f5b      	lsrs	r3, r3, #29
 80036c2:	3301      	adds	r3, #1
 80036c4:	fbb4 f3f3 	udiv	r3, r4, r3
 80036c8:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80036ca:	697b      	ldr	r3, [r7, #20]
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	371c      	adds	r7, #28
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd90      	pop	{r4, r7, pc}
 80036d4:	0800b0a8 	.word	0x0800b0a8
 80036d8:	00f42400 	.word	0x00f42400
 80036dc:	01e84800 	.word	0x01e84800

080036e0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036e0:	b598      	push	{r3, r4, r7, lr}
 80036e2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80036e4:	f7ff ff5c 	bl	80035a0 <HAL_RCC_GetSysClockFreq>
 80036e8:	4604      	mov	r4, r0
 80036ea:	f7ff f9b5 	bl	8002a58 <LL_RCC_GetAHBPrescaler>
 80036ee:	4603      	mov	r3, r0
 80036f0:	091b      	lsrs	r3, r3, #4
 80036f2:	f003 030f 	and.w	r3, r3, #15
 80036f6:	4a03      	ldr	r2, [pc, #12]	; (8003704 <HAL_RCC_GetHCLKFreq+0x24>)
 80036f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036fc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003700:	4618      	mov	r0, r3
 8003702:	bd98      	pop	{r3, r4, r7, pc}
 8003704:	0800b048 	.word	0x0800b048

08003708 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003708:	b598      	push	{r3, r4, r7, lr}
 800370a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800370c:	f7ff ffe8 	bl	80036e0 <HAL_RCC_GetHCLKFreq>
 8003710:	4604      	mov	r4, r0
 8003712:	f7ff f9b9 	bl	8002a88 <LL_RCC_GetAPB1Prescaler>
 8003716:	4603      	mov	r3, r0
 8003718:	0a1b      	lsrs	r3, r3, #8
 800371a:	4a03      	ldr	r2, [pc, #12]	; (8003728 <HAL_RCC_GetPCLK1Freq+0x20>)
 800371c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003720:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003724:	4618      	mov	r0, r3
 8003726:	bd98      	pop	{r3, r4, r7, pc}
 8003728:	0800b088 	.word	0x0800b088

0800372c <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800372c:	b598      	push	{r3, r4, r7, lr}
 800372e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003730:	f7ff ffd6 	bl	80036e0 <HAL_RCC_GetHCLKFreq>
 8003734:	4604      	mov	r4, r0
 8003736:	f7ff f9b2 	bl	8002a9e <LL_RCC_GetAPB2Prescaler>
 800373a:	4603      	mov	r3, r0
 800373c:	0adb      	lsrs	r3, r3, #11
 800373e:	4a03      	ldr	r2, [pc, #12]	; (800374c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003744:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003748:	4618      	mov	r0, r3
 800374a:	bd98      	pop	{r3, r4, r7, pc}
 800374c:	0800b088 	.word	0x0800b088

08003750 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003750:	b590      	push	{r4, r7, lr}
 8003752:	b085      	sub	sp, #20
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	091b      	lsrs	r3, r3, #4
 800375c:	f003 030f 	and.w	r3, r3, #15
 8003760:	4a10      	ldr	r2, [pc, #64]	; (80037a4 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8003762:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003766:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8003768:	f7ff f981 	bl	8002a6e <LL_RCC_GetAHB3Prescaler>
 800376c:	4603      	mov	r3, r0
 800376e:	091b      	lsrs	r3, r3, #4
 8003770:	f003 030f 	and.w	r3, r3, #15
 8003774:	4a0c      	ldr	r2, [pc, #48]	; (80037a8 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8003776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800377a:	68fa      	ldr	r2, [r7, #12]
 800377c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003780:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	4a09      	ldr	r2, [pc, #36]	; (80037ac <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8003786:	fba2 2303 	umull	r2, r3, r2, r3
 800378a:	0c9c      	lsrs	r4, r3, #18
 800378c:	f7fe ff80 	bl	8002690 <HAL_PWREx_GetVoltageRange>
 8003790:	4603      	mov	r3, r0
 8003792:	4619      	mov	r1, r3
 8003794:	4620      	mov	r0, r4
 8003796:	f000 f80b 	bl	80037b0 <RCC_SetFlashLatency>
 800379a:	4603      	mov	r3, r0
}
 800379c:	4618      	mov	r0, r3
 800379e:	3714      	adds	r7, #20
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd90      	pop	{r4, r7, pc}
 80037a4:	0800b0a8 	.word	0x0800b0a8
 80037a8:	0800b048 	.word	0x0800b048
 80037ac:	431bde83 	.word	0x431bde83

080037b0 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b08e      	sub	sp, #56	; 0x38
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80037ba:	4a3a      	ldr	r2, [pc, #232]	; (80038a4 <RCC_SetFlashLatency+0xf4>)
 80037bc:	f107 0320 	add.w	r3, r7, #32
 80037c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80037c4:	6018      	str	r0, [r3, #0]
 80037c6:	3304      	adds	r3, #4
 80037c8:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80037ca:	4a37      	ldr	r2, [pc, #220]	; (80038a8 <RCC_SetFlashLatency+0xf8>)
 80037cc:	f107 0318 	add.w	r3, r7, #24
 80037d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80037d4:	6018      	str	r0, [r3, #0]
 80037d6:	3304      	adds	r3, #4
 80037d8:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80037da:	4a34      	ldr	r2, [pc, #208]	; (80038ac <RCC_SetFlashLatency+0xfc>)
 80037dc:	f107 030c 	add.w	r3, r7, #12
 80037e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80037e2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80037e6:	2300      	movs	r3, #0
 80037e8:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037f0:	d11b      	bne.n	800382a <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80037f2:	2300      	movs	r3, #0
 80037f4:	633b      	str	r3, [r7, #48]	; 0x30
 80037f6:	e014      	b.n	8003822 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80037f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037fa:	005b      	lsls	r3, r3, #1
 80037fc:	3338      	adds	r3, #56	; 0x38
 80037fe:	443b      	add	r3, r7
 8003800:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003804:	461a      	mov	r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4293      	cmp	r3, r2
 800380a:	d807      	bhi.n	800381c <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800380c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	3338      	adds	r3, #56	; 0x38
 8003812:	443b      	add	r3, r7
 8003814:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003818:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800381a:	e021      	b.n	8003860 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800381c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800381e:	3301      	adds	r3, #1
 8003820:	633b      	str	r3, [r7, #48]	; 0x30
 8003822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003824:	2b02      	cmp	r3, #2
 8003826:	d9e7      	bls.n	80037f8 <RCC_SetFlashLatency+0x48>
 8003828:	e01a      	b.n	8003860 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800382a:	2300      	movs	r3, #0
 800382c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800382e:	e014      	b.n	800385a <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003832:	005b      	lsls	r3, r3, #1
 8003834:	3338      	adds	r3, #56	; 0x38
 8003836:	443b      	add	r3, r7
 8003838:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 800383c:	461a      	mov	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4293      	cmp	r3, r2
 8003842:	d807      	bhi.n	8003854 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	3338      	adds	r3, #56	; 0x38
 800384a:	443b      	add	r3, r7
 800384c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003850:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003852:	e005      	b.n	8003860 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003856:	3301      	adds	r3, #1
 8003858:	62fb      	str	r3, [r7, #44]	; 0x2c
 800385a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800385c:	2b02      	cmp	r3, #2
 800385e:	d9e7      	bls.n	8003830 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003860:	4b13      	ldr	r3, [pc, #76]	; (80038b0 <RCC_SetFlashLatency+0x100>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f023 0207 	bic.w	r2, r3, #7
 8003868:	4911      	ldr	r1, [pc, #68]	; (80038b0 <RCC_SetFlashLatency+0x100>)
 800386a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800386c:	4313      	orrs	r3, r2
 800386e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003870:	f7fd ff90 	bl	8001794 <HAL_GetTick>
 8003874:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003876:	e008      	b.n	800388a <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003878:	f7fd ff8c 	bl	8001794 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b02      	cmp	r3, #2
 8003884:	d901      	bls.n	800388a <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e007      	b.n	800389a <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800388a:	4b09      	ldr	r3, [pc, #36]	; (80038b0 <RCC_SetFlashLatency+0x100>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0307 	and.w	r3, r3, #7
 8003892:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003894:	429a      	cmp	r2, r3
 8003896:	d1ef      	bne.n	8003878 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3738      	adds	r7, #56	; 0x38
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	0800b008 	.word	0x0800b008
 80038a8:	0800b010 	.word	0x0800b010
 80038ac:	0800b018 	.word	0x0800b018
 80038b0:	58004000 	.word	0x58004000

080038b4 <LL_RCC_LSE_IsReady>:
{
 80038b4:	b480      	push	{r7}
 80038b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80038b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038c0:	f003 0302 	and.w	r3, r3, #2
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d101      	bne.n	80038cc <LL_RCC_LSE_IsReady+0x18>
 80038c8:	2301      	movs	r3, #1
 80038ca:	e000      	b.n	80038ce <LL_RCC_LSE_IsReady+0x1a>
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bc80      	pop	{r7}
 80038d4:	4770      	bx	lr

080038d6 <LL_RCC_SetUSARTClockSource>:
{
 80038d6:	b480      	push	{r7}
 80038d8:	b083      	sub	sp, #12
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80038de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038e2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	0c1b      	lsrs	r3, r3, #16
 80038ea:	43db      	mvns	r3, r3
 80038ec:	401a      	ands	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038f6:	4313      	orrs	r3, r2
 80038f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	bc80      	pop	{r7}
 8003904:	4770      	bx	lr

08003906 <LL_RCC_SetI2SClockSource>:
{
 8003906:	b480      	push	{r7}
 8003908:	b083      	sub	sp, #12
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800390e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003916:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800391a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4313      	orrs	r3, r2
 8003922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003926:	bf00      	nop
 8003928:	370c      	adds	r7, #12
 800392a:	46bd      	mov	sp, r7
 800392c:	bc80      	pop	{r7}
 800392e:	4770      	bx	lr

08003930 <LL_RCC_SetLPUARTClockSource>:
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003938:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800393c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003940:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003944:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4313      	orrs	r3, r2
 800394c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	bc80      	pop	{r7}
 8003958:	4770      	bx	lr

0800395a <LL_RCC_SetI2CClockSource>:
{
 800395a:	b480      	push	{r7}
 800395c:	b083      	sub	sp, #12
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003962:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003966:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	091b      	lsrs	r3, r3, #4
 800396e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003972:	43db      	mvns	r3, r3
 8003974:	401a      	ands	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	011b      	lsls	r3, r3, #4
 800397a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800397e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003982:	4313      	orrs	r3, r2
 8003984:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003988:	bf00      	nop
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	bc80      	pop	{r7}
 8003990:	4770      	bx	lr

08003992 <LL_RCC_SetLPTIMClockSource>:
{
 8003992:	b480      	push	{r7}
 8003994:	b083      	sub	sp, #12
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800399a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800399e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	0c1b      	lsrs	r3, r3, #16
 80039a6:	041b      	lsls	r3, r3, #16
 80039a8:	43db      	mvns	r3, r3
 80039aa:	401a      	ands	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	041b      	lsls	r3, r3, #16
 80039b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039b4:	4313      	orrs	r3, r2
 80039b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80039ba:	bf00      	nop
 80039bc:	370c      	adds	r7, #12
 80039be:	46bd      	mov	sp, r7
 80039c0:	bc80      	pop	{r7}
 80039c2:	4770      	bx	lr

080039c4 <LL_RCC_SetRNGClockSource>:
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80039cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d4:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80039d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4313      	orrs	r3, r2
 80039e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bc80      	pop	{r7}
 80039ec:	4770      	bx	lr

080039ee <LL_RCC_SetADCClockSource>:
{
 80039ee:	b480      	push	{r7}
 80039f0:	b083      	sub	sp, #12
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80039f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039fe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003a0e:	bf00      	nop
 8003a10:	370c      	adds	r7, #12
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bc80      	pop	{r7}
 8003a16:	4770      	bx	lr

08003a18 <LL_RCC_SetRTCClockSource>:
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003a20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bc80      	pop	{r7}
 8003a40:	4770      	bx	lr

08003a42 <LL_RCC_GetRTCClockSource>:
{
 8003a42:	b480      	push	{r7}
 8003a44:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003a46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bc80      	pop	{r7}
 8003a58:	4770      	bx	lr

08003a5a <LL_RCC_ForceBackupDomainReset>:
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003a5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003a72:	bf00      	nop
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bc80      	pop	{r7}
 8003a78:	4770      	bx	lr

08003a7a <LL_RCC_ReleaseBackupDomainReset>:
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003a7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003a92:	bf00      	nop
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bc80      	pop	{r7}
 8003a98:	4770      	bx	lr
	...

08003a9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b086      	sub	sp, #24
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003aac:	2300      	movs	r3, #0
 8003aae:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d058      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8003abc:	f7fe fdda 	bl	8002674 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ac0:	f7fd fe68 	bl	8001794 <HAL_GetTick>
 8003ac4:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003ac6:	e009      	b.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ac8:	f7fd fe64 	bl	8001794 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d902      	bls.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	74fb      	strb	r3, [r7, #19]
        break;
 8003ada:	e006      	b.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003adc:	4b7b      	ldr	r3, [pc, #492]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ae8:	d1ee      	bne.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8003aea:	7cfb      	ldrb	r3, [r7, #19]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d13c      	bne.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8003af0:	f7ff ffa7 	bl	8003a42 <LL_RCC_GetRTCClockSource>
 8003af4:	4602      	mov	r2, r0
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d00f      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003afe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b0a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b0c:	f7ff ffa5 	bl	8003a5a <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b10:	f7ff ffb3 	bl	8003a7a <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	f003 0302 	and.w	r3, r3, #2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d014      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b28:	f7fd fe34 	bl	8001794 <HAL_GetTick>
 8003b2c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8003b2e:	e00b      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b30:	f7fd fe30 	bl	8001794 <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d902      	bls.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	74fb      	strb	r3, [r7, #19]
            break;
 8003b46:	e004      	b.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8003b48:	f7ff feb4 	bl	80038b4 <LL_RCC_LSE_IsReady>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d1ee      	bne.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8003b52:	7cfb      	ldrb	r3, [r7, #19]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d105      	bne.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f7ff ff5b 	bl	8003a18 <LL_RCC_SetRTCClockSource>
 8003b62:	e004      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b64:	7cfb      	ldrb	r3, [r7, #19]
 8003b66:	74bb      	strb	r3, [r7, #18]
 8003b68:	e001      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b6a:	7cfb      	ldrb	r3, [r7, #19]
 8003b6c:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d004      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7ff fea9 	bl	80038d6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0302 	and.w	r3, r3, #2
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d004      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	4618      	mov	r0, r3
 8003b96:	f7ff fe9e 	bl	80038d6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0320 	and.w	r3, r3, #32
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d004      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7ff fec0 	bl	8003930 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d004      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a1b      	ldr	r3, [r3, #32]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f7ff fee6 	bl	8003992 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d004      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7ff fedb 	bl	8003992 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d004      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bec:	4618      	mov	r0, r3
 8003bee:	f7ff fed0 	bl	8003992 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d004      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	695b      	ldr	r3, [r3, #20]
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7ff fea9 	bl	800395a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d004      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f7ff fe9e 	bl	800395a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d004      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	69db      	ldr	r3, [r3, #28]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7ff fe93 	bl	800395a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0310 	and.w	r3, r3, #16
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d011      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	4618      	mov	r0, r3
 8003c46:	f7ff fe5e 	bl	8003906 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c52:	d107      	bne.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8003c54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c62:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d010      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7ff fea5 	bl	80039c4 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d107      	bne.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003c82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c90:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d011      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f7ff fea3 	bl	80039ee <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cb0:	d107      	bne.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003cb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cc0:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8003cc2:	7cbb      	ldrb	r3, [r7, #18]
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3718      	adds	r7, #24
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	58000400 	.word	0x58000400

08003cd0 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8003cd8:	4b06      	ldr	r3, [pc, #24]	; (8003cf4 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003ce0:	4904      	ldr	r1, [pc, #16]	; (8003cf4 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	608b      	str	r3, [r1, #8]
}
 8003ce8:	bf00      	nop
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bc80      	pop	{r7}
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	58000400 	.word	0x58000400

08003cf8 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003cfc:	4b05      	ldr	r3, [pc, #20]	; (8003d14 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8003cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d02:	4a04      	ldr	r2, [pc, #16]	; (8003d14 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8003d04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003d0c:	bf00      	nop
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bc80      	pop	{r7}
 8003d12:	4770      	bx	lr
 8003d14:	58000400 	.word	0x58000400

08003d18 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003d1c:	4b05      	ldr	r3, [pc, #20]	; (8003d34 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8003d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d22:	4a04      	ldr	r2, [pc, #16]	; (8003d34 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8003d24:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003d28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003d2c:	bf00      	nop
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bc80      	pop	{r7}
 8003d32:	4770      	bx	lr
 8003d34:	58000400 	.word	0x58000400

08003d38 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8003d3c:	4b03      	ldr	r3, [pc, #12]	; (8003d4c <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8003d3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d42:	619a      	str	r2, [r3, #24]
}
 8003d44:	bf00      	nop
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bc80      	pop	{r7}
 8003d4a:	4770      	bx	lr
 8003d4c:	58000400 	.word	0x58000400

08003d50 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8003d50:	b480      	push	{r7}
 8003d52:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8003d54:	4b06      	ldr	r3, [pc, #24]	; (8003d70 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	f003 0302 	and.w	r3, r3, #2
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d101      	bne.n	8003d64 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8003d60:	2301      	movs	r3, #1
 8003d62:	e000      	b.n	8003d66 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bc80      	pop	{r7}
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	58000400 	.word	0x58000400

08003d74 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8003d74:	b480      	push	{r7}
 8003d76:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8003d78:	4b06      	ldr	r3, [pc, #24]	; (8003d94 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8003d7a:	695b      	ldr	r3, [r3, #20]
 8003d7c:	f003 0304 	and.w	r3, r3, #4
 8003d80:	2b04      	cmp	r3, #4
 8003d82:	d101      	bne.n	8003d88 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8003d84:	2301      	movs	r3, #1
 8003d86:	e000      	b.n	8003d8a <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bc80      	pop	{r7}
 8003d90:	4770      	bx	lr
 8003d92:	bf00      	nop
 8003d94:	58000400 	.word	0x58000400

08003d98 <LL_RCC_RF_DisableReset>:
{
 8003d98:	b480      	push	{r7}
 8003d9a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8003d9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003da0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003da4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003da8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003dac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003db0:	bf00      	nop
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bc80      	pop	{r7}
 8003db6:	4770      	bx	lr

08003db8 <LL_RCC_IsRFUnderReset>:
{
 8003db8:	b480      	push	{r7}
 8003dba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8003dbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dcc:	d101      	bne.n	8003dd2 <LL_RCC_IsRFUnderReset+0x1a>
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e000      	b.n	8003dd4 <LL_RCC_IsRFUnderReset+0x1c>
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bc80      	pop	{r7}
 8003dda:	4770      	bx	lr

08003ddc <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8003de4:	4b06      	ldr	r3, [pc, #24]	; (8003e00 <LL_EXTI_EnableIT_32_63+0x24>)
 8003de6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003dea:	4905      	ldr	r1, [pc, #20]	; (8003e00 <LL_EXTI_EnableIT_32_63+0x24>)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003df4:	bf00      	nop
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bc80      	pop	{r7}
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	58000800 	.word	0x58000800

08003e04 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d103      	bne.n	8003e1a <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	73fb      	strb	r3, [r7, #15]
    return status;
 8003e16:	7bfb      	ldrb	r3, [r7, #15]
 8003e18:	e052      	b.n	8003ec0 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	799b      	ldrb	r3, [r3, #6]
 8003e22:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8003e24:	7bbb      	ldrb	r3, [r7, #14]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d002      	beq.n	8003e30 <HAL_SUBGHZ_Init+0x2c>
 8003e2a:	7bbb      	ldrb	r3, [r7, #14]
 8003e2c:	2b03      	cmp	r3, #3
 8003e2e:	d109      	bne.n	8003e44 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f7fd fb59 	bl	80014ee <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8003e3c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003e40:	f7ff ffcc 	bl	8003ddc <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8003e44:	7bbb      	ldrb	r3, [r7, #14]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d126      	bne.n	8003e98 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2202      	movs	r2, #2
 8003e4e:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8003e50:	f7ff ffa2 	bl	8003d98 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003e54:	4b1c      	ldr	r3, [pc, #112]	; (8003ec8 <HAL_SUBGHZ_Init+0xc4>)
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	4613      	mov	r3, r2
 8003e5a:	00db      	lsls	r3, r3, #3
 8003e5c:	1a9b      	subs	r3, r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	0cdb      	lsrs	r3, r3, #19
 8003e62:	2264      	movs	r2, #100	; 0x64
 8003e64:	fb02 f303 	mul.w	r3, r2, r3
 8003e68:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d105      	bne.n	8003e7c <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	609a      	str	r2, [r3, #8]
        break;
 8003e7a:	e007      	b.n	8003e8c <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8003e82:	f7ff ff99 	bl	8003db8 <LL_RCC_IsRFUnderReset>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d1ee      	bne.n	8003e6a <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003e8c:	f7ff ff34 	bl	8003cf8 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8003e90:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003e94:	f7ff ff1c 	bl	8003cd0 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8003e98:	f7ff ff4e 	bl	8003d38 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8003e9c:	7bfb      	ldrb	r3, [r7, #15]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d10a      	bne.n	8003eb8 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f000 faac 	bl	8004404 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	719a      	strb	r2, [r3, #6]

  return status;
 8003ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3710      	adds	r7, #16
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	20000004 	.word	0x20000004

08003ecc <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b086      	sub	sp, #24
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	607a      	str	r2, [r7, #4]
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	460b      	mov	r3, r1
 8003eda:	817b      	strh	r3, [r7, #10]
 8003edc:	4613      	mov	r3, r2
 8003ede:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	799b      	ldrb	r3, [r3, #6]
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d14a      	bne.n	8003f80 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	795b      	ldrb	r3, [r3, #5]
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d101      	bne.n	8003ef6 <HAL_SUBGHZ_WriteRegisters+0x2a>
 8003ef2:	2302      	movs	r3, #2
 8003ef4:	e045      	b.n	8003f82 <HAL_SUBGHZ_WriteRegisters+0xb6>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2202      	movs	r2, #2
 8003f00:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f000 fb4c 	bl	80045a0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003f08:	f7ff ff06 	bl	8003d18 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8003f0c:	210d      	movs	r1, #13
 8003f0e:	68f8      	ldr	r0, [r7, #12]
 8003f10:	f000 fa98 	bl	8004444 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8003f14:	897b      	ldrh	r3, [r7, #10]
 8003f16:	0a1b      	lsrs	r3, r3, #8
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	68f8      	ldr	r0, [r7, #12]
 8003f20:	f000 fa90 	bl	8004444 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8003f24:	897b      	ldrh	r3, [r7, #10]
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	4619      	mov	r1, r3
 8003f2a:	68f8      	ldr	r0, [r7, #12]
 8003f2c:	f000 fa8a 	bl	8004444 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003f30:	2300      	movs	r3, #0
 8003f32:	82bb      	strh	r3, [r7, #20]
 8003f34:	e00a      	b.n	8003f4c <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003f36:	8abb      	ldrh	r3, [r7, #20]
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	4619      	mov	r1, r3
 8003f40:	68f8      	ldr	r0, [r7, #12]
 8003f42:	f000 fa7f 	bl	8004444 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003f46:	8abb      	ldrh	r3, [r7, #20]
 8003f48:	3301      	adds	r3, #1
 8003f4a:	82bb      	strh	r3, [r7, #20]
 8003f4c:	8aba      	ldrh	r2, [r7, #20]
 8003f4e:	893b      	ldrh	r3, [r7, #8]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d3f0      	bcc.n	8003f36 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003f54:	f7ff fed0 	bl	8003cf8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003f58:	68f8      	ldr	r0, [r7, #12]
 8003f5a:	f000 fb45 	bl	80045e8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d002      	beq.n	8003f6c <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	75fb      	strb	r3, [r7, #23]
 8003f6a:	e001      	b.n	8003f70 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2201      	movs	r2, #1
 8003f74:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	715a      	strb	r2, [r3, #5]

    return status;
 8003f7c:	7dfb      	ldrb	r3, [r7, #23]
 8003f7e:	e000      	b.n	8003f82 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8003f80:	2302      	movs	r3, #2
  }
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3718      	adds	r7, #24
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8003f8a:	b580      	push	{r7, lr}
 8003f8c:	b088      	sub	sp, #32
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	60f8      	str	r0, [r7, #12]
 8003f92:	607a      	str	r2, [r7, #4]
 8003f94:	461a      	mov	r2, r3
 8003f96:	460b      	mov	r3, r1
 8003f98:	817b      	strh	r3, [r7, #10]
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	799b      	ldrb	r3, [r3, #6]
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d14a      	bne.n	8004042 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	795b      	ldrb	r3, [r3, #5]
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d101      	bne.n	8003fb8 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8003fb4:	2302      	movs	r3, #2
 8003fb6:	e045      	b.n	8004044 <HAL_SUBGHZ_ReadRegisters+0xba>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003fbe:	68f8      	ldr	r0, [r7, #12]
 8003fc0:	f000 faee 	bl	80045a0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003fc4:	f7ff fea8 	bl	8003d18 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8003fc8:	211d      	movs	r1, #29
 8003fca:	68f8      	ldr	r0, [r7, #12]
 8003fcc:	f000 fa3a 	bl	8004444 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8003fd0:	897b      	ldrh	r3, [r7, #10]
 8003fd2:	0a1b      	lsrs	r3, r3, #8
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	4619      	mov	r1, r3
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	f000 fa32 	bl	8004444 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8003fe0:	897b      	ldrh	r3, [r7, #10]
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	68f8      	ldr	r0, [r7, #12]
 8003fe8:	f000 fa2c 	bl	8004444 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8003fec:	2100      	movs	r1, #0
 8003fee:	68f8      	ldr	r0, [r7, #12]
 8003ff0:	f000 fa28 	bl	8004444 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	82fb      	strh	r3, [r7, #22]
 8003ff8:	e009      	b.n	800400e <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003ffa:	69b9      	ldr	r1, [r7, #24]
 8003ffc:	68f8      	ldr	r0, [r7, #12]
 8003ffe:	f000 fa77 	bl	80044f0 <SUBGHZSPI_Receive>
      pData++;
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	3301      	adds	r3, #1
 8004006:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8004008:	8afb      	ldrh	r3, [r7, #22]
 800400a:	3301      	adds	r3, #1
 800400c:	82fb      	strh	r3, [r7, #22]
 800400e:	8afa      	ldrh	r2, [r7, #22]
 8004010:	893b      	ldrh	r3, [r7, #8]
 8004012:	429a      	cmp	r2, r3
 8004014:	d3f1      	bcc.n	8003ffa <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004016:	f7ff fe6f 	bl	8003cf8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800401a:	68f8      	ldr	r0, [r7, #12]
 800401c:	f000 fae4 	bl	80045e8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d002      	beq.n	800402e <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	77fb      	strb	r3, [r7, #31]
 800402c:	e001      	b.n	8004032 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 800402e:	2300      	movs	r3, #0
 8004030:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2201      	movs	r2, #1
 8004036:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2200      	movs	r2, #0
 800403c:	715a      	strb	r2, [r3, #5]

    return status;
 800403e:	7ffb      	ldrb	r3, [r7, #31]
 8004040:	e000      	b.n	8004044 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8004042:	2302      	movs	r3, #2
  }
}
 8004044:	4618      	mov	r0, r3
 8004046:	3720      	adds	r7, #32
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b086      	sub	sp, #24
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	607a      	str	r2, [r7, #4]
 8004056:	461a      	mov	r2, r3
 8004058:	460b      	mov	r3, r1
 800405a:	72fb      	strb	r3, [r7, #11]
 800405c:	4613      	mov	r3, r2
 800405e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	799b      	ldrb	r3, [r3, #6]
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b01      	cmp	r3, #1
 8004068:	d14a      	bne.n	8004100 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	795b      	ldrb	r3, [r3, #5]
 800406e:	2b01      	cmp	r3, #1
 8004070:	d101      	bne.n	8004076 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8004072:	2302      	movs	r3, #2
 8004074:	e045      	b.n	8004102 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2201      	movs	r2, #1
 800407a:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800407c:	68f8      	ldr	r0, [r7, #12]
 800407e:	f000 fa8f 	bl	80045a0 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8004082:	7afb      	ldrb	r3, [r7, #11]
 8004084:	2b84      	cmp	r3, #132	; 0x84
 8004086:	d002      	beq.n	800408e <HAL_SUBGHZ_ExecSetCmd+0x42>
 8004088:	7afb      	ldrb	r3, [r7, #11]
 800408a:	2b94      	cmp	r3, #148	; 0x94
 800408c:	d103      	bne.n	8004096 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2201      	movs	r2, #1
 8004092:	711a      	strb	r2, [r3, #4]
 8004094:	e002      	b.n	800409c <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800409c:	f7ff fe3c 	bl	8003d18 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80040a0:	7afb      	ldrb	r3, [r7, #11]
 80040a2:	4619      	mov	r1, r3
 80040a4:	68f8      	ldr	r0, [r7, #12]
 80040a6:	f000 f9cd 	bl	8004444 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80040aa:	2300      	movs	r3, #0
 80040ac:	82bb      	strh	r3, [r7, #20]
 80040ae:	e00a      	b.n	80040c6 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80040b0:	8abb      	ldrh	r3, [r7, #20]
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	4413      	add	r3, r2
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	4619      	mov	r1, r3
 80040ba:	68f8      	ldr	r0, [r7, #12]
 80040bc:	f000 f9c2 	bl	8004444 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80040c0:	8abb      	ldrh	r3, [r7, #20]
 80040c2:	3301      	adds	r3, #1
 80040c4:	82bb      	strh	r3, [r7, #20]
 80040c6:	8aba      	ldrh	r2, [r7, #20]
 80040c8:	893b      	ldrh	r3, [r7, #8]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d3f0      	bcc.n	80040b0 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80040ce:	f7ff fe13 	bl	8003cf8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 80040d2:	7afb      	ldrb	r3, [r7, #11]
 80040d4:	2b84      	cmp	r3, #132	; 0x84
 80040d6:	d002      	beq.n	80040de <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 80040d8:	68f8      	ldr	r0, [r7, #12]
 80040da:	f000 fa85 	bl	80045e8 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d002      	beq.n	80040ec <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	75fb      	strb	r3, [r7, #23]
 80040ea:	e001      	b.n	80040f0 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 80040ec:	2300      	movs	r3, #0
 80040ee:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2201      	movs	r2, #1
 80040f4:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2200      	movs	r2, #0
 80040fa:	715a      	strb	r2, [r3, #5]

    return status;
 80040fc:	7dfb      	ldrb	r3, [r7, #23]
 80040fe:	e000      	b.n	8004102 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8004100:	2302      	movs	r3, #2
  }
}
 8004102:	4618      	mov	r0, r3
 8004104:	3718      	adds	r7, #24
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}

0800410a <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800410a:	b580      	push	{r7, lr}
 800410c:	b088      	sub	sp, #32
 800410e:	af00      	add	r7, sp, #0
 8004110:	60f8      	str	r0, [r7, #12]
 8004112:	607a      	str	r2, [r7, #4]
 8004114:	461a      	mov	r2, r3
 8004116:	460b      	mov	r3, r1
 8004118:	72fb      	strb	r3, [r7, #11]
 800411a:	4613      	mov	r3, r2
 800411c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	799b      	ldrb	r3, [r3, #6]
 8004126:	b2db      	uxtb	r3, r3
 8004128:	2b01      	cmp	r3, #1
 800412a:	d13d      	bne.n	80041a8 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	795b      	ldrb	r3, [r3, #5]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d101      	bne.n	8004138 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8004134:	2302      	movs	r3, #2
 8004136:	e038      	b.n	80041aa <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2201      	movs	r2, #1
 800413c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800413e:	68f8      	ldr	r0, [r7, #12]
 8004140:	f000 fa2e 	bl	80045a0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004144:	f7ff fde8 	bl	8003d18 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8004148:	7afb      	ldrb	r3, [r7, #11]
 800414a:	4619      	mov	r1, r3
 800414c:	68f8      	ldr	r0, [r7, #12]
 800414e:	f000 f979 	bl	8004444 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8004152:	2100      	movs	r1, #0
 8004154:	68f8      	ldr	r0, [r7, #12]
 8004156:	f000 f975 	bl	8004444 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800415a:	2300      	movs	r3, #0
 800415c:	82fb      	strh	r3, [r7, #22]
 800415e:	e009      	b.n	8004174 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004160:	69b9      	ldr	r1, [r7, #24]
 8004162:	68f8      	ldr	r0, [r7, #12]
 8004164:	f000 f9c4 	bl	80044f0 <SUBGHZSPI_Receive>
      pData++;
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	3301      	adds	r3, #1
 800416c:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800416e:	8afb      	ldrh	r3, [r7, #22]
 8004170:	3301      	adds	r3, #1
 8004172:	82fb      	strh	r3, [r7, #22]
 8004174:	8afa      	ldrh	r2, [r7, #22]
 8004176:	893b      	ldrh	r3, [r7, #8]
 8004178:	429a      	cmp	r2, r3
 800417a:	d3f1      	bcc.n	8004160 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800417c:	f7ff fdbc 	bl	8003cf8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004180:	68f8      	ldr	r0, [r7, #12]
 8004182:	f000 fa31 	bl	80045e8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d002      	beq.n	8004194 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	77fb      	strb	r3, [r7, #31]
 8004192:	e001      	b.n	8004198 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8004194:	2300      	movs	r3, #0
 8004196:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2201      	movs	r2, #1
 800419c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2200      	movs	r2, #0
 80041a2:	715a      	strb	r2, [r3, #5]

    return status;
 80041a4:	7ffb      	ldrb	r3, [r7, #31]
 80041a6:	e000      	b.n	80041aa <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80041a8:	2302      	movs	r3, #2
  }
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3720      	adds	r7, #32
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 80041b2:	b580      	push	{r7, lr}
 80041b4:	b086      	sub	sp, #24
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	60f8      	str	r0, [r7, #12]
 80041ba:	607a      	str	r2, [r7, #4]
 80041bc:	461a      	mov	r2, r3
 80041be:	460b      	mov	r3, r1
 80041c0:	72fb      	strb	r3, [r7, #11]
 80041c2:	4613      	mov	r3, r2
 80041c4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	799b      	ldrb	r3, [r3, #6]
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d13e      	bne.n	800424e <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	795b      	ldrb	r3, [r3, #5]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d101      	bne.n	80041dc <HAL_SUBGHZ_WriteBuffer+0x2a>
 80041d8:	2302      	movs	r3, #2
 80041da:	e039      	b.n	8004250 <HAL_SUBGHZ_WriteBuffer+0x9e>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2201      	movs	r2, #1
 80041e0:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80041e2:	68f8      	ldr	r0, [r7, #12]
 80041e4:	f000 f9dc 	bl	80045a0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80041e8:	f7ff fd96 	bl	8003d18 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 80041ec:	210e      	movs	r1, #14
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	f000 f928 	bl	8004444 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80041f4:	7afb      	ldrb	r3, [r7, #11]
 80041f6:	4619      	mov	r1, r3
 80041f8:	68f8      	ldr	r0, [r7, #12]
 80041fa:	f000 f923 	bl	8004444 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80041fe:	2300      	movs	r3, #0
 8004200:	82bb      	strh	r3, [r7, #20]
 8004202:	e00a      	b.n	800421a <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8004204:	8abb      	ldrh	r3, [r7, #20]
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	4413      	add	r3, r2
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	4619      	mov	r1, r3
 800420e:	68f8      	ldr	r0, [r7, #12]
 8004210:	f000 f918 	bl	8004444 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004214:	8abb      	ldrh	r3, [r7, #20]
 8004216:	3301      	adds	r3, #1
 8004218:	82bb      	strh	r3, [r7, #20]
 800421a:	8aba      	ldrh	r2, [r7, #20]
 800421c:	893b      	ldrh	r3, [r7, #8]
 800421e:	429a      	cmp	r2, r3
 8004220:	d3f0      	bcc.n	8004204 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004222:	f7ff fd69 	bl	8003cf8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004226:	68f8      	ldr	r0, [r7, #12]
 8004228:	f000 f9de 	bl	80045e8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d002      	beq.n	800423a <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	75fb      	strb	r3, [r7, #23]
 8004238:	e001      	b.n	800423e <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 800423a:	2300      	movs	r3, #0
 800423c:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2201      	movs	r2, #1
 8004242:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	715a      	strb	r2, [r3, #5]

    return status;
 800424a:	7dfb      	ldrb	r3, [r7, #23]
 800424c:	e000      	b.n	8004250 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800424e:	2302      	movs	r3, #2
  }
}
 8004250:	4618      	mov	r0, r3
 8004252:	3718      	adds	r7, #24
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b088      	sub	sp, #32
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	607a      	str	r2, [r7, #4]
 8004262:	461a      	mov	r2, r3
 8004264:	460b      	mov	r3, r1
 8004266:	72fb      	strb	r3, [r7, #11]
 8004268:	4613      	mov	r3, r2
 800426a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	799b      	ldrb	r3, [r3, #6]
 8004274:	b2db      	uxtb	r3, r3
 8004276:	2b01      	cmp	r3, #1
 8004278:	d141      	bne.n	80042fe <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	795b      	ldrb	r3, [r3, #5]
 800427e:	2b01      	cmp	r3, #1
 8004280:	d101      	bne.n	8004286 <HAL_SUBGHZ_ReadBuffer+0x2e>
 8004282:	2302      	movs	r3, #2
 8004284:	e03c      	b.n	8004300 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2201      	movs	r2, #1
 800428a:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800428c:	68f8      	ldr	r0, [r7, #12]
 800428e:	f000 f987 	bl	80045a0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004292:	f7ff fd41 	bl	8003d18 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8004296:	211e      	movs	r1, #30
 8004298:	68f8      	ldr	r0, [r7, #12]
 800429a:	f000 f8d3 	bl	8004444 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800429e:	7afb      	ldrb	r3, [r7, #11]
 80042a0:	4619      	mov	r1, r3
 80042a2:	68f8      	ldr	r0, [r7, #12]
 80042a4:	f000 f8ce 	bl	8004444 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80042a8:	2100      	movs	r1, #0
 80042aa:	68f8      	ldr	r0, [r7, #12]
 80042ac:	f000 f8ca 	bl	8004444 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80042b0:	2300      	movs	r3, #0
 80042b2:	82fb      	strh	r3, [r7, #22]
 80042b4:	e009      	b.n	80042ca <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80042b6:	69b9      	ldr	r1, [r7, #24]
 80042b8:	68f8      	ldr	r0, [r7, #12]
 80042ba:	f000 f919 	bl	80044f0 <SUBGHZSPI_Receive>
      pData++;
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	3301      	adds	r3, #1
 80042c2:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80042c4:	8afb      	ldrh	r3, [r7, #22]
 80042c6:	3301      	adds	r3, #1
 80042c8:	82fb      	strh	r3, [r7, #22]
 80042ca:	8afa      	ldrh	r2, [r7, #22]
 80042cc:	893b      	ldrh	r3, [r7, #8]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d3f1      	bcc.n	80042b6 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80042d2:	f7ff fd11 	bl	8003cf8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80042d6:	68f8      	ldr	r0, [r7, #12]
 80042d8:	f000 f986 	bl	80045e8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d002      	beq.n	80042ea <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	77fb      	strb	r3, [r7, #31]
 80042e8:	e001      	b.n	80042ee <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 80042ea:	2300      	movs	r3, #0
 80042ec:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2201      	movs	r2, #1
 80042f2:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2200      	movs	r2, #0
 80042f8:	715a      	strb	r2, [r3, #5]

    return status;
 80042fa:	7ffb      	ldrb	r3, [r7, #31]
 80042fc:	e000      	b.n	8004300 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80042fe:	2302      	movs	r3, #2
  }
}
 8004300:	4618      	mov	r0, r3
 8004302:	3720      	adds	r7, #32
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8004310:	2300      	movs	r3, #0
 8004312:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8004314:	f107 020c 	add.w	r2, r7, #12
 8004318:	2302      	movs	r3, #2
 800431a:	2112      	movs	r1, #18
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f7ff fef4 	bl	800410a <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8004322:	7b3b      	ldrb	r3, [r7, #12]
 8004324:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8004326:	89fb      	ldrh	r3, [r7, #14]
 8004328:	021b      	lsls	r3, r3, #8
 800432a:	b21a      	sxth	r2, r3
 800432c:	7b7b      	ldrb	r3, [r7, #13]
 800432e:	b21b      	sxth	r3, r3
 8004330:	4313      	orrs	r3, r2
 8004332:	b21b      	sxth	r3, r3
 8004334:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8004336:	f107 020c 	add.w	r2, r7, #12
 800433a:	2302      	movs	r3, #2
 800433c:	2102      	movs	r1, #2
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f7ff fe84 	bl	800404c <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8004344:	89fb      	ldrh	r3, [r7, #14]
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	2b00      	cmp	r3, #0
 800434c:	d002      	beq.n	8004354 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f005 f9fe 	bl	8009750 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8004354:	89fb      	ldrh	r3, [r7, #14]
 8004356:	f003 0302 	and.w	r3, r3, #2
 800435a:	2b00      	cmp	r3, #0
 800435c:	d002      	beq.n	8004364 <HAL_SUBGHZ_IRQHandler+0x5c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f005 fa04 	bl	800976c <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8004364:	89fb      	ldrh	r3, [r7, #14]
 8004366:	f003 0304 	and.w	r3, r3, #4
 800436a:	2b00      	cmp	r3, #0
 800436c:	d002      	beq.n	8004374 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f005 fa54 	bl	800981c <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8004374:	89fb      	ldrh	r3, [r7, #14]
 8004376:	f003 0308 	and.w	r3, r3, #8
 800437a:	2b00      	cmp	r3, #0
 800437c:	d002      	beq.n	8004384 <HAL_SUBGHZ_IRQHandler+0x7c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f005 fa5a 	bl	8009838 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8004384:	89fb      	ldrh	r3, [r7, #14]
 8004386:	f003 0310 	and.w	r3, r3, #16
 800438a:	2b00      	cmp	r3, #0
 800438c:	d002      	beq.n	8004394 <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f005 fa60 	bl	8009854 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8004394:	89fb      	ldrh	r3, [r7, #14]
 8004396:	f003 0320 	and.w	r3, r3, #32
 800439a:	2b00      	cmp	r3, #0
 800439c:	d002      	beq.n	80043a4 <HAL_SUBGHZ_IRQHandler+0x9c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f005 fa2e 	bl	8009800 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 80043a4:	89fb      	ldrh	r3, [r7, #14]
 80043a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d002      	beq.n	80043b4 <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f005 f9ea 	bl	8009788 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 80043b4:	89fb      	ldrh	r3, [r7, #14]
 80043b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d00d      	beq.n	80043da <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 80043be:	89fb      	ldrh	r3, [r7, #14]
 80043c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d004      	beq.n	80043d2 <HAL_SUBGHZ_IRQHandler+0xca>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 80043c8:	2101      	movs	r1, #1
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f005 f9ea 	bl	80097a4 <HAL_SUBGHZ_CADStatusCallback>
 80043d0:	e003      	b.n	80043da <HAL_SUBGHZ_IRQHandler+0xd2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 80043d2:	2100      	movs	r1, #0
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f005 f9e5 	bl	80097a4 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 80043da:	89fb      	ldrh	r3, [r7, #14]
 80043dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d002      	beq.n	80043ea <HAL_SUBGHZ_IRQHandler+0xe2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f005 f9fb 	bl	80097e0 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 80043ea:	89fb      	ldrh	r3, [r7, #14]
 80043ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d002      	beq.n	80043fa <HAL_SUBGHZ_IRQHandler+0xf2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f005 fa3b 	bl	8009870 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 80043fa:	bf00      	nop
 80043fc:	3710      	adds	r7, #16
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
	...

08004404 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800440c:	4b0c      	ldr	r3, [pc, #48]	; (8004440 <SUBGHZSPI_Init+0x3c>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a0b      	ldr	r2, [pc, #44]	; (8004440 <SUBGHZSPI_Init+0x3c>)
 8004412:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004416:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8004418:	4a09      	ldr	r2, [pc, #36]	; (8004440 <SUBGHZSPI_Init+0x3c>)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8004420:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8004422:	4b07      	ldr	r3, [pc, #28]	; (8004440 <SUBGHZSPI_Init+0x3c>)
 8004424:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8004428:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800442a:	4b05      	ldr	r3, [pc, #20]	; (8004440 <SUBGHZSPI_Init+0x3c>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a04      	ldr	r2, [pc, #16]	; (8004440 <SUBGHZSPI_Init+0x3c>)
 8004430:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004434:	6013      	str	r3, [r2, #0]
}
 8004436:	bf00      	nop
 8004438:	370c      	adds	r7, #12
 800443a:	46bd      	mov	sp, r7
 800443c:	bc80      	pop	{r7}
 800443e:	4770      	bx	lr
 8004440:	58010000 	.word	0x58010000

08004444 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8004444:	b480      	push	{r7}
 8004446:	b087      	sub	sp, #28
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	460b      	mov	r3, r1
 800444e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004450:	2300      	movs	r3, #0
 8004452:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004454:	4b23      	ldr	r3, [pc, #140]	; (80044e4 <SUBGHZSPI_Transmit+0xa0>)
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	4613      	mov	r3, r2
 800445a:	00db      	lsls	r3, r3, #3
 800445c:	1a9b      	subs	r3, r3, r2
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	0cdb      	lsrs	r3, r3, #19
 8004462:	2264      	movs	r2, #100	; 0x64
 8004464:	fb02 f303 	mul.w	r3, r2, r3
 8004468:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d105      	bne.n	800447c <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	609a      	str	r2, [r3, #8]
      break;
 800447a:	e008      	b.n	800448e <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	3b01      	subs	r3, #1
 8004480:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004482:	4b19      	ldr	r3, [pc, #100]	; (80044e8 <SUBGHZSPI_Transmit+0xa4>)
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	f003 0302 	and.w	r3, r3, #2
 800448a:	2b02      	cmp	r3, #2
 800448c:	d1ed      	bne.n	800446a <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800448e:	4b17      	ldr	r3, [pc, #92]	; (80044ec <SUBGHZSPI_Transmit+0xa8>)
 8004490:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	78fa      	ldrb	r2, [r7, #3]
 8004496:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004498:	4b12      	ldr	r3, [pc, #72]	; (80044e4 <SUBGHZSPI_Transmit+0xa0>)
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	4613      	mov	r3, r2
 800449e:	00db      	lsls	r3, r3, #3
 80044a0:	1a9b      	subs	r3, r3, r2
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	0cdb      	lsrs	r3, r3, #19
 80044a6:	2264      	movs	r2, #100	; 0x64
 80044a8:	fb02 f303 	mul.w	r3, r2, r3
 80044ac:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d105      	bne.n	80044c0 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	609a      	str	r2, [r3, #8]
      break;
 80044be:	e008      	b.n	80044d2 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	3b01      	subs	r3, #1
 80044c4:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80044c6:	4b08      	ldr	r3, [pc, #32]	; (80044e8 <SUBGHZSPI_Transmit+0xa4>)
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f003 0301 	and.w	r3, r3, #1
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d1ed      	bne.n	80044ae <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 80044d2:	4b05      	ldr	r3, [pc, #20]	; (80044e8 <SUBGHZSPI_Transmit+0xa4>)
 80044d4:	68db      	ldr	r3, [r3, #12]

  return status;
 80044d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80044d8:	4618      	mov	r0, r3
 80044da:	371c      	adds	r7, #28
 80044dc:	46bd      	mov	sp, r7
 80044de:	bc80      	pop	{r7}
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	20000004 	.word	0x20000004
 80044e8:	58010000 	.word	0x58010000
 80044ec:	5801000c 	.word	0x5801000c

080044f0 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b087      	sub	sp, #28
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044fa:	2300      	movs	r3, #0
 80044fc:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80044fe:	4b25      	ldr	r3, [pc, #148]	; (8004594 <SUBGHZSPI_Receive+0xa4>)
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	4613      	mov	r3, r2
 8004504:	00db      	lsls	r3, r3, #3
 8004506:	1a9b      	subs	r3, r3, r2
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	0cdb      	lsrs	r3, r3, #19
 800450c:	2264      	movs	r2, #100	; 0x64
 800450e:	fb02 f303 	mul.w	r3, r2, r3
 8004512:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d105      	bne.n	8004526 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2201      	movs	r2, #1
 8004522:	609a      	str	r2, [r3, #8]
      break;
 8004524:	e008      	b.n	8004538 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	3b01      	subs	r3, #1
 800452a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800452c:	4b1a      	ldr	r3, [pc, #104]	; (8004598 <SUBGHZSPI_Receive+0xa8>)
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	f003 0302 	and.w	r3, r3, #2
 8004534:	2b02      	cmp	r3, #2
 8004536:	d1ed      	bne.n	8004514 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8004538:	4b18      	ldr	r3, [pc, #96]	; (800459c <SUBGHZSPI_Receive+0xac>)
 800453a:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	22ff      	movs	r2, #255	; 0xff
 8004540:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004542:	4b14      	ldr	r3, [pc, #80]	; (8004594 <SUBGHZSPI_Receive+0xa4>)
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	4613      	mov	r3, r2
 8004548:	00db      	lsls	r3, r3, #3
 800454a:	1a9b      	subs	r3, r3, r2
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	0cdb      	lsrs	r3, r3, #19
 8004550:	2264      	movs	r2, #100	; 0x64
 8004552:	fb02 f303 	mul.w	r3, r2, r3
 8004556:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d105      	bne.n	800456a <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2201      	movs	r2, #1
 8004566:	609a      	str	r2, [r3, #8]
      break;
 8004568:	e008      	b.n	800457c <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	3b01      	subs	r3, #1
 800456e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004570:	4b09      	ldr	r3, [pc, #36]	; (8004598 <SUBGHZSPI_Receive+0xa8>)
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	f003 0301 	and.w	r3, r3, #1
 8004578:	2b01      	cmp	r3, #1
 800457a:	d1ed      	bne.n	8004558 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 800457c:	4b06      	ldr	r3, [pc, #24]	; (8004598 <SUBGHZSPI_Receive+0xa8>)
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	b2da      	uxtb	r2, r3
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	701a      	strb	r2, [r3, #0]

  return status;
 8004586:	7dfb      	ldrb	r3, [r7, #23]
}
 8004588:	4618      	mov	r0, r3
 800458a:	371c      	adds	r7, #28
 800458c:	46bd      	mov	sp, r7
 800458e:	bc80      	pop	{r7}
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	20000004 	.word	0x20000004
 8004598:	58010000 	.word	0x58010000
 800459c:	5801000c 	.word	0x5801000c

080045a0 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	791b      	ldrb	r3, [r3, #4]
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d111      	bne.n	80045d4 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 80045b0:	4b0c      	ldr	r3, [pc, #48]	; (80045e4 <SUBGHZ_CheckDeviceReady+0x44>)
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	4613      	mov	r3, r2
 80045b6:	005b      	lsls	r3, r3, #1
 80045b8:	4413      	add	r3, r2
 80045ba:	00db      	lsls	r3, r3, #3
 80045bc:	0c1b      	lsrs	r3, r3, #16
 80045be:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80045c0:	f7ff fbaa 	bl	8003d18 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	3b01      	subs	r3, #1
 80045c8:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d1f9      	bne.n	80045c4 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80045d0:	f7ff fb92 	bl	8003cf8 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f000 f807 	bl	80045e8 <SUBGHZ_WaitOnBusy>
 80045da:	4603      	mov	r3, r0
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3710      	adds	r7, #16
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	20000004 	.word	0x20000004

080045e8 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b086      	sub	sp, #24
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 80045f0:	2300      	movs	r3, #0
 80045f2:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 80045f4:	4b12      	ldr	r3, [pc, #72]	; (8004640 <SUBGHZ_WaitOnBusy+0x58>)
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	4613      	mov	r3, r2
 80045fa:	005b      	lsls	r3, r3, #1
 80045fc:	4413      	add	r3, r2
 80045fe:	00db      	lsls	r3, r3, #3
 8004600:	0d1b      	lsrs	r3, r3, #20
 8004602:	2264      	movs	r2, #100	; 0x64
 8004604:	fb02 f303 	mul.w	r3, r2, r3
 8004608:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 800460a:	f7ff fbb3 	bl	8003d74 <LL_PWR_IsActiveFlag_RFBUSYMS>
 800460e:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d105      	bne.n	8004622 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2202      	movs	r2, #2
 800461e:	609a      	str	r2, [r3, #8]
      break;
 8004620:	e009      	b.n	8004636 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	3b01      	subs	r3, #1
 8004626:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8004628:	f7ff fb92 	bl	8003d50 <LL_PWR_IsActiveFlag_RFBUSYS>
 800462c:	4602      	mov	r2, r0
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	4013      	ands	r3, r2
 8004632:	2b01      	cmp	r3, #1
 8004634:	d0e9      	beq.n	800460a <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8004636:	7dfb      	ldrb	r3, [r7, #23]
}
 8004638:	4618      	mov	r0, r3
 800463a:	3718      	adds	r7, #24
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}
 8004640:	20000004 	.word	0x20000004

08004644 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d101      	bne.n	8004656 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e049      	b.n	80046ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800465c:	b2db      	uxtb	r3, r3
 800465e:	2b00      	cmp	r3, #0
 8004660:	d106      	bne.n	8004670 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f7fc ff52 	bl	8001514 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2202      	movs	r2, #2
 8004674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	3304      	adds	r3, #4
 8004680:	4619      	mov	r1, r3
 8004682:	4610      	mov	r0, r2
 8004684:	f000 fa90 	bl	8004ba8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3708      	adds	r7, #8
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
	...

080046f4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b085      	sub	sp, #20
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004702:	b2db      	uxtb	r3, r3
 8004704:	2b01      	cmp	r3, #1
 8004706:	d001      	beq.n	800470c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e02e      	b.n	800476a <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2202      	movs	r2, #2
 8004710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a16      	ldr	r2, [pc, #88]	; (8004774 <HAL_TIM_Base_Start+0x80>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d004      	beq.n	8004728 <HAL_TIM_Base_Start+0x34>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004726:	d115      	bne.n	8004754 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	689a      	ldr	r2, [r3, #8]
 800472e:	4b12      	ldr	r3, [pc, #72]	; (8004778 <HAL_TIM_Base_Start+0x84>)
 8004730:	4013      	ands	r3, r2
 8004732:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2b06      	cmp	r3, #6
 8004738:	d015      	beq.n	8004766 <HAL_TIM_Base_Start+0x72>
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004740:	d011      	beq.n	8004766 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f042 0201 	orr.w	r2, r2, #1
 8004750:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004752:	e008      	b.n	8004766 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f042 0201 	orr.w	r2, r2, #1
 8004762:	601a      	str	r2, [r3, #0]
 8004764:	e000      	b.n	8004768 <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004766:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004768:	2300      	movs	r3, #0
}
 800476a:	4618      	mov	r0, r3
 800476c:	3714      	adds	r7, #20
 800476e:	46bd      	mov	sp, r7
 8004770:	bc80      	pop	{r7}
 8004772:	4770      	bx	lr
 8004774:	40012c00 	.word	0x40012c00
 8004778:	00010007 	.word	0x00010007

0800477c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	f003 0302 	and.w	r3, r3, #2
 800478e:	2b02      	cmp	r3, #2
 8004790:	d122      	bne.n	80047d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	f003 0302 	and.w	r3, r3, #2
 800479c:	2b02      	cmp	r3, #2
 800479e:	d11b      	bne.n	80047d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f06f 0202 	mvn.w	r2, #2
 80047a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2201      	movs	r2, #1
 80047ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	699b      	ldr	r3, [r3, #24]
 80047b6:	f003 0303 	and.w	r3, r3, #3
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d003      	beq.n	80047c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 f9d6 	bl	8004b70 <HAL_TIM_IC_CaptureCallback>
 80047c4:	e005      	b.n	80047d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f000 f9c9 	bl	8004b5e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f000 f9d8 	bl	8004b82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	f003 0304 	and.w	r3, r3, #4
 80047e2:	2b04      	cmp	r3, #4
 80047e4:	d122      	bne.n	800482c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	f003 0304 	and.w	r3, r3, #4
 80047f0:	2b04      	cmp	r3, #4
 80047f2:	d11b      	bne.n	800482c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f06f 0204 	mvn.w	r2, #4
 80047fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2202      	movs	r2, #2
 8004802:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	699b      	ldr	r3, [r3, #24]
 800480a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800480e:	2b00      	cmp	r3, #0
 8004810:	d003      	beq.n	800481a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 f9ac 	bl	8004b70 <HAL_TIM_IC_CaptureCallback>
 8004818:	e005      	b.n	8004826 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 f99f 	bl	8004b5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f000 f9ae 	bl	8004b82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	f003 0308 	and.w	r3, r3, #8
 8004836:	2b08      	cmp	r3, #8
 8004838:	d122      	bne.n	8004880 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	f003 0308 	and.w	r3, r3, #8
 8004844:	2b08      	cmp	r3, #8
 8004846:	d11b      	bne.n	8004880 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f06f 0208 	mvn.w	r2, #8
 8004850:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2204      	movs	r2, #4
 8004856:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	69db      	ldr	r3, [r3, #28]
 800485e:	f003 0303 	and.w	r3, r3, #3
 8004862:	2b00      	cmp	r3, #0
 8004864:	d003      	beq.n	800486e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 f982 	bl	8004b70 <HAL_TIM_IC_CaptureCallback>
 800486c:	e005      	b.n	800487a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 f975 	bl	8004b5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f000 f984 	bl	8004b82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	f003 0310 	and.w	r3, r3, #16
 800488a:	2b10      	cmp	r3, #16
 800488c:	d122      	bne.n	80048d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	f003 0310 	and.w	r3, r3, #16
 8004898:	2b10      	cmp	r3, #16
 800489a:	d11b      	bne.n	80048d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f06f 0210 	mvn.w	r2, #16
 80048a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2208      	movs	r2, #8
 80048aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	69db      	ldr	r3, [r3, #28]
 80048b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d003      	beq.n	80048c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 f958 	bl	8004b70 <HAL_TIM_IC_CaptureCallback>
 80048c0:	e005      	b.n	80048ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 f94b 	bl	8004b5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 f95a 	bl	8004b82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	f003 0301 	and.w	r3, r3, #1
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d10e      	bne.n	8004900 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	f003 0301 	and.w	r3, r3, #1
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d107      	bne.n	8004900 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f06f 0201 	mvn.w	r2, #1
 80048f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 f926 	bl	8004b4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800490a:	2b80      	cmp	r3, #128	; 0x80
 800490c:	d10e      	bne.n	800492c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004918:	2b80      	cmp	r3, #128	; 0x80
 800491a:	d107      	bne.n	800492c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004924:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 fa9f 	bl	8004e6a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004936:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800493a:	d10e      	bne.n	800495a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004946:	2b80      	cmp	r3, #128	; 0x80
 8004948:	d107      	bne.n	800495a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004952:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f000 fa91 	bl	8004e7c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004964:	2b40      	cmp	r3, #64	; 0x40
 8004966:	d10e      	bne.n	8004986 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004972:	2b40      	cmp	r3, #64	; 0x40
 8004974:	d107      	bne.n	8004986 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800497e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f000 f907 	bl	8004b94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	691b      	ldr	r3, [r3, #16]
 800498c:	f003 0320 	and.w	r3, r3, #32
 8004990:	2b20      	cmp	r3, #32
 8004992:	d10e      	bne.n	80049b2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	f003 0320 	and.w	r3, r3, #32
 800499e:	2b20      	cmp	r3, #32
 80049a0:	d107      	bne.n	80049b2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f06f 0220 	mvn.w	r2, #32
 80049aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f000 fa53 	bl	8004e58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049b2:	bf00      	nop
 80049b4:	3708      	adds	r7, #8
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}

080049ba <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049ba:	b580      	push	{r7, lr}
 80049bc:	b084      	sub	sp, #16
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
 80049c2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049c4:	2300      	movs	r3, #0
 80049c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d101      	bne.n	80049d6 <HAL_TIM_ConfigClockSource+0x1c>
 80049d2:	2302      	movs	r3, #2
 80049d4:	e0b6      	b.n	8004b44 <HAL_TIM_ConfigClockSource+0x18a>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2201      	movs	r2, #1
 80049da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2202      	movs	r2, #2
 80049e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80049f4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80049f8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a00:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68ba      	ldr	r2, [r7, #8]
 8004a08:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a12:	d03e      	beq.n	8004a92 <HAL_TIM_ConfigClockSource+0xd8>
 8004a14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a18:	f200 8087 	bhi.w	8004b2a <HAL_TIM_ConfigClockSource+0x170>
 8004a1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a20:	f000 8086 	beq.w	8004b30 <HAL_TIM_ConfigClockSource+0x176>
 8004a24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a28:	d87f      	bhi.n	8004b2a <HAL_TIM_ConfigClockSource+0x170>
 8004a2a:	2b70      	cmp	r3, #112	; 0x70
 8004a2c:	d01a      	beq.n	8004a64 <HAL_TIM_ConfigClockSource+0xaa>
 8004a2e:	2b70      	cmp	r3, #112	; 0x70
 8004a30:	d87b      	bhi.n	8004b2a <HAL_TIM_ConfigClockSource+0x170>
 8004a32:	2b60      	cmp	r3, #96	; 0x60
 8004a34:	d050      	beq.n	8004ad8 <HAL_TIM_ConfigClockSource+0x11e>
 8004a36:	2b60      	cmp	r3, #96	; 0x60
 8004a38:	d877      	bhi.n	8004b2a <HAL_TIM_ConfigClockSource+0x170>
 8004a3a:	2b50      	cmp	r3, #80	; 0x50
 8004a3c:	d03c      	beq.n	8004ab8 <HAL_TIM_ConfigClockSource+0xfe>
 8004a3e:	2b50      	cmp	r3, #80	; 0x50
 8004a40:	d873      	bhi.n	8004b2a <HAL_TIM_ConfigClockSource+0x170>
 8004a42:	2b40      	cmp	r3, #64	; 0x40
 8004a44:	d058      	beq.n	8004af8 <HAL_TIM_ConfigClockSource+0x13e>
 8004a46:	2b40      	cmp	r3, #64	; 0x40
 8004a48:	d86f      	bhi.n	8004b2a <HAL_TIM_ConfigClockSource+0x170>
 8004a4a:	2b30      	cmp	r3, #48	; 0x30
 8004a4c:	d064      	beq.n	8004b18 <HAL_TIM_ConfigClockSource+0x15e>
 8004a4e:	2b30      	cmp	r3, #48	; 0x30
 8004a50:	d86b      	bhi.n	8004b2a <HAL_TIM_ConfigClockSource+0x170>
 8004a52:	2b20      	cmp	r3, #32
 8004a54:	d060      	beq.n	8004b18 <HAL_TIM_ConfigClockSource+0x15e>
 8004a56:	2b20      	cmp	r3, #32
 8004a58:	d867      	bhi.n	8004b2a <HAL_TIM_ConfigClockSource+0x170>
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d05c      	beq.n	8004b18 <HAL_TIM_ConfigClockSource+0x15e>
 8004a5e:	2b10      	cmp	r3, #16
 8004a60:	d05a      	beq.n	8004b18 <HAL_TIM_ConfigClockSource+0x15e>
 8004a62:	e062      	b.n	8004b2a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a74:	f000 f973 	bl	8004d5e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a86:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	68ba      	ldr	r2, [r7, #8]
 8004a8e:	609a      	str	r2, [r3, #8]
      break;
 8004a90:	e04f      	b.n	8004b32 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004aa2:	f000 f95c 	bl	8004d5e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	689a      	ldr	r2, [r3, #8]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ab4:	609a      	str	r2, [r3, #8]
      break;
 8004ab6:	e03c      	b.n	8004b32 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	f000 f8d1 	bl	8004c6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2150      	movs	r1, #80	; 0x50
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f000 f928 	bl	8004d26 <TIM_ITRx_SetConfig>
      break;
 8004ad6:	e02c      	b.n	8004b32 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	f000 f8ef 	bl	8004cc8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2160      	movs	r1, #96	; 0x60
 8004af0:	4618      	mov	r0, r3
 8004af2:	f000 f918 	bl	8004d26 <TIM_ITRx_SetConfig>
      break;
 8004af6:	e01c      	b.n	8004b32 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b04:	461a      	mov	r2, r3
 8004b06:	f000 f8b1 	bl	8004c6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2140      	movs	r1, #64	; 0x40
 8004b10:	4618      	mov	r0, r3
 8004b12:	f000 f908 	bl	8004d26 <TIM_ITRx_SetConfig>
      break;
 8004b16:	e00c      	b.n	8004b32 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4619      	mov	r1, r3
 8004b22:	4610      	mov	r0, r2
 8004b24:	f000 f8ff 	bl	8004d26 <TIM_ITRx_SetConfig>
      break;
 8004b28:	e003      	b.n	8004b32 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	73fb      	strb	r3, [r7, #15]
      break;
 8004b2e:	e000      	b.n	8004b32 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004b30:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2201      	movs	r2, #1
 8004b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3710      	adds	r7, #16
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004b54:	bf00      	nop
 8004b56:	370c      	adds	r7, #12
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bc80      	pop	{r7}
 8004b5c:	4770      	bx	lr

08004b5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b5e:	b480      	push	{r7}
 8004b60:	b083      	sub	sp, #12
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b66:	bf00      	nop
 8004b68:	370c      	adds	r7, #12
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bc80      	pop	{r7}
 8004b6e:	4770      	bx	lr

08004b70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b78:	bf00      	nop
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bc80      	pop	{r7}
 8004b80:	4770      	bx	lr

08004b82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b82:	b480      	push	{r7}
 8004b84:	b083      	sub	sp, #12
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b8a:	bf00      	nop
 8004b8c:	370c      	adds	r7, #12
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bc80      	pop	{r7}
 8004b92:	4770      	bx	lr

08004b94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b9c:	bf00      	nop
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bc80      	pop	{r7}
 8004ba4:	4770      	bx	lr
	...

08004ba8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b085      	sub	sp, #20
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a29      	ldr	r2, [pc, #164]	; (8004c60 <TIM_Base_SetConfig+0xb8>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d003      	beq.n	8004bc8 <TIM_Base_SetConfig+0x20>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bc6:	d108      	bne.n	8004bda <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	68fa      	ldr	r2, [r7, #12]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a20      	ldr	r2, [pc, #128]	; (8004c60 <TIM_Base_SetConfig+0xb8>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d00b      	beq.n	8004bfa <TIM_Base_SetConfig+0x52>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004be8:	d007      	beq.n	8004bfa <TIM_Base_SetConfig+0x52>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a1d      	ldr	r2, [pc, #116]	; (8004c64 <TIM_Base_SetConfig+0xbc>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d003      	beq.n	8004bfa <TIM_Base_SetConfig+0x52>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a1c      	ldr	r2, [pc, #112]	; (8004c68 <TIM_Base_SetConfig+0xc0>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d108      	bne.n	8004c0c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	68fa      	ldr	r2, [r7, #12]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	695b      	ldr	r3, [r3, #20]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	689a      	ldr	r2, [r3, #8]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a0b      	ldr	r2, [pc, #44]	; (8004c60 <TIM_Base_SetConfig+0xb8>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d007      	beq.n	8004c48 <TIM_Base_SetConfig+0xa0>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a0a      	ldr	r2, [pc, #40]	; (8004c64 <TIM_Base_SetConfig+0xbc>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d003      	beq.n	8004c48 <TIM_Base_SetConfig+0xa0>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a09      	ldr	r2, [pc, #36]	; (8004c68 <TIM_Base_SetConfig+0xc0>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d103      	bne.n	8004c50 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	691a      	ldr	r2, [r3, #16]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	615a      	str	r2, [r3, #20]
}
 8004c56:	bf00      	nop
 8004c58:	3714      	adds	r7, #20
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bc80      	pop	{r7}
 8004c5e:	4770      	bx	lr
 8004c60:	40012c00 	.word	0x40012c00
 8004c64:	40014400 	.word	0x40014400
 8004c68:	40014800 	.word	0x40014800

08004c6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b087      	sub	sp, #28
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	60b9      	str	r1, [r7, #8]
 8004c76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	6a1b      	ldr	r3, [r3, #32]
 8004c7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	f023 0201 	bic.w	r2, r3, #1
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	699b      	ldr	r3, [r3, #24]
 8004c8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	011b      	lsls	r3, r3, #4
 8004c9c:	693a      	ldr	r2, [r7, #16]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	f023 030a 	bic.w	r3, r3, #10
 8004ca8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004caa:	697a      	ldr	r2, [r7, #20]
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	693a      	ldr	r2, [r7, #16]
 8004cb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	697a      	ldr	r2, [r7, #20]
 8004cbc:	621a      	str	r2, [r3, #32]
}
 8004cbe:	bf00      	nop
 8004cc0:	371c      	adds	r7, #28
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bc80      	pop	{r7}
 8004cc6:	4770      	bx	lr

08004cc8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b087      	sub	sp, #28
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6a1b      	ldr	r3, [r3, #32]
 8004cd8:	f023 0210 	bic.w	r2, r3, #16
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6a1b      	ldr	r3, [r3, #32]
 8004cea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004cf2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	031b      	lsls	r3, r3, #12
 8004cf8:	697a      	ldr	r2, [r7, #20]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d04:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	011b      	lsls	r3, r3, #4
 8004d0a:	693a      	ldr	r2, [r7, #16]
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	697a      	ldr	r2, [r7, #20]
 8004d14:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	693a      	ldr	r2, [r7, #16]
 8004d1a:	621a      	str	r2, [r3, #32]
}
 8004d1c:	bf00      	nop
 8004d1e:	371c      	adds	r7, #28
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bc80      	pop	{r7}
 8004d24:	4770      	bx	lr

08004d26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d26:	b480      	push	{r7}
 8004d28:	b085      	sub	sp, #20
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
 8004d2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004d3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d42:	683a      	ldr	r2, [r7, #0]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	f043 0307 	orr.w	r3, r3, #7
 8004d4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	609a      	str	r2, [r3, #8]
}
 8004d54:	bf00      	nop
 8004d56:	3714      	adds	r7, #20
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bc80      	pop	{r7}
 8004d5c:	4770      	bx	lr

08004d5e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d5e:	b480      	push	{r7}
 8004d60:	b087      	sub	sp, #28
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	60f8      	str	r0, [r7, #12]
 8004d66:	60b9      	str	r1, [r7, #8]
 8004d68:	607a      	str	r2, [r7, #4]
 8004d6a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d78:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	021a      	lsls	r2, r3, #8
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	431a      	orrs	r2, r3
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	697a      	ldr	r2, [r7, #20]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	697a      	ldr	r2, [r7, #20]
 8004d90:	609a      	str	r2, [r3, #8]
}
 8004d92:	bf00      	nop
 8004d94:	371c      	adds	r7, #28
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bc80      	pop	{r7}
 8004d9a:	4770      	bx	lr

08004d9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b085      	sub	sp, #20
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d101      	bne.n	8004db4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004db0:	2302      	movs	r3, #2
 8004db2:	e04a      	b.n	8004e4a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2202      	movs	r2, #2
 8004dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a1e      	ldr	r2, [pc, #120]	; (8004e54 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d108      	bne.n	8004df0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004de4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004df6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68fa      	ldr	r2, [r7, #12]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68fa      	ldr	r2, [r7, #12]
 8004e08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a11      	ldr	r2, [pc, #68]	; (8004e54 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d004      	beq.n	8004e1e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e1c:	d10c      	bne.n	8004e38 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	68ba      	ldr	r2, [r7, #8]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68ba      	ldr	r2, [r7, #8]
 8004e36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3714      	adds	r7, #20
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bc80      	pop	{r7}
 8004e52:	4770      	bx	lr
 8004e54:	40012c00 	.word	0x40012c00

08004e58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e60:	bf00      	nop
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bc80      	pop	{r7}
 8004e68:	4770      	bx	lr

08004e6a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	b083      	sub	sp, #12
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e72:	bf00      	nop
 8004e74:	370c      	adds	r7, #12
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bc80      	pop	{r7}
 8004e7a:	4770      	bx	lr

08004e7c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004e84:	bf00      	nop
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bc80      	pop	{r7}
 8004e8c:	4770      	bx	lr

08004e8e <LL_RCC_GetUSARTClockSource>:
{
 8004e8e:	b480      	push	{r7}
 8004e90:	b083      	sub	sp, #12
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8004e96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e9a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	401a      	ands	r2, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	041b      	lsls	r3, r3, #16
 8004ea6:	4313      	orrs	r3, r2
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	370c      	adds	r7, #12
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bc80      	pop	{r7}
 8004eb0:	4770      	bx	lr

08004eb2 <LL_RCC_GetLPUARTClockSource>:
{
 8004eb2:	b480      	push	{r7}
 8004eb4:	b083      	sub	sp, #12
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004eba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ebe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4013      	ands	r3, r2
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	370c      	adds	r7, #12
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bc80      	pop	{r7}
 8004ece:	4770      	bx	lr

08004ed0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d101      	bne.n	8004ee2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e042      	b.n	8004f68 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d106      	bne.n	8004efa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f7fc fb31 	bl	800155c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2224      	movs	r2, #36	; 0x24
 8004efe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f022 0201 	bic.w	r2, r2, #1
 8004f10:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 fc48 	bl	80057a8 <UART_SetConfig>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d101      	bne.n	8004f22 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e022      	b.n	8004f68 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d002      	beq.n	8004f30 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 feb0 	bl	8005c90 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	685a      	ldr	r2, [r3, #4]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	689a      	ldr	r2, [r3, #8]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f042 0201 	orr.w	r2, r2, #1
 8004f5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f000 ff36 	bl	8005dd2 <UART_CheckIdleState>
 8004f66:	4603      	mov	r3, r0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3708      	adds	r7, #8
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b08a      	sub	sp, #40	; 0x28
 8004f74:	af02      	add	r7, sp, #8
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	603b      	str	r3, [r7, #0]
 8004f7c:	4613      	mov	r3, r2
 8004f7e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f86:	2b20      	cmp	r3, #32
 8004f88:	d173      	bne.n	8005072 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d002      	beq.n	8004f96 <HAL_UART_Transmit+0x26>
 8004f90:	88fb      	ldrh	r3, [r7, #6]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d101      	bne.n	8004f9a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e06c      	b.n	8005074 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2221      	movs	r2, #33	; 0x21
 8004fa6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004faa:	f7fc fbf3 	bl	8001794 <HAL_GetTick>
 8004fae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	88fa      	ldrh	r2, [r7, #6]
 8004fb4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	88fa      	ldrh	r2, [r7, #6]
 8004fbc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fc8:	d108      	bne.n	8004fdc <HAL_UART_Transmit+0x6c>
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d104      	bne.n	8004fdc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	61bb      	str	r3, [r7, #24]
 8004fda:	e003      	b.n	8004fe4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004fe4:	e02c      	b.n	8005040 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	9300      	str	r3, [sp, #0]
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	2200      	movs	r2, #0
 8004fee:	2180      	movs	r1, #128	; 0x80
 8004ff0:	68f8      	ldr	r0, [r7, #12]
 8004ff2:	f000 ff3c 	bl	8005e6e <UART_WaitOnFlagUntilTimeout>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d001      	beq.n	8005000 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e039      	b.n	8005074 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d10b      	bne.n	800501e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	881b      	ldrh	r3, [r3, #0]
 800500a:	461a      	mov	r2, r3
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005014:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	3302      	adds	r3, #2
 800501a:	61bb      	str	r3, [r7, #24]
 800501c:	e007      	b.n	800502e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	781a      	ldrb	r2, [r3, #0]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	3301      	adds	r3, #1
 800502c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005034:	b29b      	uxth	r3, r3
 8005036:	3b01      	subs	r3, #1
 8005038:	b29a      	uxth	r2, r3
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005046:	b29b      	uxth	r3, r3
 8005048:	2b00      	cmp	r3, #0
 800504a:	d1cc      	bne.n	8004fe6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	9300      	str	r3, [sp, #0]
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	2200      	movs	r2, #0
 8005054:	2140      	movs	r1, #64	; 0x40
 8005056:	68f8      	ldr	r0, [r7, #12]
 8005058:	f000 ff09 	bl	8005e6e <UART_WaitOnFlagUntilTimeout>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d001      	beq.n	8005066 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e006      	b.n	8005074 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2220      	movs	r2, #32
 800506a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800506e:	2300      	movs	r3, #0
 8005070:	e000      	b.n	8005074 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8005072:	2302      	movs	r3, #2
  }
}
 8005074:	4618      	mov	r0, r3
 8005076:	3720      	adds	r7, #32
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}

0800507c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b08a      	sub	sp, #40	; 0x28
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	4613      	mov	r3, r2
 8005088:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005090:	2b20      	cmp	r3, #32
 8005092:	d137      	bne.n	8005104 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d002      	beq.n	80050a0 <HAL_UART_Receive_DMA+0x24>
 800509a:	88fb      	ldrh	r3, [r7, #6]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d101      	bne.n	80050a4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e030      	b.n	8005106 <HAL_UART_Receive_DMA+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2200      	movs	r2, #0
 80050a8:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a18      	ldr	r2, [pc, #96]	; (8005110 <HAL_UART_Receive_DMA+0x94>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d01f      	beq.n	80050f4 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d018      	beq.n	80050f4 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	e853 3f00 	ldrex	r3, [r3]
 80050ce:	613b      	str	r3, [r7, #16]
   return(result);
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80050d6:	627b      	str	r3, [r7, #36]	; 0x24
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	461a      	mov	r2, r3
 80050de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e0:	623b      	str	r3, [r7, #32]
 80050e2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e4:	69f9      	ldr	r1, [r7, #28]
 80050e6:	6a3a      	ldr	r2, [r7, #32]
 80050e8:	e841 2300 	strex	r3, r2, [r1]
 80050ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d1e6      	bne.n	80050c2 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80050f4:	88fb      	ldrh	r3, [r7, #6]
 80050f6:	461a      	mov	r2, r3
 80050f8:	68b9      	ldr	r1, [r7, #8]
 80050fa:	68f8      	ldr	r0, [r7, #12]
 80050fc:	f000 ff80 	bl	8006000 <UART_Start_Receive_DMA>
 8005100:	4603      	mov	r3, r0
 8005102:	e000      	b.n	8005106 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005104:	2302      	movs	r3, #2
  }
}
 8005106:	4618      	mov	r0, r3
 8005108:	3728      	adds	r7, #40	; 0x28
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	40008000 	.word	0x40008000

08005114 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b0ba      	sub	sp, #232	; 0xe8
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	69db      	ldr	r3, [r3, #28]
 8005122:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800513a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800513e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005142:	4013      	ands	r3, r2
 8005144:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005148:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800514c:	2b00      	cmp	r3, #0
 800514e:	d11b      	bne.n	8005188 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005154:	f003 0320 	and.w	r3, r3, #32
 8005158:	2b00      	cmp	r3, #0
 800515a:	d015      	beq.n	8005188 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800515c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005160:	f003 0320 	and.w	r3, r3, #32
 8005164:	2b00      	cmp	r3, #0
 8005166:	d105      	bne.n	8005174 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005168:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800516c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d009      	beq.n	8005188 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005178:	2b00      	cmp	r3, #0
 800517a:	f000 82e3 	beq.w	8005744 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	4798      	blx	r3
      }
      return;
 8005186:	e2dd      	b.n	8005744 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005188:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800518c:	2b00      	cmp	r3, #0
 800518e:	f000 8123 	beq.w	80053d8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005192:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005196:	4b8d      	ldr	r3, [pc, #564]	; (80053cc <HAL_UART_IRQHandler+0x2b8>)
 8005198:	4013      	ands	r3, r2
 800519a:	2b00      	cmp	r3, #0
 800519c:	d106      	bne.n	80051ac <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800519e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80051a2:	4b8b      	ldr	r3, [pc, #556]	; (80053d0 <HAL_UART_IRQHandler+0x2bc>)
 80051a4:	4013      	ands	r3, r2
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	f000 8116 	beq.w	80053d8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80051ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051b0:	f003 0301 	and.w	r3, r3, #1
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d011      	beq.n	80051dc <HAL_UART_IRQHandler+0xc8>
 80051b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d00b      	beq.n	80051dc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	2201      	movs	r2, #1
 80051ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051d2:	f043 0201 	orr.w	r2, r3, #1
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80051dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051e0:	f003 0302 	and.w	r3, r3, #2
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d011      	beq.n	800520c <HAL_UART_IRQHandler+0xf8>
 80051e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051ec:	f003 0301 	and.w	r3, r3, #1
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d00b      	beq.n	800520c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	2202      	movs	r2, #2
 80051fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005202:	f043 0204 	orr.w	r2, r3, #4
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800520c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005210:	f003 0304 	and.w	r3, r3, #4
 8005214:	2b00      	cmp	r3, #0
 8005216:	d011      	beq.n	800523c <HAL_UART_IRQHandler+0x128>
 8005218:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800521c:	f003 0301 	and.w	r3, r3, #1
 8005220:	2b00      	cmp	r3, #0
 8005222:	d00b      	beq.n	800523c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2204      	movs	r2, #4
 800522a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005232:	f043 0202 	orr.w	r2, r3, #2
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800523c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005240:	f003 0308 	and.w	r3, r3, #8
 8005244:	2b00      	cmp	r3, #0
 8005246:	d017      	beq.n	8005278 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005248:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800524c:	f003 0320 	and.w	r3, r3, #32
 8005250:	2b00      	cmp	r3, #0
 8005252:	d105      	bne.n	8005260 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005254:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005258:	4b5c      	ldr	r3, [pc, #368]	; (80053cc <HAL_UART_IRQHandler+0x2b8>)
 800525a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800525c:	2b00      	cmp	r3, #0
 800525e:	d00b      	beq.n	8005278 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	2208      	movs	r2, #8
 8005266:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800526e:	f043 0208 	orr.w	r2, r3, #8
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800527c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005280:	2b00      	cmp	r3, #0
 8005282:	d012      	beq.n	80052aa <HAL_UART_IRQHandler+0x196>
 8005284:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005288:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800528c:	2b00      	cmp	r3, #0
 800528e:	d00c      	beq.n	80052aa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005298:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052a0:	f043 0220 	orr.w	r2, r3, #32
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	f000 8249 	beq.w	8005748 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80052b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052ba:	f003 0320 	and.w	r3, r3, #32
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d013      	beq.n	80052ea <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80052c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052c6:	f003 0320 	and.w	r3, r3, #32
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d105      	bne.n	80052da <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80052ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d007      	beq.n	80052ea <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d003      	beq.n	80052ea <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052fe:	2b40      	cmp	r3, #64	; 0x40
 8005300:	d005      	beq.n	800530e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005302:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005306:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800530a:	2b00      	cmp	r3, #0
 800530c:	d054      	beq.n	80053b8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 ff5c 	bl	80061cc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800531e:	2b40      	cmp	r3, #64	; 0x40
 8005320:	d146      	bne.n	80053b0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	3308      	adds	r3, #8
 8005328:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800532c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005330:	e853 3f00 	ldrex	r3, [r3]
 8005334:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005338:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800533c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005340:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	3308      	adds	r3, #8
 800534a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800534e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005352:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005356:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800535a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800535e:	e841 2300 	strex	r3, r2, [r1]
 8005362:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005366:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d1d9      	bne.n	8005322 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005374:	2b00      	cmp	r3, #0
 8005376:	d017      	beq.n	80053a8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800537e:	4a15      	ldr	r2, [pc, #84]	; (80053d4 <HAL_UART_IRQHandler+0x2c0>)
 8005380:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005388:	4618      	mov	r0, r3
 800538a:	f7fc fdfd 	bl	8001f88 <HAL_DMA_Abort_IT>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d019      	beq.n	80053c8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800539a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80053a2:	4610      	mov	r0, r2
 80053a4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053a6:	e00f      	b.n	80053c8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f000 f9e9 	bl	8005780 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053ae:	e00b      	b.n	80053c8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f000 f9e5 	bl	8005780 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053b6:	e007      	b.n	80053c8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f000 f9e1 	bl	8005780 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80053c6:	e1bf      	b.n	8005748 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053c8:	bf00      	nop
    return;
 80053ca:	e1bd      	b.n	8005748 <HAL_UART_IRQHandler+0x634>
 80053cc:	10000001 	.word	0x10000001
 80053d0:	04000120 	.word	0x04000120
 80053d4:	08006481 	.word	0x08006481

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053dc:	2b01      	cmp	r3, #1
 80053de:	f040 8153 	bne.w	8005688 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80053e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053e6:	f003 0310 	and.w	r3, r3, #16
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	f000 814c 	beq.w	8005688 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80053f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053f4:	f003 0310 	and.w	r3, r3, #16
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	f000 8145 	beq.w	8005688 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2210      	movs	r2, #16
 8005404:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005410:	2b40      	cmp	r3, #64	; 0x40
 8005412:	f040 80bb 	bne.w	800558c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005424:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005428:	2b00      	cmp	r3, #0
 800542a:	f000 818f 	beq.w	800574c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005434:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005438:	429a      	cmp	r2, r3
 800543a:	f080 8187 	bcs.w	800574c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005444:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 0320 	and.w	r3, r3, #32
 8005456:	2b00      	cmp	r3, #0
 8005458:	f040 8087 	bne.w	800556a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005464:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005468:	e853 3f00 	ldrex	r3, [r3]
 800546c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005470:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005474:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005478:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	461a      	mov	r2, r3
 8005482:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005486:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800548a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800548e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005492:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005496:	e841 2300 	strex	r3, r2, [r1]
 800549a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800549e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d1da      	bne.n	800545c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	3308      	adds	r3, #8
 80054ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054b0:	e853 3f00 	ldrex	r3, [r3]
 80054b4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80054b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054b8:	f023 0301 	bic.w	r3, r3, #1
 80054bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	3308      	adds	r3, #8
 80054c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80054ca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80054ce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80054d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80054d6:	e841 2300 	strex	r3, r2, [r1]
 80054da:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80054dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d1e1      	bne.n	80054a6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	3308      	adds	r3, #8
 80054e8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054ec:	e853 3f00 	ldrex	r3, [r3]
 80054f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80054f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	3308      	adds	r3, #8
 8005502:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005506:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005508:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800550a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800550c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800550e:	e841 2300 	strex	r3, r2, [r1]
 8005512:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005514:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005516:	2b00      	cmp	r3, #0
 8005518:	d1e3      	bne.n	80054e2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2220      	movs	r2, #32
 800551e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800552e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005530:	e853 3f00 	ldrex	r3, [r3]
 8005534:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005536:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005538:	f023 0310 	bic.w	r3, r3, #16
 800553c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	461a      	mov	r2, r3
 8005546:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800554a:	65bb      	str	r3, [r7, #88]	; 0x58
 800554c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800554e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005550:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005552:	e841 2300 	strex	r3, r2, [r1]
 8005556:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005558:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800555a:	2b00      	cmp	r3, #0
 800555c:	d1e4      	bne.n	8005528 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005564:	4618      	mov	r0, r3
 8005566:	f7fc fcb1 	bl	8001ecc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2202      	movs	r2, #2
 800556e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800557c:	b29b      	uxth	r3, r3
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	b29b      	uxth	r3, r3
 8005582:	4619      	mov	r1, r3
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 f904 	bl	8005792 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800558a:	e0df      	b.n	800574c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005598:	b29b      	uxth	r3, r3
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	f000 80d1 	beq.w	8005750 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80055ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	f000 80cc 	beq.w	8005750 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c0:	e853 3f00 	ldrex	r3, [r3]
 80055c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80055c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	461a      	mov	r2, r3
 80055d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80055da:	647b      	str	r3, [r7, #68]	; 0x44
 80055dc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80055e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80055e2:	e841 2300 	strex	r3, r2, [r1]
 80055e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80055e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d1e4      	bne.n	80055b8 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	3308      	adds	r3, #8
 80055f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f8:	e853 3f00 	ldrex	r3, [r3]
 80055fc:	623b      	str	r3, [r7, #32]
   return(result);
 80055fe:	6a3b      	ldr	r3, [r7, #32]
 8005600:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005604:	f023 0301 	bic.w	r3, r3, #1
 8005608:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	3308      	adds	r3, #8
 8005612:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005616:	633a      	str	r2, [r7, #48]	; 0x30
 8005618:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800561a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800561c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800561e:	e841 2300 	strex	r3, r2, [r1]
 8005622:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005626:	2b00      	cmp	r3, #0
 8005628:	d1e1      	bne.n	80055ee <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2220      	movs	r2, #32
 800562e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	e853 3f00 	ldrex	r3, [r3]
 800564a:	60fb      	str	r3, [r7, #12]
   return(result);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f023 0310 	bic.w	r3, r3, #16
 8005652:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	461a      	mov	r2, r3
 800565c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005660:	61fb      	str	r3, [r7, #28]
 8005662:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005664:	69b9      	ldr	r1, [r7, #24]
 8005666:	69fa      	ldr	r2, [r7, #28]
 8005668:	e841 2300 	strex	r3, r2, [r1]
 800566c:	617b      	str	r3, [r7, #20]
   return(result);
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d1e4      	bne.n	800563e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2202      	movs	r2, #2
 8005678:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800567a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800567e:	4619      	mov	r1, r3
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f000 f886 	bl	8005792 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005686:	e063      	b.n	8005750 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005688:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800568c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005690:	2b00      	cmp	r3, #0
 8005692:	d00e      	beq.n	80056b2 <HAL_UART_IRQHandler+0x59e>
 8005694:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005698:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800569c:	2b00      	cmp	r3, #0
 800569e:	d008      	beq.n	80056b2 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80056a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 ff29 	bl	8006502 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80056b0:	e051      	b.n	8005756 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80056b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d014      	beq.n	80056e8 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80056be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d105      	bne.n	80056d6 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80056ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d008      	beq.n	80056e8 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d03a      	beq.n	8005754 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	4798      	blx	r3
    }
    return;
 80056e6:	e035      	b.n	8005754 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80056e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d009      	beq.n	8005708 <HAL_UART_IRQHandler+0x5f4>
 80056f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d003      	beq.n	8005708 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f000 fed3 	bl	80064ac <UART_EndTransmit_IT>
    return;
 8005706:	e026      	b.n	8005756 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005708:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800570c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005710:	2b00      	cmp	r3, #0
 8005712:	d009      	beq.n	8005728 <HAL_UART_IRQHandler+0x614>
 8005714:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005718:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800571c:	2b00      	cmp	r3, #0
 800571e:	d003      	beq.n	8005728 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f000 ff00 	bl	8006526 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005726:	e016      	b.n	8005756 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800572c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005730:	2b00      	cmp	r3, #0
 8005732:	d010      	beq.n	8005756 <HAL_UART_IRQHandler+0x642>
 8005734:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005738:	2b00      	cmp	r3, #0
 800573a:	da0c      	bge.n	8005756 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f000 fee9 	bl	8006514 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005742:	e008      	b.n	8005756 <HAL_UART_IRQHandler+0x642>
      return;
 8005744:	bf00      	nop
 8005746:	e006      	b.n	8005756 <HAL_UART_IRQHandler+0x642>
    return;
 8005748:	bf00      	nop
 800574a:	e004      	b.n	8005756 <HAL_UART_IRQHandler+0x642>
      return;
 800574c:	bf00      	nop
 800574e:	e002      	b.n	8005756 <HAL_UART_IRQHandler+0x642>
      return;
 8005750:	bf00      	nop
 8005752:	e000      	b.n	8005756 <HAL_UART_IRQHandler+0x642>
    return;
 8005754:	bf00      	nop
  }
}
 8005756:	37e8      	adds	r7, #232	; 0xe8
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005764:	bf00      	nop
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	bc80      	pop	{r7}
 800576c:	4770      	bx	lr

0800576e <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800576e:	b480      	push	{r7}
 8005770:	b083      	sub	sp, #12
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005776:	bf00      	nop
 8005778:	370c      	adds	r7, #12
 800577a:	46bd      	mov	sp, r7
 800577c:	bc80      	pop	{r7}
 800577e:	4770      	bx	lr

08005780 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005788:	bf00      	nop
 800578a:	370c      	adds	r7, #12
 800578c:	46bd      	mov	sp, r7
 800578e:	bc80      	pop	{r7}
 8005790:	4770      	bx	lr

08005792 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005792:	b480      	push	{r7}
 8005794:	b083      	sub	sp, #12
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
 800579a:	460b      	mov	r3, r1
 800579c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800579e:	bf00      	nop
 80057a0:	370c      	adds	r7, #12
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bc80      	pop	{r7}
 80057a6:	4770      	bx	lr

080057a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057ac:	b08c      	sub	sp, #48	; 0x30
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80057b2:	2300      	movs	r3, #0
 80057b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	689a      	ldr	r2, [r3, #8]
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	431a      	orrs	r2, r3
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	695b      	ldr	r3, [r3, #20]
 80057c6:	431a      	orrs	r2, r3
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	69db      	ldr	r3, [r3, #28]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	4b94      	ldr	r3, [pc, #592]	; (8005a28 <UART_SetConfig+0x280>)
 80057d8:	4013      	ands	r3, r2
 80057da:	697a      	ldr	r2, [r7, #20]
 80057dc:	6812      	ldr	r2, [r2, #0]
 80057de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057e0:	430b      	orrs	r3, r1
 80057e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	68da      	ldr	r2, [r3, #12]
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	430a      	orrs	r2, r1
 80057f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	699b      	ldr	r3, [r3, #24]
 80057fe:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a89      	ldr	r2, [pc, #548]	; (8005a2c <UART_SetConfig+0x284>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d004      	beq.n	8005814 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	6a1b      	ldr	r3, [r3, #32]
 800580e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005810:	4313      	orrs	r3, r2
 8005812:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800581e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005822:	697a      	ldr	r2, [r7, #20]
 8005824:	6812      	ldr	r2, [r2, #0]
 8005826:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005828:	430b      	orrs	r3, r1
 800582a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005832:	f023 010f 	bic.w	r1, r3, #15
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	430a      	orrs	r2, r1
 8005840:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a7a      	ldr	r2, [pc, #488]	; (8005a30 <UART_SetConfig+0x288>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d127      	bne.n	800589c <UART_SetConfig+0xf4>
 800584c:	2003      	movs	r0, #3
 800584e:	f7ff fb1e 	bl	8004e8e <LL_RCC_GetUSARTClockSource>
 8005852:	4603      	mov	r3, r0
 8005854:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8005858:	2b03      	cmp	r3, #3
 800585a:	d81b      	bhi.n	8005894 <UART_SetConfig+0xec>
 800585c:	a201      	add	r2, pc, #4	; (adr r2, 8005864 <UART_SetConfig+0xbc>)
 800585e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005862:	bf00      	nop
 8005864:	08005875 	.word	0x08005875
 8005868:	08005885 	.word	0x08005885
 800586c:	0800587d 	.word	0x0800587d
 8005870:	0800588d 	.word	0x0800588d
 8005874:	2301      	movs	r3, #1
 8005876:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800587a:	e080      	b.n	800597e <UART_SetConfig+0x1d6>
 800587c:	2302      	movs	r3, #2
 800587e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005882:	e07c      	b.n	800597e <UART_SetConfig+0x1d6>
 8005884:	2304      	movs	r3, #4
 8005886:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800588a:	e078      	b.n	800597e <UART_SetConfig+0x1d6>
 800588c:	2308      	movs	r3, #8
 800588e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005892:	e074      	b.n	800597e <UART_SetConfig+0x1d6>
 8005894:	2310      	movs	r3, #16
 8005896:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800589a:	e070      	b.n	800597e <UART_SetConfig+0x1d6>
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a64      	ldr	r2, [pc, #400]	; (8005a34 <UART_SetConfig+0x28c>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d138      	bne.n	8005918 <UART_SetConfig+0x170>
 80058a6:	200c      	movs	r0, #12
 80058a8:	f7ff faf1 	bl	8004e8e <LL_RCC_GetUSARTClockSource>
 80058ac:	4603      	mov	r3, r0
 80058ae:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80058b2:	2b0c      	cmp	r3, #12
 80058b4:	d82c      	bhi.n	8005910 <UART_SetConfig+0x168>
 80058b6:	a201      	add	r2, pc, #4	; (adr r2, 80058bc <UART_SetConfig+0x114>)
 80058b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058bc:	080058f1 	.word	0x080058f1
 80058c0:	08005911 	.word	0x08005911
 80058c4:	08005911 	.word	0x08005911
 80058c8:	08005911 	.word	0x08005911
 80058cc:	08005901 	.word	0x08005901
 80058d0:	08005911 	.word	0x08005911
 80058d4:	08005911 	.word	0x08005911
 80058d8:	08005911 	.word	0x08005911
 80058dc:	080058f9 	.word	0x080058f9
 80058e0:	08005911 	.word	0x08005911
 80058e4:	08005911 	.word	0x08005911
 80058e8:	08005911 	.word	0x08005911
 80058ec:	08005909 	.word	0x08005909
 80058f0:	2300      	movs	r3, #0
 80058f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058f6:	e042      	b.n	800597e <UART_SetConfig+0x1d6>
 80058f8:	2302      	movs	r3, #2
 80058fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058fe:	e03e      	b.n	800597e <UART_SetConfig+0x1d6>
 8005900:	2304      	movs	r3, #4
 8005902:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005906:	e03a      	b.n	800597e <UART_SetConfig+0x1d6>
 8005908:	2308      	movs	r3, #8
 800590a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800590e:	e036      	b.n	800597e <UART_SetConfig+0x1d6>
 8005910:	2310      	movs	r3, #16
 8005912:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005916:	e032      	b.n	800597e <UART_SetConfig+0x1d6>
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a43      	ldr	r2, [pc, #268]	; (8005a2c <UART_SetConfig+0x284>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d12a      	bne.n	8005978 <UART_SetConfig+0x1d0>
 8005922:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8005926:	f7ff fac4 	bl	8004eb2 <LL_RCC_GetLPUARTClockSource>
 800592a:	4603      	mov	r3, r0
 800592c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005930:	d01a      	beq.n	8005968 <UART_SetConfig+0x1c0>
 8005932:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005936:	d81b      	bhi.n	8005970 <UART_SetConfig+0x1c8>
 8005938:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800593c:	d00c      	beq.n	8005958 <UART_SetConfig+0x1b0>
 800593e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005942:	d815      	bhi.n	8005970 <UART_SetConfig+0x1c8>
 8005944:	2b00      	cmp	r3, #0
 8005946:	d003      	beq.n	8005950 <UART_SetConfig+0x1a8>
 8005948:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800594c:	d008      	beq.n	8005960 <UART_SetConfig+0x1b8>
 800594e:	e00f      	b.n	8005970 <UART_SetConfig+0x1c8>
 8005950:	2300      	movs	r3, #0
 8005952:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005956:	e012      	b.n	800597e <UART_SetConfig+0x1d6>
 8005958:	2302      	movs	r3, #2
 800595a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800595e:	e00e      	b.n	800597e <UART_SetConfig+0x1d6>
 8005960:	2304      	movs	r3, #4
 8005962:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005966:	e00a      	b.n	800597e <UART_SetConfig+0x1d6>
 8005968:	2308      	movs	r3, #8
 800596a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800596e:	e006      	b.n	800597e <UART_SetConfig+0x1d6>
 8005970:	2310      	movs	r3, #16
 8005972:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005976:	e002      	b.n	800597e <UART_SetConfig+0x1d6>
 8005978:	2310      	movs	r3, #16
 800597a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a2a      	ldr	r2, [pc, #168]	; (8005a2c <UART_SetConfig+0x284>)
 8005984:	4293      	cmp	r3, r2
 8005986:	f040 80a4 	bne.w	8005ad2 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800598a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800598e:	2b08      	cmp	r3, #8
 8005990:	d823      	bhi.n	80059da <UART_SetConfig+0x232>
 8005992:	a201      	add	r2, pc, #4	; (adr r2, 8005998 <UART_SetConfig+0x1f0>)
 8005994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005998:	080059bd 	.word	0x080059bd
 800599c:	080059db 	.word	0x080059db
 80059a0:	080059c5 	.word	0x080059c5
 80059a4:	080059db 	.word	0x080059db
 80059a8:	080059cb 	.word	0x080059cb
 80059ac:	080059db 	.word	0x080059db
 80059b0:	080059db 	.word	0x080059db
 80059b4:	080059db 	.word	0x080059db
 80059b8:	080059d3 	.word	0x080059d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059bc:	f7fd fea4 	bl	8003708 <HAL_RCC_GetPCLK1Freq>
 80059c0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80059c2:	e010      	b.n	80059e6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059c4:	4b1c      	ldr	r3, [pc, #112]	; (8005a38 <UART_SetConfig+0x290>)
 80059c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80059c8:	e00d      	b.n	80059e6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059ca:	f7fd fde9 	bl	80035a0 <HAL_RCC_GetSysClockFreq>
 80059ce:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80059d0:	e009      	b.n	80059e6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80059d8:	e005      	b.n	80059e6 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 80059da:	2300      	movs	r3, #0
 80059dc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80059e4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80059e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	f000 8137 	beq.w	8005c5c <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f2:	4a12      	ldr	r2, [pc, #72]	; (8005a3c <UART_SetConfig+0x294>)
 80059f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059f8:	461a      	mov	r2, r3
 80059fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a00:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	685a      	ldr	r2, [r3, #4]
 8005a06:	4613      	mov	r3, r2
 8005a08:	005b      	lsls	r3, r3, #1
 8005a0a:	4413      	add	r3, r2
 8005a0c:	69ba      	ldr	r2, [r7, #24]
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d305      	bcc.n	8005a1e <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a18:	69ba      	ldr	r2, [r7, #24]
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d910      	bls.n	8005a40 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005a24:	e11a      	b.n	8005c5c <UART_SetConfig+0x4b4>
 8005a26:	bf00      	nop
 8005a28:	cfff69f3 	.word	0xcfff69f3
 8005a2c:	40008000 	.word	0x40008000
 8005a30:	40013800 	.word	0x40013800
 8005a34:	40004400 	.word	0x40004400
 8005a38:	00f42400 	.word	0x00f42400
 8005a3c:	0800b114 	.word	0x0800b114
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a42:	2200      	movs	r2, #0
 8005a44:	60bb      	str	r3, [r7, #8]
 8005a46:	60fa      	str	r2, [r7, #12]
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4c:	4a8e      	ldr	r2, [pc, #568]	; (8005c88 <UART_SetConfig+0x4e0>)
 8005a4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	2200      	movs	r2, #0
 8005a56:	603b      	str	r3, [r7, #0]
 8005a58:	607a      	str	r2, [r7, #4]
 8005a5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a5e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005a62:	f7fa fbdd 	bl	8000220 <__aeabi_uldivmod>
 8005a66:	4602      	mov	r2, r0
 8005a68:	460b      	mov	r3, r1
 8005a6a:	4610      	mov	r0, r2
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	f04f 0200 	mov.w	r2, #0
 8005a72:	f04f 0300 	mov.w	r3, #0
 8005a76:	020b      	lsls	r3, r1, #8
 8005a78:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005a7c:	0202      	lsls	r2, r0, #8
 8005a7e:	6979      	ldr	r1, [r7, #20]
 8005a80:	6849      	ldr	r1, [r1, #4]
 8005a82:	0849      	lsrs	r1, r1, #1
 8005a84:	2000      	movs	r0, #0
 8005a86:	460c      	mov	r4, r1
 8005a88:	4605      	mov	r5, r0
 8005a8a:	eb12 0804 	adds.w	r8, r2, r4
 8005a8e:	eb43 0905 	adc.w	r9, r3, r5
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	469a      	mov	sl, r3
 8005a9a:	4693      	mov	fp, r2
 8005a9c:	4652      	mov	r2, sl
 8005a9e:	465b      	mov	r3, fp
 8005aa0:	4640      	mov	r0, r8
 8005aa2:	4649      	mov	r1, r9
 8005aa4:	f7fa fbbc 	bl	8000220 <__aeabi_uldivmod>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	460b      	mov	r3, r1
 8005aac:	4613      	mov	r3, r2
 8005aae:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005ab0:	6a3b      	ldr	r3, [r7, #32]
 8005ab2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ab6:	d308      	bcc.n	8005aca <UART_SetConfig+0x322>
 8005ab8:	6a3b      	ldr	r3, [r7, #32]
 8005aba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005abe:	d204      	bcs.n	8005aca <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	6a3a      	ldr	r2, [r7, #32]
 8005ac6:	60da      	str	r2, [r3, #12]
 8005ac8:	e0c8      	b.n	8005c5c <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005ad0:	e0c4      	b.n	8005c5c <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	69db      	ldr	r3, [r3, #28]
 8005ad6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ada:	d167      	bne.n	8005bac <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8005adc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005ae0:	2b08      	cmp	r3, #8
 8005ae2:	d828      	bhi.n	8005b36 <UART_SetConfig+0x38e>
 8005ae4:	a201      	add	r2, pc, #4	; (adr r2, 8005aec <UART_SetConfig+0x344>)
 8005ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aea:	bf00      	nop
 8005aec:	08005b11 	.word	0x08005b11
 8005af0:	08005b19 	.word	0x08005b19
 8005af4:	08005b21 	.word	0x08005b21
 8005af8:	08005b37 	.word	0x08005b37
 8005afc:	08005b27 	.word	0x08005b27
 8005b00:	08005b37 	.word	0x08005b37
 8005b04:	08005b37 	.word	0x08005b37
 8005b08:	08005b37 	.word	0x08005b37
 8005b0c:	08005b2f 	.word	0x08005b2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b10:	f7fd fdfa 	bl	8003708 <HAL_RCC_GetPCLK1Freq>
 8005b14:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b16:	e014      	b.n	8005b42 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b18:	f7fd fe08 	bl	800372c <HAL_RCC_GetPCLK2Freq>
 8005b1c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b1e:	e010      	b.n	8005b42 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b20:	4b5a      	ldr	r3, [pc, #360]	; (8005c8c <UART_SetConfig+0x4e4>)
 8005b22:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005b24:	e00d      	b.n	8005b42 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b26:	f7fd fd3b 	bl	80035a0 <HAL_RCC_GetSysClockFreq>
 8005b2a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b2c:	e009      	b.n	8005b42 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b32:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005b34:	e005      	b.n	8005b42 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8005b36:	2300      	movs	r3, #0
 8005b38:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005b40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	f000 8089 	beq.w	8005c5c <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4e:	4a4e      	ldr	r2, [pc, #312]	; (8005c88 <UART_SetConfig+0x4e0>)
 8005b50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b54:	461a      	mov	r2, r3
 8005b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b58:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b5c:	005a      	lsls	r2, r3, #1
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	085b      	lsrs	r3, r3, #1
 8005b64:	441a      	add	r2, r3
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b6e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b70:	6a3b      	ldr	r3, [r7, #32]
 8005b72:	2b0f      	cmp	r3, #15
 8005b74:	d916      	bls.n	8005ba4 <UART_SetConfig+0x3fc>
 8005b76:	6a3b      	ldr	r3, [r7, #32]
 8005b78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b7c:	d212      	bcs.n	8005ba4 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b7e:	6a3b      	ldr	r3, [r7, #32]
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	f023 030f 	bic.w	r3, r3, #15
 8005b86:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b88:	6a3b      	ldr	r3, [r7, #32]
 8005b8a:	085b      	lsrs	r3, r3, #1
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	f003 0307 	and.w	r3, r3, #7
 8005b92:	b29a      	uxth	r2, r3
 8005b94:	8bfb      	ldrh	r3, [r7, #30]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	8bfa      	ldrh	r2, [r7, #30]
 8005ba0:	60da      	str	r2, [r3, #12]
 8005ba2:	e05b      	b.n	8005c5c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005baa:	e057      	b.n	8005c5c <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005bac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005bb0:	2b08      	cmp	r3, #8
 8005bb2:	d828      	bhi.n	8005c06 <UART_SetConfig+0x45e>
 8005bb4:	a201      	add	r2, pc, #4	; (adr r2, 8005bbc <UART_SetConfig+0x414>)
 8005bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bba:	bf00      	nop
 8005bbc:	08005be1 	.word	0x08005be1
 8005bc0:	08005be9 	.word	0x08005be9
 8005bc4:	08005bf1 	.word	0x08005bf1
 8005bc8:	08005c07 	.word	0x08005c07
 8005bcc:	08005bf7 	.word	0x08005bf7
 8005bd0:	08005c07 	.word	0x08005c07
 8005bd4:	08005c07 	.word	0x08005c07
 8005bd8:	08005c07 	.word	0x08005c07
 8005bdc:	08005bff 	.word	0x08005bff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005be0:	f7fd fd92 	bl	8003708 <HAL_RCC_GetPCLK1Freq>
 8005be4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005be6:	e014      	b.n	8005c12 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005be8:	f7fd fda0 	bl	800372c <HAL_RCC_GetPCLK2Freq>
 8005bec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005bee:	e010      	b.n	8005c12 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bf0:	4b26      	ldr	r3, [pc, #152]	; (8005c8c <UART_SetConfig+0x4e4>)
 8005bf2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005bf4:	e00d      	b.n	8005c12 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bf6:	f7fd fcd3 	bl	80035a0 <HAL_RCC_GetSysClockFreq>
 8005bfa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005bfc:	e009      	b.n	8005c12 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c02:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c04:	e005      	b.n	8005c12 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8005c06:	2300      	movs	r3, #0
 8005c08:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005c10:	bf00      	nop
    }

    if (pclk != 0U)
 8005c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d021      	beq.n	8005c5c <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1c:	4a1a      	ldr	r2, [pc, #104]	; (8005c88 <UART_SetConfig+0x4e0>)
 8005c1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c22:	461a      	mov	r2, r3
 8005c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c26:	fbb3 f2f2 	udiv	r2, r3, r2
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	085b      	lsrs	r3, r3, #1
 8005c30:	441a      	add	r2, r3
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c3a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c3c:	6a3b      	ldr	r3, [r7, #32]
 8005c3e:	2b0f      	cmp	r3, #15
 8005c40:	d909      	bls.n	8005c56 <UART_SetConfig+0x4ae>
 8005c42:	6a3b      	ldr	r3, [r7, #32]
 8005c44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c48:	d205      	bcs.n	8005c56 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c4a:	6a3b      	ldr	r3, [r7, #32]
 8005c4c:	b29a      	uxth	r2, r3
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	60da      	str	r2, [r3, #12]
 8005c54:	e002      	b.n	8005c5c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	2200      	movs	r2, #0
 8005c76:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005c78:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3730      	adds	r7, #48	; 0x30
 8005c80:	46bd      	mov	sp, r7
 8005c82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c86:	bf00      	nop
 8005c88:	0800b114 	.word	0x0800b114
 8005c8c:	00f42400 	.word	0x00f42400

08005c90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c9c:	f003 0301 	and.w	r3, r3, #1
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d00a      	beq.n	8005cba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	430a      	orrs	r2, r1
 8005cb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cbe:	f003 0302 	and.w	r3, r3, #2
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d00a      	beq.n	8005cdc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	430a      	orrs	r2, r1
 8005cda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce0:	f003 0304 	and.w	r3, r3, #4
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d00a      	beq.n	8005cfe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	430a      	orrs	r2, r1
 8005cfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d02:	f003 0308 	and.w	r3, r3, #8
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d00a      	beq.n	8005d20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	430a      	orrs	r2, r1
 8005d1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d24:	f003 0310 	and.w	r3, r3, #16
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d00a      	beq.n	8005d42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	430a      	orrs	r2, r1
 8005d40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d46:	f003 0320 	and.w	r3, r3, #32
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d00a      	beq.n	8005d64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	430a      	orrs	r2, r1
 8005d62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d01a      	beq.n	8005da6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	430a      	orrs	r2, r1
 8005d84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d8e:	d10a      	bne.n	8005da6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	430a      	orrs	r2, r1
 8005da4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d00a      	beq.n	8005dc8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	430a      	orrs	r2, r1
 8005dc6:	605a      	str	r2, [r3, #4]
  }
}
 8005dc8:	bf00      	nop
 8005dca:	370c      	adds	r7, #12
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bc80      	pop	{r7}
 8005dd0:	4770      	bx	lr

08005dd2 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005dd2:	b580      	push	{r7, lr}
 8005dd4:	b086      	sub	sp, #24
 8005dd6:	af02      	add	r7, sp, #8
 8005dd8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005de2:	f7fb fcd7 	bl	8001794 <HAL_GetTick>
 8005de6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f003 0308 	and.w	r3, r3, #8
 8005df2:	2b08      	cmp	r3, #8
 8005df4:	d10e      	bne.n	8005e14 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005df6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005dfa:	9300      	str	r3, [sp, #0]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f000 f832 	bl	8005e6e <UART_WaitOnFlagUntilTimeout>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d001      	beq.n	8005e14 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e10:	2303      	movs	r3, #3
 8005e12:	e028      	b.n	8005e66 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 0304 	and.w	r3, r3, #4
 8005e1e:	2b04      	cmp	r3, #4
 8005e20:	d10e      	bne.n	8005e40 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e22:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e26:	9300      	str	r3, [sp, #0]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f000 f81c 	bl	8005e6e <UART_WaitOnFlagUntilTimeout>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d001      	beq.n	8005e40 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e3c:	2303      	movs	r3, #3
 8005e3e:	e012      	b.n	8005e66 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2220      	movs	r2, #32
 8005e44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2220      	movs	r2, #32
 8005e4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3710      	adds	r7, #16
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}

08005e6e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e6e:	b580      	push	{r7, lr}
 8005e70:	b09c      	sub	sp, #112	; 0x70
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	60f8      	str	r0, [r7, #12]
 8005e76:	60b9      	str	r1, [r7, #8]
 8005e78:	603b      	str	r3, [r7, #0]
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e7e:	e0a9      	b.n	8005fd4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e86:	f000 80a5 	beq.w	8005fd4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e8a:	f7fb fc83 	bl	8001794 <HAL_GetTick>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	1ad3      	subs	r3, r2, r3
 8005e94:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d302      	bcc.n	8005ea0 <UART_WaitOnFlagUntilTimeout+0x32>
 8005e9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d140      	bne.n	8005f22 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ea8:	e853 3f00 	ldrex	r3, [r3]
 8005eac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005eae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eb0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005eb4:	667b      	str	r3, [r7, #100]	; 0x64
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	461a      	mov	r2, r3
 8005ebc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ebe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ec0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005ec4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005ec6:	e841 2300 	strex	r3, r2, [r1]
 8005eca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005ecc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d1e6      	bne.n	8005ea0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	3308      	adds	r3, #8
 8005ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005edc:	e853 3f00 	ldrex	r3, [r3]
 8005ee0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee4:	f023 0301 	bic.w	r3, r3, #1
 8005ee8:	663b      	str	r3, [r7, #96]	; 0x60
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	3308      	adds	r3, #8
 8005ef0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005ef2:	64ba      	str	r2, [r7, #72]	; 0x48
 8005ef4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005ef8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005efa:	e841 2300 	strex	r3, r2, [r1]
 8005efe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005f00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d1e5      	bne.n	8005ed2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2220      	movs	r2, #32
 8005f0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2220      	movs	r2, #32
 8005f12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8005f1e:	2303      	movs	r3, #3
 8005f20:	e069      	b.n	8005ff6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 0304 	and.w	r3, r3, #4
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d051      	beq.n	8005fd4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	69db      	ldr	r3, [r3, #28]
 8005f36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f3e:	d149      	bne.n	8005fd4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f48:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f52:	e853 3f00 	ldrex	r3, [r3]
 8005f56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f5e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	461a      	mov	r2, r3
 8005f66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f68:	637b      	str	r3, [r7, #52]	; 0x34
 8005f6a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f70:	e841 2300 	strex	r3, r2, [r1]
 8005f74:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d1e6      	bne.n	8005f4a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	3308      	adds	r3, #8
 8005f82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	e853 3f00 	ldrex	r3, [r3]
 8005f8a:	613b      	str	r3, [r7, #16]
   return(result);
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	f023 0301 	bic.w	r3, r3, #1
 8005f92:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	3308      	adds	r3, #8
 8005f9a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005f9c:	623a      	str	r2, [r7, #32]
 8005f9e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa0:	69f9      	ldr	r1, [r7, #28]
 8005fa2:	6a3a      	ldr	r2, [r7, #32]
 8005fa4:	e841 2300 	strex	r3, r2, [r1]
 8005fa8:	61bb      	str	r3, [r7, #24]
   return(result);
 8005faa:	69bb      	ldr	r3, [r7, #24]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d1e5      	bne.n	8005f7c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2220      	movs	r2, #32
 8005fb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2220      	movs	r2, #32
 8005fbc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2220      	movs	r2, #32
 8005fc4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005fd0:	2303      	movs	r3, #3
 8005fd2:	e010      	b.n	8005ff6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	69da      	ldr	r2, [r3, #28]
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	4013      	ands	r3, r2
 8005fde:	68ba      	ldr	r2, [r7, #8]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	bf0c      	ite	eq
 8005fe4:	2301      	moveq	r3, #1
 8005fe6:	2300      	movne	r3, #0
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	461a      	mov	r2, r3
 8005fec:	79fb      	ldrb	r3, [r7, #7]
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	f43f af46 	beq.w	8005e80 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3770      	adds	r7, #112	; 0x70
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
	...

08006000 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b096      	sub	sp, #88	; 0x58
 8006004:	af00      	add	r7, sp, #0
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	60b9      	str	r1, [r7, #8]
 800600a:	4613      	mov	r3, r2
 800600c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	68ba      	ldr	r2, [r7, #8]
 8006012:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	88fa      	ldrh	r2, [r7, #6]
 8006018:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2200      	movs	r2, #0
 8006020:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2222      	movs	r2, #34	; 0x22
 8006028:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006032:	2b00      	cmp	r3, #0
 8006034:	d02d      	beq.n	8006092 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800603c:	4a40      	ldr	r2, [pc, #256]	; (8006140 <UART_Start_Receive_DMA+0x140>)
 800603e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006046:	4a3f      	ldr	r2, [pc, #252]	; (8006144 <UART_Start_Receive_DMA+0x144>)
 8006048:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006050:	4a3d      	ldr	r2, [pc, #244]	; (8006148 <UART_Start_Receive_DMA+0x148>)
 8006052:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800605a:	2200      	movs	r2, #0
 800605c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	3324      	adds	r3, #36	; 0x24
 800606a:	4619      	mov	r1, r3
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006070:	461a      	mov	r2, r3
 8006072:	88fb      	ldrh	r3, [r7, #6]
 8006074:	f7fb feac 	bl	8001dd0 <HAL_DMA_Start_IT>
 8006078:	4603      	mov	r3, r0
 800607a:	2b00      	cmp	r3, #0
 800607c:	d009      	beq.n	8006092 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2210      	movs	r2, #16
 8006082:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2220      	movs	r2, #32
 800608a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	e051      	b.n	8006136 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d018      	beq.n	80060cc <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060a2:	e853 3f00 	ldrex	r3, [r3]
 80060a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80060a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060ae:	657b      	str	r3, [r7, #84]	; 0x54
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	461a      	mov	r2, r3
 80060b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80060ba:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060bc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80060be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060c0:	e841 2300 	strex	r3, r2, [r1]
 80060c4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80060c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d1e6      	bne.n	800609a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	3308      	adds	r3, #8
 80060d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d6:	e853 3f00 	ldrex	r3, [r3]
 80060da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060de:	f043 0301 	orr.w	r3, r3, #1
 80060e2:	653b      	str	r3, [r7, #80]	; 0x50
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	3308      	adds	r3, #8
 80060ea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80060ec:	637a      	str	r2, [r7, #52]	; 0x34
 80060ee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80060f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060f4:	e841 2300 	strex	r3, r2, [r1]
 80060f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80060fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d1e5      	bne.n	80060cc <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	3308      	adds	r3, #8
 8006106:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	e853 3f00 	ldrex	r3, [r3]
 800610e:	613b      	str	r3, [r7, #16]
   return(result);
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006116:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	3308      	adds	r3, #8
 800611e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006120:	623a      	str	r2, [r7, #32]
 8006122:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006124:	69f9      	ldr	r1, [r7, #28]
 8006126:	6a3a      	ldr	r2, [r7, #32]
 8006128:	e841 2300 	strex	r3, r2, [r1]
 800612c:	61bb      	str	r3, [r7, #24]
   return(result);
 800612e:	69bb      	ldr	r3, [r7, #24]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d1e5      	bne.n	8006100 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	3758      	adds	r7, #88	; 0x58
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop
 8006140:	08006297 	.word	0x08006297
 8006144:	080063c3 	.word	0x080063c3
 8006148:	08006401 	.word	0x08006401

0800614c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800614c:	b480      	push	{r7}
 800614e:	b08f      	sub	sp, #60	; 0x3c
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800615a:	6a3b      	ldr	r3, [r7, #32]
 800615c:	e853 3f00 	ldrex	r3, [r3]
 8006160:	61fb      	str	r3, [r7, #28]
   return(result);
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006168:	637b      	str	r3, [r7, #52]	; 0x34
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	461a      	mov	r2, r3
 8006170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006172:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006174:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006176:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006178:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800617a:	e841 2300 	strex	r3, r2, [r1]
 800617e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006182:	2b00      	cmp	r3, #0
 8006184:	d1e6      	bne.n	8006154 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	3308      	adds	r3, #8
 800618c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	e853 3f00 	ldrex	r3, [r3]
 8006194:	60bb      	str	r3, [r7, #8]
   return(result);
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800619c:	633b      	str	r3, [r7, #48]	; 0x30
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	3308      	adds	r3, #8
 80061a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061a6:	61ba      	str	r2, [r7, #24]
 80061a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061aa:	6979      	ldr	r1, [r7, #20]
 80061ac:	69ba      	ldr	r2, [r7, #24]
 80061ae:	e841 2300 	strex	r3, r2, [r1]
 80061b2:	613b      	str	r3, [r7, #16]
   return(result);
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d1e5      	bne.n	8006186 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2220      	movs	r2, #32
 80061be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 80061c2:	bf00      	nop
 80061c4:	373c      	adds	r7, #60	; 0x3c
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bc80      	pop	{r7}
 80061ca:	4770      	bx	lr

080061cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b095      	sub	sp, #84	; 0x54
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061dc:	e853 3f00 	ldrex	r3, [r3]
 80061e0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80061e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80061e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	461a      	mov	r2, r3
 80061f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061f2:	643b      	str	r3, [r7, #64]	; 0x40
 80061f4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80061f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80061fa:	e841 2300 	strex	r3, r2, [r1]
 80061fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006202:	2b00      	cmp	r3, #0
 8006204:	d1e6      	bne.n	80061d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	3308      	adds	r3, #8
 800620c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800620e:	6a3b      	ldr	r3, [r7, #32]
 8006210:	e853 3f00 	ldrex	r3, [r3]
 8006214:	61fb      	str	r3, [r7, #28]
   return(result);
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800621c:	f023 0301 	bic.w	r3, r3, #1
 8006220:	64bb      	str	r3, [r7, #72]	; 0x48
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	3308      	adds	r3, #8
 8006228:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800622a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800622c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800622e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006230:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006232:	e841 2300 	strex	r3, r2, [r1]
 8006236:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623a:	2b00      	cmp	r3, #0
 800623c:	d1e3      	bne.n	8006206 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006242:	2b01      	cmp	r3, #1
 8006244:	d118      	bne.n	8006278 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	e853 3f00 	ldrex	r3, [r3]
 8006252:	60bb      	str	r3, [r7, #8]
   return(result);
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	f023 0310 	bic.w	r3, r3, #16
 800625a:	647b      	str	r3, [r7, #68]	; 0x44
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	461a      	mov	r2, r3
 8006262:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006264:	61bb      	str	r3, [r7, #24]
 8006266:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006268:	6979      	ldr	r1, [r7, #20]
 800626a:	69ba      	ldr	r2, [r7, #24]
 800626c:	e841 2300 	strex	r3, r2, [r1]
 8006270:	613b      	str	r3, [r7, #16]
   return(result);
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d1e6      	bne.n	8006246 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2220      	movs	r2, #32
 800627c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800628c:	bf00      	nop
 800628e:	3754      	adds	r7, #84	; 0x54
 8006290:	46bd      	mov	sp, r7
 8006292:	bc80      	pop	{r7}
 8006294:	4770      	bx	lr

08006296 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006296:	b580      	push	{r7, lr}
 8006298:	b09c      	sub	sp, #112	; 0x70
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062a2:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f003 0320 	and.w	r3, r3, #32
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d171      	bne.n	8006396 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80062b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062b4:	2200      	movs	r2, #0
 80062b6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80062ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062c2:	e853 3f00 	ldrex	r3, [r3]
 80062c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80062c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80062d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	461a      	mov	r2, r3
 80062d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80062d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80062da:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80062de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80062e0:	e841 2300 	strex	r3, r2, [r1]
 80062e4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80062e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d1e6      	bne.n	80062ba <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	3308      	adds	r3, #8
 80062f2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062f6:	e853 3f00 	ldrex	r3, [r3]
 80062fa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80062fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062fe:	f023 0301 	bic.w	r3, r3, #1
 8006302:	667b      	str	r3, [r7, #100]	; 0x64
 8006304:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	3308      	adds	r3, #8
 800630a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800630c:	647a      	str	r2, [r7, #68]	; 0x44
 800630e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006310:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006312:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006314:	e841 2300 	strex	r3, r2, [r1]
 8006318:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800631a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800631c:	2b00      	cmp	r3, #0
 800631e:	d1e5      	bne.n	80062ec <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006320:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	3308      	adds	r3, #8
 8006326:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632a:	e853 3f00 	ldrex	r3, [r3]
 800632e:	623b      	str	r3, [r7, #32]
   return(result);
 8006330:	6a3b      	ldr	r3, [r7, #32]
 8006332:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006336:	663b      	str	r3, [r7, #96]	; 0x60
 8006338:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	3308      	adds	r3, #8
 800633e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006340:	633a      	str	r2, [r7, #48]	; 0x30
 8006342:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006344:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006346:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006348:	e841 2300 	strex	r3, r2, [r1]
 800634c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800634e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006350:	2b00      	cmp	r3, #0
 8006352:	d1e5      	bne.n	8006320 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006354:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006356:	2220      	movs	r2, #32
 8006358:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800635c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800635e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006360:	2b01      	cmp	r3, #1
 8006362:	d118      	bne.n	8006396 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006364:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	e853 3f00 	ldrex	r3, [r3]
 8006370:	60fb      	str	r3, [r7, #12]
   return(result);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	f023 0310 	bic.w	r3, r3, #16
 8006378:	65fb      	str	r3, [r7, #92]	; 0x5c
 800637a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	461a      	mov	r2, r3
 8006380:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006382:	61fb      	str	r3, [r7, #28]
 8006384:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006386:	69b9      	ldr	r1, [r7, #24]
 8006388:	69fa      	ldr	r2, [r7, #28]
 800638a:	e841 2300 	strex	r3, r2, [r1]
 800638e:	617b      	str	r3, [r7, #20]
   return(result);
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d1e6      	bne.n	8006364 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006396:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006398:	2200      	movs	r2, #0
 800639a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800639c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800639e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d107      	bne.n	80063b4 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80063a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80063aa:	4619      	mov	r1, r3
 80063ac:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80063ae:	f7ff f9f0 	bl	8005792 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80063b2:	e002      	b.n	80063ba <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80063b4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80063b6:	f7fa fe47 	bl	8001048 <HAL_UART_RxCpltCallback>
}
 80063ba:	bf00      	nop
 80063bc:	3770      	adds	r7, #112	; 0x70
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}

080063c2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80063c2:	b580      	push	{r7, lr}
 80063c4:	b084      	sub	sp, #16
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ce:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2201      	movs	r2, #1
 80063d4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d109      	bne.n	80063f2 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80063e4:	085b      	lsrs	r3, r3, #1
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	4619      	mov	r1, r3
 80063ea:	68f8      	ldr	r0, [r7, #12]
 80063ec:	f7ff f9d1 	bl	8005792 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80063f0:	e002      	b.n	80063f8 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80063f2:	68f8      	ldr	r0, [r7, #12]
 80063f4:	f7ff f9bb 	bl	800576e <HAL_UART_RxHalfCpltCallback>
}
 80063f8:	bf00      	nop
 80063fa:	3710      	adds	r7, #16
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}

08006400 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b086      	sub	sp, #24
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800640c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006414:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800641c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006428:	2b80      	cmp	r3, #128	; 0x80
 800642a:	d109      	bne.n	8006440 <UART_DMAError+0x40>
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	2b21      	cmp	r3, #33	; 0x21
 8006430:	d106      	bne.n	8006440 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	2200      	movs	r2, #0
 8006436:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800643a:	6978      	ldr	r0, [r7, #20]
 800643c:	f7ff fe86 	bl	800614c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800644a:	2b40      	cmp	r3, #64	; 0x40
 800644c:	d109      	bne.n	8006462 <UART_DMAError+0x62>
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2b22      	cmp	r3, #34	; 0x22
 8006452:	d106      	bne.n	8006462 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	2200      	movs	r2, #0
 8006458:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800645c:	6978      	ldr	r0, [r7, #20]
 800645e:	f7ff feb5 	bl	80061cc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006468:	f043 0210 	orr.w	r2, r3, #16
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006472:	6978      	ldr	r0, [r7, #20]
 8006474:	f7ff f984 	bl	8005780 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006478:	bf00      	nop
 800647a:	3718      	adds	r7, #24
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800648c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2200      	movs	r2, #0
 8006492:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2200      	movs	r2, #0
 800649a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800649e:	68f8      	ldr	r0, [r7, #12]
 80064a0:	f7ff f96e 	bl	8005780 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064a4:	bf00      	nop
 80064a6:	3710      	adds	r7, #16
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b088      	sub	sp, #32
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	e853 3f00 	ldrex	r3, [r3]
 80064c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064c8:	61fb      	str	r3, [r7, #28]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	461a      	mov	r2, r3
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	61bb      	str	r3, [r7, #24]
 80064d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d6:	6979      	ldr	r1, [r7, #20]
 80064d8:	69ba      	ldr	r2, [r7, #24]
 80064da:	e841 2300 	strex	r3, r2, [r1]
 80064de:	613b      	str	r3, [r7, #16]
   return(result);
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d1e6      	bne.n	80064b4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2220      	movs	r2, #32
 80064ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f7ff f931 	bl	800575c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064fa:	bf00      	nop
 80064fc:	3720      	adds	r7, #32
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}

08006502 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006502:	b480      	push	{r7}
 8006504:	b083      	sub	sp, #12
 8006506:	af00      	add	r7, sp, #0
 8006508:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800650a:	bf00      	nop
 800650c:	370c      	adds	r7, #12
 800650e:	46bd      	mov	sp, r7
 8006510:	bc80      	pop	{r7}
 8006512:	4770      	bx	lr

08006514 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800651c:	bf00      	nop
 800651e:	370c      	adds	r7, #12
 8006520:	46bd      	mov	sp, r7
 8006522:	bc80      	pop	{r7}
 8006524:	4770      	bx	lr

08006526 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006526:	b480      	push	{r7}
 8006528:	b083      	sub	sp, #12
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800652e:	bf00      	nop
 8006530:	370c      	adds	r7, #12
 8006532:	46bd      	mov	sp, r7
 8006534:	bc80      	pop	{r7}
 8006536:	4770      	bx	lr

08006538 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006538:	b480      	push	{r7}
 800653a:	b085      	sub	sp, #20
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006546:	2b01      	cmp	r3, #1
 8006548:	d101      	bne.n	800654e <HAL_UARTEx_DisableFifoMode+0x16>
 800654a:	2302      	movs	r3, #2
 800654c:	e027      	b.n	800659e <HAL_UARTEx_DisableFifoMode+0x66>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2201      	movs	r2, #1
 8006552:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2224      	movs	r2, #36	; 0x24
 800655a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f022 0201 	bic.w	r2, r2, #1
 8006574:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800657c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2200      	movs	r2, #0
 8006582:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	68fa      	ldr	r2, [r7, #12]
 800658a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2220      	movs	r2, #32
 8006590:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2200      	movs	r2, #0
 8006598:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3714      	adds	r7, #20
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bc80      	pop	{r7}
 80065a6:	4770      	bx	lr

080065a8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d101      	bne.n	80065c0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80065bc:	2302      	movs	r3, #2
 80065be:	e02d      	b.n	800661c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2224      	movs	r2, #36	; 0x24
 80065cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f022 0201 	bic.w	r2, r2, #1
 80065e6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	683a      	ldr	r2, [r7, #0]
 80065f8:	430a      	orrs	r2, r1
 80065fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f000 f84f 	bl	80066a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	68fa      	ldr	r2, [r7, #12]
 8006608:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2220      	movs	r2, #32
 800660e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800661a:	2300      	movs	r3, #0
}
 800661c:	4618      	mov	r0, r3
 800661e:	3710      	adds	r7, #16
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006634:	2b01      	cmp	r3, #1
 8006636:	d101      	bne.n	800663c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006638:	2302      	movs	r3, #2
 800663a:	e02d      	b.n	8006698 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2201      	movs	r2, #1
 8006640:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2224      	movs	r2, #36	; 0x24
 8006648:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f022 0201 	bic.w	r2, r2, #1
 8006662:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	683a      	ldr	r2, [r7, #0]
 8006674:	430a      	orrs	r2, r1
 8006676:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 f811 	bl	80066a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	68fa      	ldr	r2, [r7, #12]
 8006684:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2220      	movs	r2, #32
 800668a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006696:	2300      	movs	r3, #0
}
 8006698:	4618      	mov	r0, r3
 800669a:	3710      	adds	r7, #16
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b085      	sub	sp, #20
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d108      	bne.n	80066c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80066c0:	e031      	b.n	8006726 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80066c2:	2308      	movs	r3, #8
 80066c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80066c6:	2308      	movs	r3, #8
 80066c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	0e5b      	lsrs	r3, r3, #25
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	f003 0307 	and.w	r3, r3, #7
 80066d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	0f5b      	lsrs	r3, r3, #29
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	f003 0307 	and.w	r3, r3, #7
 80066e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80066ea:	7bbb      	ldrb	r3, [r7, #14]
 80066ec:	7b3a      	ldrb	r2, [r7, #12]
 80066ee:	4910      	ldr	r1, [pc, #64]	; (8006730 <UARTEx_SetNbDataToProcess+0x90>)
 80066f0:	5c8a      	ldrb	r2, [r1, r2]
 80066f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80066f6:	7b3a      	ldrb	r2, [r7, #12]
 80066f8:	490e      	ldr	r1, [pc, #56]	; (8006734 <UARTEx_SetNbDataToProcess+0x94>)
 80066fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80066fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8006700:	b29a      	uxth	r2, r3
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006708:	7bfb      	ldrb	r3, [r7, #15]
 800670a:	7b7a      	ldrb	r2, [r7, #13]
 800670c:	4908      	ldr	r1, [pc, #32]	; (8006730 <UARTEx_SetNbDataToProcess+0x90>)
 800670e:	5c8a      	ldrb	r2, [r1, r2]
 8006710:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006714:	7b7a      	ldrb	r2, [r7, #13]
 8006716:	4907      	ldr	r1, [pc, #28]	; (8006734 <UARTEx_SetNbDataToProcess+0x94>)
 8006718:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800671a:	fb93 f3f2 	sdiv	r3, r3, r2
 800671e:	b29a      	uxth	r2, r3
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006726:	bf00      	nop
 8006728:	3714      	adds	r7, #20
 800672a:	46bd      	mov	sp, r7
 800672c:	bc80      	pop	{r7}
 800672e:	4770      	bx	lr
 8006730:	0800b12c 	.word	0x0800b12c
 8006734:	0800b134 	.word	0x0800b134

08006738 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af02      	add	r7, sp, #8
 800673e:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8006740:	4a24      	ldr	r2, [pc, #144]	; (80067d4 <RadioInit+0x9c>)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8006746:	4b24      	ldr	r3, [pc, #144]	; (80067d8 <RadioInit+0xa0>)
 8006748:	2200      	movs	r2, #0
 800674a:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 800674c:	4b22      	ldr	r3, [pc, #136]	; (80067d8 <RadioInit+0xa0>)
 800674e:	2200      	movs	r2, #0
 8006750:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8006752:	4b21      	ldr	r3, [pc, #132]	; (80067d8 <RadioInit+0xa0>)
 8006754:	2200      	movs	r2, #0
 8006756:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8006758:	4b1f      	ldr	r3, [pc, #124]	; (80067d8 <RadioInit+0xa0>)
 800675a:	2200      	movs	r2, #0
 800675c:	659a      	str	r2, [r3, #88]	; 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 800675e:	481f      	ldr	r0, [pc, #124]	; (80067dc <RadioInit+0xa4>)
 8006760:	f001 ff88 	bl	8008674 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8006764:	4b1c      	ldr	r3, [pc, #112]	; (80067d8 <RadioInit+0xa0>)
 8006766:	2200      	movs	r2, #0
 8006768:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 800676a:	4b1b      	ldr	r3, [pc, #108]	; (80067d8 <RadioInit+0xa0>)
 800676c:	2200      	movs	r2, #0
 800676e:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8006770:	f002 fa1c 	bl	8008bac <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8006774:	2100      	movs	r1, #0
 8006776:	2000      	movs	r0, #0
 8006778:	f002 fde8 	bl	800934c <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 800677c:	2204      	movs	r2, #4
 800677e:	2100      	movs	r1, #0
 8006780:	2001      	movs	r0, #1
 8006782:	f002 fba5 	bl	8008ed0 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8006786:	2300      	movs	r3, #0
 8006788:	2200      	movs	r2, #0
 800678a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800678e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006792:	f002 fad5 	bl	8008d40 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 8006796:	f000 fe91 	bl	80074bc <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 800679a:	2300      	movs	r3, #0
 800679c:	9300      	str	r3, [sp, #0]
 800679e:	4b10      	ldr	r3, [pc, #64]	; (80067e0 <RadioInit+0xa8>)
 80067a0:	2200      	movs	r2, #0
 80067a2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80067a6:	480f      	ldr	r0, [pc, #60]	; (80067e4 <RadioInit+0xac>)
 80067a8:	f003 fb32 	bl	8009e10 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 80067ac:	2300      	movs	r3, #0
 80067ae:	9300      	str	r3, [sp, #0]
 80067b0:	4b0d      	ldr	r3, [pc, #52]	; (80067e8 <RadioInit+0xb0>)
 80067b2:	2200      	movs	r2, #0
 80067b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80067b8:	480c      	ldr	r0, [pc, #48]	; (80067ec <RadioInit+0xb4>)
 80067ba:	f003 fb29 	bl	8009e10 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 80067be:	4809      	ldr	r0, [pc, #36]	; (80067e4 <RadioInit+0xac>)
 80067c0:	f003 fbca 	bl	8009f58 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 80067c4:	4809      	ldr	r0, [pc, #36]	; (80067ec <RadioInit+0xb4>)
 80067c6:	f003 fbc7 	bl	8009f58 <UTIL_TIMER_Stop>
}
 80067ca:	bf00      	nop
 80067cc:	3708      	adds	r7, #8
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	bf00      	nop
 80067d4:	200004b4 	.word	0x200004b4
 80067d8:	200004b8 	.word	0x200004b8
 80067dc:	080078b5 	.word	0x080078b5
 80067e0:	0800783d 	.word	0x0800783d
 80067e4:	20000514 	.word	0x20000514
 80067e8:	08007851 	.word	0x08007851
 80067ec:	2000052c 	.word	0x2000052c

080067f0 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 80067f4:	f001 ff86 	bl	8008704 <SUBGRF_GetOperatingMode>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b07      	cmp	r3, #7
 80067fc:	d00a      	beq.n	8006814 <RadioGetStatus+0x24>
 80067fe:	2b07      	cmp	r3, #7
 8006800:	dc0a      	bgt.n	8006818 <RadioGetStatus+0x28>
 8006802:	2b04      	cmp	r3, #4
 8006804:	d002      	beq.n	800680c <RadioGetStatus+0x1c>
 8006806:	2b05      	cmp	r3, #5
 8006808:	d002      	beq.n	8006810 <RadioGetStatus+0x20>
 800680a:	e005      	b.n	8006818 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 800680c:	2302      	movs	r3, #2
 800680e:	e004      	b.n	800681a <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8006810:	2301      	movs	r3, #1
 8006812:	e002      	b.n	800681a <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8006814:	2303      	movs	r3, #3
 8006816:	e000      	b.n	800681a <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8006818:	2300      	movs	r3, #0
    }
}
 800681a:	4618      	mov	r0, r3
 800681c:	bd80      	pop	{r7, pc}
	...

08006820 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b082      	sub	sp, #8
 8006824:	af00      	add	r7, sp, #0
 8006826:	4603      	mov	r3, r0
 8006828:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 800682a:	4a2a      	ldr	r2, [pc, #168]	; (80068d4 <RadioSetModem+0xb4>)
 800682c:	79fb      	ldrb	r3, [r7, #7]
 800682e:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8006830:	79fb      	ldrb	r3, [r7, #7]
 8006832:	4618      	mov	r0, r3
 8006834:	f003 f95d 	bl	8009af2 <RFW_SetRadioModem>
    switch( modem )
 8006838:	79fb      	ldrb	r3, [r7, #7]
 800683a:	2b05      	cmp	r3, #5
 800683c:	d80e      	bhi.n	800685c <RadioSetModem+0x3c>
 800683e:	a201      	add	r2, pc, #4	; (adr r2, 8006844 <RadioSetModem+0x24>)
 8006840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006844:	0800686b 	.word	0x0800686b
 8006848:	08006879 	.word	0x08006879
 800684c:	0800685d 	.word	0x0800685d
 8006850:	0800689f 	.word	0x0800689f
 8006854:	080068ad 	.word	0x080068ad
 8006858:	080068bb 	.word	0x080068bb
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 800685c:	2003      	movs	r0, #3
 800685e:	f002 fb11 	bl	8008e84 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8006862:	4b1c      	ldr	r3, [pc, #112]	; (80068d4 <RadioSetModem+0xb4>)
 8006864:	2200      	movs	r2, #0
 8006866:	735a      	strb	r2, [r3, #13]
        break;
 8006868:	e02f      	b.n	80068ca <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800686a:	2000      	movs	r0, #0
 800686c:	f002 fb0a 	bl	8008e84 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8006870:	4b18      	ldr	r3, [pc, #96]	; (80068d4 <RadioSetModem+0xb4>)
 8006872:	2200      	movs	r2, #0
 8006874:	735a      	strb	r2, [r3, #13]
        break;
 8006876:	e028      	b.n	80068ca <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8006878:	2001      	movs	r0, #1
 800687a:	f002 fb03 	bl	8008e84 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 800687e:	4b15      	ldr	r3, [pc, #84]	; (80068d4 <RadioSetModem+0xb4>)
 8006880:	7b5a      	ldrb	r2, [r3, #13]
 8006882:	4b14      	ldr	r3, [pc, #80]	; (80068d4 <RadioSetModem+0xb4>)
 8006884:	7b1b      	ldrb	r3, [r3, #12]
 8006886:	429a      	cmp	r2, r3
 8006888:	d01e      	beq.n	80068c8 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 800688a:	4b12      	ldr	r3, [pc, #72]	; (80068d4 <RadioSetModem+0xb4>)
 800688c:	7b1a      	ldrb	r2, [r3, #12]
 800688e:	4b11      	ldr	r3, [pc, #68]	; (80068d4 <RadioSetModem+0xb4>)
 8006890:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8006892:	4b10      	ldr	r3, [pc, #64]	; (80068d4 <RadioSetModem+0xb4>)
 8006894:	7b5b      	ldrb	r3, [r3, #13]
 8006896:	4618      	mov	r0, r3
 8006898:	f000 ff9a 	bl	80077d0 <RadioSetPublicNetwork>
        }
        break;
 800689c:	e014      	b.n	80068c8 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800689e:	2002      	movs	r0, #2
 80068a0:	f002 faf0 	bl	8008e84 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80068a4:	4b0b      	ldr	r3, [pc, #44]	; (80068d4 <RadioSetModem+0xb4>)
 80068a6:	2200      	movs	r2, #0
 80068a8:	735a      	strb	r2, [r3, #13]
        break;
 80068aa:	e00e      	b.n	80068ca <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80068ac:	2002      	movs	r0, #2
 80068ae:	f002 fae9 	bl	8008e84 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80068b2:	4b08      	ldr	r3, [pc, #32]	; (80068d4 <RadioSetModem+0xb4>)
 80068b4:	2200      	movs	r2, #0
 80068b6:	735a      	strb	r2, [r3, #13]
        break;
 80068b8:	e007      	b.n	80068ca <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80068ba:	2000      	movs	r0, #0
 80068bc:	f002 fae2 	bl	8008e84 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80068c0:	4b04      	ldr	r3, [pc, #16]	; (80068d4 <RadioSetModem+0xb4>)
 80068c2:	2200      	movs	r2, #0
 80068c4:	735a      	strb	r2, [r3, #13]
        break;
 80068c6:	e000      	b.n	80068ca <RadioSetModem+0xaa>
        break;
 80068c8:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 80068ca:	bf00      	nop
 80068cc:	3708      	adds	r7, #8
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	200004b8 	.word	0x200004b8

080068d8 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b082      	sub	sp, #8
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f002 fa89 	bl	8008df8 <SUBGRF_SetRfFrequency>
}
 80068e6:	bf00      	nop
 80068e8:	3708      	adds	r7, #8
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}

080068ee <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 80068ee:	b580      	push	{r7, lr}
 80068f0:	b090      	sub	sp, #64	; 0x40
 80068f2:	af0a      	add	r7, sp, #40	; 0x28
 80068f4:	60f8      	str	r0, [r7, #12]
 80068f6:	60b9      	str	r1, [r7, #8]
 80068f8:	603b      	str	r3, [r7, #0]
 80068fa:	4613      	mov	r3, r2
 80068fc:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 80068fe:	2301      	movs	r3, #1
 8006900:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8006902:	2300      	movs	r3, #0
 8006904:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8006906:	2300      	movs	r3, #0
 8006908:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 800690a:	f000 fdea 	bl	80074e2 <RadioStandby>

    RadioSetModem( MODEM_FSK );
 800690e:	2000      	movs	r0, #0
 8006910:	f7ff ff86 	bl	8006820 <RadioSetModem>

    RadioSetChannel( freq );
 8006914:	68f8      	ldr	r0, [r7, #12]
 8006916:	f7ff ffdf 	bl	80068d8 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 800691a:	2301      	movs	r3, #1
 800691c:	9309      	str	r3, [sp, #36]	; 0x24
 800691e:	2300      	movs	r3, #0
 8006920:	9308      	str	r3, [sp, #32]
 8006922:	2300      	movs	r3, #0
 8006924:	9307      	str	r3, [sp, #28]
 8006926:	2300      	movs	r3, #0
 8006928:	9306      	str	r3, [sp, #24]
 800692a:	2300      	movs	r3, #0
 800692c:	9305      	str	r3, [sp, #20]
 800692e:	2300      	movs	r3, #0
 8006930:	9304      	str	r3, [sp, #16]
 8006932:	2300      	movs	r3, #0
 8006934:	9303      	str	r3, [sp, #12]
 8006936:	2300      	movs	r3, #0
 8006938:	9302      	str	r3, [sp, #8]
 800693a:	2303      	movs	r3, #3
 800693c:	9301      	str	r3, [sp, #4]
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	9300      	str	r3, [sp, #0]
 8006942:	2300      	movs	r3, #0
 8006944:	f44f 7216 	mov.w	r2, #600	; 0x258
 8006948:	68b9      	ldr	r1, [r7, #8]
 800694a:	2000      	movs	r0, #0
 800694c:	f000 f83c 	bl	80069c8 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8006950:	2000      	movs	r0, #0
 8006952:	f000 fdcd 	bl	80074f0 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8006956:	f000 ff69 	bl	800782c <RadioGetWakeupTime>
 800695a:	4603      	mov	r3, r0
 800695c:	4618      	mov	r0, r3
 800695e:	f7fa ff2d 	bl	80017bc <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8006962:	f003 fb93 	bl	800a08c <UTIL_TIMER_GetCurrentTime>
 8006966:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8006968:	e00d      	b.n	8006986 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 800696a:	2000      	movs	r0, #0
 800696c:	f000 feae 	bl	80076cc <RadioRssi>
 8006970:	4603      	mov	r3, r0
 8006972:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8006974:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8006978:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800697c:	429a      	cmp	r2, r3
 800697e:	dd02      	ble.n	8006986 <RadioIsChannelFree+0x98>
        {
            status = false;
 8006980:	2300      	movs	r3, #0
 8006982:	75fb      	strb	r3, [r7, #23]
            break;
 8006984:	e006      	b.n	8006994 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8006986:	6938      	ldr	r0, [r7, #16]
 8006988:	f003 fb92 	bl	800a0b0 <UTIL_TIMER_GetElapsedTime>
 800698c:	4602      	mov	r2, r0
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	4293      	cmp	r3, r2
 8006992:	d8ea      	bhi.n	800696a <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 8006994:	f000 fda5 	bl	80074e2 <RadioStandby>

    return status;
 8006998:	7dfb      	ldrb	r3, [r7, #23]
}
 800699a:	4618      	mov	r0, r3
 800699c:	3718      	adds	r7, #24
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}

080069a2 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 80069a2:	b580      	push	{r7, lr}
 80069a4:	b082      	sub	sp, #8
 80069a6:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 80069a8:	2300      	movs	r3, #0
 80069aa:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80069ac:	2300      	movs	r3, #0
 80069ae:	2200      	movs	r2, #0
 80069b0:	2100      	movs	r1, #0
 80069b2:	2000      	movs	r0, #0
 80069b4:	f002 f9c4 	bl	8008d40 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 80069b8:	f001 ff75 	bl	80088a6 <SUBGRF_GetRandom>
 80069bc:	6078      	str	r0, [r7, #4]

    return rnd;
 80069be:	687b      	ldr	r3, [r7, #4]
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3708      	adds	r7, #8
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b08a      	sub	sp, #40	; 0x28
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	60b9      	str	r1, [r7, #8]
 80069d0:	607a      	str	r2, [r7, #4]
 80069d2:	461a      	mov	r2, r3
 80069d4:	4603      	mov	r3, r0
 80069d6:	73fb      	strb	r3, [r7, #15]
 80069d8:	4613      	mov	r3, r2
 80069da:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 80069dc:	4ab9      	ldr	r2, [pc, #740]	; (8006cc4 <RadioSetRxConfig+0x2fc>)
 80069de:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80069e2:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 80069e4:	f003 f843 	bl	8009a6e <RFW_DeInit>
    if( rxContinuous == true )
 80069e8:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d001      	beq.n	80069f4 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 80069f0:	2300      	movs	r3, #0
 80069f2:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 80069f4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d004      	beq.n	8006a06 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 80069fc:	4ab2      	ldr	r2, [pc, #712]	; (8006cc8 <RadioSetRxConfig+0x300>)
 80069fe:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8006a02:	7013      	strb	r3, [r2, #0]
 8006a04:	e002      	b.n	8006a0c <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8006a06:	4bb0      	ldr	r3, [pc, #704]	; (8006cc8 <RadioSetRxConfig+0x300>)
 8006a08:	22ff      	movs	r2, #255	; 0xff
 8006a0a:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8006a0c:	7bfb      	ldrb	r3, [r7, #15]
 8006a0e:	2b05      	cmp	r3, #5
 8006a10:	d009      	beq.n	8006a26 <RadioSetRxConfig+0x5e>
 8006a12:	2b05      	cmp	r3, #5
 8006a14:	f300 81d7 	bgt.w	8006dc6 <RadioSetRxConfig+0x3fe>
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	f000 80bf 	beq.w	8006b9c <RadioSetRxConfig+0x1d4>
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	f000 8124 	beq.w	8006c6c <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8006a24:	e1cf      	b.n	8006dc6 <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8006a26:	2001      	movs	r0, #1
 8006a28:	f002 f882 	bl	8008b30 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8006a2c:	4ba5      	ldr	r3, [pc, #660]	; (8006cc4 <RadioSetRxConfig+0x2fc>)
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8006a34:	4aa3      	ldr	r2, [pc, #652]	; (8006cc4 <RadioSetRxConfig+0x2fc>)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8006a3a:	4ba2      	ldr	r3, [pc, #648]	; (8006cc4 <RadioSetRxConfig+0x2fc>)
 8006a3c:	2209      	movs	r2, #9
 8006a3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8006a42:	4ba0      	ldr	r3, [pc, #640]	; (8006cc4 <RadioSetRxConfig+0x2fc>)
 8006a44:	f44f 7248 	mov.w	r2, #800	; 0x320
 8006a48:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8006a4a:	68b8      	ldr	r0, [r7, #8]
 8006a4c:	f002 ff42 	bl	80098d4 <SUBGRF_GetFskBandwidthRegValue>
 8006a50:	4603      	mov	r3, r0
 8006a52:	461a      	mov	r2, r3
 8006a54:	4b9b      	ldr	r3, [pc, #620]	; (8006cc4 <RadioSetRxConfig+0x2fc>)
 8006a56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8006a5a:	4b9a      	ldr	r3, [pc, #616]	; (8006cc4 <RadioSetRxConfig+0x2fc>)
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8006a60:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006a62:	00db      	lsls	r3, r3, #3
 8006a64:	b29a      	uxth	r2, r3
 8006a66:	4b97      	ldr	r3, [pc, #604]	; (8006cc4 <RadioSetRxConfig+0x2fc>)
 8006a68:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8006a6a:	4b96      	ldr	r3, [pc, #600]	; (8006cc4 <RadioSetRxConfig+0x2fc>)
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8006a70:	4b94      	ldr	r3, [pc, #592]	; (8006cc4 <RadioSetRxConfig+0x2fc>)
 8006a72:	2210      	movs	r2, #16
 8006a74:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8006a76:	4b93      	ldr	r3, [pc, #588]	; (8006cc4 <RadioSetRxConfig+0x2fc>)
 8006a78:	2200      	movs	r2, #0
 8006a7a:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8006a7c:	4b91      	ldr	r3, [pc, #580]	; (8006cc4 <RadioSetRxConfig+0x2fc>)
 8006a7e:	2200      	movs	r2, #0
 8006a80:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8006a82:	4b91      	ldr	r3, [pc, #580]	; (8006cc8 <RadioSetRxConfig+0x300>)
 8006a84:	781a      	ldrb	r2, [r3, #0]
 8006a86:	4b8f      	ldr	r3, [pc, #572]	; (8006cc4 <RadioSetRxConfig+0x2fc>)
 8006a88:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8006a8a:	4b8e      	ldr	r3, [pc, #568]	; (8006cc4 <RadioSetRxConfig+0x2fc>)
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8006a90:	4b8c      	ldr	r3, [pc, #560]	; (8006cc4 <RadioSetRxConfig+0x2fc>)
 8006a92:	2200      	movs	r2, #0
 8006a94:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8006a96:	2005      	movs	r0, #5
 8006a98:	f7ff fec2 	bl	8006820 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006a9c:	488b      	ldr	r0, [pc, #556]	; (8006ccc <RadioSetRxConfig+0x304>)
 8006a9e:	f002 fae5 	bl	800906c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006aa2:	488b      	ldr	r0, [pc, #556]	; (8006cd0 <RadioSetRxConfig+0x308>)
 8006aa4:	f002 fbb4 	bl	8009210 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8006aa8:	4a8a      	ldr	r2, [pc, #552]	; (8006cd4 <RadioSetRxConfig+0x30c>)
 8006aaa:	f107 031c 	add.w	r3, r7, #28
 8006aae:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006ab2:	e883 0003 	stmia.w	r3, {r0, r1}
 8006ab6:	f107 031c 	add.w	r3, r7, #28
 8006aba:	4618      	mov	r0, r3
 8006abc:	f001 fe71 	bl	80087a2 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8006ac0:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006ac4:	f001 febc 	bl	8008840 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8006ac8:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8006acc:	f000 fe1d 	bl	800770a <RadioRead>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 8006ad6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ada:	f023 0310 	bic.w	r3, r3, #16
 8006ade:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 8006ae2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8006aec:	f000 fdfb 	bl	80076e6 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8006af0:	2104      	movs	r1, #4
 8006af2:	f640 00b9 	movw	r0, #2233	; 0x8b9
 8006af6:	f000 fdf6 	bl	80076e6 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 8006afa:	f640 009b 	movw	r0, #2203	; 0x89b
 8006afe:	f000 fe04 	bl	800770a <RadioRead>
 8006b02:	4603      	mov	r3, r0
 8006b04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8006b08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b0c:	f023 031c 	bic.w	r3, r3, #28
 8006b10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8006b14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b18:	f043 0308 	orr.w	r3, r3, #8
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	4619      	mov	r1, r3
 8006b20:	f640 009b 	movw	r0, #2203	; 0x89b
 8006b24:	f000 fddf 	bl	80076e6 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8006b28:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8006b2c:	f000 fded 	bl	800770a <RadioRead>
 8006b30:	4603      	mov	r3, r0
 8006b32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8006b36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b3a:	f023 0318 	bic.w	r3, r3, #24
 8006b3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 8006b42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b46:	f043 0318 	orr.w	r3, r3, #24
 8006b4a:	b2db      	uxtb	r3, r3
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8006b52:	f000 fdc8 	bl	80076e6 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 8006b56:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8006b5a:	f000 fdd6 	bl	800770a <RadioRead>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8006b64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8006b70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b74:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8006b80:	f000 fdb1 	bl	80076e6 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8006b84:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006b86:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8006b8a:	fb02 f303 	mul.w	r3, r2, r3
 8006b8e:	461a      	mov	r2, r3
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b96:	4a4b      	ldr	r2, [pc, #300]	; (8006cc4 <RadioSetRxConfig+0x2fc>)
 8006b98:	6093      	str	r3, [r2, #8]
            break;
 8006b9a:	e115      	b.n	8006dc8 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8006b9c:	2000      	movs	r0, #0
 8006b9e:	f001 ffc7 	bl	8008b30 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8006ba2:	4b48      	ldr	r3, [pc, #288]	; (8006cc4 <RadioSetRxConfig+0x2fc>)
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8006baa:	4a46      	ldr	r2, [pc, #280]	; (8006cc4 <RadioSetRxConfig+0x2fc>)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8006bb0:	4b44      	ldr	r3, [pc, #272]	; (8006cc4 <RadioSetRxConfig+0x2fc>)
 8006bb2:	220b      	movs	r2, #11
 8006bb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8006bb8:	68b8      	ldr	r0, [r7, #8]
 8006bba:	f002 fe8b 	bl	80098d4 <SUBGRF_GetFskBandwidthRegValue>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	4b40      	ldr	r3, [pc, #256]	; (8006cc4 <RadioSetRxConfig+0x2fc>)
 8006bc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8006bc8:	4b3e      	ldr	r3, [pc, #248]	; (8006cc4 <RadioSetRxConfig+0x2fc>)
 8006bca:	2200      	movs	r2, #0
 8006bcc:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8006bce:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006bd0:	00db      	lsls	r3, r3, #3
 8006bd2:	b29a      	uxth	r2, r3
 8006bd4:	4b3b      	ldr	r3, [pc, #236]	; (8006cc4 <RadioSetRxConfig+0x2fc>)
 8006bd6:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8006bd8:	4b3a      	ldr	r3, [pc, #232]	; (8006cc4 <RadioSetRxConfig+0x2fc>)
 8006bda:	2204      	movs	r2, #4
 8006bdc:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8006bde:	4b39      	ldr	r3, [pc, #228]	; (8006cc4 <RadioSetRxConfig+0x2fc>)
 8006be0:	2218      	movs	r2, #24
 8006be2:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8006be4:	4b37      	ldr	r3, [pc, #220]	; (8006cc4 <RadioSetRxConfig+0x2fc>)
 8006be6:	2200      	movs	r2, #0
 8006be8:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8006bea:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8006bee:	f083 0301 	eor.w	r3, r3, #1
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	4b33      	ldr	r3, [pc, #204]	; (8006cc4 <RadioSetRxConfig+0x2fc>)
 8006bf8:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8006bfa:	4b33      	ldr	r3, [pc, #204]	; (8006cc8 <RadioSetRxConfig+0x300>)
 8006bfc:	781a      	ldrb	r2, [r3, #0]
 8006bfe:	4b31      	ldr	r3, [pc, #196]	; (8006cc4 <RadioSetRxConfig+0x2fc>)
 8006c00:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8006c02:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d003      	beq.n	8006c12 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8006c0a:	4b2e      	ldr	r3, [pc, #184]	; (8006cc4 <RadioSetRxConfig+0x2fc>)
 8006c0c:	22f2      	movs	r2, #242	; 0xf2
 8006c0e:	75da      	strb	r2, [r3, #23]
 8006c10:	e002      	b.n	8006c18 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8006c12:	4b2c      	ldr	r3, [pc, #176]	; (8006cc4 <RadioSetRxConfig+0x2fc>)
 8006c14:	2201      	movs	r2, #1
 8006c16:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8006c18:	4b2a      	ldr	r3, [pc, #168]	; (8006cc4 <RadioSetRxConfig+0x2fc>)
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8006c1e:	f000 fc60 	bl	80074e2 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8006c22:	2000      	movs	r0, #0
 8006c24:	f7ff fdfc 	bl	8006820 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006c28:	4828      	ldr	r0, [pc, #160]	; (8006ccc <RadioSetRxConfig+0x304>)
 8006c2a:	f002 fa1f 	bl	800906c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006c2e:	4828      	ldr	r0, [pc, #160]	; (8006cd0 <RadioSetRxConfig+0x308>)
 8006c30:	f002 faee 	bl	8009210 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8006c34:	4a28      	ldr	r2, [pc, #160]	; (8006cd8 <RadioSetRxConfig+0x310>)
 8006c36:	f107 0314 	add.w	r3, r7, #20
 8006c3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006c3e:	e883 0003 	stmia.w	r3, {r0, r1}
 8006c42:	f107 0314 	add.w	r3, r7, #20
 8006c46:	4618      	mov	r0, r3
 8006c48:	f001 fdab 	bl	80087a2 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8006c4c:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006c50:	f001 fdf6 	bl	8008840 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8006c54:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006c56:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8006c5a:	fb02 f303 	mul.w	r3, r2, r3
 8006c5e:	461a      	mov	r2, r3
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c66:	4a17      	ldr	r2, [pc, #92]	; (8006cc4 <RadioSetRxConfig+0x2fc>)
 8006c68:	6093      	str	r3, [r2, #8]
            break;
 8006c6a:	e0ad      	b.n	8006dc8 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8006c6c:	2000      	movs	r0, #0
 8006c6e:	f001 ff5f 	bl	8008b30 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8006c72:	4b14      	ldr	r3, [pc, #80]	; (8006cc4 <RadioSetRxConfig+0x2fc>)
 8006c74:	2201      	movs	r2, #1
 8006c76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	b2da      	uxtb	r2, r3
 8006c7e:	4b11      	ldr	r3, [pc, #68]	; (8006cc4 <RadioSetRxConfig+0x2fc>)
 8006c80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8006c84:	4a15      	ldr	r2, [pc, #84]	; (8006cdc <RadioSetRxConfig+0x314>)
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	4413      	add	r3, r2
 8006c8a:	781a      	ldrb	r2, [r3, #0]
 8006c8c:	4b0d      	ldr	r3, [pc, #52]	; (8006cc4 <RadioSetRxConfig+0x2fc>)
 8006c8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8006c92:	4a0c      	ldr	r2, [pc, #48]	; (8006cc4 <RadioSetRxConfig+0x2fc>)
 8006c94:	7bbb      	ldrb	r3, [r7, #14]
 8006c96:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d105      	bne.n	8006cac <RadioSetRxConfig+0x2e4>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2b0b      	cmp	r3, #11
 8006ca4:	d008      	beq.n	8006cb8 <RadioSetRxConfig+0x2f0>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2b0c      	cmp	r3, #12
 8006caa:	d005      	beq.n	8006cb8 <RadioSetRxConfig+0x2f0>
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d116      	bne.n	8006ce0 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2b0c      	cmp	r3, #12
 8006cb6:	d113      	bne.n	8006ce0 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8006cb8:	4b02      	ldr	r3, [pc, #8]	; (8006cc4 <RadioSetRxConfig+0x2fc>)
 8006cba:	2201      	movs	r2, #1
 8006cbc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8006cc0:	e012      	b.n	8006ce8 <RadioSetRxConfig+0x320>
 8006cc2:	bf00      	nop
 8006cc4:	200004b8 	.word	0x200004b8
 8006cc8:	2000000d 	.word	0x2000000d
 8006ccc:	200004f0 	.word	0x200004f0
 8006cd0:	200004c6 	.word	0x200004c6
 8006cd4:	0800b024 	.word	0x0800b024
 8006cd8:	0800b02c 	.word	0x0800b02c
 8006cdc:	0800b1c8 	.word	0x0800b1c8
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8006ce0:	4b3b      	ldr	r3, [pc, #236]	; (8006dd0 <RadioSetRxConfig+0x408>)
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8006ce8:	4b39      	ldr	r3, [pc, #228]	; (8006dd0 <RadioSetRxConfig+0x408>)
 8006cea:	2201      	movs	r2, #1
 8006cec:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8006cee:	4b38      	ldr	r3, [pc, #224]	; (8006dd0 <RadioSetRxConfig+0x408>)
 8006cf0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006cf4:	2b05      	cmp	r3, #5
 8006cf6:	d004      	beq.n	8006d02 <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8006cf8:	4b35      	ldr	r3, [pc, #212]	; (8006dd0 <RadioSetRxConfig+0x408>)
 8006cfa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8006cfe:	2b06      	cmp	r3, #6
 8006d00:	d10a      	bne.n	8006d18 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 8006d02:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006d04:	2b0b      	cmp	r3, #11
 8006d06:	d803      	bhi.n	8006d10 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8006d08:	4b31      	ldr	r3, [pc, #196]	; (8006dd0 <RadioSetRxConfig+0x408>)
 8006d0a:	220c      	movs	r2, #12
 8006d0c:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8006d0e:	e006      	b.n	8006d1e <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8006d10:	4a2f      	ldr	r2, [pc, #188]	; (8006dd0 <RadioSetRxConfig+0x408>)
 8006d12:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006d14:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8006d16:	e002      	b.n	8006d1e <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8006d18:	4a2d      	ldr	r2, [pc, #180]	; (8006dd0 <RadioSetRxConfig+0x408>)
 8006d1a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006d1c:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8006d1e:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8006d22:	4b2b      	ldr	r3, [pc, #172]	; (8006dd0 <RadioSetRxConfig+0x408>)
 8006d24:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8006d26:	4b2b      	ldr	r3, [pc, #172]	; (8006dd4 <RadioSetRxConfig+0x40c>)
 8006d28:	781a      	ldrb	r2, [r3, #0]
 8006d2a:	4b29      	ldr	r3, [pc, #164]	; (8006dd0 <RadioSetRxConfig+0x408>)
 8006d2c:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8006d2e:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8006d32:	4b27      	ldr	r3, [pc, #156]	; (8006dd0 <RadioSetRxConfig+0x408>)
 8006d34:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8006d38:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8006d3c:	4b24      	ldr	r3, [pc, #144]	; (8006dd0 <RadioSetRxConfig+0x408>)
 8006d3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8006d42:	f000 fbce 	bl	80074e2 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8006d46:	2001      	movs	r0, #1
 8006d48:	f7ff fd6a 	bl	8006820 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006d4c:	4822      	ldr	r0, [pc, #136]	; (8006dd8 <RadioSetRxConfig+0x410>)
 8006d4e:	f002 f98d 	bl	800906c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006d52:	4822      	ldr	r0, [pc, #136]	; (8006ddc <RadioSetRxConfig+0x414>)
 8006d54:	f002 fa5c 	bl	8009210 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8006d58:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006d5a:	b2db      	uxtb	r3, r3
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f001 fef6 	bl	8008b4e <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 8006d62:	f640 00a3 	movw	r0, #2211	; 0x8a3
 8006d66:	f002 fbaf 	bl	80094c8 <SUBGRF_ReadRegister>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	f003 0301 	and.w	r3, r3, #1
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	4619      	mov	r1, r3
 8006d74:	f640 00a3 	movw	r0, #2211	; 0x8a3
 8006d78:	f002 fb92 	bl	80094a0 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8006d7c:	4b14      	ldr	r3, [pc, #80]	; (8006dd0 <RadioSetRxConfig+0x408>)
 8006d7e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006d82:	2b01      	cmp	r3, #1
 8006d84:	d10d      	bne.n	8006da2 <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8006d86:	f240 7036 	movw	r0, #1846	; 0x736
 8006d8a:	f002 fb9d 	bl	80094c8 <SUBGRF_ReadRegister>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	f023 0304 	bic.w	r3, r3, #4
 8006d94:	b2db      	uxtb	r3, r3
 8006d96:	4619      	mov	r1, r3
 8006d98:	f240 7036 	movw	r0, #1846	; 0x736
 8006d9c:	f002 fb80 	bl	80094a0 <SUBGRF_WriteRegister>
 8006da0:	e00c      	b.n	8006dbc <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8006da2:	f240 7036 	movw	r0, #1846	; 0x736
 8006da6:	f002 fb8f 	bl	80094c8 <SUBGRF_ReadRegister>
 8006daa:	4603      	mov	r3, r0
 8006dac:	f043 0304 	orr.w	r3, r3, #4
 8006db0:	b2db      	uxtb	r3, r3
 8006db2:	4619      	mov	r1, r3
 8006db4:	f240 7036 	movw	r0, #1846	; 0x736
 8006db8:	f002 fb72 	bl	80094a0 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8006dbc:	4b04      	ldr	r3, [pc, #16]	; (8006dd0 <RadioSetRxConfig+0x408>)
 8006dbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006dc2:	609a      	str	r2, [r3, #8]
            break;
 8006dc4:	e000      	b.n	8006dc8 <RadioSetRxConfig+0x400>
            break;
 8006dc6:	bf00      	nop
    }
}
 8006dc8:	bf00      	nop
 8006dca:	3728      	adds	r7, #40	; 0x28
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}
 8006dd0:	200004b8 	.word	0x200004b8
 8006dd4:	2000000d 	.word	0x2000000d
 8006dd8:	200004f0 	.word	0x200004f0
 8006ddc:	200004c6 	.word	0x200004c6

08006de0 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b086      	sub	sp, #24
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	60ba      	str	r2, [r7, #8]
 8006de8:	607b      	str	r3, [r7, #4]
 8006dea:	4603      	mov	r3, r0
 8006dec:	73fb      	strb	r3, [r7, #15]
 8006dee:	460b      	mov	r3, r1
 8006df0:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 8006df2:	f002 fe3c 	bl	8009a6e <RFW_DeInit>
    switch( modem )
 8006df6:	7bfb      	ldrb	r3, [r7, #15]
 8006df8:	2b04      	cmp	r3, #4
 8006dfa:	f000 80c7 	beq.w	8006f8c <RadioSetTxConfig+0x1ac>
 8006dfe:	2b04      	cmp	r3, #4
 8006e00:	f300 80d6 	bgt.w	8006fb0 <RadioSetTxConfig+0x1d0>
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d002      	beq.n	8006e0e <RadioSetTxConfig+0x2e>
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d059      	beq.n	8006ec0 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8006e0c:	e0d0      	b.n	8006fb0 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8006e0e:	4b77      	ldr	r3, [pc, #476]	; (8006fec <RadioSetTxConfig+0x20c>)
 8006e10:	2200      	movs	r2, #0
 8006e12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8006e16:	4a75      	ldr	r2, [pc, #468]	; (8006fec <RadioSetTxConfig+0x20c>)
 8006e18:	6a3b      	ldr	r3, [r7, #32]
 8006e1a:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8006e1c:	4b73      	ldr	r3, [pc, #460]	; (8006fec <RadioSetTxConfig+0x20c>)
 8006e1e:	220b      	movs	r2, #11
 8006e20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f002 fd55 	bl	80098d4 <SUBGRF_GetFskBandwidthRegValue>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	4b6f      	ldr	r3, [pc, #444]	; (8006fec <RadioSetTxConfig+0x20c>)
 8006e30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8006e34:	4a6d      	ldr	r2, [pc, #436]	; (8006fec <RadioSetTxConfig+0x20c>)
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8006e3a:	4b6c      	ldr	r3, [pc, #432]	; (8006fec <RadioSetTxConfig+0x20c>)
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8006e40:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006e42:	00db      	lsls	r3, r3, #3
 8006e44:	b29a      	uxth	r2, r3
 8006e46:	4b69      	ldr	r3, [pc, #420]	; (8006fec <RadioSetTxConfig+0x20c>)
 8006e48:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8006e4a:	4b68      	ldr	r3, [pc, #416]	; (8006fec <RadioSetTxConfig+0x20c>)
 8006e4c:	2204      	movs	r2, #4
 8006e4e:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8006e50:	4b66      	ldr	r3, [pc, #408]	; (8006fec <RadioSetTxConfig+0x20c>)
 8006e52:	2218      	movs	r2, #24
 8006e54:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8006e56:	4b65      	ldr	r3, [pc, #404]	; (8006fec <RadioSetTxConfig+0x20c>)
 8006e58:	2200      	movs	r2, #0
 8006e5a:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8006e5c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006e60:	f083 0301 	eor.w	r3, r3, #1
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	461a      	mov	r2, r3
 8006e68:	4b60      	ldr	r3, [pc, #384]	; (8006fec <RadioSetTxConfig+0x20c>)
 8006e6a:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8006e6c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d003      	beq.n	8006e7c <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8006e74:	4b5d      	ldr	r3, [pc, #372]	; (8006fec <RadioSetTxConfig+0x20c>)
 8006e76:	22f2      	movs	r2, #242	; 0xf2
 8006e78:	75da      	strb	r2, [r3, #23]
 8006e7a:	e002      	b.n	8006e82 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8006e7c:	4b5b      	ldr	r3, [pc, #364]	; (8006fec <RadioSetTxConfig+0x20c>)
 8006e7e:	2201      	movs	r2, #1
 8006e80:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8006e82:	4b5a      	ldr	r3, [pc, #360]	; (8006fec <RadioSetTxConfig+0x20c>)
 8006e84:	2201      	movs	r2, #1
 8006e86:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8006e88:	f000 fb2b 	bl	80074e2 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8006e8c:	2000      	movs	r0, #0
 8006e8e:	f7ff fcc7 	bl	8006820 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006e92:	4857      	ldr	r0, [pc, #348]	; (8006ff0 <RadioSetTxConfig+0x210>)
 8006e94:	f002 f8ea 	bl	800906c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006e98:	4856      	ldr	r0, [pc, #344]	; (8006ff4 <RadioSetTxConfig+0x214>)
 8006e9a:	f002 f9b9 	bl	8009210 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8006e9e:	4a56      	ldr	r2, [pc, #344]	; (8006ff8 <RadioSetTxConfig+0x218>)
 8006ea0:	f107 0310 	add.w	r3, r7, #16
 8006ea4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006ea8:	e883 0003 	stmia.w	r3, {r0, r1}
 8006eac:	f107 0310 	add.w	r3, r7, #16
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f001 fc76 	bl	80087a2 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8006eb6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006eba:	f001 fcc1 	bl	8008840 <SUBGRF_SetWhiteningSeed>
            break;
 8006ebe:	e078      	b.n	8006fb2 <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8006ec0:	4b4a      	ldr	r3, [pc, #296]	; (8006fec <RadioSetTxConfig+0x20c>)
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8006ec8:	6a3b      	ldr	r3, [r7, #32]
 8006eca:	b2da      	uxtb	r2, r3
 8006ecc:	4b47      	ldr	r3, [pc, #284]	; (8006fec <RadioSetTxConfig+0x20c>)
 8006ece:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8006ed2:	4a4a      	ldr	r2, [pc, #296]	; (8006ffc <RadioSetTxConfig+0x21c>)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	4413      	add	r3, r2
 8006ed8:	781a      	ldrb	r2, [r3, #0]
 8006eda:	4b44      	ldr	r3, [pc, #272]	; (8006fec <RadioSetTxConfig+0x20c>)
 8006edc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8006ee0:	4a42      	ldr	r2, [pc, #264]	; (8006fec <RadioSetTxConfig+0x20c>)
 8006ee2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006ee6:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d105      	bne.n	8006efc <RadioSetTxConfig+0x11c>
 8006ef0:	6a3b      	ldr	r3, [r7, #32]
 8006ef2:	2b0b      	cmp	r3, #11
 8006ef4:	d008      	beq.n	8006f08 <RadioSetTxConfig+0x128>
 8006ef6:	6a3b      	ldr	r3, [r7, #32]
 8006ef8:	2b0c      	cmp	r3, #12
 8006efa:	d005      	beq.n	8006f08 <RadioSetTxConfig+0x128>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d107      	bne.n	8006f12 <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8006f02:	6a3b      	ldr	r3, [r7, #32]
 8006f04:	2b0c      	cmp	r3, #12
 8006f06:	d104      	bne.n	8006f12 <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8006f08:	4b38      	ldr	r3, [pc, #224]	; (8006fec <RadioSetTxConfig+0x20c>)
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8006f10:	e003      	b.n	8006f1a <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8006f12:	4b36      	ldr	r3, [pc, #216]	; (8006fec <RadioSetTxConfig+0x20c>)
 8006f14:	2200      	movs	r2, #0
 8006f16:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8006f1a:	4b34      	ldr	r3, [pc, #208]	; (8006fec <RadioSetTxConfig+0x20c>)
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8006f20:	4b32      	ldr	r3, [pc, #200]	; (8006fec <RadioSetTxConfig+0x20c>)
 8006f22:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006f26:	2b05      	cmp	r3, #5
 8006f28:	d004      	beq.n	8006f34 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8006f2a:	4b30      	ldr	r3, [pc, #192]	; (8006fec <RadioSetTxConfig+0x20c>)
 8006f2c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8006f30:	2b06      	cmp	r3, #6
 8006f32:	d10a      	bne.n	8006f4a <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 8006f34:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006f36:	2b0b      	cmp	r3, #11
 8006f38:	d803      	bhi.n	8006f42 <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8006f3a:	4b2c      	ldr	r3, [pc, #176]	; (8006fec <RadioSetTxConfig+0x20c>)
 8006f3c:	220c      	movs	r2, #12
 8006f3e:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8006f40:	e006      	b.n	8006f50 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8006f42:	4a2a      	ldr	r2, [pc, #168]	; (8006fec <RadioSetTxConfig+0x20c>)
 8006f44:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006f46:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8006f48:	e002      	b.n	8006f50 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8006f4a:	4a28      	ldr	r2, [pc, #160]	; (8006fec <RadioSetTxConfig+0x20c>)
 8006f4c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006f4e:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8006f50:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8006f54:	4b25      	ldr	r3, [pc, #148]	; (8006fec <RadioSetTxConfig+0x20c>)
 8006f56:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8006f58:	4b29      	ldr	r3, [pc, #164]	; (8007000 <RadioSetTxConfig+0x220>)
 8006f5a:	781a      	ldrb	r2, [r3, #0]
 8006f5c:	4b23      	ldr	r3, [pc, #140]	; (8006fec <RadioSetTxConfig+0x20c>)
 8006f5e:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8006f60:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8006f64:	4b21      	ldr	r3, [pc, #132]	; (8006fec <RadioSetTxConfig+0x20c>)
 8006f66:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8006f6a:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8006f6e:	4b1f      	ldr	r3, [pc, #124]	; (8006fec <RadioSetTxConfig+0x20c>)
 8006f70:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8006f74:	f000 fab5 	bl	80074e2 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8006f78:	2001      	movs	r0, #1
 8006f7a:	f7ff fc51 	bl	8006820 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006f7e:	481c      	ldr	r0, [pc, #112]	; (8006ff0 <RadioSetTxConfig+0x210>)
 8006f80:	f002 f874 	bl	800906c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006f84:	481b      	ldr	r0, [pc, #108]	; (8006ff4 <RadioSetTxConfig+0x214>)
 8006f86:	f002 f943 	bl	8009210 <SUBGRF_SetPacketParams>
            break;
 8006f8a:	e012      	b.n	8006fb2 <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8006f8c:	2004      	movs	r0, #4
 8006f8e:	f7ff fc47 	bl	8006820 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8006f92:	4b16      	ldr	r3, [pc, #88]	; (8006fec <RadioSetTxConfig+0x20c>)
 8006f94:	2202      	movs	r2, #2
 8006f96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8006f9a:	4a14      	ldr	r2, [pc, #80]	; (8006fec <RadioSetTxConfig+0x20c>)
 8006f9c:	6a3b      	ldr	r3, [r7, #32]
 8006f9e:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8006fa0:	4b12      	ldr	r3, [pc, #72]	; (8006fec <RadioSetTxConfig+0x20c>)
 8006fa2:	2216      	movs	r2, #22
 8006fa4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006fa8:	4811      	ldr	r0, [pc, #68]	; (8006ff0 <RadioSetTxConfig+0x210>)
 8006faa:	f002 f85f 	bl	800906c <SUBGRF_SetModulationParams>
            break;
 8006fae:	e000      	b.n	8006fb2 <RadioSetTxConfig+0x1d2>
            break;
 8006fb0:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8006fb2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f002 fb8e 	bl	80096d8 <SUBGRF_SetRfTxPower>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	4b0a      	ldr	r3, [pc, #40]	; (8006fec <RadioSetTxConfig+0x20c>)
 8006fc2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8006fc6:	210e      	movs	r1, #14
 8006fc8:	f640 101f 	movw	r0, #2335	; 0x91f
 8006fcc:	f002 fa68 	bl	80094a0 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8006fd0:	4b06      	ldr	r3, [pc, #24]	; (8006fec <RadioSetTxConfig+0x20c>)
 8006fd2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f002 fd5d 	bl	8009a96 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8006fdc:	4a03      	ldr	r2, [pc, #12]	; (8006fec <RadioSetTxConfig+0x20c>)
 8006fde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fe0:	6053      	str	r3, [r2, #4]
}
 8006fe2:	bf00      	nop
 8006fe4:	3718      	adds	r7, #24
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
 8006fea:	bf00      	nop
 8006fec:	200004b8 	.word	0x200004b8
 8006ff0:	200004f0 	.word	0x200004f0
 8006ff4:	200004c6 	.word	0x200004c6
 8006ff8:	0800b02c 	.word	0x0800b02c
 8006ffc:	0800b1c8 	.word	0x0800b1c8
 8007000:	2000000d 	.word	0x2000000d

08007004 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8007004:	b480      	push	{r7}
 8007006:	b083      	sub	sp, #12
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
    return true;
 800700c:	2301      	movs	r3, #1
}
 800700e:	4618      	mov	r0, r3
 8007010:	370c      	adds	r7, #12
 8007012:	46bd      	mov	sp, r7
 8007014:	bc80      	pop	{r7}
 8007016:	4770      	bx	lr

08007018 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8007018:	b480      	push	{r7}
 800701a:	b085      	sub	sp, #20
 800701c:	af00      	add	r7, sp, #0
 800701e:	4603      	mov	r3, r0
 8007020:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8007022:	2300      	movs	r3, #0
 8007024:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8007026:	79fb      	ldrb	r3, [r7, #7]
 8007028:	2b0a      	cmp	r3, #10
 800702a:	d83e      	bhi.n	80070aa <RadioGetLoRaBandwidthInHz+0x92>
 800702c:	a201      	add	r2, pc, #4	; (adr r2, 8007034 <RadioGetLoRaBandwidthInHz+0x1c>)
 800702e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007032:	bf00      	nop
 8007034:	08007061 	.word	0x08007061
 8007038:	08007071 	.word	0x08007071
 800703c:	08007081 	.word	0x08007081
 8007040:	08007091 	.word	0x08007091
 8007044:	08007099 	.word	0x08007099
 8007048:	0800709f 	.word	0x0800709f
 800704c:	080070a5 	.word	0x080070a5
 8007050:	080070ab 	.word	0x080070ab
 8007054:	08007069 	.word	0x08007069
 8007058:	08007079 	.word	0x08007079
 800705c:	08007089 	.word	0x08007089
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8007060:	f641 6384 	movw	r3, #7812	; 0x1e84
 8007064:	60fb      	str	r3, [r7, #12]
        break;
 8007066:	e020      	b.n	80070aa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8007068:	f642 03b1 	movw	r3, #10417	; 0x28b1
 800706c:	60fb      	str	r3, [r7, #12]
        break;
 800706e:	e01c      	b.n	80070aa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8007070:	f643 5309 	movw	r3, #15625	; 0x3d09
 8007074:	60fb      	str	r3, [r7, #12]
        break;
 8007076:	e018      	b.n	80070aa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8007078:	f245 1361 	movw	r3, #20833	; 0x5161
 800707c:	60fb      	str	r3, [r7, #12]
        break;
 800707e:	e014      	b.n	80070aa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8007080:	f647 2312 	movw	r3, #31250	; 0x7a12
 8007084:	60fb      	str	r3, [r7, #12]
        break;
 8007086:	e010      	b.n	80070aa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8007088:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 800708c:	60fb      	str	r3, [r7, #12]
        break;
 800708e:	e00c      	b.n	80070aa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8007090:	f24f 4324 	movw	r3, #62500	; 0xf424
 8007094:	60fb      	str	r3, [r7, #12]
        break;
 8007096:	e008      	b.n	80070aa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8007098:	4b07      	ldr	r3, [pc, #28]	; (80070b8 <RadioGetLoRaBandwidthInHz+0xa0>)
 800709a:	60fb      	str	r3, [r7, #12]
        break;
 800709c:	e005      	b.n	80070aa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 800709e:	4b07      	ldr	r3, [pc, #28]	; (80070bc <RadioGetLoRaBandwidthInHz+0xa4>)
 80070a0:	60fb      	str	r3, [r7, #12]
        break;
 80070a2:	e002      	b.n	80070aa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 80070a4:	4b06      	ldr	r3, [pc, #24]	; (80070c0 <RadioGetLoRaBandwidthInHz+0xa8>)
 80070a6:	60fb      	str	r3, [r7, #12]
        break;
 80070a8:	bf00      	nop
    }

    return bandwidthInHz;
 80070aa:	68fb      	ldr	r3, [r7, #12]
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3714      	adds	r7, #20
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bc80      	pop	{r7}
 80070b4:	4770      	bx	lr
 80070b6:	bf00      	nop
 80070b8:	0001e848 	.word	0x0001e848
 80070bc:	0003d090 	.word	0x0003d090
 80070c0:	0007a120 	.word	0x0007a120

080070c4 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80070c4:	b480      	push	{r7}
 80070c6:	b083      	sub	sp, #12
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	4608      	mov	r0, r1
 80070ce:	4611      	mov	r1, r2
 80070d0:	461a      	mov	r2, r3
 80070d2:	4603      	mov	r3, r0
 80070d4:	70fb      	strb	r3, [r7, #3]
 80070d6:	460b      	mov	r3, r1
 80070d8:	803b      	strh	r3, [r7, #0]
 80070da:	4613      	mov	r3, r2
 80070dc:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 80070de:	883b      	ldrh	r3, [r7, #0]
 80070e0:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80070e2:	78ba      	ldrb	r2, [r7, #2]
 80070e4:	f082 0201 	eor.w	r2, r2, #1
 80070e8:	b2d2      	uxtb	r2, r2
 80070ea:	2a00      	cmp	r2, #0
 80070ec:	d001      	beq.n	80070f2 <RadioGetGfskTimeOnAirNumerator+0x2e>
 80070ee:	2208      	movs	r2, #8
 80070f0:	e000      	b.n	80070f4 <RadioGetGfskTimeOnAirNumerator+0x30>
 80070f2:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 80070f4:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80070f6:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 80070fa:	7c3b      	ldrb	r3, [r7, #16]
 80070fc:	7d39      	ldrb	r1, [r7, #20]
 80070fe:	2900      	cmp	r1, #0
 8007100:	d001      	beq.n	8007106 <RadioGetGfskTimeOnAirNumerator+0x42>
 8007102:	2102      	movs	r1, #2
 8007104:	e000      	b.n	8007108 <RadioGetGfskTimeOnAirNumerator+0x44>
 8007106:	2100      	movs	r1, #0
 8007108:	440b      	add	r3, r1
 800710a:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800710c:	4413      	add	r3, r2
}
 800710e:	4618      	mov	r0, r3
 8007110:	370c      	adds	r7, #12
 8007112:	46bd      	mov	sp, r7
 8007114:	bc80      	pop	{r7}
 8007116:	4770      	bx	lr

08007118 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8007118:	b480      	push	{r7}
 800711a:	b08b      	sub	sp, #44	; 0x2c
 800711c:	af00      	add	r7, sp, #0
 800711e:	60f8      	str	r0, [r7, #12]
 8007120:	60b9      	str	r1, [r7, #8]
 8007122:	4611      	mov	r1, r2
 8007124:	461a      	mov	r2, r3
 8007126:	460b      	mov	r3, r1
 8007128:	71fb      	strb	r3, [r7, #7]
 800712a:	4613      	mov	r3, r2
 800712c:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 800712e:	79fb      	ldrb	r3, [r7, #7]
 8007130:	3304      	adds	r3, #4
 8007132:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8007134:	2300      	movs	r3, #0
 8007136:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	2b05      	cmp	r3, #5
 800713e:	d002      	beq.n	8007146 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	2b06      	cmp	r3, #6
 8007144:	d104      	bne.n	8007150 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8007146:	88bb      	ldrh	r3, [r7, #4]
 8007148:	2b0b      	cmp	r3, #11
 800714a:	d801      	bhi.n	8007150 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 800714c:	230c      	movs	r3, #12
 800714e:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d105      	bne.n	8007162 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	2b0b      	cmp	r3, #11
 800715a:	d008      	beq.n	800716e <RadioGetLoRaTimeOnAirNumerator+0x56>
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	2b0c      	cmp	r3, #12
 8007160:	d005      	beq.n	800716e <RadioGetLoRaTimeOnAirNumerator+0x56>
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2b01      	cmp	r3, #1
 8007166:	d105      	bne.n	8007174 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	2b0c      	cmp	r3, #12
 800716c:	d102      	bne.n	8007174 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 800716e:	2301      	movs	r3, #1
 8007170:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8007174:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8007178:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 800717a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800717e:	2a00      	cmp	r2, #0
 8007180:	d001      	beq.n	8007186 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8007182:	2210      	movs	r2, #16
 8007184:	e000      	b.n	8007188 <RadioGetLoRaTimeOnAirNumerator+0x70>
 8007186:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8007188:	4413      	add	r3, r2
 800718a:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8007190:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8007192:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8007196:	2a00      	cmp	r2, #0
 8007198:	d001      	beq.n	800719e <RadioGetLoRaTimeOnAirNumerator+0x86>
 800719a:	2200      	movs	r2, #0
 800719c:	e000      	b.n	80071a0 <RadioGetLoRaTimeOnAirNumerator+0x88>
 800719e:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 80071a0:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80071a2:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	2b06      	cmp	r3, #6
 80071a8:	d803      	bhi.n	80071b2 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	009b      	lsls	r3, r3, #2
 80071ae:	623b      	str	r3, [r7, #32]
 80071b0:	e00e      	b.n	80071d0 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 80071b2:	69fb      	ldr	r3, [r7, #28]
 80071b4:	3308      	adds	r3, #8
 80071b6:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 80071b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d004      	beq.n	80071ca <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	3b02      	subs	r3, #2
 80071c4:	009b      	lsls	r3, r3, #2
 80071c6:	623b      	str	r3, [r7, #32]
 80071c8:	e002      	b.n	80071d0 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 80071d0:	69fb      	ldr	r3, [r7, #28]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	da01      	bge.n	80071da <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 80071d6:	2300      	movs	r3, #0
 80071d8:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 80071da:	69fa      	ldr	r2, [r7, #28]
 80071dc:	6a3b      	ldr	r3, [r7, #32]
 80071de:	4413      	add	r3, r2
 80071e0:	1e5a      	subs	r2, r3, #1
 80071e2:	6a3b      	ldr	r3, [r7, #32]
 80071e4:	fb92 f3f3 	sdiv	r3, r2, r3
 80071e8:	697a      	ldr	r2, [r7, #20]
 80071ea:	fb03 f202 	mul.w	r2, r3, r2
 80071ee:	88bb      	ldrh	r3, [r7, #4]
 80071f0:	4413      	add	r3, r2
    int32_t intermediate =
 80071f2:	330c      	adds	r3, #12
 80071f4:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	2b06      	cmp	r3, #6
 80071fa:	d802      	bhi.n	8007202 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 80071fc:	69bb      	ldr	r3, [r7, #24]
 80071fe:	3302      	adds	r3, #2
 8007200:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8007202:	69bb      	ldr	r3, [r7, #24]
 8007204:	009b      	lsls	r3, r3, #2
 8007206:	1c5a      	adds	r2, r3, #1
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	3b02      	subs	r3, #2
 800720c:	fa02 f303 	lsl.w	r3, r2, r3
}
 8007210:	4618      	mov	r0, r3
 8007212:	372c      	adds	r7, #44	; 0x2c
 8007214:	46bd      	mov	sp, r7
 8007216:	bc80      	pop	{r7}
 8007218:	4770      	bx	lr
	...

0800721c <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b08a      	sub	sp, #40	; 0x28
 8007220:	af04      	add	r7, sp, #16
 8007222:	60b9      	str	r1, [r7, #8]
 8007224:	607a      	str	r2, [r7, #4]
 8007226:	461a      	mov	r2, r3
 8007228:	4603      	mov	r3, r0
 800722a:	73fb      	strb	r3, [r7, #15]
 800722c:	4613      	mov	r3, r2
 800722e:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8007230:	2300      	movs	r3, #0
 8007232:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8007234:	2301      	movs	r3, #1
 8007236:	613b      	str	r3, [r7, #16]

    switch( modem )
 8007238:	7bfb      	ldrb	r3, [r7, #15]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d002      	beq.n	8007244 <RadioTimeOnAir+0x28>
 800723e:	2b01      	cmp	r3, #1
 8007240:	d017      	beq.n	8007272 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8007242:	e035      	b.n	80072b0 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8007244:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8007248:	8c3a      	ldrh	r2, [r7, #32]
 800724a:	7bb9      	ldrb	r1, [r7, #14]
 800724c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007250:	9301      	str	r3, [sp, #4]
 8007252:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007256:	9300      	str	r3, [sp, #0]
 8007258:	4603      	mov	r3, r0
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f7ff ff32 	bl	80070c4 <RadioGetGfskTimeOnAirNumerator>
 8007260:	4603      	mov	r3, r0
 8007262:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007266:	fb02 f303 	mul.w	r3, r2, r3
 800726a:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	613b      	str	r3, [r7, #16]
        break;
 8007270:	e01e      	b.n	80072b0 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8007272:	8c39      	ldrh	r1, [r7, #32]
 8007274:	7bba      	ldrb	r2, [r7, #14]
 8007276:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800727a:	9302      	str	r3, [sp, #8]
 800727c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007280:	9301      	str	r3, [sp, #4]
 8007282:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007286:	9300      	str	r3, [sp, #0]
 8007288:	460b      	mov	r3, r1
 800728a:	6879      	ldr	r1, [r7, #4]
 800728c:	68b8      	ldr	r0, [r7, #8]
 800728e:	f7ff ff43 	bl	8007118 <RadioGetLoRaTimeOnAirNumerator>
 8007292:	4603      	mov	r3, r0
 8007294:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007298:	fb02 f303 	mul.w	r3, r2, r3
 800729c:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 800729e:	4a0a      	ldr	r2, [pc, #40]	; (80072c8 <RadioTimeOnAir+0xac>)
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	4413      	add	r3, r2
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	4618      	mov	r0, r3
 80072a8:	f7ff feb6 	bl	8007018 <RadioGetLoRaBandwidthInHz>
 80072ac:	6138      	str	r0, [r7, #16]
        break;
 80072ae:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 80072b0:	697a      	ldr	r2, [r7, #20]
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	4413      	add	r3, r2
 80072b6:	1e5a      	subs	r2, r3, #1
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3718      	adds	r7, #24
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}
 80072c6:	bf00      	nop
 80072c8:	0800b1c8 	.word	0x0800b1c8

080072cc <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b084      	sub	sp, #16
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
 80072d4:	460b      	mov	r3, r1
 80072d6:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 80072d8:	2300      	movs	r3, #0
 80072da:	2200      	movs	r2, #0
 80072dc:	f240 2101 	movw	r1, #513	; 0x201
 80072e0:	f240 2001 	movw	r0, #513	; 0x201
 80072e4:	f001 fd2c 	bl	8008d40 <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80072e8:	4b70      	ldr	r3, [pc, #448]	; (80074ac <RadioSend+0x1e0>)
 80072ea:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80072ee:	2101      	movs	r1, #1
 80072f0:	4618      	mov	r0, r3
 80072f2:	f002 f9c9 	bl	8009688 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 80072f6:	4b6d      	ldr	r3, [pc, #436]	; (80074ac <RadioSend+0x1e0>)
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	d112      	bne.n	8007324 <RadioSend+0x58>
 80072fe:	4b6b      	ldr	r3, [pc, #428]	; (80074ac <RadioSend+0x1e0>)
 8007300:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007304:	2b06      	cmp	r3, #6
 8007306:	d10d      	bne.n	8007324 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8007308:	f640 0089 	movw	r0, #2185	; 0x889
 800730c:	f002 f8dc 	bl	80094c8 <SUBGRF_ReadRegister>
 8007310:	4603      	mov	r3, r0
 8007312:	f023 0304 	bic.w	r3, r3, #4
 8007316:	b2db      	uxtb	r3, r3
 8007318:	4619      	mov	r1, r3
 800731a:	f640 0089 	movw	r0, #2185	; 0x889
 800731e:	f002 f8bf 	bl	80094a0 <SUBGRF_WriteRegister>
 8007322:	e00c      	b.n	800733e <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8007324:	f640 0089 	movw	r0, #2185	; 0x889
 8007328:	f002 f8ce 	bl	80094c8 <SUBGRF_ReadRegister>
 800732c:	4603      	mov	r3, r0
 800732e:	f043 0304 	orr.w	r3, r3, #4
 8007332:	b2db      	uxtb	r3, r3
 8007334:	4619      	mov	r1, r3
 8007336:	f640 0089 	movw	r0, #2185	; 0x889
 800733a:	f002 f8b1 	bl	80094a0 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 800733e:	4b5b      	ldr	r3, [pc, #364]	; (80074ac <RadioSend+0x1e0>)
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	2b04      	cmp	r3, #4
 8007344:	f200 80a2 	bhi.w	800748c <RadioSend+0x1c0>
 8007348:	a201      	add	r2, pc, #4	; (adr r2, 8007350 <RadioSend+0x84>)
 800734a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800734e:	bf00      	nop
 8007350:	0800737f 	.word	0x0800737f
 8007354:	08007365 	.word	0x08007365
 8007358:	0800737f 	.word	0x0800737f
 800735c:	080073d5 	.word	0x080073d5
 8007360:	080073f5 	.word	0x080073f5
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8007364:	4a51      	ldr	r2, [pc, #324]	; (80074ac <RadioSend+0x1e0>)
 8007366:	78fb      	ldrb	r3, [r7, #3]
 8007368:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800736a:	4851      	ldr	r0, [pc, #324]	; (80074b0 <RadioSend+0x1e4>)
 800736c:	f001 ff50 	bl	8009210 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8007370:	78fb      	ldrb	r3, [r7, #3]
 8007372:	2200      	movs	r2, #0
 8007374:	4619      	mov	r1, r3
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f001 fa00 	bl	800877c <SUBGRF_SendPayload>
            break;
 800737c:	e087      	b.n	800748e <RadioSend+0x1c2>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 800737e:	f002 fb7c 	bl	8009a7a <RFW_Is_Init>
 8007382:	4603      	mov	r3, r0
 8007384:	2b01      	cmp	r3, #1
 8007386:	d118      	bne.n	80073ba <RadioSend+0xee>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8007388:	f107 020d 	add.w	r2, r7, #13
 800738c:	78fb      	ldrb	r3, [r7, #3]
 800738e:	4619      	mov	r1, r3
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f002 fb8a 	bl	8009aaa <RFW_TransmitInit>
 8007396:	4603      	mov	r3, r0
 8007398:	2b00      	cmp	r3, #0
 800739a:	d10c      	bne.n	80073b6 <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 800739c:	7b7a      	ldrb	r2, [r7, #13]
 800739e:	4b43      	ldr	r3, [pc, #268]	; (80074ac <RadioSend+0x1e0>)
 80073a0:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80073a2:	4843      	ldr	r0, [pc, #268]	; (80074b0 <RadioSend+0x1e4>)
 80073a4:	f001 ff34 	bl	8009210 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 80073a8:	7b7b      	ldrb	r3, [r7, #13]
 80073aa:	2200      	movs	r2, #0
 80073ac:	4619      	mov	r1, r3
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f001 f9e4 	bl	800877c <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 80073b4:	e06b      	b.n	800748e <RadioSend+0x1c2>
                    return RADIO_STATUS_ERROR;
 80073b6:	2303      	movs	r3, #3
 80073b8:	e073      	b.n	80074a2 <RadioSend+0x1d6>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 80073ba:	4a3c      	ldr	r2, [pc, #240]	; (80074ac <RadioSend+0x1e0>)
 80073bc:	78fb      	ldrb	r3, [r7, #3]
 80073be:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80073c0:	483b      	ldr	r0, [pc, #236]	; (80074b0 <RadioSend+0x1e4>)
 80073c2:	f001 ff25 	bl	8009210 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 80073c6:	78fb      	ldrb	r3, [r7, #3]
 80073c8:	2200      	movs	r2, #0
 80073ca:	4619      	mov	r1, r3
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f001 f9d5 	bl	800877c <SUBGRF_SendPayload>
            break;
 80073d2:	e05c      	b.n	800748e <RadioSend+0x1c2>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80073d4:	4b35      	ldr	r3, [pc, #212]	; (80074ac <RadioSend+0x1e0>)
 80073d6:	2202      	movs	r2, #2
 80073d8:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 80073da:	4a34      	ldr	r2, [pc, #208]	; (80074ac <RadioSend+0x1e0>)
 80073dc:	78fb      	ldrb	r3, [r7, #3]
 80073de:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80073e0:	4833      	ldr	r0, [pc, #204]	; (80074b0 <RadioSend+0x1e4>)
 80073e2:	f001 ff15 	bl	8009210 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80073e6:	78fb      	ldrb	r3, [r7, #3]
 80073e8:	2200      	movs	r2, #0
 80073ea:	4619      	mov	r1, r3
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f001 f9c5 	bl	800877c <SUBGRF_SendPayload>
            break;
 80073f2:	e04c      	b.n	800748e <RadioSend+0x1c2>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 80073f4:	78fb      	ldrb	r3, [r7, #3]
 80073f6:	461a      	mov	r2, r3
 80073f8:	6879      	ldr	r1, [r7, #4]
 80073fa:	482e      	ldr	r0, [pc, #184]	; (80074b4 <RadioSend+0x1e8>)
 80073fc:	f000 fc98 	bl	8007d30 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8007400:	4b2a      	ldr	r3, [pc, #168]	; (80074ac <RadioSend+0x1e0>)
 8007402:	2202      	movs	r2, #2
 8007404:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8007406:	78fb      	ldrb	r3, [r7, #3]
 8007408:	3301      	adds	r3, #1
 800740a:	b2da      	uxtb	r2, r3
 800740c:	4b27      	ldr	r3, [pc, #156]	; (80074ac <RadioSend+0x1e0>)
 800740e:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007410:	4827      	ldr	r0, [pc, #156]	; (80074b0 <RadioSend+0x1e4>)
 8007412:	f001 fefd 	bl	8009210 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8007416:	2100      	movs	r1, #0
 8007418:	20f1      	movs	r0, #241	; 0xf1
 800741a:	f000 f964 	bl	80076e6 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 800741e:	2100      	movs	r1, #0
 8007420:	20f0      	movs	r0, #240	; 0xf0
 8007422:	f000 f960 	bl	80076e6 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8007426:	4b21      	ldr	r3, [pc, #132]	; (80074ac <RadioSend+0x1e0>)
 8007428:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800742a:	2b64      	cmp	r3, #100	; 0x64
 800742c:	d108      	bne.n	8007440 <RadioSend+0x174>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 800742e:	2170      	movs	r1, #112	; 0x70
 8007430:	20f3      	movs	r0, #243	; 0xf3
 8007432:	f000 f958 	bl	80076e6 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 8007436:	211d      	movs	r1, #29
 8007438:	20f2      	movs	r0, #242	; 0xf2
 800743a:	f000 f954 	bl	80076e6 <RadioWrite>
 800743e:	e007      	b.n	8007450 <RadioSend+0x184>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8007440:	21e1      	movs	r1, #225	; 0xe1
 8007442:	20f3      	movs	r0, #243	; 0xf3
 8007444:	f000 f94f 	bl	80076e6 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8007448:	2104      	movs	r1, #4
 800744a:	20f2      	movs	r0, #242	; 0xf2
 800744c:	f000 f94b 	bl	80076e6 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8007450:	78fb      	ldrb	r3, [r7, #3]
 8007452:	b29b      	uxth	r3, r3
 8007454:	00db      	lsls	r3, r3, #3
 8007456:	b29b      	uxth	r3, r3
 8007458:	3302      	adds	r3, #2
 800745a:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 800745c:	89fb      	ldrh	r3, [r7, #14]
 800745e:	0a1b      	lsrs	r3, r3, #8
 8007460:	b29b      	uxth	r3, r3
 8007462:	b2db      	uxtb	r3, r3
 8007464:	4619      	mov	r1, r3
 8007466:	20f4      	movs	r0, #244	; 0xf4
 8007468:	f000 f93d 	bl	80076e6 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 800746c:	89fb      	ldrh	r3, [r7, #14]
 800746e:	b2db      	uxtb	r3, r3
 8007470:	4619      	mov	r1, r3
 8007472:	20f5      	movs	r0, #245	; 0xf5
 8007474:	f000 f937 	bl	80076e6 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 8007478:	78fb      	ldrb	r3, [r7, #3]
 800747a:	3301      	adds	r3, #1
 800747c:	b2db      	uxtb	r3, r3
 800747e:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8007482:	4619      	mov	r1, r3
 8007484:	480b      	ldr	r0, [pc, #44]	; (80074b4 <RadioSend+0x1e8>)
 8007486:	f001 f979 	bl	800877c <SUBGRF_SendPayload>
            break;
 800748a:	e000      	b.n	800748e <RadioSend+0x1c2>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 800748c:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 800748e:	4b07      	ldr	r3, [pc, #28]	; (80074ac <RadioSend+0x1e0>)
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	4619      	mov	r1, r3
 8007494:	4808      	ldr	r0, [pc, #32]	; (80074b8 <RadioSend+0x1ec>)
 8007496:	f002 fdcf 	bl	800a038 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 800749a:	4807      	ldr	r0, [pc, #28]	; (80074b8 <RadioSend+0x1ec>)
 800749c:	f002 fcee 	bl	8009e7c <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 80074a0:	2300      	movs	r3, #0
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3710      	adds	r7, #16
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}
 80074aa:	bf00      	nop
 80074ac:	200004b8 	.word	0x200004b8
 80074b0:	200004c6 	.word	0x200004c6
 80074b4:	200003b4 	.word	0x200003b4
 80074b8:	20000514 	.word	0x20000514

080074bc <RadioSleep>:

static void RadioSleep( void )
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b082      	sub	sp, #8
 80074c0:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 80074c2:	2300      	movs	r3, #0
 80074c4:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 80074c6:	793b      	ldrb	r3, [r7, #4]
 80074c8:	f043 0304 	orr.w	r3, r3, #4
 80074cc:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 80074ce:	7938      	ldrb	r0, [r7, #4]
 80074d0:	f001 fa30 	bl	8008934 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 80074d4:	2002      	movs	r0, #2
 80074d6:	f7fa f971 	bl	80017bc <HAL_Delay>
}
 80074da:	bf00      	nop
 80074dc:	3708      	adds	r7, #8
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}

080074e2 <RadioStandby>:

static void RadioStandby( void )
{
 80074e2:	b580      	push	{r7, lr}
 80074e4:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 80074e6:	2000      	movs	r0, #0
 80074e8:	f001 fa56 	bl	8008998 <SUBGRF_SetStandby>
}
 80074ec:	bf00      	nop
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b082      	sub	sp, #8
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 80074f8:	f002 fabf 	bl	8009a7a <RFW_Is_Init>
 80074fc:	4603      	mov	r3, r0
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d102      	bne.n	8007508 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 8007502:	f002 fae2 	bl	8009aca <RFW_ReceiveInit>
 8007506:	e007      	b.n	8007518 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8007508:	2300      	movs	r3, #0
 800750a:	2200      	movs	r2, #0
 800750c:	f240 2162 	movw	r1, #610	; 0x262
 8007510:	f240 2062 	movw	r0, #610	; 0x262
 8007514:	f001 fc14 	bl	8008d40 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d006      	beq.n	800752c <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 800751e:	6879      	ldr	r1, [r7, #4]
 8007520:	4811      	ldr	r0, [pc, #68]	; (8007568 <RadioRx+0x78>)
 8007522:	f002 fd89 	bl	800a038 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8007526:	4810      	ldr	r0, [pc, #64]	; (8007568 <RadioRx+0x78>)
 8007528:	f002 fca8 	bl	8009e7c <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800752c:	4b0f      	ldr	r3, [pc, #60]	; (800756c <RadioRx+0x7c>)
 800752e:	2200      	movs	r2, #0
 8007530:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8007532:	4b0e      	ldr	r3, [pc, #56]	; (800756c <RadioRx+0x7c>)
 8007534:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007538:	2100      	movs	r1, #0
 800753a:	4618      	mov	r0, r3
 800753c:	f002 f8a4 	bl	8009688 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8007540:	4b0a      	ldr	r3, [pc, #40]	; (800756c <RadioRx+0x7c>)
 8007542:	785b      	ldrb	r3, [r3, #1]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d004      	beq.n	8007552 <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8007548:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800754c:	f001 fa60 	bl	8008a10 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8007550:	e005      	b.n	800755e <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8007552:	4b06      	ldr	r3, [pc, #24]	; (800756c <RadioRx+0x7c>)
 8007554:	689b      	ldr	r3, [r3, #8]
 8007556:	019b      	lsls	r3, r3, #6
 8007558:	4618      	mov	r0, r3
 800755a:	f001 fa59 	bl	8008a10 <SUBGRF_SetRx>
}
 800755e:	bf00      	nop
 8007560:	3708      	adds	r7, #8
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
 8007566:	bf00      	nop
 8007568:	2000052c 	.word	0x2000052c
 800756c:	200004b8 	.word	0x200004b8

08007570 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b082      	sub	sp, #8
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 8007578:	f002 fa7f 	bl	8009a7a <RFW_Is_Init>
 800757c:	4603      	mov	r3, r0
 800757e:	2b01      	cmp	r3, #1
 8007580:	d102      	bne.n	8007588 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 8007582:	f002 faa2 	bl	8009aca <RFW_ReceiveInit>
 8007586:	e007      	b.n	8007598 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8007588:	2300      	movs	r3, #0
 800758a:	2200      	movs	r2, #0
 800758c:	f240 2162 	movw	r1, #610	; 0x262
 8007590:	f240 2062 	movw	r0, #610	; 0x262
 8007594:	f001 fbd4 	bl	8008d40 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d006      	beq.n	80075ac <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 800759e:	6879      	ldr	r1, [r7, #4]
 80075a0:	4811      	ldr	r0, [pc, #68]	; (80075e8 <RadioRxBoosted+0x78>)
 80075a2:	f002 fd49 	bl	800a038 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80075a6:	4810      	ldr	r0, [pc, #64]	; (80075e8 <RadioRxBoosted+0x78>)
 80075a8:	f002 fc68 	bl	8009e7c <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80075ac:	4b0f      	ldr	r3, [pc, #60]	; (80075ec <RadioRxBoosted+0x7c>)
 80075ae:	2200      	movs	r2, #0
 80075b0:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80075b2:	4b0e      	ldr	r3, [pc, #56]	; (80075ec <RadioRxBoosted+0x7c>)
 80075b4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80075b8:	2100      	movs	r1, #0
 80075ba:	4618      	mov	r0, r3
 80075bc:	f002 f864 	bl	8009688 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 80075c0:	4b0a      	ldr	r3, [pc, #40]	; (80075ec <RadioRxBoosted+0x7c>)
 80075c2:	785b      	ldrb	r3, [r3, #1]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d004      	beq.n	80075d2 <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 80075c8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80075cc:	f001 fa40 	bl	8008a50 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 80075d0:	e005      	b.n	80075de <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 80075d2:	4b06      	ldr	r3, [pc, #24]	; (80075ec <RadioRxBoosted+0x7c>)
 80075d4:	689b      	ldr	r3, [r3, #8]
 80075d6:	019b      	lsls	r3, r3, #6
 80075d8:	4618      	mov	r0, r3
 80075da:	f001 fa39 	bl	8008a50 <SUBGRF_SetRxBoosted>
}
 80075de:	bf00      	nop
 80075e0:	3708      	adds	r7, #8
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
 80075e6:	bf00      	nop
 80075e8:	2000052c 	.word	0x2000052c
 80075ec:	200004b8 	.word	0x200004b8

080075f0 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b082      	sub	sp, #8
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	005a      	lsls	r2, r3, #1
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	4413      	add	r3, r2
 8007602:	4a0c      	ldr	r2, [pc, #48]	; (8007634 <RadioSetRxDutyCycle+0x44>)
 8007604:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8007606:	2300      	movs	r3, #0
 8007608:	2200      	movs	r2, #0
 800760a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800760e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8007612:	f001 fb95 	bl	8008d40 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8007616:	4b07      	ldr	r3, [pc, #28]	; (8007634 <RadioSetRxDutyCycle+0x44>)
 8007618:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800761c:	2100      	movs	r1, #0
 800761e:	4618      	mov	r0, r3
 8007620:	f002 f832 	bl	8009688 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8007624:	6839      	ldr	r1, [r7, #0]
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f001 fa36 	bl	8008a98 <SUBGRF_SetRxDutyCycle>
}
 800762c:	bf00      	nop
 800762e:	3708      	adds	r7, #8
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}
 8007634:	200004b8 	.word	0x200004b8

08007638 <RadioStartCad>:

static void RadioStartCad( void )
{
 8007638:	b580      	push	{r7, lr}
 800763a:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800763c:	4b09      	ldr	r3, [pc, #36]	; (8007664 <RadioStartCad+0x2c>)
 800763e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007642:	2100      	movs	r1, #0
 8007644:	4618      	mov	r0, r3
 8007646:	f002 f81f 	bl	8009688 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 800764a:	2300      	movs	r3, #0
 800764c:	2200      	movs	r2, #0
 800764e:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8007652:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8007656:	f001 fb73 	bl	8008d40 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 800765a:	f001 fa49 	bl	8008af0 <SUBGRF_SetCad>
}
 800765e:	bf00      	nop
 8007660:	bd80      	pop	{r7, pc}
 8007662:	bf00      	nop
 8007664:	200004b8 	.word	0x200004b8

08007668 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b084      	sub	sp, #16
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	460b      	mov	r3, r1
 8007672:	70fb      	strb	r3, [r7, #3]
 8007674:	4613      	mov	r3, r2
 8007676:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 8007678:	883b      	ldrh	r3, [r7, #0]
 800767a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800767e:	fb02 f303 	mul.w	r3, r2, r3
 8007682:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f001 fbb7 	bl	8008df8 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 800768a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800768e:	4618      	mov	r0, r3
 8007690:	f002 f822 	bl	80096d8 <SUBGRF_SetRfTxPower>
 8007694:	4603      	mov	r3, r0
 8007696:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8007698:	210e      	movs	r1, #14
 800769a:	f640 101f 	movw	r0, #2335	; 0x91f
 800769e:	f001 feff 	bl	80094a0 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 80076a2:	7afb      	ldrb	r3, [r7, #11]
 80076a4:	2101      	movs	r1, #1
 80076a6:	4618      	mov	r0, r3
 80076a8:	f001 ffee 	bl	8009688 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 80076ac:	f001 fa2e 	bl	8008b0c <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 80076b0:	68f9      	ldr	r1, [r7, #12]
 80076b2:	4805      	ldr	r0, [pc, #20]	; (80076c8 <RadioSetTxContinuousWave+0x60>)
 80076b4:	f002 fcc0 	bl	800a038 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 80076b8:	4803      	ldr	r0, [pc, #12]	; (80076c8 <RadioSetTxContinuousWave+0x60>)
 80076ba:	f002 fbdf 	bl	8009e7c <UTIL_TIMER_Start>
}
 80076be:	bf00      	nop
 80076c0:	3710      	adds	r7, #16
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}
 80076c6:	bf00      	nop
 80076c8:	20000514 	.word	0x20000514

080076cc <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b082      	sub	sp, #8
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	4603      	mov	r3, r0
 80076d4:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 80076d6:	f001 fe50 	bl	800937a <SUBGRF_GetRssiInst>
 80076da:	4603      	mov	r3, r0
 80076dc:	b21b      	sxth	r3, r3
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3708      	adds	r7, #8
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}

080076e6 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 80076e6:	b580      	push	{r7, lr}
 80076e8:	b082      	sub	sp, #8
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	4603      	mov	r3, r0
 80076ee:	460a      	mov	r2, r1
 80076f0:	80fb      	strh	r3, [r7, #6]
 80076f2:	4613      	mov	r3, r2
 80076f4:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 80076f6:	797a      	ldrb	r2, [r7, #5]
 80076f8:	88fb      	ldrh	r3, [r7, #6]
 80076fa:	4611      	mov	r1, r2
 80076fc:	4618      	mov	r0, r3
 80076fe:	f001 fecf 	bl	80094a0 <SUBGRF_WriteRegister>
}
 8007702:	bf00      	nop
 8007704:	3708      	adds	r7, #8
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}

0800770a <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 800770a:	b580      	push	{r7, lr}
 800770c:	b082      	sub	sp, #8
 800770e:	af00      	add	r7, sp, #0
 8007710:	4603      	mov	r3, r0
 8007712:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 8007714:	88fb      	ldrh	r3, [r7, #6]
 8007716:	4618      	mov	r0, r3
 8007718:	f001 fed6 	bl	80094c8 <SUBGRF_ReadRegister>
 800771c:	4603      	mov	r3, r0
}
 800771e:	4618      	mov	r0, r3
 8007720:	3708      	adds	r7, #8
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}

08007726 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8007726:	b580      	push	{r7, lr}
 8007728:	b082      	sub	sp, #8
 800772a:	af00      	add	r7, sp, #0
 800772c:	4603      	mov	r3, r0
 800772e:	6039      	str	r1, [r7, #0]
 8007730:	80fb      	strh	r3, [r7, #6]
 8007732:	4613      	mov	r3, r2
 8007734:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8007736:	797b      	ldrb	r3, [r7, #5]
 8007738:	b29a      	uxth	r2, r3
 800773a:	88fb      	ldrh	r3, [r7, #6]
 800773c:	6839      	ldr	r1, [r7, #0]
 800773e:	4618      	mov	r0, r3
 8007740:	f001 fed6 	bl	80094f0 <SUBGRF_WriteRegisters>
}
 8007744:	bf00      	nop
 8007746:	3708      	adds	r7, #8
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b082      	sub	sp, #8
 8007750:	af00      	add	r7, sp, #0
 8007752:	4603      	mov	r3, r0
 8007754:	6039      	str	r1, [r7, #0]
 8007756:	80fb      	strh	r3, [r7, #6]
 8007758:	4613      	mov	r3, r2
 800775a:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 800775c:	797b      	ldrb	r3, [r7, #5]
 800775e:	b29a      	uxth	r2, r3
 8007760:	88fb      	ldrh	r3, [r7, #6]
 8007762:	6839      	ldr	r1, [r7, #0]
 8007764:	4618      	mov	r0, r3
 8007766:	f001 fee5 	bl	8009534 <SUBGRF_ReadRegisters>
}
 800776a:	bf00      	nop
 800776c:	3708      	adds	r7, #8
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}
	...

08007774 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b082      	sub	sp, #8
 8007778:	af00      	add	r7, sp, #0
 800777a:	4603      	mov	r3, r0
 800777c:	460a      	mov	r2, r1
 800777e:	71fb      	strb	r3, [r7, #7]
 8007780:	4613      	mov	r3, r2
 8007782:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8007784:	79fb      	ldrb	r3, [r7, #7]
 8007786:	2b01      	cmp	r3, #1
 8007788:	d10a      	bne.n	80077a0 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 800778a:	4a0e      	ldr	r2, [pc, #56]	; (80077c4 <RadioSetMaxPayloadLength+0x50>)
 800778c:	79bb      	ldrb	r3, [r7, #6]
 800778e:	7013      	strb	r3, [r2, #0]
 8007790:	4b0c      	ldr	r3, [pc, #48]	; (80077c4 <RadioSetMaxPayloadLength+0x50>)
 8007792:	781a      	ldrb	r2, [r3, #0]
 8007794:	4b0c      	ldr	r3, [pc, #48]	; (80077c8 <RadioSetMaxPayloadLength+0x54>)
 8007796:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007798:	480c      	ldr	r0, [pc, #48]	; (80077cc <RadioSetMaxPayloadLength+0x58>)
 800779a:	f001 fd39 	bl	8009210 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 800779e:	e00d      	b.n	80077bc <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 80077a0:	4b09      	ldr	r3, [pc, #36]	; (80077c8 <RadioSetMaxPayloadLength+0x54>)
 80077a2:	7d5b      	ldrb	r3, [r3, #21]
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d109      	bne.n	80077bc <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 80077a8:	4a06      	ldr	r2, [pc, #24]	; (80077c4 <RadioSetMaxPayloadLength+0x50>)
 80077aa:	79bb      	ldrb	r3, [r7, #6]
 80077ac:	7013      	strb	r3, [r2, #0]
 80077ae:	4b05      	ldr	r3, [pc, #20]	; (80077c4 <RadioSetMaxPayloadLength+0x50>)
 80077b0:	781a      	ldrb	r2, [r3, #0]
 80077b2:	4b05      	ldr	r3, [pc, #20]	; (80077c8 <RadioSetMaxPayloadLength+0x54>)
 80077b4:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80077b6:	4805      	ldr	r0, [pc, #20]	; (80077cc <RadioSetMaxPayloadLength+0x58>)
 80077b8:	f001 fd2a 	bl	8009210 <SUBGRF_SetPacketParams>
}
 80077bc:	bf00      	nop
 80077be:	3708      	adds	r7, #8
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}
 80077c4:	2000000d 	.word	0x2000000d
 80077c8:	200004b8 	.word	0x200004b8
 80077cc:	200004c6 	.word	0x200004c6

080077d0 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b082      	sub	sp, #8
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	4603      	mov	r3, r0
 80077d8:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 80077da:	4a13      	ldr	r2, [pc, #76]	; (8007828 <RadioSetPublicNetwork+0x58>)
 80077dc:	79fb      	ldrb	r3, [r7, #7]
 80077de:	7313      	strb	r3, [r2, #12]
 80077e0:	4b11      	ldr	r3, [pc, #68]	; (8007828 <RadioSetPublicNetwork+0x58>)
 80077e2:	7b1a      	ldrb	r2, [r3, #12]
 80077e4:	4b10      	ldr	r3, [pc, #64]	; (8007828 <RadioSetPublicNetwork+0x58>)
 80077e6:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 80077e8:	2001      	movs	r0, #1
 80077ea:	f7ff f819 	bl	8006820 <RadioSetModem>
    if( enable == true )
 80077ee:	79fb      	ldrb	r3, [r7, #7]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d00a      	beq.n	800780a <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 80077f4:	2134      	movs	r1, #52	; 0x34
 80077f6:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 80077fa:	f001 fe51 	bl	80094a0 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 80077fe:	2144      	movs	r1, #68	; 0x44
 8007800:	f240 7041 	movw	r0, #1857	; 0x741
 8007804:	f001 fe4c 	bl	80094a0 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8007808:	e009      	b.n	800781e <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 800780a:	2114      	movs	r1, #20
 800780c:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8007810:	f001 fe46 	bl	80094a0 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8007814:	2124      	movs	r1, #36	; 0x24
 8007816:	f240 7041 	movw	r0, #1857	; 0x741
 800781a:	f001 fe41 	bl	80094a0 <SUBGRF_WriteRegister>
}
 800781e:	bf00      	nop
 8007820:	3708      	adds	r7, #8
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}
 8007826:	bf00      	nop
 8007828:	200004b8 	.word	0x200004b8

0800782c <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 800782c:	b580      	push	{r7, lr}
 800782e:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8007830:	f001 ff86 	bl	8009740 <SUBGRF_GetRadioWakeUpTime>
 8007834:	4603      	mov	r3, r0
 8007836:	3303      	adds	r3, #3
}
 8007838:	4618      	mov	r0, r3
 800783a:	bd80      	pop	{r7, pc}

0800783c <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b082      	sub	sp, #8
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8007844:	f000 f80e 	bl	8007864 <RadioOnTxTimeoutProcess>
}
 8007848:	bf00      	nop
 800784a:	3708      	adds	r7, #8
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b082      	sub	sp, #8
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8007858:	f000 f818 	bl	800788c <RadioOnRxTimeoutProcess>
}
 800785c:	bf00      	nop
 800785e:	3708      	adds	r7, #8
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}

08007864 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8007864:	b580      	push	{r7, lr}
 8007866:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8007868:	4b07      	ldr	r3, [pc, #28]	; (8007888 <RadioOnTxTimeoutProcess+0x24>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d008      	beq.n	8007882 <RadioOnTxTimeoutProcess+0x1e>
 8007870:	4b05      	ldr	r3, [pc, #20]	; (8007888 <RadioOnTxTimeoutProcess+0x24>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d003      	beq.n	8007882 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 800787a:	4b03      	ldr	r3, [pc, #12]	; (8007888 <RadioOnTxTimeoutProcess+0x24>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	4798      	blx	r3
    }
}
 8007882:	bf00      	nop
 8007884:	bd80      	pop	{r7, pc}
 8007886:	bf00      	nop
 8007888:	200004b4 	.word	0x200004b4

0800788c <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 800788c:	b580      	push	{r7, lr}
 800788e:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8007890:	4b07      	ldr	r3, [pc, #28]	; (80078b0 <RadioOnRxTimeoutProcess+0x24>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d008      	beq.n	80078aa <RadioOnRxTimeoutProcess+0x1e>
 8007898:	4b05      	ldr	r3, [pc, #20]	; (80078b0 <RadioOnRxTimeoutProcess+0x24>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	68db      	ldr	r3, [r3, #12]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d003      	beq.n	80078aa <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 80078a2:	4b03      	ldr	r3, [pc, #12]	; (80078b0 <RadioOnRxTimeoutProcess+0x24>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	68db      	ldr	r3, [r3, #12]
 80078a8:	4798      	blx	r3
    }
}
 80078aa:	bf00      	nop
 80078ac:	bd80      	pop	{r7, pc}
 80078ae:	bf00      	nop
 80078b0:	200004b4 	.word	0x200004b4

080078b4 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b082      	sub	sp, #8
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	4603      	mov	r3, r0
 80078bc:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 80078be:	4a05      	ldr	r2, [pc, #20]	; (80078d4 <RadioOnDioIrq+0x20>)
 80078c0:	88fb      	ldrh	r3, [r7, #6]
 80078c2:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 80078c6:	f000 f807 	bl	80078d8 <RadioIrqProcess>
}
 80078ca:	bf00      	nop
 80078cc:	3708      	adds	r7, #8
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}
 80078d2:	bf00      	nop
 80078d4:	200004b8 	.word	0x200004b8

080078d8 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 80078d8:	b5b0      	push	{r4, r5, r7, lr}
 80078da:	b082      	sub	sp, #8
 80078dc:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 80078de:	2300      	movs	r3, #0
 80078e0:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 80078e2:	2300      	movs	r3, #0
 80078e4:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 80078e6:	4ba5      	ldr	r3, [pc, #660]	; (8007b7c <RadioIrqProcess+0x2a4>)
 80078e8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80078ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078f0:	f000 810d 	beq.w	8007b0e <RadioIrqProcess+0x236>
 80078f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078f8:	f300 81c0 	bgt.w	8007c7c <RadioIrqProcess+0x3a4>
 80078fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007900:	f000 80f1 	beq.w	8007ae6 <RadioIrqProcess+0x20e>
 8007904:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007908:	f300 81b8 	bgt.w	8007c7c <RadioIrqProcess+0x3a4>
 800790c:	2b80      	cmp	r3, #128	; 0x80
 800790e:	f000 80d6 	beq.w	8007abe <RadioIrqProcess+0x1e6>
 8007912:	2b80      	cmp	r3, #128	; 0x80
 8007914:	f300 81b2 	bgt.w	8007c7c <RadioIrqProcess+0x3a4>
 8007918:	2b20      	cmp	r3, #32
 800791a:	dc49      	bgt.n	80079b0 <RadioIrqProcess+0xd8>
 800791c:	2b00      	cmp	r3, #0
 800791e:	f340 81ad 	ble.w	8007c7c <RadioIrqProcess+0x3a4>
 8007922:	3b01      	subs	r3, #1
 8007924:	2b1f      	cmp	r3, #31
 8007926:	f200 81a9 	bhi.w	8007c7c <RadioIrqProcess+0x3a4>
 800792a:	a201      	add	r2, pc, #4	; (adr r2, 8007930 <RadioIrqProcess+0x58>)
 800792c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007930:	080079b9 	.word	0x080079b9
 8007934:	080079f3 	.word	0x080079f3
 8007938:	08007c7d 	.word	0x08007c7d
 800793c:	08007b99 	.word	0x08007b99
 8007940:	08007c7d 	.word	0x08007c7d
 8007944:	08007c7d 	.word	0x08007c7d
 8007948:	08007c7d 	.word	0x08007c7d
 800794c:	08007c07 	.word	0x08007c07
 8007950:	08007c7d 	.word	0x08007c7d
 8007954:	08007c7d 	.word	0x08007c7d
 8007958:	08007c7d 	.word	0x08007c7d
 800795c:	08007c7d 	.word	0x08007c7d
 8007960:	08007c7d 	.word	0x08007c7d
 8007964:	08007c7d 	.word	0x08007c7d
 8007968:	08007c7d 	.word	0x08007c7d
 800796c:	08007c7d 	.word	0x08007c7d
 8007970:	08007c7d 	.word	0x08007c7d
 8007974:	08007c7d 	.word	0x08007c7d
 8007978:	08007c7d 	.word	0x08007c7d
 800797c:	08007c7d 	.word	0x08007c7d
 8007980:	08007c7d 	.word	0x08007c7d
 8007984:	08007c7d 	.word	0x08007c7d
 8007988:	08007c7d 	.word	0x08007c7d
 800798c:	08007c7d 	.word	0x08007c7d
 8007990:	08007c7d 	.word	0x08007c7d
 8007994:	08007c7d 	.word	0x08007c7d
 8007998:	08007c7d 	.word	0x08007c7d
 800799c:	08007c7d 	.word	0x08007c7d
 80079a0:	08007c7d 	.word	0x08007c7d
 80079a4:	08007c7d 	.word	0x08007c7d
 80079a8:	08007c7d 	.word	0x08007c7d
 80079ac:	08007c17 	.word	0x08007c17
 80079b0:	2b40      	cmp	r3, #64	; 0x40
 80079b2:	f000 814b 	beq.w	8007c4c <RadioIrqProcess+0x374>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 80079b6:	e161      	b.n	8007c7c <RadioIrqProcess+0x3a4>
        TimerStop( &TxTimeoutTimer );
 80079b8:	4871      	ldr	r0, [pc, #452]	; (8007b80 <RadioIrqProcess+0x2a8>)
 80079ba:	f002 facd 	bl	8009f58 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 80079be:	2000      	movs	r0, #0
 80079c0:	f000 ffea 	bl	8008998 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 80079c4:	f002 f860 	bl	8009a88 <RFW_Is_LongPacketModeEnabled>
 80079c8:	4603      	mov	r3, r0
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	d101      	bne.n	80079d2 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 80079ce:	f002 f884 	bl	8009ada <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 80079d2:	4b6c      	ldr	r3, [pc, #432]	; (8007b84 <RadioIrqProcess+0x2ac>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	f000 8152 	beq.w	8007c80 <RadioIrqProcess+0x3a8>
 80079dc:	4b69      	ldr	r3, [pc, #420]	; (8007b84 <RadioIrqProcess+0x2ac>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	f000 814c 	beq.w	8007c80 <RadioIrqProcess+0x3a8>
            RadioEvents->TxDone( );
 80079e8:	4b66      	ldr	r3, [pc, #408]	; (8007b84 <RadioIrqProcess+0x2ac>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4798      	blx	r3
        break;
 80079f0:	e146      	b.n	8007c80 <RadioIrqProcess+0x3a8>
        TimerStop( &RxTimeoutTimer );
 80079f2:	4865      	ldr	r0, [pc, #404]	; (8007b88 <RadioIrqProcess+0x2b0>)
 80079f4:	f002 fab0 	bl	8009f58 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 80079f8:	4b60      	ldr	r3, [pc, #384]	; (8007b7c <RadioIrqProcess+0x2a4>)
 80079fa:	785b      	ldrb	r3, [r3, #1]
 80079fc:	f083 0301 	eor.w	r3, r3, #1
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d014      	beq.n	8007a30 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 8007a06:	2000      	movs	r0, #0
 8007a08:	f000 ffc6 	bl	8008998 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8007a0c:	2100      	movs	r1, #0
 8007a0e:	f640 1002 	movw	r0, #2306	; 0x902
 8007a12:	f001 fd45 	bl	80094a0 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8007a16:	f640 1044 	movw	r0, #2372	; 0x944
 8007a1a:	f001 fd55 	bl	80094c8 <SUBGRF_ReadRegister>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	f043 0302 	orr.w	r3, r3, #2
 8007a24:	b2db      	uxtb	r3, r3
 8007a26:	4619      	mov	r1, r3
 8007a28:	f640 1044 	movw	r0, #2372	; 0x944
 8007a2c:	f001 fd38 	bl	80094a0 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8007a30:	1dfb      	adds	r3, r7, #7
 8007a32:	22ff      	movs	r2, #255	; 0xff
 8007a34:	4619      	mov	r1, r3
 8007a36:	4855      	ldr	r0, [pc, #340]	; (8007b8c <RadioIrqProcess+0x2b4>)
 8007a38:	f000 fe7e 	bl	8008738 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8007a3c:	4854      	ldr	r0, [pc, #336]	; (8007b90 <RadioIrqProcess+0x2b8>)
 8007a3e:	f001 fcdd 	bl	80093fc <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8007a42:	4b50      	ldr	r3, [pc, #320]	; (8007b84 <RadioIrqProcess+0x2ac>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	f000 811c 	beq.w	8007c84 <RadioIrqProcess+0x3ac>
 8007a4c:	4b4d      	ldr	r3, [pc, #308]	; (8007b84 <RadioIrqProcess+0x2ac>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	f000 8116 	beq.w	8007c84 <RadioIrqProcess+0x3ac>
            switch( SubgRf.PacketStatus.packetType )
 8007a58:	4b48      	ldr	r3, [pc, #288]	; (8007b7c <RadioIrqProcess+0x2a4>)
 8007a5a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	d10e      	bne.n	8007a80 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 8007a62:	4b48      	ldr	r3, [pc, #288]	; (8007b84 <RadioIrqProcess+0x2ac>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	689c      	ldr	r4, [r3, #8]
 8007a68:	79fb      	ldrb	r3, [r7, #7]
 8007a6a:	b299      	uxth	r1, r3
 8007a6c:	4b43      	ldr	r3, [pc, #268]	; (8007b7c <RadioIrqProcess+0x2a4>)
 8007a6e:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 8007a72:	b21a      	sxth	r2, r3
 8007a74:	4b41      	ldr	r3, [pc, #260]	; (8007b7c <RadioIrqProcess+0x2a4>)
 8007a76:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 8007a7a:	4844      	ldr	r0, [pc, #272]	; (8007b8c <RadioIrqProcess+0x2b4>)
 8007a7c:	47a0      	blx	r4
                break;
 8007a7e:	e01d      	b.n	8007abc <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8007a80:	4b3e      	ldr	r3, [pc, #248]	; (8007b7c <RadioIrqProcess+0x2a4>)
 8007a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a84:	463a      	mov	r2, r7
 8007a86:	4611      	mov	r1, r2
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f001 ff4b 	bl	8009924 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 8007a8e:	4b3d      	ldr	r3, [pc, #244]	; (8007b84 <RadioIrqProcess+0x2ac>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	689c      	ldr	r4, [r3, #8]
 8007a94:	79fb      	ldrb	r3, [r7, #7]
 8007a96:	b299      	uxth	r1, r3
 8007a98:	4b38      	ldr	r3, [pc, #224]	; (8007b7c <RadioIrqProcess+0x2a4>)
 8007a9a:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 8007a9e:	b218      	sxth	r0, r3
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007aa6:	4a3b      	ldr	r2, [pc, #236]	; (8007b94 <RadioIrqProcess+0x2bc>)
 8007aa8:	fb82 5203 	smull	r5, r2, r2, r3
 8007aac:	1192      	asrs	r2, r2, #6
 8007aae:	17db      	asrs	r3, r3, #31
 8007ab0:	1ad3      	subs	r3, r2, r3
 8007ab2:	b25b      	sxtb	r3, r3
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	4835      	ldr	r0, [pc, #212]	; (8007b8c <RadioIrqProcess+0x2b4>)
 8007ab8:	47a0      	blx	r4
                break;
 8007aba:	bf00      	nop
        break;
 8007abc:	e0e2      	b.n	8007c84 <RadioIrqProcess+0x3ac>
        SUBGRF_SetStandby( STDBY_RC );
 8007abe:	2000      	movs	r0, #0
 8007ac0:	f000 ff6a 	bl	8008998 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8007ac4:	4b2f      	ldr	r3, [pc, #188]	; (8007b84 <RadioIrqProcess+0x2ac>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	f000 80dd 	beq.w	8007c88 <RadioIrqProcess+0x3b0>
 8007ace:	4b2d      	ldr	r3, [pc, #180]	; (8007b84 <RadioIrqProcess+0x2ac>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	699b      	ldr	r3, [r3, #24]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	f000 80d7 	beq.w	8007c88 <RadioIrqProcess+0x3b0>
            RadioEvents->CadDone( false );
 8007ada:	4b2a      	ldr	r3, [pc, #168]	; (8007b84 <RadioIrqProcess+0x2ac>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	699b      	ldr	r3, [r3, #24]
 8007ae0:	2000      	movs	r0, #0
 8007ae2:	4798      	blx	r3
        break;
 8007ae4:	e0d0      	b.n	8007c88 <RadioIrqProcess+0x3b0>
        SUBGRF_SetStandby( STDBY_RC );
 8007ae6:	2000      	movs	r0, #0
 8007ae8:	f000 ff56 	bl	8008998 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8007aec:	4b25      	ldr	r3, [pc, #148]	; (8007b84 <RadioIrqProcess+0x2ac>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	f000 80cb 	beq.w	8007c8c <RadioIrqProcess+0x3b4>
 8007af6:	4b23      	ldr	r3, [pc, #140]	; (8007b84 <RadioIrqProcess+0x2ac>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	699b      	ldr	r3, [r3, #24]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	f000 80c5 	beq.w	8007c8c <RadioIrqProcess+0x3b4>
            RadioEvents->CadDone( true );
 8007b02:	4b20      	ldr	r3, [pc, #128]	; (8007b84 <RadioIrqProcess+0x2ac>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	699b      	ldr	r3, [r3, #24]
 8007b08:	2001      	movs	r0, #1
 8007b0a:	4798      	blx	r3
        break;
 8007b0c:	e0be      	b.n	8007c8c <RadioIrqProcess+0x3b4>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8007b0e:	f000 fdf9 	bl	8008704 <SUBGRF_GetOperatingMode>
 8007b12:	4603      	mov	r3, r0
 8007b14:	2b04      	cmp	r3, #4
 8007b16:	d115      	bne.n	8007b44 <RadioIrqProcess+0x26c>
            TimerStop( &TxTimeoutTimer );
 8007b18:	4819      	ldr	r0, [pc, #100]	; (8007b80 <RadioIrqProcess+0x2a8>)
 8007b1a:	f002 fa1d 	bl	8009f58 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8007b1e:	2000      	movs	r0, #0
 8007b20:	f000 ff3a 	bl	8008998 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8007b24:	4b17      	ldr	r3, [pc, #92]	; (8007b84 <RadioIrqProcess+0x2ac>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	f000 80b1 	beq.w	8007c90 <RadioIrqProcess+0x3b8>
 8007b2e:	4b15      	ldr	r3, [pc, #84]	; (8007b84 <RadioIrqProcess+0x2ac>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	f000 80ab 	beq.w	8007c90 <RadioIrqProcess+0x3b8>
                RadioEvents->TxTimeout( );
 8007b3a:	4b12      	ldr	r3, [pc, #72]	; (8007b84 <RadioIrqProcess+0x2ac>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	4798      	blx	r3
        break;
 8007b42:	e0a5      	b.n	8007c90 <RadioIrqProcess+0x3b8>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8007b44:	f000 fdde 	bl	8008704 <SUBGRF_GetOperatingMode>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	2b05      	cmp	r3, #5
 8007b4c:	f040 80a0 	bne.w	8007c90 <RadioIrqProcess+0x3b8>
            TimerStop( &RxTimeoutTimer );
 8007b50:	480d      	ldr	r0, [pc, #52]	; (8007b88 <RadioIrqProcess+0x2b0>)
 8007b52:	f002 fa01 	bl	8009f58 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8007b56:	2000      	movs	r0, #0
 8007b58:	f000 ff1e 	bl	8008998 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8007b5c:	4b09      	ldr	r3, [pc, #36]	; (8007b84 <RadioIrqProcess+0x2ac>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	f000 8095 	beq.w	8007c90 <RadioIrqProcess+0x3b8>
 8007b66:	4b07      	ldr	r3, [pc, #28]	; (8007b84 <RadioIrqProcess+0x2ac>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	68db      	ldr	r3, [r3, #12]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	f000 808f 	beq.w	8007c90 <RadioIrqProcess+0x3b8>
                RadioEvents->RxTimeout( );
 8007b72:	4b04      	ldr	r3, [pc, #16]	; (8007b84 <RadioIrqProcess+0x2ac>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	68db      	ldr	r3, [r3, #12]
 8007b78:	4798      	blx	r3
        break;
 8007b7a:	e089      	b.n	8007c90 <RadioIrqProcess+0x3b8>
 8007b7c:	200004b8 	.word	0x200004b8
 8007b80:	20000514 	.word	0x20000514
 8007b84:	200004b4 	.word	0x200004b4
 8007b88:	2000052c 	.word	0x2000052c
 8007b8c:	200003b4 	.word	0x200003b4
 8007b90:	200004dc 	.word	0x200004dc
 8007b94:	10624dd3 	.word	0x10624dd3
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8007b98:	4b44      	ldr	r3, [pc, #272]	; (8007cac <RadioIrqProcess+0x3d4>)
 8007b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d079      	beq.n	8007c94 <RadioIrqProcess+0x3bc>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 8007ba0:	4a43      	ldr	r2, [pc, #268]	; (8007cb0 <RadioIrqProcess+0x3d8>)
 8007ba2:	4b42      	ldr	r3, [pc, #264]	; (8007cac <RadioIrqProcess+0x3d4>)
 8007ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ba6:	0c1b      	lsrs	r3, r3, #16
 8007ba8:	b2db      	uxtb	r3, r3
 8007baa:	4619      	mov	r1, r3
 8007bac:	f640 1003 	movw	r0, #2307	; 0x903
 8007bb0:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 8007bb2:	4a3f      	ldr	r2, [pc, #252]	; (8007cb0 <RadioIrqProcess+0x3d8>)
 8007bb4:	4b3d      	ldr	r3, [pc, #244]	; (8007cac <RadioIrqProcess+0x3d4>)
 8007bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bb8:	0a1b      	lsrs	r3, r3, #8
 8007bba:	b2db      	uxtb	r3, r3
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	f640 1004 	movw	r0, #2308	; 0x904
 8007bc2:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 8007bc4:	4a3a      	ldr	r2, [pc, #232]	; (8007cb0 <RadioIrqProcess+0x3d8>)
 8007bc6:	4b39      	ldr	r3, [pc, #228]	; (8007cac <RadioIrqProcess+0x3d4>)
 8007bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bca:	b2db      	uxtb	r3, r3
 8007bcc:	4619      	mov	r1, r3
 8007bce:	f640 1005 	movw	r0, #2309	; 0x905
 8007bd2:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 8007bd4:	4c36      	ldr	r4, [pc, #216]	; (8007cb0 <RadioIrqProcess+0x3d8>)
 8007bd6:	4b37      	ldr	r3, [pc, #220]	; (8007cb4 <RadioIrqProcess+0x3dc>)
 8007bd8:	f640 1002 	movw	r0, #2306	; 0x902
 8007bdc:	4798      	blx	r3
 8007bde:	4603      	mov	r3, r0
 8007be0:	f043 0301 	orr.w	r3, r3, #1
 8007be4:	b2db      	uxtb	r3, r3
 8007be6:	4619      	mov	r1, r3
 8007be8:	f640 1002 	movw	r0, #2306	; 0x902
 8007bec:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 8007bee:	4b2f      	ldr	r3, [pc, #188]	; (8007cac <RadioIrqProcess+0x3d4>)
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	659a      	str	r2, [r3, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	f240 2162 	movw	r1, #610	; 0x262
 8007bfc:	f240 2062 	movw	r0, #610	; 0x262
 8007c00:	f001 f89e 	bl	8008d40 <SUBGRF_SetDioIrqParams>
        break;
 8007c04:	e046      	b.n	8007c94 <RadioIrqProcess+0x3bc>
        if( 1UL == RFW_Is_Init( ) )
 8007c06:	f001 ff38 	bl	8009a7a <RFW_Is_Init>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	d143      	bne.n	8007c98 <RadioIrqProcess+0x3c0>
            RFW_ReceivePayload( );
 8007c10:	f001 ff69 	bl	8009ae6 <RFW_ReceivePayload>
        break;
 8007c14:	e040      	b.n	8007c98 <RadioIrqProcess+0x3c0>
        TimerStop( &RxTimeoutTimer );
 8007c16:	4828      	ldr	r0, [pc, #160]	; (8007cb8 <RadioIrqProcess+0x3e0>)
 8007c18:	f002 f99e 	bl	8009f58 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8007c1c:	4b23      	ldr	r3, [pc, #140]	; (8007cac <RadioIrqProcess+0x3d4>)
 8007c1e:	785b      	ldrb	r3, [r3, #1]
 8007c20:	f083 0301 	eor.w	r3, r3, #1
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d002      	beq.n	8007c30 <RadioIrqProcess+0x358>
            SUBGRF_SetStandby( STDBY_RC );
 8007c2a:	2000      	movs	r0, #0
 8007c2c:	f000 feb4 	bl	8008998 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8007c30:	4b22      	ldr	r3, [pc, #136]	; (8007cbc <RadioIrqProcess+0x3e4>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d031      	beq.n	8007c9c <RadioIrqProcess+0x3c4>
 8007c38:	4b20      	ldr	r3, [pc, #128]	; (8007cbc <RadioIrqProcess+0x3e4>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	68db      	ldr	r3, [r3, #12]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d02c      	beq.n	8007c9c <RadioIrqProcess+0x3c4>
            RadioEvents->RxTimeout( );
 8007c42:	4b1e      	ldr	r3, [pc, #120]	; (8007cbc <RadioIrqProcess+0x3e4>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	68db      	ldr	r3, [r3, #12]
 8007c48:	4798      	blx	r3
        break;
 8007c4a:	e027      	b.n	8007c9c <RadioIrqProcess+0x3c4>
        if( SubgRf.RxContinuous == false )
 8007c4c:	4b17      	ldr	r3, [pc, #92]	; (8007cac <RadioIrqProcess+0x3d4>)
 8007c4e:	785b      	ldrb	r3, [r3, #1]
 8007c50:	f083 0301 	eor.w	r3, r3, #1
 8007c54:	b2db      	uxtb	r3, r3
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d002      	beq.n	8007c60 <RadioIrqProcess+0x388>
            SUBGRF_SetStandby( STDBY_RC );
 8007c5a:	2000      	movs	r0, #0
 8007c5c:	f000 fe9c 	bl	8008998 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8007c60:	4b16      	ldr	r3, [pc, #88]	; (8007cbc <RadioIrqProcess+0x3e4>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d01b      	beq.n	8007ca0 <RadioIrqProcess+0x3c8>
 8007c68:	4b14      	ldr	r3, [pc, #80]	; (8007cbc <RadioIrqProcess+0x3e4>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	691b      	ldr	r3, [r3, #16]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d016      	beq.n	8007ca0 <RadioIrqProcess+0x3c8>
            RadioEvents->RxError( );
 8007c72:	4b12      	ldr	r3, [pc, #72]	; (8007cbc <RadioIrqProcess+0x3e4>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	691b      	ldr	r3, [r3, #16]
 8007c78:	4798      	blx	r3
        break;
 8007c7a:	e011      	b.n	8007ca0 <RadioIrqProcess+0x3c8>
        break;
 8007c7c:	bf00      	nop
 8007c7e:	e010      	b.n	8007ca2 <RadioIrqProcess+0x3ca>
        break;
 8007c80:	bf00      	nop
 8007c82:	e00e      	b.n	8007ca2 <RadioIrqProcess+0x3ca>
        break;
 8007c84:	bf00      	nop
 8007c86:	e00c      	b.n	8007ca2 <RadioIrqProcess+0x3ca>
        break;
 8007c88:	bf00      	nop
 8007c8a:	e00a      	b.n	8007ca2 <RadioIrqProcess+0x3ca>
        break;
 8007c8c:	bf00      	nop
 8007c8e:	e008      	b.n	8007ca2 <RadioIrqProcess+0x3ca>
        break;
 8007c90:	bf00      	nop
 8007c92:	e006      	b.n	8007ca2 <RadioIrqProcess+0x3ca>
        break;
 8007c94:	bf00      	nop
 8007c96:	e004      	b.n	8007ca2 <RadioIrqProcess+0x3ca>
        break;
 8007c98:	bf00      	nop
 8007c9a:	e002      	b.n	8007ca2 <RadioIrqProcess+0x3ca>
        break;
 8007c9c:	bf00      	nop
 8007c9e:	e000      	b.n	8007ca2 <RadioIrqProcess+0x3ca>
        break;
 8007ca0:	bf00      	nop
    }
}
 8007ca2:	bf00      	nop
 8007ca4:	3708      	adds	r7, #8
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bdb0      	pop	{r4, r5, r7, pc}
 8007caa:	bf00      	nop
 8007cac:	200004b8 	.word	0x200004b8
 8007cb0:	080076e7 	.word	0x080076e7
 8007cb4:	0800770b 	.word	0x0800770b
 8007cb8:	2000052c 	.word	0x2000052c
 8007cbc:	200004b4 	.word	0x200004b4

08007cc0 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8007cc4:	4b09      	ldr	r3, [pc, #36]	; (8007cec <RadioTxPrbs+0x2c>)
 8007cc6:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007cca:	2101      	movs	r1, #1
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f001 fcdb 	bl	8009688 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 8007cd2:	4b07      	ldr	r3, [pc, #28]	; (8007cf0 <RadioTxPrbs+0x30>)
 8007cd4:	212d      	movs	r1, #45	; 0x2d
 8007cd6:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8007cda:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8007cdc:	f000 ff1f 	bl	8008b1e <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8007ce0:	4804      	ldr	r0, [pc, #16]	; (8007cf4 <RadioTxPrbs+0x34>)
 8007ce2:	f000 fe75 	bl	80089d0 <SUBGRF_SetTx>
}
 8007ce6:	bf00      	nop
 8007ce8:	bd80      	pop	{r7, pc}
 8007cea:	bf00      	nop
 8007cec:	200004b8 	.word	0x200004b8
 8007cf0:	080076e7 	.word	0x080076e7
 8007cf4:	000fffff 	.word	0x000fffff

08007cf8 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b084      	sub	sp, #16
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	4603      	mov	r3, r0
 8007d00:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8007d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d06:	4618      	mov	r0, r3
 8007d08:	f001 fce6 	bl	80096d8 <SUBGRF_SetRfTxPower>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8007d10:	210e      	movs	r1, #14
 8007d12:	f640 101f 	movw	r0, #2335	; 0x91f
 8007d16:	f001 fbc3 	bl	80094a0 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8007d1a:	7bfb      	ldrb	r3, [r7, #15]
 8007d1c:	2101      	movs	r1, #1
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f001 fcb2 	bl	8009688 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8007d24:	f000 fef2 	bl	8008b0c <SUBGRF_SetTxContinuousWave>
}
 8007d28:	bf00      	nop
 8007d2a:	3710      	adds	r7, #16
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 8007d30:	b480      	push	{r7}
 8007d32:	b089      	sub	sp, #36	; 0x24
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	60f8      	str	r0, [r7, #12]
 8007d38:	60b9      	str	r1, [r7, #8]
 8007d3a:	4613      	mov	r3, r2
 8007d3c:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 8007d42:	2300      	movs	r3, #0
 8007d44:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 8007d46:	2300      	movs	r3, #0
 8007d48:	61bb      	str	r3, [r7, #24]
 8007d4a:	e011      	b.n	8007d70 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8007d4c:	69bb      	ldr	r3, [r7, #24]
 8007d4e:	68ba      	ldr	r2, [r7, #8]
 8007d50:	4413      	add	r3, r2
 8007d52:	781a      	ldrb	r2, [r3, #0]
 8007d54:	69bb      	ldr	r3, [r7, #24]
 8007d56:	68b9      	ldr	r1, [r7, #8]
 8007d58:	440b      	add	r3, r1
 8007d5a:	43d2      	mvns	r2, r2
 8007d5c:	b2d2      	uxtb	r2, r2
 8007d5e:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 8007d60:	69bb      	ldr	r3, [r7, #24]
 8007d62:	68fa      	ldr	r2, [r7, #12]
 8007d64:	4413      	add	r3, r2
 8007d66:	2200      	movs	r2, #0
 8007d68:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 8007d6a:	69bb      	ldr	r3, [r7, #24]
 8007d6c:	3301      	adds	r3, #1
 8007d6e:	61bb      	str	r3, [r7, #24]
 8007d70:	79fb      	ldrb	r3, [r7, #7]
 8007d72:	69ba      	ldr	r2, [r7, #24]
 8007d74:	429a      	cmp	r2, r3
 8007d76:	dbe9      	blt.n	8007d4c <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 8007d78:	2300      	movs	r3, #0
 8007d7a:	61bb      	str	r3, [r7, #24]
 8007d7c:	e049      	b.n	8007e12 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 8007d7e:	69bb      	ldr	r3, [r7, #24]
 8007d80:	425a      	negs	r2, r3
 8007d82:	f003 0307 	and.w	r3, r3, #7
 8007d86:	f002 0207 	and.w	r2, r2, #7
 8007d8a:	bf58      	it	pl
 8007d8c:	4253      	negpl	r3, r2
 8007d8e:	b2db      	uxtb	r3, r3
 8007d90:	f1c3 0307 	rsb	r3, r3, #7
 8007d94:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 8007d96:	69bb      	ldr	r3, [r7, #24]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	da00      	bge.n	8007d9e <payload_integration+0x6e>
 8007d9c:	3307      	adds	r3, #7
 8007d9e:	10db      	asrs	r3, r3, #3
 8007da0:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8007da2:	69bb      	ldr	r3, [r7, #24]
 8007da4:	3301      	adds	r3, #1
 8007da6:	425a      	negs	r2, r3
 8007da8:	f003 0307 	and.w	r3, r3, #7
 8007dac:	f002 0207 	and.w	r2, r2, #7
 8007db0:	bf58      	it	pl
 8007db2:	4253      	negpl	r3, r2
 8007db4:	b2db      	uxtb	r3, r3
 8007db6:	f1c3 0307 	rsb	r3, r3, #7
 8007dba:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 8007dbc:	69bb      	ldr	r3, [r7, #24]
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	da00      	bge.n	8007dc6 <payload_integration+0x96>
 8007dc4:	3307      	adds	r3, #7
 8007dc6:	10db      	asrs	r3, r3, #3
 8007dc8:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8007dca:	7dbb      	ldrb	r3, [r7, #22]
 8007dcc:	68ba      	ldr	r2, [r7, #8]
 8007dce:	4413      	add	r3, r2
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	7dfb      	ldrb	r3, [r7, #23]
 8007dd6:	fa42 f303 	asr.w	r3, r2, r3
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	f003 0301 	and.w	r3, r3, #1
 8007de0:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8007de2:	7ffa      	ldrb	r2, [r7, #31]
 8007de4:	7cfb      	ldrb	r3, [r7, #19]
 8007de6:	4053      	eors	r3, r2
 8007de8:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8007dea:	7d3b      	ldrb	r3, [r7, #20]
 8007dec:	68fa      	ldr	r2, [r7, #12]
 8007dee:	4413      	add	r3, r2
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	b25a      	sxtb	r2, r3
 8007df4:	7ff9      	ldrb	r1, [r7, #31]
 8007df6:	7d7b      	ldrb	r3, [r7, #21]
 8007df8:	fa01 f303 	lsl.w	r3, r1, r3
 8007dfc:	b25b      	sxtb	r3, r3
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	b259      	sxtb	r1, r3
 8007e02:	7d3b      	ldrb	r3, [r7, #20]
 8007e04:	68fa      	ldr	r2, [r7, #12]
 8007e06:	4413      	add	r3, r2
 8007e08:	b2ca      	uxtb	r2, r1
 8007e0a:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 8007e0c:	69bb      	ldr	r3, [r7, #24]
 8007e0e:	3301      	adds	r3, #1
 8007e10:	61bb      	str	r3, [r7, #24]
 8007e12:	79fb      	ldrb	r3, [r7, #7]
 8007e14:	00db      	lsls	r3, r3, #3
 8007e16:	69ba      	ldr	r2, [r7, #24]
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	dbb0      	blt.n	8007d7e <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8007e1c:	7ffb      	ldrb	r3, [r7, #31]
 8007e1e:	01db      	lsls	r3, r3, #7
 8007e20:	b25a      	sxtb	r2, r3
 8007e22:	7ffb      	ldrb	r3, [r7, #31]
 8007e24:	019b      	lsls	r3, r3, #6
 8007e26:	b25b      	sxtb	r3, r3
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	b25b      	sxtb	r3, r3
 8007e2c:	7ffa      	ldrb	r2, [r7, #31]
 8007e2e:	2a00      	cmp	r2, #0
 8007e30:	d101      	bne.n	8007e36 <payload_integration+0x106>
 8007e32:	2220      	movs	r2, #32
 8007e34:	e000      	b.n	8007e38 <payload_integration+0x108>
 8007e36:	2200      	movs	r2, #0
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	b259      	sxtb	r1, r3
 8007e3c:	79fb      	ldrb	r3, [r7, #7]
 8007e3e:	68fa      	ldr	r2, [r7, #12]
 8007e40:	4413      	add	r3, r2
 8007e42:	b2ca      	uxtb	r2, r1
 8007e44:	701a      	strb	r2, [r3, #0]
}
 8007e46:	bf00      	nop
 8007e48:	3724      	adds	r7, #36	; 0x24
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bc80      	pop	{r7}
 8007e4e:	4770      	bx	lr

08007e50 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b08c      	sub	sp, #48	; 0x30
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	60b9      	str	r1, [r7, #8]
 8007e58:	607a      	str	r2, [r7, #4]
 8007e5a:	603b      	str	r3, [r7, #0]
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 8007e60:	2300      	movs	r3, #0
 8007e62:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 8007e64:	2300      	movs	r3, #0
 8007e66:	623b      	str	r3, [r7, #32]
 8007e68:	2300      	movs	r3, #0
 8007e6a:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8007e6c:	f001 fdff 	bl	8009a6e <RFW_DeInit>

    if( rxContinuous != 0 )
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d001      	beq.n	8007e7a <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 8007e76:	2300      	movs	r3, #0
 8007e78:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	bf14      	ite	ne
 8007e80:	2301      	movne	r3, #1
 8007e82:	2300      	moveq	r3, #0
 8007e84:	b2da      	uxtb	r2, r3
 8007e86:	4ba3      	ldr	r3, [pc, #652]	; (8008114 <RadioSetRxGenericConfig+0x2c4>)
 8007e88:	705a      	strb	r2, [r3, #1]

    switch( modem )
 8007e8a:	7bfb      	ldrb	r3, [r7, #15]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d003      	beq.n	8007e98 <RadioSetRxGenericConfig+0x48>
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	f000 80dc 	beq.w	800804e <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 8007e96:	e194      	b.n	80081c2 <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d003      	beq.n	8007ea8 <RadioSetRxGenericConfig+0x58>
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	68db      	ldr	r3, [r3, #12]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d102      	bne.n	8007eae <RadioSetRxGenericConfig+0x5e>
            return -1;
 8007ea8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007eac:	e18a      	b.n	80081c4 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	7f9b      	ldrb	r3, [r3, #30]
 8007eb2:	2b08      	cmp	r3, #8
 8007eb4:	d902      	bls.n	8007ebc <RadioSetRxGenericConfig+0x6c>
            return -1;
 8007eb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007eba:	e183      	b.n	80081c4 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	6919      	ldr	r1, [r3, #16]
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	7f9b      	ldrb	r3, [r3, #30]
 8007ec4:	b29a      	uxth	r2, r3
 8007ec6:	f107 0320 	add.w	r3, r7, #32
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f001 ff66 	bl	8009d9c <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	bf14      	ite	ne
 8007ed8:	2301      	movne	r3, #1
 8007eda:	2300      	moveq	r3, #0
 8007edc:	b2db      	uxtb	r3, r3
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f000 fe26 	bl	8008b30 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8007ee4:	4b8b      	ldr	r3, [pc, #556]	; (8008114 <RadioSetRxGenericConfig+0x2c4>)
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	4a88      	ldr	r2, [pc, #544]	; (8008114 <RadioSetRxGenericConfig+0x2c4>)
 8007ef2:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	f893 2020 	ldrb.w	r2, [r3, #32]
 8007efa:	4b86      	ldr	r3, [pc, #536]	; (8008114 <RadioSetRxGenericConfig+0x2c4>)
 8007efc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	4618      	mov	r0, r3
 8007f06:	f001 fce5 	bl	80098d4 <SUBGRF_GetFskBandwidthRegValue>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	461a      	mov	r2, r3
 8007f0e:	4b81      	ldr	r3, [pc, #516]	; (8008114 <RadioSetRxGenericConfig+0x2c4>)
 8007f10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8007f14:	4b7f      	ldr	r3, [pc, #508]	; (8008114 <RadioSetRxGenericConfig+0x2c4>)
 8007f16:	2200      	movs	r2, #0
 8007f18:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	68db      	ldr	r3, [r3, #12]
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	00db      	lsls	r3, r3, #3
 8007f22:	b29a      	uxth	r2, r3
 8007f24:	4b7b      	ldr	r3, [pc, #492]	; (8008114 <RadioSetRxGenericConfig+0x2c4>)
 8007f26:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	7fda      	ldrb	r2, [r3, #31]
 8007f2c:	4b79      	ldr	r3, [pc, #484]	; (8008114 <RadioSetRxGenericConfig+0x2c4>)
 8007f2e:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	7f9b      	ldrb	r3, [r3, #30]
 8007f34:	00db      	lsls	r3, r3, #3
 8007f36:	b2da      	uxtb	r2, r3
 8007f38:	4b76      	ldr	r3, [pc, #472]	; (8008114 <RadioSetRxGenericConfig+0x2c4>)
 8007f3a:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8007f42:	4b74      	ldr	r3, [pc, #464]	; (8008114 <RadioSetRxGenericConfig+0x2c4>)
 8007f44:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d105      	bne.n	8007f5c <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	695b      	ldr	r3, [r3, #20]
 8007f54:	b2da      	uxtb	r2, r3
 8007f56:	4b6f      	ldr	r3, [pc, #444]	; (8008114 <RadioSetRxGenericConfig+0x2c4>)
 8007f58:	759a      	strb	r2, [r3, #22]
 8007f5a:	e00b      	b.n	8007f74 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8007f62:	2b02      	cmp	r3, #2
 8007f64:	d103      	bne.n	8007f6e <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8007f66:	4b6b      	ldr	r3, [pc, #428]	; (8008114 <RadioSetRxGenericConfig+0x2c4>)
 8007f68:	22ff      	movs	r2, #255	; 0xff
 8007f6a:	759a      	strb	r2, [r3, #22]
 8007f6c:	e002      	b.n	8007f74 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8007f6e:	4b69      	ldr	r3, [pc, #420]	; (8008114 <RadioSetRxGenericConfig+0x2c4>)
 8007f70:	22ff      	movs	r2, #255	; 0xff
 8007f72:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007f7a:	2b02      	cmp	r3, #2
 8007f7c:	d004      	beq.n	8007f88 <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8007f84:	2b02      	cmp	r3, #2
 8007f86:	d12d      	bne.n	8007fe4 <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8007f8e:	2bf1      	cmp	r3, #241	; 0xf1
 8007f90:	d00c      	beq.n	8007fac <RadioSetRxGenericConfig+0x15c>
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8007f98:	2bf2      	cmp	r3, #242	; 0xf2
 8007f9a:	d007      	beq.n	8007fac <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8007fa2:	2b01      	cmp	r3, #1
 8007fa4:	d002      	beq.n	8007fac <RadioSetRxGenericConfig+0x15c>
                return -1;
 8007fa6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007faa:	e10b      	b.n	80081c4 <RadioSetRxGenericConfig+0x374>
            ConfigGeneric.rtx = CONFIG_RX;
 8007fac:	2300      	movs	r3, #0
 8007fae:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8007fb4:	4b58      	ldr	r3, [pc, #352]	; (8008118 <RadioSetRxGenericConfig+0x2c8>)
 8007fb6:	6819      	ldr	r1, [r3, #0]
 8007fb8:	f107 0314 	add.w	r3, r7, #20
 8007fbc:	4a57      	ldr	r2, [pc, #348]	; (800811c <RadioSetRxGenericConfig+0x2cc>)
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f001 fd48 	bl	8009a54 <RFW_Init>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d002      	beq.n	8007fd0 <RadioSetRxGenericConfig+0x180>
                return -1;
 8007fca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007fce:	e0f9      	b.n	80081c4 <RadioSetRxGenericConfig+0x374>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8007fd0:	4b50      	ldr	r3, [pc, #320]	; (8008114 <RadioSetRxGenericConfig+0x2c4>)
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8007fd6:	4b4f      	ldr	r3, [pc, #316]	; (8008114 <RadioSetRxGenericConfig+0x2c4>)
 8007fd8:	2201      	movs	r2, #1
 8007fda:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8007fdc:	4b4d      	ldr	r3, [pc, #308]	; (8008114 <RadioSetRxGenericConfig+0x2c4>)
 8007fde:	2200      	movs	r2, #0
 8007fe0:	755a      	strb	r2, [r3, #21]
        {
 8007fe2:	e00e      	b.n	8008002 <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8007fea:	4b4a      	ldr	r3, [pc, #296]	; (8008114 <RadioSetRxGenericConfig+0x2c4>)
 8007fec:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8007ff4:	4b47      	ldr	r3, [pc, #284]	; (8008114 <RadioSetRxGenericConfig+0x2c4>)
 8007ff6:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8007ffe:	4b45      	ldr	r3, [pc, #276]	; (8008114 <RadioSetRxGenericConfig+0x2c4>)
 8008000:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8008002:	f7ff fa6e 	bl	80074e2 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8008006:	2000      	movs	r0, #0
 8008008:	f7fe fc0a 	bl	8006820 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800800c:	4844      	ldr	r0, [pc, #272]	; (8008120 <RadioSetRxGenericConfig+0x2d0>)
 800800e:	f001 f82d 	bl	800906c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008012:	4844      	ldr	r0, [pc, #272]	; (8008124 <RadioSetRxGenericConfig+0x2d4>)
 8008014:	f001 f8fc 	bl	8009210 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8008018:	f107 0320 	add.w	r3, r7, #32
 800801c:	4618      	mov	r0, r3
 800801e:	f000 fbc0 	bl	80087a2 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	8b9b      	ldrh	r3, [r3, #28]
 8008026:	4618      	mov	r0, r3
 8008028:	f000 fc0a 	bl	8008840 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	8b1b      	ldrh	r3, [r3, #24]
 8008030:	4618      	mov	r0, r3
 8008032:	f000 fbe5 	bl	8008800 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800803c:	fb03 f202 	mul.w	r2, r3, r2
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	689b      	ldr	r3, [r3, #8]
 8008044:	fbb2 f3f3 	udiv	r3, r2, r3
 8008048:	4a32      	ldr	r2, [pc, #200]	; (8008114 <RadioSetRxGenericConfig+0x2c4>)
 800804a:	6093      	str	r3, [r2, #8]
        break;
 800804c:	e0b9      	b.n	80081c2 <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8008052:	2b00      	cmp	r3, #0
 8008054:	d102      	bne.n	800805c <RadioSetRxGenericConfig+0x20c>
            return -1;
 8008056:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800805a:	e0b3      	b.n	80081c4 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008062:	2b01      	cmp	r3, #1
 8008064:	d104      	bne.n	8008070 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	695b      	ldr	r3, [r3, #20]
 800806a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800806e:	e002      	b.n	8008076 <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 8008070:	23ff      	movs	r3, #255	; 0xff
 8008072:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800807a:	2b00      	cmp	r3, #0
 800807c:	bf14      	ite	ne
 800807e:	2301      	movne	r3, #1
 8008080:	2300      	moveq	r3, #0
 8008082:	b2db      	uxtb	r3, r3
 8008084:	4618      	mov	r0, r3
 8008086:	f000 fd53 	bl	8008b30 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	b2db      	uxtb	r3, r3
 800808e:	4618      	mov	r0, r3
 8008090:	f000 fd5d 	bl	8008b4e <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8008094:	4b1f      	ldr	r3, [pc, #124]	; (8008114 <RadioSetRxGenericConfig+0x2c4>)
 8008096:	2201      	movs	r2, #1
 8008098:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80080a2:	4b1c      	ldr	r3, [pc, #112]	; (8008114 <RadioSetRxGenericConfig+0x2c4>)
 80080a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80080ae:	4b19      	ldr	r3, [pc, #100]	; (8008114 <RadioSetRxGenericConfig+0x2c4>)
 80080b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80080ba:	4b16      	ldr	r3, [pc, #88]	; (8008114 <RadioSetRxGenericConfig+0x2c4>)
 80080bc:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80080c6:	2b02      	cmp	r3, #2
 80080c8:	d010      	beq.n	80080ec <RadioSetRxGenericConfig+0x29c>
 80080ca:	2b02      	cmp	r3, #2
 80080cc:	dc2c      	bgt.n	8008128 <RadioSetRxGenericConfig+0x2d8>
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d002      	beq.n	80080d8 <RadioSetRxGenericConfig+0x288>
 80080d2:	2b01      	cmp	r3, #1
 80080d4:	d005      	beq.n	80080e2 <RadioSetRxGenericConfig+0x292>
            break;
 80080d6:	e027      	b.n	8008128 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80080d8:	4b0e      	ldr	r3, [pc, #56]	; (8008114 <RadioSetRxGenericConfig+0x2c4>)
 80080da:	2200      	movs	r2, #0
 80080dc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80080e0:	e023      	b.n	800812a <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80080e2:	4b0c      	ldr	r3, [pc, #48]	; (8008114 <RadioSetRxGenericConfig+0x2c4>)
 80080e4:	2201      	movs	r2, #1
 80080e6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80080ea:	e01e      	b.n	800812a <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80080f2:	2b0b      	cmp	r3, #11
 80080f4:	d004      	beq.n	8008100 <RadioSetRxGenericConfig+0x2b0>
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80080fc:	2b0c      	cmp	r3, #12
 80080fe:	d104      	bne.n	800810a <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8008100:	4b04      	ldr	r3, [pc, #16]	; (8008114 <RadioSetRxGenericConfig+0x2c4>)
 8008102:	2201      	movs	r2, #1
 8008104:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008108:	e00f      	b.n	800812a <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800810a:	4b02      	ldr	r3, [pc, #8]	; (8008114 <RadioSetRxGenericConfig+0x2c4>)
 800810c:	2200      	movs	r2, #0
 800810e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008112:	e00a      	b.n	800812a <RadioSetRxGenericConfig+0x2da>
 8008114:	200004b8 	.word	0x200004b8
 8008118:	200004b4 	.word	0x200004b4
 800811c:	2000052c 	.word	0x2000052c
 8008120:	200004f0 	.word	0x200004f0
 8008124:	200004c6 	.word	0x200004c6
            break;
 8008128:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800812a:	4b28      	ldr	r3, [pc, #160]	; (80081cc <RadioSetRxGenericConfig+0x37c>)
 800812c:	2201      	movs	r2, #1
 800812e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8008134:	4b25      	ldr	r3, [pc, #148]	; (80081cc <RadioSetRxGenericConfig+0x37c>)
 8008136:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 800813e:	4b23      	ldr	r3, [pc, #140]	; (80081cc <RadioSetRxGenericConfig+0x37c>)
 8008140:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8008142:	4a22      	ldr	r2, [pc, #136]	; (80081cc <RadioSetRxGenericConfig+0x37c>)
 8008144:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008148:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8008150:	4b1e      	ldr	r3, [pc, #120]	; (80081cc <RadioSetRxGenericConfig+0x37c>)
 8008152:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 800815c:	4b1b      	ldr	r3, [pc, #108]	; (80081cc <RadioSetRxGenericConfig+0x37c>)
 800815e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 8008162:	f7ff f9be 	bl	80074e2 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8008166:	2001      	movs	r0, #1
 8008168:	f7fe fb5a 	bl	8006820 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800816c:	4818      	ldr	r0, [pc, #96]	; (80081d0 <RadioSetRxGenericConfig+0x380>)
 800816e:	f000 ff7d 	bl	800906c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008172:	4818      	ldr	r0, [pc, #96]	; (80081d4 <RadioSetRxGenericConfig+0x384>)
 8008174:	f001 f84c 	bl	8009210 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8008178:	4b14      	ldr	r3, [pc, #80]	; (80081cc <RadioSetRxGenericConfig+0x37c>)
 800817a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800817e:	2b01      	cmp	r3, #1
 8008180:	d10d      	bne.n	800819e <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8008182:	f240 7036 	movw	r0, #1846	; 0x736
 8008186:	f001 f99f 	bl	80094c8 <SUBGRF_ReadRegister>
 800818a:	4603      	mov	r3, r0
 800818c:	f023 0304 	bic.w	r3, r3, #4
 8008190:	b2db      	uxtb	r3, r3
 8008192:	4619      	mov	r1, r3
 8008194:	f240 7036 	movw	r0, #1846	; 0x736
 8008198:	f001 f982 	bl	80094a0 <SUBGRF_WriteRegister>
 800819c:	e00c      	b.n	80081b8 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 800819e:	f240 7036 	movw	r0, #1846	; 0x736
 80081a2:	f001 f991 	bl	80094c8 <SUBGRF_ReadRegister>
 80081a6:	4603      	mov	r3, r0
 80081a8:	f043 0304 	orr.w	r3, r3, #4
 80081ac:	b2db      	uxtb	r3, r3
 80081ae:	4619      	mov	r1, r3
 80081b0:	f240 7036 	movw	r0, #1846	; 0x736
 80081b4:	f001 f974 	bl	80094a0 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 80081b8:	4b04      	ldr	r3, [pc, #16]	; (80081cc <RadioSetRxGenericConfig+0x37c>)
 80081ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80081be:	609a      	str	r2, [r3, #8]
        break;
 80081c0:	bf00      	nop
    }
    return status;
 80081c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3730      	adds	r7, #48	; 0x30
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}
 80081cc:	200004b8 	.word	0x200004b8
 80081d0:	200004f0 	.word	0x200004f0
 80081d4:	200004c6 	.word	0x200004c6

080081d8 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b08e      	sub	sp, #56	; 0x38
 80081dc:	af00      	add	r7, sp, #0
 80081de:	60b9      	str	r1, [r7, #8]
 80081e0:	607b      	str	r3, [r7, #4]
 80081e2:	4603      	mov	r3, r0
 80081e4:	73fb      	strb	r3, [r7, #15]
 80081e6:	4613      	mov	r3, r2
 80081e8:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 80081ea:	2300      	movs	r3, #0
 80081ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80081ee:	2300      	movs	r3, #0
 80081f0:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 80081f2:	f001 fc3c 	bl	8009a6e <RFW_DeInit>
    switch( modem )
 80081f6:	7bfb      	ldrb	r3, [r7, #15]
 80081f8:	2b03      	cmp	r3, #3
 80081fa:	f200 8204 	bhi.w	8008606 <RadioSetTxGenericConfig+0x42e>
 80081fe:	a201      	add	r2, pc, #4	; (adr r2, 8008204 <RadioSetTxGenericConfig+0x2c>)
 8008200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008204:	08008389 	.word	0x08008389
 8008208:	080084d1 	.word	0x080084d1
 800820c:	080085c9 	.word	0x080085c9
 8008210:	08008215 	.word	0x08008215
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	7c9b      	ldrb	r3, [r3, #18]
 8008218:	2b08      	cmp	r3, #8
 800821a:	d902      	bls.n	8008222 <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 800821c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008220:	e206      	b.n	8008630 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	6899      	ldr	r1, [r3, #8]
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	7c9b      	ldrb	r3, [r3, #18]
 800822a:	b29a      	uxth	r2, r3
 800822c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008230:	4618      	mov	r0, r3
 8008232:	f001 fdb3 	bl	8009d9c <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d102      	bne.n	8008244 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 800823e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008242:	e1f5      	b.n	8008630 <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f242 7210 	movw	r2, #10000	; 0x2710
 800824c:	4293      	cmp	r3, r2
 800824e:	d813      	bhi.n	8008278 <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 8008250:	2302      	movs	r3, #2
 8008252:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 8008256:	4b99      	ldr	r3, [pc, #612]	; (80084bc <RadioSetTxGenericConfig+0x2e4>)
 8008258:	2203      	movs	r2, #3
 800825a:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 800825c:	4b97      	ldr	r3, [pc, #604]	; (80084bc <RadioSetTxGenericConfig+0x2e4>)
 800825e:	2203      	movs	r2, #3
 8008260:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4a94      	ldr	r2, [pc, #592]	; (80084bc <RadioSetTxGenericConfig+0x2e4>)
 800826a:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	7cda      	ldrb	r2, [r3, #19]
 8008270:	4b92      	ldr	r3, [pc, #584]	; (80084bc <RadioSetTxGenericConfig+0x2e4>)
 8008272:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008276:	e017      	b.n	80082a8 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 8008278:	2300      	movs	r3, #0
 800827a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800827e:	4b8f      	ldr	r3, [pc, #572]	; (80084bc <RadioSetTxGenericConfig+0x2e4>)
 8008280:	2200      	movs	r2, #0
 8008282:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8008284:	4b8d      	ldr	r3, [pc, #564]	; (80084bc <RadioSetTxGenericConfig+0x2e4>)
 8008286:	2200      	movs	r2, #0
 8008288:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a8a      	ldr	r2, [pc, #552]	; (80084bc <RadioSetTxGenericConfig+0x2e4>)
 8008292:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	7cda      	ldrb	r2, [r3, #19]
 8008298:	4b88      	ldr	r3, [pc, #544]	; (80084bc <RadioSetTxGenericConfig+0x2e4>)
 800829a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	089b      	lsrs	r3, r3, #2
 80082a4:	4a85      	ldr	r2, [pc, #532]	; (80084bc <RadioSetTxGenericConfig+0x2e4>)
 80082a6:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	b29b      	uxth	r3, r3
 80082ae:	00db      	lsls	r3, r3, #3
 80082b0:	b29a      	uxth	r2, r3
 80082b2:	4b82      	ldr	r3, [pc, #520]	; (80084bc <RadioSetTxGenericConfig+0x2e4>)
 80082b4:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 80082b6:	4b81      	ldr	r3, [pc, #516]	; (80084bc <RadioSetTxGenericConfig+0x2e4>)
 80082b8:	2204      	movs	r2, #4
 80082ba:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	7c9b      	ldrb	r3, [r3, #18]
 80082c0:	00db      	lsls	r3, r3, #3
 80082c2:	b2da      	uxtb	r2, r3
 80082c4:	4b7d      	ldr	r3, [pc, #500]	; (80084bc <RadioSetTxGenericConfig+0x2e4>)
 80082c6:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 80082c8:	4b7c      	ldr	r3, [pc, #496]	; (80084bc <RadioSetTxGenericConfig+0x2e4>)
 80082ca:	2200      	movs	r2, #0
 80082cc:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	7d9b      	ldrb	r3, [r3, #22]
 80082d2:	2b02      	cmp	r3, #2
 80082d4:	d003      	beq.n	80082de <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	7d1b      	ldrb	r3, [r3, #20]
 80082da:	2b02      	cmp	r3, #2
 80082dc:	d12b      	bne.n	8008336 <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	7d5b      	ldrb	r3, [r3, #21]
 80082e2:	2bf1      	cmp	r3, #241	; 0xf1
 80082e4:	d00a      	beq.n	80082fc <RadioSetTxGenericConfig+0x124>
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	7d5b      	ldrb	r3, [r3, #21]
 80082ea:	2bf2      	cmp	r3, #242	; 0xf2
 80082ec:	d006      	beq.n	80082fc <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	7d5b      	ldrb	r3, [r3, #21]
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	d002      	beq.n	80082fc <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 80082f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80082fa:	e199      	b.n	8008630 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 8008300:	2301      	movs	r3, #1
 8008302:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8008306:	4b6e      	ldr	r3, [pc, #440]	; (80084c0 <RadioSetTxGenericConfig+0x2e8>)
 8008308:	6819      	ldr	r1, [r3, #0]
 800830a:	f107 0320 	add.w	r3, r7, #32
 800830e:	4a6d      	ldr	r2, [pc, #436]	; (80084c4 <RadioSetTxGenericConfig+0x2ec>)
 8008310:	4618      	mov	r0, r3
 8008312:	f001 fb9f 	bl	8009a54 <RFW_Init>
 8008316:	4603      	mov	r3, r0
 8008318:	2b00      	cmp	r3, #0
 800831a:	d002      	beq.n	8008322 <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 800831c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008320:	e186      	b.n	8008630 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8008322:	4b66      	ldr	r3, [pc, #408]	; (80084bc <RadioSetTxGenericConfig+0x2e4>)
 8008324:	2200      	movs	r2, #0
 8008326:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8008328:	4b64      	ldr	r3, [pc, #400]	; (80084bc <RadioSetTxGenericConfig+0x2e4>)
 800832a:	2201      	movs	r2, #1
 800832c:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800832e:	4b63      	ldr	r3, [pc, #396]	; (80084bc <RadioSetTxGenericConfig+0x2e4>)
 8008330:	2200      	movs	r2, #0
 8008332:	755a      	strb	r2, [r3, #21]
        {
 8008334:	e00b      	b.n	800834e <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	7d5a      	ldrb	r2, [r3, #21]
 800833a:	4b60      	ldr	r3, [pc, #384]	; (80084bc <RadioSetTxGenericConfig+0x2e4>)
 800833c:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	7d9a      	ldrb	r2, [r3, #22]
 8008342:	4b5e      	ldr	r3, [pc, #376]	; (80084bc <RadioSetTxGenericConfig+0x2e4>)
 8008344:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	7d1a      	ldrb	r2, [r3, #20]
 800834a:	4b5c      	ldr	r3, [pc, #368]	; (80084bc <RadioSetTxGenericConfig+0x2e4>)
 800834c:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 800834e:	f7ff f8c8 	bl	80074e2 <RadioStandby>
        RadioSetModem( radio_modem );
 8008352:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008356:	4618      	mov	r0, r3
 8008358:	f7fe fa62 	bl	8006820 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800835c:	485a      	ldr	r0, [pc, #360]	; (80084c8 <RadioSetTxGenericConfig+0x2f0>)
 800835e:	f000 fe85 	bl	800906c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008362:	485a      	ldr	r0, [pc, #360]	; (80084cc <RadioSetTxGenericConfig+0x2f4>)
 8008364:	f000 ff54 	bl	8009210 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8008368:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800836c:	4618      	mov	r0, r3
 800836e:	f000 fa18 	bl	80087a2 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	8a1b      	ldrh	r3, [r3, #16]
 8008376:	4618      	mov	r0, r3
 8008378:	f000 fa62 	bl	8008840 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	899b      	ldrh	r3, [r3, #12]
 8008380:	4618      	mov	r0, r3
 8008382:	f000 fa3d 	bl	8008800 <SUBGRF_SetCrcPolynomial>
        break;
 8008386:	e13f      	b.n	8008608 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d102      	bne.n	8008396 <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 8008390:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008394:	e14c      	b.n	8008630 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	7c9b      	ldrb	r3, [r3, #18]
 800839a:	2b08      	cmp	r3, #8
 800839c:	d902      	bls.n	80083a4 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 800839e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80083a2:	e145      	b.n	8008630 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	6899      	ldr	r1, [r3, #8]
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	7c9b      	ldrb	r3, [r3, #18]
 80083ac:	b29a      	uxth	r2, r3
 80083ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80083b2:	4618      	mov	r0, r3
 80083b4:	f001 fcf2 	bl	8009d9c <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80083b8:	4b40      	ldr	r3, [pc, #256]	; (80084bc <RadioSetTxGenericConfig+0x2e4>)
 80083ba:	2200      	movs	r2, #0
 80083bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a3d      	ldr	r2, [pc, #244]	; (80084bc <RadioSetTxGenericConfig+0x2e4>)
 80083c6:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	7cda      	ldrb	r2, [r3, #19]
 80083cc:	4b3b      	ldr	r3, [pc, #236]	; (80084bc <RadioSetTxGenericConfig+0x2e4>)
 80083ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	699b      	ldr	r3, [r3, #24]
 80083d6:	4a39      	ldr	r2, [pc, #228]	; (80084bc <RadioSetTxGenericConfig+0x2e4>)
 80083d8:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80083da:	4b38      	ldr	r3, [pc, #224]	; (80084bc <RadioSetTxGenericConfig+0x2e4>)
 80083dc:	2200      	movs	r2, #0
 80083de:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	b29b      	uxth	r3, r3
 80083e6:	00db      	lsls	r3, r3, #3
 80083e8:	b29a      	uxth	r2, r3
 80083ea:	4b34      	ldr	r3, [pc, #208]	; (80084bc <RadioSetTxGenericConfig+0x2e4>)
 80083ec:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 80083ee:	4b33      	ldr	r3, [pc, #204]	; (80084bc <RadioSetTxGenericConfig+0x2e4>)
 80083f0:	2204      	movs	r2, #4
 80083f2:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	7c9b      	ldrb	r3, [r3, #18]
 80083f8:	00db      	lsls	r3, r3, #3
 80083fa:	b2da      	uxtb	r2, r3
 80083fc:	4b2f      	ldr	r3, [pc, #188]	; (80084bc <RadioSetTxGenericConfig+0x2e4>)
 80083fe:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8008400:	4b2e      	ldr	r3, [pc, #184]	; (80084bc <RadioSetTxGenericConfig+0x2e4>)
 8008402:	2200      	movs	r2, #0
 8008404:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	7d9b      	ldrb	r3, [r3, #22]
 800840a:	2b02      	cmp	r3, #2
 800840c:	d003      	beq.n	8008416 <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	7d1b      	ldrb	r3, [r3, #20]
 8008412:	2b02      	cmp	r3, #2
 8008414:	d12a      	bne.n	800846c <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	7d5b      	ldrb	r3, [r3, #21]
 800841a:	2bf1      	cmp	r3, #241	; 0xf1
 800841c:	d00a      	beq.n	8008434 <RadioSetTxGenericConfig+0x25c>
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	7d5b      	ldrb	r3, [r3, #21]
 8008422:	2bf2      	cmp	r3, #242	; 0xf2
 8008424:	d006      	beq.n	8008434 <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	7d5b      	ldrb	r3, [r3, #21]
 800842a:	2b01      	cmp	r3, #1
 800842c:	d002      	beq.n	8008434 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 800842e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008432:	e0fd      	b.n	8008630 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 8008434:	2301      	movs	r3, #1
 8008436:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800843c:	4b20      	ldr	r3, [pc, #128]	; (80084c0 <RadioSetTxGenericConfig+0x2e8>)
 800843e:	6819      	ldr	r1, [r3, #0]
 8008440:	f107 0314 	add.w	r3, r7, #20
 8008444:	4a1f      	ldr	r2, [pc, #124]	; (80084c4 <RadioSetTxGenericConfig+0x2ec>)
 8008446:	4618      	mov	r0, r3
 8008448:	f001 fb04 	bl	8009a54 <RFW_Init>
 800844c:	4603      	mov	r3, r0
 800844e:	2b00      	cmp	r3, #0
 8008450:	d002      	beq.n	8008458 <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 8008452:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008456:	e0eb      	b.n	8008630 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8008458:	4b18      	ldr	r3, [pc, #96]	; (80084bc <RadioSetTxGenericConfig+0x2e4>)
 800845a:	2200      	movs	r2, #0
 800845c:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800845e:	4b17      	ldr	r3, [pc, #92]	; (80084bc <RadioSetTxGenericConfig+0x2e4>)
 8008460:	2201      	movs	r2, #1
 8008462:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8008464:	4b15      	ldr	r3, [pc, #84]	; (80084bc <RadioSetTxGenericConfig+0x2e4>)
 8008466:	2200      	movs	r2, #0
 8008468:	755a      	strb	r2, [r3, #21]
        {
 800846a:	e00b      	b.n	8008484 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	7d5a      	ldrb	r2, [r3, #21]
 8008470:	4b12      	ldr	r3, [pc, #72]	; (80084bc <RadioSetTxGenericConfig+0x2e4>)
 8008472:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	7d9a      	ldrb	r2, [r3, #22]
 8008478:	4b10      	ldr	r3, [pc, #64]	; (80084bc <RadioSetTxGenericConfig+0x2e4>)
 800847a:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	7d1a      	ldrb	r2, [r3, #20]
 8008480:	4b0e      	ldr	r3, [pc, #56]	; (80084bc <RadioSetTxGenericConfig+0x2e4>)
 8008482:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8008484:	f7ff f82d 	bl	80074e2 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8008488:	2000      	movs	r0, #0
 800848a:	f7fe f9c9 	bl	8006820 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800848e:	480e      	ldr	r0, [pc, #56]	; (80084c8 <RadioSetTxGenericConfig+0x2f0>)
 8008490:	f000 fdec 	bl	800906c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008494:	480d      	ldr	r0, [pc, #52]	; (80084cc <RadioSetTxGenericConfig+0x2f4>)
 8008496:	f000 febb 	bl	8009210 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800849a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800849e:	4618      	mov	r0, r3
 80084a0:	f000 f97f 	bl	80087a2 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	8a1b      	ldrh	r3, [r3, #16]
 80084a8:	4618      	mov	r0, r3
 80084aa:	f000 f9c9 	bl	8008840 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	899b      	ldrh	r3, [r3, #12]
 80084b2:	4618      	mov	r0, r3
 80084b4:	f000 f9a4 	bl	8008800 <SUBGRF_SetCrcPolynomial>
        break;
 80084b8:	e0a6      	b.n	8008608 <RadioSetTxGenericConfig+0x430>
 80084ba:	bf00      	nop
 80084bc:	200004b8 	.word	0x200004b8
 80084c0:	200004b4 	.word	0x200004b4
 80084c4:	20000514 	.word	0x20000514
 80084c8:	200004f0 	.word	0x200004f0
 80084cc:	200004c6 	.word	0x200004c6
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80084d0:	4b59      	ldr	r3, [pc, #356]	; (8008638 <RadioSetTxGenericConfig+0x460>)
 80084d2:	2201      	movs	r2, #1
 80084d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	781a      	ldrb	r2, [r3, #0]
 80084dc:	4b56      	ldr	r3, [pc, #344]	; (8008638 <RadioSetTxGenericConfig+0x460>)
 80084de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	785a      	ldrb	r2, [r3, #1]
 80084e6:	4b54      	ldr	r3, [pc, #336]	; (8008638 <RadioSetTxGenericConfig+0x460>)
 80084e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	789a      	ldrb	r2, [r3, #2]
 80084f0:	4b51      	ldr	r3, [pc, #324]	; (8008638 <RadioSetTxGenericConfig+0x460>)
 80084f2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	78db      	ldrb	r3, [r3, #3]
 80084fa:	2b02      	cmp	r3, #2
 80084fc:	d010      	beq.n	8008520 <RadioSetTxGenericConfig+0x348>
 80084fe:	2b02      	cmp	r3, #2
 8008500:	dc20      	bgt.n	8008544 <RadioSetTxGenericConfig+0x36c>
 8008502:	2b00      	cmp	r3, #0
 8008504:	d002      	beq.n	800850c <RadioSetTxGenericConfig+0x334>
 8008506:	2b01      	cmp	r3, #1
 8008508:	d005      	beq.n	8008516 <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 800850a:	e01b      	b.n	8008544 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800850c:	4b4a      	ldr	r3, [pc, #296]	; (8008638 <RadioSetTxGenericConfig+0x460>)
 800850e:	2200      	movs	r2, #0
 8008510:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008514:	e017      	b.n	8008546 <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8008516:	4b48      	ldr	r3, [pc, #288]	; (8008638 <RadioSetTxGenericConfig+0x460>)
 8008518:	2201      	movs	r2, #1
 800851a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800851e:	e012      	b.n	8008546 <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	781b      	ldrb	r3, [r3, #0]
 8008524:	2b0b      	cmp	r3, #11
 8008526:	d003      	beq.n	8008530 <RadioSetTxGenericConfig+0x358>
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	781b      	ldrb	r3, [r3, #0]
 800852c:	2b0c      	cmp	r3, #12
 800852e:	d104      	bne.n	800853a <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8008530:	4b41      	ldr	r3, [pc, #260]	; (8008638 <RadioSetTxGenericConfig+0x460>)
 8008532:	2201      	movs	r2, #1
 8008534:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008538:	e005      	b.n	8008546 <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800853a:	4b3f      	ldr	r3, [pc, #252]	; (8008638 <RadioSetTxGenericConfig+0x460>)
 800853c:	2200      	movs	r2, #0
 800853e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008542:	e000      	b.n	8008546 <RadioSetTxGenericConfig+0x36e>
            break;
 8008544:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8008546:	4b3c      	ldr	r3, [pc, #240]	; (8008638 <RadioSetTxGenericConfig+0x460>)
 8008548:	2201      	movs	r2, #1
 800854a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	889a      	ldrh	r2, [r3, #4]
 8008550:	4b39      	ldr	r3, [pc, #228]	; (8008638 <RadioSetTxGenericConfig+0x460>)
 8008552:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	799a      	ldrb	r2, [r3, #6]
 8008558:	4b37      	ldr	r3, [pc, #220]	; (8008638 <RadioSetTxGenericConfig+0x460>)
 800855a:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	79da      	ldrb	r2, [r3, #7]
 8008560:	4b35      	ldr	r3, [pc, #212]	; (8008638 <RadioSetTxGenericConfig+0x460>)
 8008562:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	7a1a      	ldrb	r2, [r3, #8]
 800856a:	4b33      	ldr	r3, [pc, #204]	; (8008638 <RadioSetTxGenericConfig+0x460>)
 800856c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 8008570:	f7fe ffb7 	bl	80074e2 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8008574:	2001      	movs	r0, #1
 8008576:	f7fe f953 	bl	8006820 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800857a:	4830      	ldr	r0, [pc, #192]	; (800863c <RadioSetTxGenericConfig+0x464>)
 800857c:	f000 fd76 	bl	800906c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008580:	482f      	ldr	r0, [pc, #188]	; (8008640 <RadioSetTxGenericConfig+0x468>)
 8008582:	f000 fe45 	bl	8009210 <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 8008586:	4b2c      	ldr	r3, [pc, #176]	; (8008638 <RadioSetTxGenericConfig+0x460>)
 8008588:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800858c:	2b06      	cmp	r3, #6
 800858e:	d10d      	bne.n	80085ac <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8008590:	f640 0089 	movw	r0, #2185	; 0x889
 8008594:	f000 ff98 	bl	80094c8 <SUBGRF_ReadRegister>
 8008598:	4603      	mov	r3, r0
 800859a:	f023 0304 	bic.w	r3, r3, #4
 800859e:	b2db      	uxtb	r3, r3
 80085a0:	4619      	mov	r1, r3
 80085a2:	f640 0089 	movw	r0, #2185	; 0x889
 80085a6:	f000 ff7b 	bl	80094a0 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 80085aa:	e02d      	b.n	8008608 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 80085ac:	f640 0089 	movw	r0, #2185	; 0x889
 80085b0:	f000 ff8a 	bl	80094c8 <SUBGRF_ReadRegister>
 80085b4:	4603      	mov	r3, r0
 80085b6:	f043 0304 	orr.w	r3, r3, #4
 80085ba:	b2db      	uxtb	r3, r3
 80085bc:	4619      	mov	r1, r3
 80085be:	f640 0089 	movw	r0, #2185	; 0x889
 80085c2:	f000 ff6d 	bl	80094a0 <SUBGRF_WriteRegister>
        break;
 80085c6:	e01f      	b.n	8008608 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d004      	beq.n	80085da <RadioSetTxGenericConfig+0x402>
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80085d8:	d902      	bls.n	80085e0 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 80085da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80085de:	e027      	b.n	8008630 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 80085e0:	2003      	movs	r0, #3
 80085e2:	f7fe f91d 	bl	8006820 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 80085e6:	4b14      	ldr	r3, [pc, #80]	; (8008638 <RadioSetTxGenericConfig+0x460>)
 80085e8:	2202      	movs	r2, #2
 80085ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	4a11      	ldr	r2, [pc, #68]	; (8008638 <RadioSetTxGenericConfig+0x460>)
 80085f4:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 80085f6:	4b10      	ldr	r3, [pc, #64]	; (8008638 <RadioSetTxGenericConfig+0x460>)
 80085f8:	2216      	movs	r2, #22
 80085fa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80085fe:	480f      	ldr	r0, [pc, #60]	; (800863c <RadioSetTxGenericConfig+0x464>)
 8008600:	f000 fd34 	bl	800906c <SUBGRF_SetModulationParams>
        break;
 8008604:	e000      	b.n	8008608 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 8008606:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8008608:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800860c:	4618      	mov	r0, r3
 800860e:	f001 f863 	bl	80096d8 <SUBGRF_SetRfTxPower>
 8008612:	4603      	mov	r3, r0
 8008614:	461a      	mov	r2, r3
 8008616:	4b08      	ldr	r3, [pc, #32]	; (8008638 <RadioSetTxGenericConfig+0x460>)
 8008618:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 800861c:	4b06      	ldr	r3, [pc, #24]	; (8008638 <RadioSetTxGenericConfig+0x460>)
 800861e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008622:	4618      	mov	r0, r3
 8008624:	f001 fa37 	bl	8009a96 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8008628:	4a03      	ldr	r2, [pc, #12]	; (8008638 <RadioSetTxGenericConfig+0x460>)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6053      	str	r3, [r2, #4]
    return 0;
 800862e:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8008630:	4618      	mov	r0, r3
 8008632:	3738      	adds	r7, #56	; 0x38
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}
 8008638:	200004b8 	.word	0x200004b8
 800863c:	200004f0 	.word	0x200004f0
 8008640:	200004c6 	.word	0x200004c6

08008644 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 8008644:	b480      	push	{r7}
 8008646:	b085      	sub	sp, #20
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 800864c:	2301      	movs	r3, #1
 800864e:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 8008650:	7bfb      	ldrb	r3, [r7, #15]
}
 8008652:	4618      	mov	r0, r3
 8008654:	3714      	adds	r7, #20
 8008656:	46bd      	mov	sp, r7
 8008658:	bc80      	pop	{r7}
 800865a:	4770      	bx	lr

0800865c <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 800865c:	b480      	push	{r7}
 800865e:	b083      	sub	sp, #12
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 8008666:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 8008668:	4618      	mov	r0, r3
 800866a:	370c      	adds	r7, #12
 800866c:	46bd      	mov	sp, r7
 800866e:	bc80      	pop	{r7}
 8008670:	4770      	bx	lr
	...

08008674 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b084      	sub	sp, #16
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d002      	beq.n	8008688 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8008682:	4a1d      	ldr	r2, [pc, #116]	; (80086f8 <SUBGRF_Init+0x84>)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8008688:	f7f8 fb58 	bl	8000d3c <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800868c:	2002      	movs	r0, #2
 800868e:	f001 f8ff 	bl	8009890 <Radio_SMPS_Set>

    ImageCalibrated = false;
 8008692:	4b1a      	ldr	r3, [pc, #104]	; (80086fc <SUBGRF_Init+0x88>)
 8008694:	2200      	movs	r2, #0
 8008696:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8008698:	2000      	movs	r0, #0
 800869a:	f000 f97d 	bl	8008998 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 800869e:	f001 fb52 	bl	8009d46 <RBI_IsTCXO>
 80086a2:	4603      	mov	r3, r0
 80086a4:	2b01      	cmp	r3, #1
 80086a6:	d10e      	bne.n	80086c6 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 80086a8:	2140      	movs	r1, #64	; 0x40
 80086aa:	2001      	movs	r0, #1
 80086ac:	f000 fb82 	bl	8008db4 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 80086b0:	2100      	movs	r1, #0
 80086b2:	f640 1011 	movw	r0, #2321	; 0x911
 80086b6:	f000 fef3 	bl	80094a0 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 80086ba:	237f      	movs	r3, #127	; 0x7f
 80086bc:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 80086be:	7b38      	ldrb	r0, [r7, #12]
 80086c0:	f000 fa8b 	bl	8008bda <SUBGRF_Calibrate>
 80086c4:	e009      	b.n	80086da <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80086c6:	2120      	movs	r1, #32
 80086c8:	f640 1011 	movw	r0, #2321	; 0x911
 80086cc:	f000 fee8 	bl	80094a0 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80086d0:	2120      	movs	r1, #32
 80086d2:	f640 1012 	movw	r0, #2322	; 0x912
 80086d6:	f000 fee3 	bl	80094a0 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80086da:	210e      	movs	r1, #14
 80086dc:	f640 101f 	movw	r0, #2335	; 0x91f
 80086e0:	f000 fede 	bl	80094a0 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 80086e4:	f001 fa86 	bl	8009bf4 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 80086e8:	4b05      	ldr	r3, [pc, #20]	; (8008700 <SUBGRF_Init+0x8c>)
 80086ea:	2201      	movs	r2, #1
 80086ec:	701a      	strb	r2, [r3, #0]
}
 80086ee:	bf00      	nop
 80086f0:	3710      	adds	r7, #16
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}
 80086f6:	bf00      	nop
 80086f8:	20000550 	.word	0x20000550
 80086fc:	2000054c 	.word	0x2000054c
 8008700:	20000544 	.word	0x20000544

08008704 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8008704:	b480      	push	{r7}
 8008706:	af00      	add	r7, sp, #0
    return OperatingMode;
 8008708:	4b02      	ldr	r3, [pc, #8]	; (8008714 <SUBGRF_GetOperatingMode+0x10>)
 800870a:	781b      	ldrb	r3, [r3, #0]
}
 800870c:	4618      	mov	r0, r3
 800870e:	46bd      	mov	sp, r7
 8008710:	bc80      	pop	{r7}
 8008712:	4770      	bx	lr
 8008714:	20000544 	.word	0x20000544

08008718 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b082      	sub	sp, #8
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	460b      	mov	r3, r1
 8008722:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8008724:	78fb      	ldrb	r3, [r7, #3]
 8008726:	461a      	mov	r2, r3
 8008728:	6879      	ldr	r1, [r7, #4]
 800872a:	2000      	movs	r0, #0
 800872c:	f000 ff24 	bl	8009578 <SUBGRF_WriteBuffer>
}
 8008730:	bf00      	nop
 8008732:	3708      	adds	r7, #8
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}

08008738 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b086      	sub	sp, #24
 800873c:	af00      	add	r7, sp, #0
 800873e:	60f8      	str	r0, [r7, #12]
 8008740:	60b9      	str	r1, [r7, #8]
 8008742:	4613      	mov	r3, r2
 8008744:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8008746:	2300      	movs	r3, #0
 8008748:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 800874a:	f107 0317 	add.w	r3, r7, #23
 800874e:	4619      	mov	r1, r3
 8008750:	68b8      	ldr	r0, [r7, #8]
 8008752:	f000 fe27 	bl	80093a4 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	781b      	ldrb	r3, [r3, #0]
 800875a:	79fa      	ldrb	r2, [r7, #7]
 800875c:	429a      	cmp	r2, r3
 800875e:	d201      	bcs.n	8008764 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8008760:	2301      	movs	r3, #1
 8008762:	e007      	b.n	8008774 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8008764:	7df8      	ldrb	r0, [r7, #23]
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	781b      	ldrb	r3, [r3, #0]
 800876a:	461a      	mov	r2, r3
 800876c:	68f9      	ldr	r1, [r7, #12]
 800876e:	f000 ff25 	bl	80095bc <SUBGRF_ReadBuffer>

    return 0;
 8008772:	2300      	movs	r3, #0
}
 8008774:	4618      	mov	r0, r3
 8008776:	3718      	adds	r7, #24
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}

0800877c <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b084      	sub	sp, #16
 8008780:	af00      	add	r7, sp, #0
 8008782:	60f8      	str	r0, [r7, #12]
 8008784:	460b      	mov	r3, r1
 8008786:	607a      	str	r2, [r7, #4]
 8008788:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 800878a:	7afb      	ldrb	r3, [r7, #11]
 800878c:	4619      	mov	r1, r3
 800878e:	68f8      	ldr	r0, [r7, #12]
 8008790:	f7ff ffc2 	bl	8008718 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f000 f91b 	bl	80089d0 <SUBGRF_SetTx>
}
 800879a:	bf00      	nop
 800879c:	3710      	adds	r7, #16
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}

080087a2 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 80087a2:	b580      	push	{r7, lr}
 80087a4:	b082      	sub	sp, #8
 80087a6:	af00      	add	r7, sp, #0
 80087a8:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 80087aa:	2208      	movs	r2, #8
 80087ac:	6879      	ldr	r1, [r7, #4]
 80087ae:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 80087b2:	f000 fe9d 	bl	80094f0 <SUBGRF_WriteRegisters>
    return 0;
 80087b6:	2300      	movs	r3, #0
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3708      	adds	r7, #8
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}

080087c0 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b084      	sub	sp, #16
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	4603      	mov	r3, r0
 80087c8:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 80087ca:	88fb      	ldrh	r3, [r7, #6]
 80087cc:	0a1b      	lsrs	r3, r3, #8
 80087ce:	b29b      	uxth	r3, r3
 80087d0:	b2db      	uxtb	r3, r3
 80087d2:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 80087d4:	88fb      	ldrh	r3, [r7, #6]
 80087d6:	b2db      	uxtb	r3, r3
 80087d8:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 80087da:	f000 fb6f 	bl	8008ebc <SUBGRF_GetPacketType>
 80087de:	4603      	mov	r3, r0
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d108      	bne.n	80087f6 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 80087e4:	f107 030c 	add.w	r3, r7, #12
 80087e8:	2202      	movs	r2, #2
 80087ea:	4619      	mov	r1, r3
 80087ec:	f240 60bc 	movw	r0, #1724	; 0x6bc
 80087f0:	f000 fe7e 	bl	80094f0 <SUBGRF_WriteRegisters>
            break;
 80087f4:	e000      	b.n	80087f8 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 80087f6:	bf00      	nop
    }
}
 80087f8:	bf00      	nop
 80087fa:	3710      	adds	r7, #16
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}

08008800 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b084      	sub	sp, #16
 8008804:	af00      	add	r7, sp, #0
 8008806:	4603      	mov	r3, r0
 8008808:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 800880a:	88fb      	ldrh	r3, [r7, #6]
 800880c:	0a1b      	lsrs	r3, r3, #8
 800880e:	b29b      	uxth	r3, r3
 8008810:	b2db      	uxtb	r3, r3
 8008812:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8008814:	88fb      	ldrh	r3, [r7, #6]
 8008816:	b2db      	uxtb	r3, r3
 8008818:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800881a:	f000 fb4f 	bl	8008ebc <SUBGRF_GetPacketType>
 800881e:	4603      	mov	r3, r0
 8008820:	2b00      	cmp	r3, #0
 8008822:	d108      	bne.n	8008836 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8008824:	f107 030c 	add.w	r3, r7, #12
 8008828:	2202      	movs	r2, #2
 800882a:	4619      	mov	r1, r3
 800882c:	f240 60be 	movw	r0, #1726	; 0x6be
 8008830:	f000 fe5e 	bl	80094f0 <SUBGRF_WriteRegisters>
            break;
 8008834:	e000      	b.n	8008838 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8008836:	bf00      	nop
    }
}
 8008838:	bf00      	nop
 800883a:	3710      	adds	r7, #16
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}

08008840 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b084      	sub	sp, #16
 8008844:	af00      	add	r7, sp, #0
 8008846:	4603      	mov	r3, r0
 8008848:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 800884a:	2300      	movs	r3, #0
 800884c:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 800884e:	f000 fb35 	bl	8008ebc <SUBGRF_GetPacketType>
 8008852:	4603      	mov	r3, r0
 8008854:	2b00      	cmp	r3, #0
 8008856:	d121      	bne.n	800889c <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8008858:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800885c:	f000 fe34 	bl	80094c8 <SUBGRF_ReadRegister>
 8008860:	4603      	mov	r3, r0
 8008862:	f023 0301 	bic.w	r3, r3, #1
 8008866:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8008868:	88fb      	ldrh	r3, [r7, #6]
 800886a:	0a1b      	lsrs	r3, r3, #8
 800886c:	b29b      	uxth	r3, r3
 800886e:	b25b      	sxtb	r3, r3
 8008870:	f003 0301 	and.w	r3, r3, #1
 8008874:	b25a      	sxtb	r2, r3
 8008876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800887a:	4313      	orrs	r3, r2
 800887c:	b25b      	sxtb	r3, r3
 800887e:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8008880:	7bfb      	ldrb	r3, [r7, #15]
 8008882:	4619      	mov	r1, r3
 8008884:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8008888:	f000 fe0a 	bl	80094a0 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 800888c:	88fb      	ldrh	r3, [r7, #6]
 800888e:	b2db      	uxtb	r3, r3
 8008890:	4619      	mov	r1, r3
 8008892:	f240 60b9 	movw	r0, #1721	; 0x6b9
 8008896:	f000 fe03 	bl	80094a0 <SUBGRF_WriteRegister>
            break;
 800889a:	e000      	b.n	800889e <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 800889c:	bf00      	nop
    }
}
 800889e:	bf00      	nop
 80088a0:	3710      	adds	r7, #16
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}

080088a6 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 80088a6:	b580      	push	{r7, lr}
 80088a8:	b082      	sub	sp, #8
 80088aa:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 80088ac:	2300      	movs	r3, #0
 80088ae:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 80088b0:	2300      	movs	r3, #0
 80088b2:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 80088b4:	2300      	movs	r3, #0
 80088b6:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 80088b8:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80088bc:	f000 fe04 	bl	80094c8 <SUBGRF_ReadRegister>
 80088c0:	4603      	mov	r3, r0
 80088c2:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 80088c4:	79fb      	ldrb	r3, [r7, #7]
 80088c6:	f023 0301 	bic.w	r3, r3, #1
 80088ca:	b2db      	uxtb	r3, r3
 80088cc:	4619      	mov	r1, r3
 80088ce:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80088d2:	f000 fde5 	bl	80094a0 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 80088d6:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80088da:	f000 fdf5 	bl	80094c8 <SUBGRF_ReadRegister>
 80088de:	4603      	mov	r3, r0
 80088e0:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 80088e2:	79bb      	ldrb	r3, [r7, #6]
 80088e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088e8:	b2db      	uxtb	r3, r3
 80088ea:	4619      	mov	r1, r3
 80088ec:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80088f0:	f000 fdd6 	bl	80094a0 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 80088f4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80088f8:	f000 f88a 	bl	8008a10 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 80088fc:	463b      	mov	r3, r7
 80088fe:	2204      	movs	r2, #4
 8008900:	4619      	mov	r1, r3
 8008902:	f640 0019 	movw	r0, #2073	; 0x819
 8008906:	f000 fe15 	bl	8009534 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 800890a:	2000      	movs	r0, #0
 800890c:	f000 f844 	bl	8008998 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8008910:	79fb      	ldrb	r3, [r7, #7]
 8008912:	4619      	mov	r1, r3
 8008914:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8008918:	f000 fdc2 	bl	80094a0 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 800891c:	79bb      	ldrb	r3, [r7, #6]
 800891e:	4619      	mov	r1, r3
 8008920:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8008924:	f000 fdbc 	bl	80094a0 <SUBGRF_WriteRegister>

    return number;
 8008928:	683b      	ldr	r3, [r7, #0]
}
 800892a:	4618      	mov	r0, r3
 800892c:	3708      	adds	r7, #8
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}
	...

08008934 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b084      	sub	sp, #16
 8008938:	af00      	add	r7, sp, #0
 800893a:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 800893c:	2000      	movs	r0, #0
 800893e:	f001 f999 	bl	8009c74 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8008942:	2002      	movs	r0, #2
 8008944:	f000 ffa4 	bl	8009890 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8008948:	793b      	ldrb	r3, [r7, #4]
 800894a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800894e:	b2db      	uxtb	r3, r3
 8008950:	009b      	lsls	r3, r3, #2
 8008952:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8008954:	793b      	ldrb	r3, [r7, #4]
 8008956:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800895a:	b2db      	uxtb	r3, r3
 800895c:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800895e:	b25b      	sxtb	r3, r3
 8008960:	4313      	orrs	r3, r2
 8008962:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8008964:	793b      	ldrb	r3, [r7, #4]
 8008966:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800896a:	b2db      	uxtb	r3, r3
 800896c:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800896e:	4313      	orrs	r3, r2
 8008970:	b25b      	sxtb	r3, r3
 8008972:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8008974:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8008976:	f107 030f 	add.w	r3, r7, #15
 800897a:	2201      	movs	r2, #1
 800897c:	4619      	mov	r1, r3
 800897e:	2084      	movs	r0, #132	; 0x84
 8008980:	f000 fe3e 	bl	8009600 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8008984:	4b03      	ldr	r3, [pc, #12]	; (8008994 <SUBGRF_SetSleep+0x60>)
 8008986:	2200      	movs	r2, #0
 8008988:	701a      	strb	r2, [r3, #0]
}
 800898a:	bf00      	nop
 800898c:	3710      	adds	r7, #16
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}
 8008992:	bf00      	nop
 8008994:	20000544 	.word	0x20000544

08008998 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b082      	sub	sp, #8
 800899c:	af00      	add	r7, sp, #0
 800899e:	4603      	mov	r3, r0
 80089a0:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 80089a2:	1dfb      	adds	r3, r7, #7
 80089a4:	2201      	movs	r2, #1
 80089a6:	4619      	mov	r1, r3
 80089a8:	2080      	movs	r0, #128	; 0x80
 80089aa:	f000 fe29 	bl	8009600 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 80089ae:	79fb      	ldrb	r3, [r7, #7]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d103      	bne.n	80089bc <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 80089b4:	4b05      	ldr	r3, [pc, #20]	; (80089cc <SUBGRF_SetStandby+0x34>)
 80089b6:	2201      	movs	r2, #1
 80089b8:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 80089ba:	e002      	b.n	80089c2 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 80089bc:	4b03      	ldr	r3, [pc, #12]	; (80089cc <SUBGRF_SetStandby+0x34>)
 80089be:	2202      	movs	r2, #2
 80089c0:	701a      	strb	r2, [r3, #0]
}
 80089c2:	bf00      	nop
 80089c4:	3708      	adds	r7, #8
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}
 80089ca:	bf00      	nop
 80089cc:	20000544 	.word	0x20000544

080089d0 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b084      	sub	sp, #16
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 80089d8:	4b0c      	ldr	r3, [pc, #48]	; (8008a0c <SUBGRF_SetTx+0x3c>)
 80089da:	2204      	movs	r2, #4
 80089dc:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	0c1b      	lsrs	r3, r3, #16
 80089e2:	b2db      	uxtb	r3, r3
 80089e4:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	0a1b      	lsrs	r3, r3, #8
 80089ea:	b2db      	uxtb	r3, r3
 80089ec:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	b2db      	uxtb	r3, r3
 80089f2:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 80089f4:	f107 030c 	add.w	r3, r7, #12
 80089f8:	2203      	movs	r2, #3
 80089fa:	4619      	mov	r1, r3
 80089fc:	2083      	movs	r0, #131	; 0x83
 80089fe:	f000 fdff 	bl	8009600 <SUBGRF_WriteCommand>
}
 8008a02:	bf00      	nop
 8008a04:	3710      	adds	r7, #16
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
 8008a0a:	bf00      	nop
 8008a0c:	20000544 	.word	0x20000544

08008a10 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b084      	sub	sp, #16
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8008a18:	4b0c      	ldr	r3, [pc, #48]	; (8008a4c <SUBGRF_SetRx+0x3c>)
 8008a1a:	2205      	movs	r2, #5
 8008a1c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	0c1b      	lsrs	r3, r3, #16
 8008a22:	b2db      	uxtb	r3, r3
 8008a24:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	0a1b      	lsrs	r3, r3, #8
 8008a2a:	b2db      	uxtb	r3, r3
 8008a2c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	b2db      	uxtb	r3, r3
 8008a32:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8008a34:	f107 030c 	add.w	r3, r7, #12
 8008a38:	2203      	movs	r2, #3
 8008a3a:	4619      	mov	r1, r3
 8008a3c:	2082      	movs	r0, #130	; 0x82
 8008a3e:	f000 fddf 	bl	8009600 <SUBGRF_WriteCommand>
}
 8008a42:	bf00      	nop
 8008a44:	3710      	adds	r7, #16
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}
 8008a4a:	bf00      	nop
 8008a4c:	20000544 	.word	0x20000544

08008a50 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b084      	sub	sp, #16
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8008a58:	4b0e      	ldr	r3, [pc, #56]	; (8008a94 <SUBGRF_SetRxBoosted+0x44>)
 8008a5a:	2205      	movs	r2, #5
 8008a5c:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8008a5e:	2197      	movs	r1, #151	; 0x97
 8008a60:	f640 00ac 	movw	r0, #2220	; 0x8ac
 8008a64:	f000 fd1c 	bl	80094a0 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	0c1b      	lsrs	r3, r3, #16
 8008a6c:	b2db      	uxtb	r3, r3
 8008a6e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	0a1b      	lsrs	r3, r3, #8
 8008a74:	b2db      	uxtb	r3, r3
 8008a76:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	b2db      	uxtb	r3, r3
 8008a7c:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8008a7e:	f107 030c 	add.w	r3, r7, #12
 8008a82:	2203      	movs	r2, #3
 8008a84:	4619      	mov	r1, r3
 8008a86:	2082      	movs	r0, #130	; 0x82
 8008a88:	f000 fdba 	bl	8009600 <SUBGRF_WriteCommand>
}
 8008a8c:	bf00      	nop
 8008a8e:	3710      	adds	r7, #16
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}
 8008a94:	20000544 	.word	0x20000544

08008a98 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b084      	sub	sp, #16
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
 8008aa0:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	0c1b      	lsrs	r3, r3, #16
 8008aa6:	b2db      	uxtb	r3, r3
 8008aa8:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	0a1b      	lsrs	r3, r3, #8
 8008aae:	b2db      	uxtb	r3, r3
 8008ab0:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	b2db      	uxtb	r3, r3
 8008ab6:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	0c1b      	lsrs	r3, r3, #16
 8008abc:	b2db      	uxtb	r3, r3
 8008abe:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	0a1b      	lsrs	r3, r3, #8
 8008ac4:	b2db      	uxtb	r3, r3
 8008ac6:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	b2db      	uxtb	r3, r3
 8008acc:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8008ace:	f107 0308 	add.w	r3, r7, #8
 8008ad2:	2206      	movs	r2, #6
 8008ad4:	4619      	mov	r1, r3
 8008ad6:	2094      	movs	r0, #148	; 0x94
 8008ad8:	f000 fd92 	bl	8009600 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8008adc:	4b03      	ldr	r3, [pc, #12]	; (8008aec <SUBGRF_SetRxDutyCycle+0x54>)
 8008ade:	2206      	movs	r2, #6
 8008ae0:	701a      	strb	r2, [r3, #0]
}
 8008ae2:	bf00      	nop
 8008ae4:	3710      	adds	r7, #16
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}
 8008aea:	bf00      	nop
 8008aec:	20000544 	.word	0x20000544

08008af0 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8008af4:	2200      	movs	r2, #0
 8008af6:	2100      	movs	r1, #0
 8008af8:	20c5      	movs	r0, #197	; 0xc5
 8008afa:	f000 fd81 	bl	8009600 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8008afe:	4b02      	ldr	r3, [pc, #8]	; (8008b08 <SUBGRF_SetCad+0x18>)
 8008b00:	2207      	movs	r2, #7
 8008b02:	701a      	strb	r2, [r3, #0]
}
 8008b04:	bf00      	nop
 8008b06:	bd80      	pop	{r7, pc}
 8008b08:	20000544 	.word	0x20000544

08008b0c <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8008b10:	2200      	movs	r2, #0
 8008b12:	2100      	movs	r1, #0
 8008b14:	20d1      	movs	r0, #209	; 0xd1
 8008b16:	f000 fd73 	bl	8009600 <SUBGRF_WriteCommand>
}
 8008b1a:	bf00      	nop
 8008b1c:	bd80      	pop	{r7, pc}

08008b1e <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 8008b1e:	b580      	push	{r7, lr}
 8008b20:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8008b22:	2200      	movs	r2, #0
 8008b24:	2100      	movs	r1, #0
 8008b26:	20d2      	movs	r0, #210	; 0xd2
 8008b28:	f000 fd6a 	bl	8009600 <SUBGRF_WriteCommand>
}
 8008b2c:	bf00      	nop
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b082      	sub	sp, #8
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	4603      	mov	r3, r0
 8008b38:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8008b3a:	1dfb      	adds	r3, r7, #7
 8008b3c:	2201      	movs	r2, #1
 8008b3e:	4619      	mov	r1, r3
 8008b40:	209f      	movs	r0, #159	; 0x9f
 8008b42:	f000 fd5d 	bl	8009600 <SUBGRF_WriteCommand>
}
 8008b46:	bf00      	nop
 8008b48:	3708      	adds	r7, #8
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}

08008b4e <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 8008b4e:	b580      	push	{r7, lr}
 8008b50:	b084      	sub	sp, #16
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	4603      	mov	r3, r0
 8008b56:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8008b58:	1dfb      	adds	r3, r7, #7
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	4619      	mov	r1, r3
 8008b5e:	20a0      	movs	r0, #160	; 0xa0
 8008b60:	f000 fd4e 	bl	8009600 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 8008b64:	79fb      	ldrb	r3, [r7, #7]
 8008b66:	2b3f      	cmp	r3, #63	; 0x3f
 8008b68:	d91c      	bls.n	8008ba4 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 8008b6a:	79fb      	ldrb	r3, [r7, #7]
 8008b6c:	085b      	lsrs	r3, r3, #1
 8008b6e:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 8008b70:	2300      	movs	r3, #0
 8008b72:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 8008b74:	2300      	movs	r3, #0
 8008b76:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 8008b78:	e005      	b.n	8008b86 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 8008b7a:	7bfb      	ldrb	r3, [r7, #15]
 8008b7c:	089b      	lsrs	r3, r3, #2
 8008b7e:	73fb      	strb	r3, [r7, #15]
            exp++;
 8008b80:	7bbb      	ldrb	r3, [r7, #14]
 8008b82:	3301      	adds	r3, #1
 8008b84:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 8008b86:	7bfb      	ldrb	r3, [r7, #15]
 8008b88:	2b1f      	cmp	r3, #31
 8008b8a:	d8f6      	bhi.n	8008b7a <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 8008b8c:	7bfb      	ldrb	r3, [r7, #15]
 8008b8e:	00db      	lsls	r3, r3, #3
 8008b90:	b2da      	uxtb	r2, r3
 8008b92:	7bbb      	ldrb	r3, [r7, #14]
 8008b94:	4413      	add	r3, r2
 8008b96:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8008b98:	7b7b      	ldrb	r3, [r7, #13]
 8008b9a:	4619      	mov	r1, r3
 8008b9c:	f240 7006 	movw	r0, #1798	; 0x706
 8008ba0:	f000 fc7e 	bl	80094a0 <SUBGRF_WriteRegister>
    }
}
 8008ba4:	bf00      	nop
 8008ba6:	3710      	adds	r7, #16
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}

08008bac <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b082      	sub	sp, #8
 8008bb0:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8008bb2:	f001 f8d3 	bl	8009d5c <RBI_IsDCDC>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d102      	bne.n	8008bc2 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	71fb      	strb	r3, [r7, #7]
 8008bc0:	e001      	b.n	8008bc6 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8008bc6:	1dfb      	adds	r3, r7, #7
 8008bc8:	2201      	movs	r2, #1
 8008bca:	4619      	mov	r1, r3
 8008bcc:	2096      	movs	r0, #150	; 0x96
 8008bce:	f000 fd17 	bl	8009600 <SUBGRF_WriteCommand>
}
 8008bd2:	bf00      	nop
 8008bd4:	3708      	adds	r7, #8
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}

08008bda <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 8008bda:	b580      	push	{r7, lr}
 8008bdc:	b084      	sub	sp, #16
 8008bde:	af00      	add	r7, sp, #0
 8008be0:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8008be2:	793b      	ldrb	r3, [r7, #4]
 8008be4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8008be8:	b2db      	uxtb	r3, r3
 8008bea:	019b      	lsls	r3, r3, #6
 8008bec:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8008bee:	793b      	ldrb	r3, [r7, #4]
 8008bf0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8008bf4:	b2db      	uxtb	r3, r3
 8008bf6:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8008bf8:	b25b      	sxtb	r3, r3
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8008bfe:	793b      	ldrb	r3, [r7, #4]
 8008c00:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8008c04:	b2db      	uxtb	r3, r3
 8008c06:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8008c08:	b25b      	sxtb	r3, r3
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8008c0e:	793b      	ldrb	r3, [r7, #4]
 8008c10:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008c14:	b2db      	uxtb	r3, r3
 8008c16:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8008c18:	b25b      	sxtb	r3, r3
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8008c1e:	793b      	ldrb	r3, [r7, #4]
 8008c20:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008c24:	b2db      	uxtb	r3, r3
 8008c26:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8008c28:	b25b      	sxtb	r3, r3
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8008c2e:	793b      	ldrb	r3, [r7, #4]
 8008c30:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008c34:	b2db      	uxtb	r3, r3
 8008c36:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8008c38:	b25b      	sxtb	r3, r3
 8008c3a:	4313      	orrs	r3, r2
 8008c3c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8008c3e:	793b      	ldrb	r3, [r7, #4]
 8008c40:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008c44:	b2db      	uxtb	r3, r3
 8008c46:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8008c48:	4313      	orrs	r3, r2
 8008c4a:	b25b      	sxtb	r3, r3
 8008c4c:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8008c4e:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8008c50:	f107 030f 	add.w	r3, r7, #15
 8008c54:	2201      	movs	r2, #1
 8008c56:	4619      	mov	r1, r3
 8008c58:	2089      	movs	r0, #137	; 0x89
 8008c5a:	f000 fcd1 	bl	8009600 <SUBGRF_WriteCommand>
}
 8008c5e:	bf00      	nop
 8008c60:	3710      	adds	r7, #16
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}
	...

08008c68 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b084      	sub	sp, #16
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	4a1d      	ldr	r2, [pc, #116]	; (8008ce8 <SUBGRF_CalibrateImage+0x80>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d904      	bls.n	8008c82 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8008c78:	23e1      	movs	r3, #225	; 0xe1
 8008c7a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8008c7c:	23e9      	movs	r3, #233	; 0xe9
 8008c7e:	737b      	strb	r3, [r7, #13]
 8008c80:	e027      	b.n	8008cd2 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	4a19      	ldr	r2, [pc, #100]	; (8008cec <SUBGRF_CalibrateImage+0x84>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d904      	bls.n	8008c94 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 8008c8a:	23d7      	movs	r3, #215	; 0xd7
 8008c8c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 8008c8e:	23db      	movs	r3, #219	; 0xdb
 8008c90:	737b      	strb	r3, [r7, #13]
 8008c92:	e01e      	b.n	8008cd2 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	4a16      	ldr	r2, [pc, #88]	; (8008cf0 <SUBGRF_CalibrateImage+0x88>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d904      	bls.n	8008ca6 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 8008c9c:	23c1      	movs	r3, #193	; 0xc1
 8008c9e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8008ca0:	23c5      	movs	r3, #197	; 0xc5
 8008ca2:	737b      	strb	r3, [r7, #13]
 8008ca4:	e015      	b.n	8008cd2 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	4a12      	ldr	r2, [pc, #72]	; (8008cf4 <SUBGRF_CalibrateImage+0x8c>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d904      	bls.n	8008cb8 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 8008cae:	2375      	movs	r3, #117	; 0x75
 8008cb0:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 8008cb2:	2381      	movs	r3, #129	; 0x81
 8008cb4:	737b      	strb	r3, [r7, #13]
 8008cb6:	e00c      	b.n	8008cd2 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	4a0f      	ldr	r2, [pc, #60]	; (8008cf8 <SUBGRF_CalibrateImage+0x90>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d904      	bls.n	8008cca <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 8008cc0:	236b      	movs	r3, #107	; 0x6b
 8008cc2:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 8008cc4:	236f      	movs	r3, #111	; 0x6f
 8008cc6:	737b      	strb	r3, [r7, #13]
 8008cc8:	e003      	b.n	8008cd2 <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 8008cca:	2329      	movs	r3, #41	; 0x29
 8008ccc:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 8008cce:	232b      	movs	r3, #43	; 0x2b
 8008cd0:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8008cd2:	f107 030c 	add.w	r3, r7, #12
 8008cd6:	2202      	movs	r2, #2
 8008cd8:	4619      	mov	r1, r3
 8008cda:	2098      	movs	r0, #152	; 0x98
 8008cdc:	f000 fc90 	bl	8009600 <SUBGRF_WriteCommand>
}
 8008ce0:	bf00      	nop
 8008ce2:	3710      	adds	r7, #16
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}
 8008ce8:	35a4e900 	.word	0x35a4e900
 8008cec:	32a9f880 	.word	0x32a9f880
 8008cf0:	2de54480 	.word	0x2de54480
 8008cf4:	1b6b0b00 	.word	0x1b6b0b00
 8008cf8:	1954fc40 	.word	0x1954fc40

08008cfc <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 8008cfc:	b590      	push	{r4, r7, lr}
 8008cfe:	b085      	sub	sp, #20
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	4604      	mov	r4, r0
 8008d04:	4608      	mov	r0, r1
 8008d06:	4611      	mov	r1, r2
 8008d08:	461a      	mov	r2, r3
 8008d0a:	4623      	mov	r3, r4
 8008d0c:	71fb      	strb	r3, [r7, #7]
 8008d0e:	4603      	mov	r3, r0
 8008d10:	71bb      	strb	r3, [r7, #6]
 8008d12:	460b      	mov	r3, r1
 8008d14:	717b      	strb	r3, [r7, #5]
 8008d16:	4613      	mov	r3, r2
 8008d18:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 8008d1a:	79fb      	ldrb	r3, [r7, #7]
 8008d1c:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 8008d1e:	79bb      	ldrb	r3, [r7, #6]
 8008d20:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8008d22:	797b      	ldrb	r3, [r7, #5]
 8008d24:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 8008d26:	793b      	ldrb	r3, [r7, #4]
 8008d28:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8008d2a:	f107 030c 	add.w	r3, r7, #12
 8008d2e:	2204      	movs	r2, #4
 8008d30:	4619      	mov	r1, r3
 8008d32:	2095      	movs	r0, #149	; 0x95
 8008d34:	f000 fc64 	bl	8009600 <SUBGRF_WriteCommand>
}
 8008d38:	bf00      	nop
 8008d3a:	3714      	adds	r7, #20
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd90      	pop	{r4, r7, pc}

08008d40 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8008d40:	b590      	push	{r4, r7, lr}
 8008d42:	b085      	sub	sp, #20
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	4604      	mov	r4, r0
 8008d48:	4608      	mov	r0, r1
 8008d4a:	4611      	mov	r1, r2
 8008d4c:	461a      	mov	r2, r3
 8008d4e:	4623      	mov	r3, r4
 8008d50:	80fb      	strh	r3, [r7, #6]
 8008d52:	4603      	mov	r3, r0
 8008d54:	80bb      	strh	r3, [r7, #4]
 8008d56:	460b      	mov	r3, r1
 8008d58:	807b      	strh	r3, [r7, #2]
 8008d5a:	4613      	mov	r3, r2
 8008d5c:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8008d5e:	88fb      	ldrh	r3, [r7, #6]
 8008d60:	0a1b      	lsrs	r3, r3, #8
 8008d62:	b29b      	uxth	r3, r3
 8008d64:	b2db      	uxtb	r3, r3
 8008d66:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8008d68:	88fb      	ldrh	r3, [r7, #6]
 8008d6a:	b2db      	uxtb	r3, r3
 8008d6c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8008d6e:	88bb      	ldrh	r3, [r7, #4]
 8008d70:	0a1b      	lsrs	r3, r3, #8
 8008d72:	b29b      	uxth	r3, r3
 8008d74:	b2db      	uxtb	r3, r3
 8008d76:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8008d78:	88bb      	ldrh	r3, [r7, #4]
 8008d7a:	b2db      	uxtb	r3, r3
 8008d7c:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8008d7e:	887b      	ldrh	r3, [r7, #2]
 8008d80:	0a1b      	lsrs	r3, r3, #8
 8008d82:	b29b      	uxth	r3, r3
 8008d84:	b2db      	uxtb	r3, r3
 8008d86:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8008d88:	887b      	ldrh	r3, [r7, #2]
 8008d8a:	b2db      	uxtb	r3, r3
 8008d8c:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8008d8e:	883b      	ldrh	r3, [r7, #0]
 8008d90:	0a1b      	lsrs	r3, r3, #8
 8008d92:	b29b      	uxth	r3, r3
 8008d94:	b2db      	uxtb	r3, r3
 8008d96:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8008d98:	883b      	ldrh	r3, [r7, #0]
 8008d9a:	b2db      	uxtb	r3, r3
 8008d9c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8008d9e:	f107 0308 	add.w	r3, r7, #8
 8008da2:	2208      	movs	r2, #8
 8008da4:	4619      	mov	r1, r3
 8008da6:	2008      	movs	r0, #8
 8008da8:	f000 fc2a 	bl	8009600 <SUBGRF_WriteCommand>
}
 8008dac:	bf00      	nop
 8008dae:	3714      	adds	r7, #20
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd90      	pop	{r4, r7, pc}

08008db4 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b084      	sub	sp, #16
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	4603      	mov	r3, r0
 8008dbc:	6039      	str	r1, [r7, #0]
 8008dbe:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 8008dc0:	79fb      	ldrb	r3, [r7, #7]
 8008dc2:	f003 0307 	and.w	r3, r3, #7
 8008dc6:	b2db      	uxtb	r3, r3
 8008dc8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	0c1b      	lsrs	r3, r3, #16
 8008dce:	b2db      	uxtb	r3, r3
 8008dd0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	0a1b      	lsrs	r3, r3, #8
 8008dd6:	b2db      	uxtb	r3, r3
 8008dd8:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	b2db      	uxtb	r3, r3
 8008dde:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8008de0:	f107 030c 	add.w	r3, r7, #12
 8008de4:	2204      	movs	r2, #4
 8008de6:	4619      	mov	r1, r3
 8008de8:	2097      	movs	r0, #151	; 0x97
 8008dea:	f000 fc09 	bl	8009600 <SUBGRF_WriteCommand>
}
 8008dee:	bf00      	nop
 8008df0:	3710      	adds	r7, #16
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
	...

08008df8 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 8008df8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008dfc:	b084      	sub	sp, #16
 8008dfe:	af00      	add	r7, sp, #0
 8008e00:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 8008e02:	2300      	movs	r3, #0
 8008e04:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 8008e06:	4b1d      	ldr	r3, [pc, #116]	; (8008e7c <SUBGRF_SetRfFrequency+0x84>)
 8008e08:	781b      	ldrb	r3, [r3, #0]
 8008e0a:	f083 0301 	eor.w	r3, r3, #1
 8008e0e:	b2db      	uxtb	r3, r3
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d005      	beq.n	8008e20 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f7ff ff27 	bl	8008c68 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8008e1a:	4b18      	ldr	r3, [pc, #96]	; (8008e7c <SUBGRF_SetRfFrequency+0x84>)
 8008e1c:	2201      	movs	r2, #1
 8008e1e:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2200      	movs	r2, #0
 8008e24:	461c      	mov	r4, r3
 8008e26:	4615      	mov	r5, r2
 8008e28:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8008e2c:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8008e30:	4a13      	ldr	r2, [pc, #76]	; (8008e80 <SUBGRF_SetRfFrequency+0x88>)
 8008e32:	f04f 0300 	mov.w	r3, #0
 8008e36:	4640      	mov	r0, r8
 8008e38:	4649      	mov	r1, r9
 8008e3a:	f7f7 f9f1 	bl	8000220 <__aeabi_uldivmod>
 8008e3e:	4602      	mov	r2, r0
 8008e40:	460b      	mov	r3, r1
 8008e42:	4613      	mov	r3, r2
 8008e44:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	0e1b      	lsrs	r3, r3, #24
 8008e4a:	b2db      	uxtb	r3, r3
 8008e4c:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	0c1b      	lsrs	r3, r3, #16
 8008e52:	b2db      	uxtb	r3, r3
 8008e54:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	0a1b      	lsrs	r3, r3, #8
 8008e5a:	b2db      	uxtb	r3, r3
 8008e5c:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	b2db      	uxtb	r3, r3
 8008e62:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8008e64:	f107 0308 	add.w	r3, r7, #8
 8008e68:	2204      	movs	r2, #4
 8008e6a:	4619      	mov	r1, r3
 8008e6c:	2086      	movs	r0, #134	; 0x86
 8008e6e:	f000 fbc7 	bl	8009600 <SUBGRF_WriteCommand>
}
 8008e72:	bf00      	nop
 8008e74:	3710      	adds	r7, #16
 8008e76:	46bd      	mov	sp, r7
 8008e78:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008e7c:	2000054c 	.word	0x2000054c
 8008e80:	01e84800 	.word	0x01e84800

08008e84 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b082      	sub	sp, #8
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 8008e8e:	79fa      	ldrb	r2, [r7, #7]
 8008e90:	4b09      	ldr	r3, [pc, #36]	; (8008eb8 <SUBGRF_SetPacketType+0x34>)
 8008e92:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8008e94:	79fb      	ldrb	r3, [r7, #7]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d104      	bne.n	8008ea4 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8008e9a:	2100      	movs	r1, #0
 8008e9c:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8008ea0:	f000 fafe 	bl	80094a0 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8008ea4:	1dfb      	adds	r3, r7, #7
 8008ea6:	2201      	movs	r2, #1
 8008ea8:	4619      	mov	r1, r3
 8008eaa:	208a      	movs	r0, #138	; 0x8a
 8008eac:	f000 fba8 	bl	8009600 <SUBGRF_WriteCommand>
}
 8008eb0:	bf00      	nop
 8008eb2:	3708      	adds	r7, #8
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}
 8008eb8:	20000545 	.word	0x20000545

08008ebc <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	af00      	add	r7, sp, #0
    return PacketType;
 8008ec0:	4b02      	ldr	r3, [pc, #8]	; (8008ecc <SUBGRF_GetPacketType+0x10>)
 8008ec2:	781b      	ldrb	r3, [r3, #0]
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bc80      	pop	{r7}
 8008eca:	4770      	bx	lr
 8008ecc:	20000545 	.word	0x20000545

08008ed0 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b084      	sub	sp, #16
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	71fb      	strb	r3, [r7, #7]
 8008eda:	460b      	mov	r3, r1
 8008edc:	71bb      	strb	r3, [r7, #6]
 8008ede:	4613      	mov	r3, r2
 8008ee0:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 8008ee2:	79fb      	ldrb	r3, [r7, #7]
 8008ee4:	2b01      	cmp	r3, #1
 8008ee6:	d149      	bne.n	8008f7c <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 8008ee8:	2000      	movs	r0, #0
 8008eea:	f000 ff42 	bl	8009d72 <RBI_GetRFOMaxPowerConfig>
 8008eee:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 8008ef0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8008ef4:	68fa      	ldr	r2, [r7, #12]
 8008ef6:	429a      	cmp	r2, r3
 8008ef8:	da01      	bge.n	8008efe <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	2b0e      	cmp	r3, #14
 8008f02:	d10e      	bne.n	8008f22 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8008f04:	2301      	movs	r3, #1
 8008f06:	2201      	movs	r2, #1
 8008f08:	2100      	movs	r1, #0
 8008f0a:	2004      	movs	r0, #4
 8008f0c:	f7ff fef6 	bl	8008cfc <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8008f10:	79ba      	ldrb	r2, [r7, #6]
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	b2db      	uxtb	r3, r3
 8008f16:	1ad3      	subs	r3, r2, r3
 8008f18:	b2db      	uxtb	r3, r3
 8008f1a:	330e      	adds	r3, #14
 8008f1c:	b2db      	uxtb	r3, r3
 8008f1e:	71bb      	strb	r3, [r7, #6]
 8008f20:	e01f      	b.n	8008f62 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	2b0a      	cmp	r3, #10
 8008f26:	d10e      	bne.n	8008f46 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8008f28:	2301      	movs	r3, #1
 8008f2a:	2201      	movs	r2, #1
 8008f2c:	2100      	movs	r1, #0
 8008f2e:	2001      	movs	r0, #1
 8008f30:	f7ff fee4 	bl	8008cfc <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 8008f34:	79ba      	ldrb	r2, [r7, #6]
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	b2db      	uxtb	r3, r3
 8008f3a:	1ad3      	subs	r3, r2, r3
 8008f3c:	b2db      	uxtb	r3, r3
 8008f3e:	330d      	adds	r3, #13
 8008f40:	b2db      	uxtb	r3, r3
 8008f42:	71bb      	strb	r3, [r7, #6]
 8008f44:	e00d      	b.n	8008f62 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 8008f46:	2301      	movs	r3, #1
 8008f48:	2201      	movs	r2, #1
 8008f4a:	2100      	movs	r1, #0
 8008f4c:	2007      	movs	r0, #7
 8008f4e:	f7ff fed5 	bl	8008cfc <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8008f52:	79ba      	ldrb	r2, [r7, #6]
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	b2db      	uxtb	r3, r3
 8008f58:	1ad3      	subs	r3, r2, r3
 8008f5a:	b2db      	uxtb	r3, r3
 8008f5c:	330e      	adds	r3, #14
 8008f5e:	b2db      	uxtb	r3, r3
 8008f60:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 8008f62:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8008f66:	f113 0f11 	cmn.w	r3, #17
 8008f6a:	da01      	bge.n	8008f70 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 8008f6c:	23ef      	movs	r3, #239	; 0xef
 8008f6e:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8008f70:	2118      	movs	r1, #24
 8008f72:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8008f76:	f000 fa93 	bl	80094a0 <SUBGRF_WriteRegister>
 8008f7a:	e067      	b.n	800904c <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8008f7c:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8008f80:	f000 faa2 	bl	80094c8 <SUBGRF_ReadRegister>
 8008f84:	4603      	mov	r3, r0
 8008f86:	f043 031e 	orr.w	r3, r3, #30
 8008f8a:	b2db      	uxtb	r3, r3
 8008f8c:	4619      	mov	r1, r3
 8008f8e:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8008f92:	f000 fa85 	bl	80094a0 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 8008f96:	2001      	movs	r0, #1
 8008f98:	f000 feeb 	bl	8009d72 <RBI_GetRFOMaxPowerConfig>
 8008f9c:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 8008f9e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8008fa2:	68fa      	ldr	r2, [r7, #12]
 8008fa4:	429a      	cmp	r2, r3
 8008fa6:	da01      	bge.n	8008fac <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	2b14      	cmp	r3, #20
 8008fb0:	d10e      	bne.n	8008fd0 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	2105      	movs	r1, #5
 8008fb8:	2003      	movs	r0, #3
 8008fba:	f7ff fe9f 	bl	8008cfc <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8008fbe:	79ba      	ldrb	r2, [r7, #6]
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	b2db      	uxtb	r3, r3
 8008fc4:	1ad3      	subs	r3, r2, r3
 8008fc6:	b2db      	uxtb	r3, r3
 8008fc8:	3316      	adds	r3, #22
 8008fca:	b2db      	uxtb	r3, r3
 8008fcc:	71bb      	strb	r3, [r7, #6]
 8008fce:	e031      	b.n	8009034 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	2b11      	cmp	r3, #17
 8008fd4:	d10e      	bne.n	8008ff4 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	2200      	movs	r2, #0
 8008fda:	2103      	movs	r1, #3
 8008fdc:	2002      	movs	r0, #2
 8008fde:	f7ff fe8d 	bl	8008cfc <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8008fe2:	79ba      	ldrb	r2, [r7, #6]
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	b2db      	uxtb	r3, r3
 8008fe8:	1ad3      	subs	r3, r2, r3
 8008fea:	b2db      	uxtb	r3, r3
 8008fec:	3316      	adds	r3, #22
 8008fee:	b2db      	uxtb	r3, r3
 8008ff0:	71bb      	strb	r3, [r7, #6]
 8008ff2:	e01f      	b.n	8009034 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	2b0e      	cmp	r3, #14
 8008ff8:	d10e      	bne.n	8009018 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	2102      	movs	r1, #2
 8009000:	2002      	movs	r0, #2
 8009002:	f7ff fe7b 	bl	8008cfc <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8009006:	79ba      	ldrb	r2, [r7, #6]
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	b2db      	uxtb	r3, r3
 800900c:	1ad3      	subs	r3, r2, r3
 800900e:	b2db      	uxtb	r3, r3
 8009010:	330e      	adds	r3, #14
 8009012:	b2db      	uxtb	r3, r3
 8009014:	71bb      	strb	r3, [r7, #6]
 8009016:	e00d      	b.n	8009034 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8009018:	2301      	movs	r3, #1
 800901a:	2200      	movs	r2, #0
 800901c:	2107      	movs	r1, #7
 800901e:	2004      	movs	r0, #4
 8009020:	f7ff fe6c 	bl	8008cfc <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8009024:	79ba      	ldrb	r2, [r7, #6]
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	b2db      	uxtb	r3, r3
 800902a:	1ad3      	subs	r3, r2, r3
 800902c:	b2db      	uxtb	r3, r3
 800902e:	3316      	adds	r3, #22
 8009030:	b2db      	uxtb	r3, r3
 8009032:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 8009034:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8009038:	f113 0f09 	cmn.w	r3, #9
 800903c:	da01      	bge.n	8009042 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 800903e:	23f7      	movs	r3, #247	; 0xf7
 8009040:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 8009042:	2138      	movs	r1, #56	; 0x38
 8009044:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8009048:	f000 fa2a 	bl	80094a0 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 800904c:	79bb      	ldrb	r3, [r7, #6]
 800904e:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 8009050:	797b      	ldrb	r3, [r7, #5]
 8009052:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8009054:	f107 0308 	add.w	r3, r7, #8
 8009058:	2202      	movs	r2, #2
 800905a:	4619      	mov	r1, r3
 800905c:	208e      	movs	r0, #142	; 0x8e
 800905e:	f000 facf 	bl	8009600 <SUBGRF_WriteCommand>
}
 8009062:	bf00      	nop
 8009064:	3710      	adds	r7, #16
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}
	...

0800906c <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 800906c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009070:	b086      	sub	sp, #24
 8009072:	af00      	add	r7, sp, #0
 8009074:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8009076:	2300      	movs	r3, #0
 8009078:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800907a:	4a61      	ldr	r2, [pc, #388]	; (8009200 <SUBGRF_SetModulationParams+0x194>)
 800907c:	f107 0308 	add.w	r3, r7, #8
 8009080:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009084:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	781a      	ldrb	r2, [r3, #0]
 800908c:	4b5d      	ldr	r3, [pc, #372]	; (8009204 <SUBGRF_SetModulationParams+0x198>)
 800908e:	781b      	ldrb	r3, [r3, #0]
 8009090:	429a      	cmp	r2, r3
 8009092:	d004      	beq.n	800909e <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	781b      	ldrb	r3, [r3, #0]
 8009098:	4618      	mov	r0, r3
 800909a:	f7ff fef3 	bl	8008e84 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	781b      	ldrb	r3, [r3, #0]
 80090a2:	2b03      	cmp	r3, #3
 80090a4:	f200 80a5 	bhi.w	80091f2 <SUBGRF_SetModulationParams+0x186>
 80090a8:	a201      	add	r2, pc, #4	; (adr r2, 80090b0 <SUBGRF_SetModulationParams+0x44>)
 80090aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090ae:	bf00      	nop
 80090b0:	080090c1 	.word	0x080090c1
 80090b4:	08009181 	.word	0x08009181
 80090b8:	08009143 	.word	0x08009143
 80090bc:	080091af 	.word	0x080091af
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 80090c0:	2308      	movs	r3, #8
 80090c2:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	685b      	ldr	r3, [r3, #4]
 80090c8:	4a4f      	ldr	r2, [pc, #316]	; (8009208 <SUBGRF_SetModulationParams+0x19c>)
 80090ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80090ce:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80090d0:	697b      	ldr	r3, [r7, #20]
 80090d2:	0c1b      	lsrs	r3, r3, #16
 80090d4:	b2db      	uxtb	r3, r3
 80090d6:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	0a1b      	lsrs	r3, r3, #8
 80090dc:	b2db      	uxtb	r3, r3
 80090de:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	b2db      	uxtb	r3, r3
 80090e4:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	7b1b      	ldrb	r3, [r3, #12]
 80090ea:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	7b5b      	ldrb	r3, [r3, #13]
 80090f0:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	689b      	ldr	r3, [r3, #8]
 80090f6:	2200      	movs	r2, #0
 80090f8:	461c      	mov	r4, r3
 80090fa:	4615      	mov	r5, r2
 80090fc:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8009100:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8009104:	4a41      	ldr	r2, [pc, #260]	; (800920c <SUBGRF_SetModulationParams+0x1a0>)
 8009106:	f04f 0300 	mov.w	r3, #0
 800910a:	4640      	mov	r0, r8
 800910c:	4649      	mov	r1, r9
 800910e:	f7f7 f887 	bl	8000220 <__aeabi_uldivmod>
 8009112:	4602      	mov	r2, r0
 8009114:	460b      	mov	r3, r1
 8009116:	4613      	mov	r3, r2
 8009118:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	0c1b      	lsrs	r3, r3, #16
 800911e:	b2db      	uxtb	r3, r3
 8009120:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	0a1b      	lsrs	r3, r3, #8
 8009126:	b2db      	uxtb	r3, r3
 8009128:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	b2db      	uxtb	r3, r3
 800912e:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8009130:	7cfb      	ldrb	r3, [r7, #19]
 8009132:	b29a      	uxth	r2, r3
 8009134:	f107 0308 	add.w	r3, r7, #8
 8009138:	4619      	mov	r1, r3
 800913a:	208b      	movs	r0, #139	; 0x8b
 800913c:	f000 fa60 	bl	8009600 <SUBGRF_WriteCommand>
        break;
 8009140:	e058      	b.n	80091f4 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 8009142:	2304      	movs	r3, #4
 8009144:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	691b      	ldr	r3, [r3, #16]
 800914a:	4a2f      	ldr	r2, [pc, #188]	; (8009208 <SUBGRF_SetModulationParams+0x19c>)
 800914c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009150:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8009152:	697b      	ldr	r3, [r7, #20]
 8009154:	0c1b      	lsrs	r3, r3, #16
 8009156:	b2db      	uxtb	r3, r3
 8009158:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	0a1b      	lsrs	r3, r3, #8
 800915e:	b2db      	uxtb	r3, r3
 8009160:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	b2db      	uxtb	r3, r3
 8009166:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	7d1b      	ldrb	r3, [r3, #20]
 800916c:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800916e:	7cfb      	ldrb	r3, [r7, #19]
 8009170:	b29a      	uxth	r2, r3
 8009172:	f107 0308 	add.w	r3, r7, #8
 8009176:	4619      	mov	r1, r3
 8009178:	208b      	movs	r0, #139	; 0x8b
 800917a:	f000 fa41 	bl	8009600 <SUBGRF_WriteCommand>
        break;
 800917e:	e039      	b.n	80091f4 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 8009180:	2304      	movs	r3, #4
 8009182:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	7e1b      	ldrb	r3, [r3, #24]
 8009188:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	7e5b      	ldrb	r3, [r3, #25]
 800918e:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	7e9b      	ldrb	r3, [r3, #26]
 8009194:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	7edb      	ldrb	r3, [r3, #27]
 800919a:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800919c:	7cfb      	ldrb	r3, [r7, #19]
 800919e:	b29a      	uxth	r2, r3
 80091a0:	f107 0308 	add.w	r3, r7, #8
 80091a4:	4619      	mov	r1, r3
 80091a6:	208b      	movs	r0, #139	; 0x8b
 80091a8:	f000 fa2a 	bl	8009600 <SUBGRF_WriteCommand>

        break;
 80091ac:	e022      	b.n	80091f4 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 80091ae:	2305      	movs	r3, #5
 80091b0:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	685b      	ldr	r3, [r3, #4]
 80091b6:	4a14      	ldr	r2, [pc, #80]	; (8009208 <SUBGRF_SetModulationParams+0x19c>)
 80091b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80091bc:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80091be:	697b      	ldr	r3, [r7, #20]
 80091c0:	0c1b      	lsrs	r3, r3, #16
 80091c2:	b2db      	uxtb	r3, r3
 80091c4:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	0a1b      	lsrs	r3, r3, #8
 80091ca:	b2db      	uxtb	r3, r3
 80091cc:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	b2db      	uxtb	r3, r3
 80091d2:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	7b1b      	ldrb	r3, [r3, #12]
 80091d8:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	7b5b      	ldrb	r3, [r3, #13]
 80091de:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80091e0:	7cfb      	ldrb	r3, [r7, #19]
 80091e2:	b29a      	uxth	r2, r3
 80091e4:	f107 0308 	add.w	r3, r7, #8
 80091e8:	4619      	mov	r1, r3
 80091ea:	208b      	movs	r0, #139	; 0x8b
 80091ec:	f000 fa08 	bl	8009600 <SUBGRF_WriteCommand>
        break;
 80091f0:	e000      	b.n	80091f4 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 80091f2:	bf00      	nop
    }
}
 80091f4:	bf00      	nop
 80091f6:	3718      	adds	r7, #24
 80091f8:	46bd      	mov	sp, r7
 80091fa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80091fe:	bf00      	nop
 8009200:	0800b034 	.word	0x0800b034
 8009204:	20000545 	.word	0x20000545
 8009208:	3d090000 	.word	0x3d090000
 800920c:	01e84800 	.word	0x01e84800

08009210 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b086      	sub	sp, #24
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8009218:	2300      	movs	r3, #0
 800921a:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800921c:	4a48      	ldr	r2, [pc, #288]	; (8009340 <SUBGRF_SetPacketParams+0x130>)
 800921e:	f107 030c 	add.w	r3, r7, #12
 8009222:	ca07      	ldmia	r2, {r0, r1, r2}
 8009224:	c303      	stmia	r3!, {r0, r1}
 8009226:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	781a      	ldrb	r2, [r3, #0]
 800922c:	4b45      	ldr	r3, [pc, #276]	; (8009344 <SUBGRF_SetPacketParams+0x134>)
 800922e:	781b      	ldrb	r3, [r3, #0]
 8009230:	429a      	cmp	r2, r3
 8009232:	d004      	beq.n	800923e <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	781b      	ldrb	r3, [r3, #0]
 8009238:	4618      	mov	r0, r3
 800923a:	f7ff fe23 	bl	8008e84 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	781b      	ldrb	r3, [r3, #0]
 8009242:	2b03      	cmp	r3, #3
 8009244:	d878      	bhi.n	8009338 <SUBGRF_SetPacketParams+0x128>
 8009246:	a201      	add	r2, pc, #4	; (adr r2, 800924c <SUBGRF_SetPacketParams+0x3c>)
 8009248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800924c:	0800925d 	.word	0x0800925d
 8009250:	080092ed 	.word	0x080092ed
 8009254:	080092e1 	.word	0x080092e1
 8009258:	0800925d 	.word	0x0800925d
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	7a5b      	ldrb	r3, [r3, #9]
 8009260:	2bf1      	cmp	r3, #241	; 0xf1
 8009262:	d10a      	bne.n	800927a <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8009264:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8009268:	f7ff faaa 	bl	80087c0 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 800926c:	f248 0005 	movw	r0, #32773	; 0x8005
 8009270:	f7ff fac6 	bl	8008800 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8009274:	2302      	movs	r3, #2
 8009276:	75bb      	strb	r3, [r7, #22]
 8009278:	e011      	b.n	800929e <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	7a5b      	ldrb	r3, [r3, #9]
 800927e:	2bf2      	cmp	r3, #242	; 0xf2
 8009280:	d10a      	bne.n	8009298 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8009282:	f641 500f 	movw	r0, #7439	; 0x1d0f
 8009286:	f7ff fa9b 	bl	80087c0 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 800928a:	f241 0021 	movw	r0, #4129	; 0x1021
 800928e:	f7ff fab7 	bl	8008800 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8009292:	2306      	movs	r3, #6
 8009294:	75bb      	strb	r3, [r7, #22]
 8009296:	e002      	b.n	800929e <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	7a5b      	ldrb	r3, [r3, #9]
 800929c:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 800929e:	2309      	movs	r3, #9
 80092a0:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	885b      	ldrh	r3, [r3, #2]
 80092a6:	0a1b      	lsrs	r3, r3, #8
 80092a8:	b29b      	uxth	r3, r3
 80092aa:	b2db      	uxtb	r3, r3
 80092ac:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	885b      	ldrh	r3, [r3, #2]
 80092b2:	b2db      	uxtb	r3, r3
 80092b4:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	791b      	ldrb	r3, [r3, #4]
 80092ba:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	795b      	ldrb	r3, [r3, #5]
 80092c0:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	799b      	ldrb	r3, [r3, #6]
 80092c6:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	79db      	ldrb	r3, [r3, #7]
 80092cc:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	7a1b      	ldrb	r3, [r3, #8]
 80092d2:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 80092d4:	7dbb      	ldrb	r3, [r7, #22]
 80092d6:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	7a9b      	ldrb	r3, [r3, #10]
 80092dc:	753b      	strb	r3, [r7, #20]
        break;
 80092de:	e022      	b.n	8009326 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 80092e0:	2301      	movs	r3, #1
 80092e2:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	7b1b      	ldrb	r3, [r3, #12]
 80092e8:	733b      	strb	r3, [r7, #12]
        break;
 80092ea:	e01c      	b.n	8009326 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 80092ec:	2306      	movs	r3, #6
 80092ee:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	89db      	ldrh	r3, [r3, #14]
 80092f4:	0a1b      	lsrs	r3, r3, #8
 80092f6:	b29b      	uxth	r3, r3
 80092f8:	b2db      	uxtb	r3, r3
 80092fa:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	89db      	ldrh	r3, [r3, #14]
 8009300:	b2db      	uxtb	r3, r3
 8009302:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	7c1a      	ldrb	r2, [r3, #16]
 8009308:	4b0f      	ldr	r3, [pc, #60]	; (8009348 <SUBGRF_SetPacketParams+0x138>)
 800930a:	4611      	mov	r1, r2
 800930c:	7019      	strb	r1, [r3, #0]
 800930e:	4613      	mov	r3, r2
 8009310:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	7c5b      	ldrb	r3, [r3, #17]
 8009316:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	7c9b      	ldrb	r3, [r3, #18]
 800931c:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	7cdb      	ldrb	r3, [r3, #19]
 8009322:	747b      	strb	r3, [r7, #17]
        break;
 8009324:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8009326:	7dfb      	ldrb	r3, [r7, #23]
 8009328:	b29a      	uxth	r2, r3
 800932a:	f107 030c 	add.w	r3, r7, #12
 800932e:	4619      	mov	r1, r3
 8009330:	208c      	movs	r0, #140	; 0x8c
 8009332:	f000 f965 	bl	8009600 <SUBGRF_WriteCommand>
 8009336:	e000      	b.n	800933a <SUBGRF_SetPacketParams+0x12a>
        return;
 8009338:	bf00      	nop
}
 800933a:	3718      	adds	r7, #24
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}
 8009340:	0800b03c 	.word	0x0800b03c
 8009344:	20000545 	.word	0x20000545
 8009348:	20000546 	.word	0x20000546

0800934c <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b084      	sub	sp, #16
 8009350:	af00      	add	r7, sp, #0
 8009352:	4603      	mov	r3, r0
 8009354:	460a      	mov	r2, r1
 8009356:	71fb      	strb	r3, [r7, #7]
 8009358:	4613      	mov	r3, r2
 800935a:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 800935c:	79fb      	ldrb	r3, [r7, #7]
 800935e:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8009360:	79bb      	ldrb	r3, [r7, #6]
 8009362:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8009364:	f107 030c 	add.w	r3, r7, #12
 8009368:	2202      	movs	r2, #2
 800936a:	4619      	mov	r1, r3
 800936c:	208f      	movs	r0, #143	; 0x8f
 800936e:	f000 f947 	bl	8009600 <SUBGRF_WriteCommand>
}
 8009372:	bf00      	nop
 8009374:	3710      	adds	r7, #16
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}

0800937a <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 800937a:	b580      	push	{r7, lr}
 800937c:	b082      	sub	sp, #8
 800937e:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 8009380:	2300      	movs	r3, #0
 8009382:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8009384:	1d3b      	adds	r3, r7, #4
 8009386:	2201      	movs	r2, #1
 8009388:	4619      	mov	r1, r3
 800938a:	2015      	movs	r0, #21
 800938c:	f000 f95a 	bl	8009644 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8009390:	793b      	ldrb	r3, [r7, #4]
 8009392:	425b      	negs	r3, r3
 8009394:	105b      	asrs	r3, r3, #1
 8009396:	71fb      	strb	r3, [r7, #7]
    return rssi;
 8009398:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800939c:	4618      	mov	r0, r3
 800939e:	3708      	adds	r7, #8
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}

080093a4 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b084      	sub	sp, #16
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 80093ae:	f107 030c 	add.w	r3, r7, #12
 80093b2:	2202      	movs	r2, #2
 80093b4:	4619      	mov	r1, r3
 80093b6:	2013      	movs	r0, #19
 80093b8:	f000 f944 	bl	8009644 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 80093bc:	f7ff fd7e 	bl	8008ebc <SUBGRF_GetPacketType>
 80093c0:	4603      	mov	r3, r0
 80093c2:	2b01      	cmp	r3, #1
 80093c4:	d10d      	bne.n	80093e2 <SUBGRF_GetRxBufferStatus+0x3e>
 80093c6:	4b0c      	ldr	r3, [pc, #48]	; (80093f8 <SUBGRF_GetRxBufferStatus+0x54>)
 80093c8:	781b      	ldrb	r3, [r3, #0]
 80093ca:	b2db      	uxtb	r3, r3
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	d108      	bne.n	80093e2 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 80093d0:	f240 7002 	movw	r0, #1794	; 0x702
 80093d4:	f000 f878 	bl	80094c8 <SUBGRF_ReadRegister>
 80093d8:	4603      	mov	r3, r0
 80093da:	461a      	mov	r2, r3
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	701a      	strb	r2, [r3, #0]
 80093e0:	e002      	b.n	80093e8 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 80093e2:	7b3a      	ldrb	r2, [r7, #12]
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 80093e8:	7b7a      	ldrb	r2, [r7, #13]
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	701a      	strb	r2, [r3, #0]
}
 80093ee:	bf00      	nop
 80093f0:	3710      	adds	r7, #16
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}
 80093f6:	bf00      	nop
 80093f8:	20000546 	.word	0x20000546

080093fc <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b084      	sub	sp, #16
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8009404:	f107 030c 	add.w	r3, r7, #12
 8009408:	2203      	movs	r2, #3
 800940a:	4619      	mov	r1, r3
 800940c:	2014      	movs	r0, #20
 800940e:	f000 f919 	bl	8009644 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 8009412:	f7ff fd53 	bl	8008ebc <SUBGRF_GetPacketType>
 8009416:	4603      	mov	r3, r0
 8009418:	461a      	mov	r2, r3
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	781b      	ldrb	r3, [r3, #0]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d002      	beq.n	800942c <SUBGRF_GetPacketStatus+0x30>
 8009426:	2b01      	cmp	r3, #1
 8009428:	d013      	beq.n	8009452 <SUBGRF_GetPacketStatus+0x56>
 800942a:	e02a      	b.n	8009482 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 800942c:	7b3a      	ldrb	r2, [r7, #12]
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8009432:	7b7b      	ldrb	r3, [r7, #13]
 8009434:	425b      	negs	r3, r3
 8009436:	105b      	asrs	r3, r3, #1
 8009438:	b25a      	sxtb	r2, r3
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800943e:	7bbb      	ldrb	r3, [r7, #14]
 8009440:	425b      	negs	r3, r3
 8009442:	105b      	asrs	r3, r3, #1
 8009444:	b25a      	sxtb	r2, r3
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2200      	movs	r2, #0
 800944e:	609a      	str	r2, [r3, #8]
            break;
 8009450:	e020      	b.n	8009494 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8009452:	7b3b      	ldrb	r3, [r7, #12]
 8009454:	425b      	negs	r3, r3
 8009456:	105b      	asrs	r3, r3, #1
 8009458:	b25a      	sxtb	r2, r3
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800945e:	7b7b      	ldrb	r3, [r7, #13]
 8009460:	b25b      	sxtb	r3, r3
 8009462:	3302      	adds	r3, #2
 8009464:	109b      	asrs	r3, r3, #2
 8009466:	b25a      	sxtb	r2, r3
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800946c:	7bbb      	ldrb	r3, [r7, #14]
 800946e:	425b      	negs	r3, r3
 8009470:	105b      	asrs	r3, r3, #1
 8009472:	b25a      	sxtb	r2, r3
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8009478:	4b08      	ldr	r3, [pc, #32]	; (800949c <SUBGRF_GetPacketStatus+0xa0>)
 800947a:	681a      	ldr	r2, [r3, #0]
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	611a      	str	r2, [r3, #16]
            break;
 8009480:	e008      	b.n	8009494 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8009482:	2214      	movs	r2, #20
 8009484:	2100      	movs	r1, #0
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f000 fca7 	bl	8009dda <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	220f      	movs	r2, #15
 8009490:	701a      	strb	r2, [r3, #0]
            break;
 8009492:	bf00      	nop
    }
}
 8009494:	bf00      	nop
 8009496:	3710      	adds	r7, #16
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}
 800949c:	20000548 	.word	0x20000548

080094a0 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b082      	sub	sp, #8
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	4603      	mov	r3, r0
 80094a8:	460a      	mov	r2, r1
 80094aa:	80fb      	strh	r3, [r7, #6]
 80094ac:	4613      	mov	r3, r2
 80094ae:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 80094b0:	1d7a      	adds	r2, r7, #5
 80094b2:	88f9      	ldrh	r1, [r7, #6]
 80094b4:	2301      	movs	r3, #1
 80094b6:	4803      	ldr	r0, [pc, #12]	; (80094c4 <SUBGRF_WriteRegister+0x24>)
 80094b8:	f7fa fd08 	bl	8003ecc <HAL_SUBGHZ_WriteRegisters>
}
 80094bc:	bf00      	nop
 80094be:	3708      	adds	r7, #8
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd80      	pop	{r7, pc}
 80094c4:	20000110 	.word	0x20000110

080094c8 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b084      	sub	sp, #16
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	4603      	mov	r3, r0
 80094d0:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 80094d2:	f107 020f 	add.w	r2, r7, #15
 80094d6:	88f9      	ldrh	r1, [r7, #6]
 80094d8:	2301      	movs	r3, #1
 80094da:	4804      	ldr	r0, [pc, #16]	; (80094ec <SUBGRF_ReadRegister+0x24>)
 80094dc:	f7fa fd55 	bl	8003f8a <HAL_SUBGHZ_ReadRegisters>
    return data;
 80094e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	3710      	adds	r7, #16
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}
 80094ea:	bf00      	nop
 80094ec:	20000110 	.word	0x20000110

080094f0 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b086      	sub	sp, #24
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	4603      	mov	r3, r0
 80094f8:	6039      	str	r1, [r7, #0]
 80094fa:	80fb      	strh	r3, [r7, #6]
 80094fc:	4613      	mov	r3, r2
 80094fe:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009500:	f3ef 8310 	mrs	r3, PRIMASK
 8009504:	60fb      	str	r3, [r7, #12]
  return(result);
 8009506:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8009508:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800950a:	b672      	cpsid	i
}
 800950c:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800950e:	88bb      	ldrh	r3, [r7, #4]
 8009510:	88f9      	ldrh	r1, [r7, #6]
 8009512:	683a      	ldr	r2, [r7, #0]
 8009514:	4806      	ldr	r0, [pc, #24]	; (8009530 <SUBGRF_WriteRegisters+0x40>)
 8009516:	f7fa fcd9 	bl	8003ecc <HAL_SUBGHZ_WriteRegisters>
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	f383 8810 	msr	PRIMASK, r3
}
 8009524:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8009526:	bf00      	nop
 8009528:	3718      	adds	r7, #24
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}
 800952e:	bf00      	nop
 8009530:	20000110 	.word	0x20000110

08009534 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b086      	sub	sp, #24
 8009538:	af00      	add	r7, sp, #0
 800953a:	4603      	mov	r3, r0
 800953c:	6039      	str	r1, [r7, #0]
 800953e:	80fb      	strh	r3, [r7, #6]
 8009540:	4613      	mov	r3, r2
 8009542:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009544:	f3ef 8310 	mrs	r3, PRIMASK
 8009548:	60fb      	str	r3, [r7, #12]
  return(result);
 800954a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800954c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800954e:	b672      	cpsid	i
}
 8009550:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8009552:	88bb      	ldrh	r3, [r7, #4]
 8009554:	88f9      	ldrh	r1, [r7, #6]
 8009556:	683a      	ldr	r2, [r7, #0]
 8009558:	4806      	ldr	r0, [pc, #24]	; (8009574 <SUBGRF_ReadRegisters+0x40>)
 800955a:	f7fa fd16 	bl	8003f8a <HAL_SUBGHZ_ReadRegisters>
 800955e:	697b      	ldr	r3, [r7, #20]
 8009560:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009562:	693b      	ldr	r3, [r7, #16]
 8009564:	f383 8810 	msr	PRIMASK, r3
}
 8009568:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800956a:	bf00      	nop
 800956c:	3718      	adds	r7, #24
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}
 8009572:	bf00      	nop
 8009574:	20000110 	.word	0x20000110

08009578 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b086      	sub	sp, #24
 800957c:	af00      	add	r7, sp, #0
 800957e:	4603      	mov	r3, r0
 8009580:	6039      	str	r1, [r7, #0]
 8009582:	71fb      	strb	r3, [r7, #7]
 8009584:	4613      	mov	r3, r2
 8009586:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009588:	f3ef 8310 	mrs	r3, PRIMASK
 800958c:	60fb      	str	r3, [r7, #12]
  return(result);
 800958e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8009590:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009592:	b672      	cpsid	i
}
 8009594:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8009596:	79bb      	ldrb	r3, [r7, #6]
 8009598:	b29b      	uxth	r3, r3
 800959a:	79f9      	ldrb	r1, [r7, #7]
 800959c:	683a      	ldr	r2, [r7, #0]
 800959e:	4806      	ldr	r0, [pc, #24]	; (80095b8 <SUBGRF_WriteBuffer+0x40>)
 80095a0:	f7fa fe07 	bl	80041b2 <HAL_SUBGHZ_WriteBuffer>
 80095a4:	697b      	ldr	r3, [r7, #20]
 80095a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095a8:	693b      	ldr	r3, [r7, #16]
 80095aa:	f383 8810 	msr	PRIMASK, r3
}
 80095ae:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80095b0:	bf00      	nop
 80095b2:	3718      	adds	r7, #24
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}
 80095b8:	20000110 	.word	0x20000110

080095bc <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b086      	sub	sp, #24
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	4603      	mov	r3, r0
 80095c4:	6039      	str	r1, [r7, #0]
 80095c6:	71fb      	strb	r3, [r7, #7]
 80095c8:	4613      	mov	r3, r2
 80095ca:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80095cc:	f3ef 8310 	mrs	r3, PRIMASK
 80095d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80095d2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80095d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80095d6:	b672      	cpsid	i
}
 80095d8:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 80095da:	79bb      	ldrb	r3, [r7, #6]
 80095dc:	b29b      	uxth	r3, r3
 80095de:	79f9      	ldrb	r1, [r7, #7]
 80095e0:	683a      	ldr	r2, [r7, #0]
 80095e2:	4806      	ldr	r0, [pc, #24]	; (80095fc <SUBGRF_ReadBuffer+0x40>)
 80095e4:	f7fa fe38 	bl	8004258 <HAL_SUBGHZ_ReadBuffer>
 80095e8:	697b      	ldr	r3, [r7, #20]
 80095ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	f383 8810 	msr	PRIMASK, r3
}
 80095f2:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80095f4:	bf00      	nop
 80095f6:	3718      	adds	r7, #24
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}
 80095fc:	20000110 	.word	0x20000110

08009600 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b086      	sub	sp, #24
 8009604:	af00      	add	r7, sp, #0
 8009606:	4603      	mov	r3, r0
 8009608:	6039      	str	r1, [r7, #0]
 800960a:	71fb      	strb	r3, [r7, #7]
 800960c:	4613      	mov	r3, r2
 800960e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009610:	f3ef 8310 	mrs	r3, PRIMASK
 8009614:	60fb      	str	r3, [r7, #12]
  return(result);
 8009616:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8009618:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800961a:	b672      	cpsid	i
}
 800961c:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800961e:	88bb      	ldrh	r3, [r7, #4]
 8009620:	79f9      	ldrb	r1, [r7, #7]
 8009622:	683a      	ldr	r2, [r7, #0]
 8009624:	4806      	ldr	r0, [pc, #24]	; (8009640 <SUBGRF_WriteCommand+0x40>)
 8009626:	f7fa fd11 	bl	800404c <HAL_SUBGHZ_ExecSetCmd>
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800962e:	693b      	ldr	r3, [r7, #16]
 8009630:	f383 8810 	msr	PRIMASK, r3
}
 8009634:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8009636:	bf00      	nop
 8009638:	3718      	adds	r7, #24
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}
 800963e:	bf00      	nop
 8009640:	20000110 	.word	0x20000110

08009644 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b086      	sub	sp, #24
 8009648:	af00      	add	r7, sp, #0
 800964a:	4603      	mov	r3, r0
 800964c:	6039      	str	r1, [r7, #0]
 800964e:	71fb      	strb	r3, [r7, #7]
 8009650:	4613      	mov	r3, r2
 8009652:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009654:	f3ef 8310 	mrs	r3, PRIMASK
 8009658:	60fb      	str	r3, [r7, #12]
  return(result);
 800965a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800965c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800965e:	b672      	cpsid	i
}
 8009660:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8009662:	88bb      	ldrh	r3, [r7, #4]
 8009664:	79f9      	ldrb	r1, [r7, #7]
 8009666:	683a      	ldr	r2, [r7, #0]
 8009668:	4806      	ldr	r0, [pc, #24]	; (8009684 <SUBGRF_ReadCommand+0x40>)
 800966a:	f7fa fd4e 	bl	800410a <HAL_SUBGHZ_ExecGetCmd>
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	f383 8810 	msr	PRIMASK, r3
}
 8009678:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800967a:	bf00      	nop
 800967c:	3718      	adds	r7, #24
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}
 8009682:	bf00      	nop
 8009684:	20000110 	.word	0x20000110

08009688 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b084      	sub	sp, #16
 800968c:	af00      	add	r7, sp, #0
 800968e:	4603      	mov	r3, r0
 8009690:	460a      	mov	r2, r1
 8009692:	71fb      	strb	r3, [r7, #7]
 8009694:	4613      	mov	r3, r2
 8009696:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8009698:	2301      	movs	r3, #1
 800969a:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 800969c:	79bb      	ldrb	r3, [r7, #6]
 800969e:	2b01      	cmp	r3, #1
 80096a0:	d10d      	bne.n	80096be <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 80096a2:	79fb      	ldrb	r3, [r7, #7]
 80096a4:	2b01      	cmp	r3, #1
 80096a6:	d104      	bne.n	80096b2 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 80096a8:	2302      	movs	r3, #2
 80096aa:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 80096ac:	2004      	movs	r0, #4
 80096ae:	f000 f8ef 	bl	8009890 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 80096b2:	79fb      	ldrb	r3, [r7, #7]
 80096b4:	2b02      	cmp	r3, #2
 80096b6:	d107      	bne.n	80096c8 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 80096b8:	2303      	movs	r3, #3
 80096ba:	73fb      	strb	r3, [r7, #15]
 80096bc:	e004      	b.n	80096c8 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 80096be:	79bb      	ldrb	r3, [r7, #6]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d101      	bne.n	80096c8 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 80096c4:	2301      	movs	r3, #1
 80096c6:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 80096c8:	7bfb      	ldrb	r3, [r7, #15]
 80096ca:	4618      	mov	r0, r3
 80096cc:	f000 fad2 	bl	8009c74 <RBI_ConfigRFSwitch>
}
 80096d0:	bf00      	nop
 80096d2:	3710      	adds	r7, #16
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}

080096d8 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b084      	sub	sp, #16
 80096dc:	af00      	add	r7, sp, #0
 80096de:	4603      	mov	r3, r0
 80096e0:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 80096e2:	2301      	movs	r3, #1
 80096e4:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 80096e6:	f000 fb23 	bl	8009d30 <RBI_GetTxConfig>
 80096ea:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	2b02      	cmp	r3, #2
 80096f0:	d016      	beq.n	8009720 <SUBGRF_SetRfTxPower+0x48>
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	2b02      	cmp	r3, #2
 80096f6:	dc16      	bgt.n	8009726 <SUBGRF_SetRfTxPower+0x4e>
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d003      	beq.n	8009706 <SUBGRF_SetRfTxPower+0x2e>
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	2b01      	cmp	r3, #1
 8009702:	d00a      	beq.n	800971a <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 8009704:	e00f      	b.n	8009726 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 8009706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800970a:	2b0f      	cmp	r3, #15
 800970c:	dd02      	ble.n	8009714 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 800970e:	2302      	movs	r3, #2
 8009710:	73fb      	strb	r3, [r7, #15]
            break;
 8009712:	e009      	b.n	8009728 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 8009714:	2301      	movs	r3, #1
 8009716:	73fb      	strb	r3, [r7, #15]
            break;
 8009718:	e006      	b.n	8009728 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 800971a:	2301      	movs	r3, #1
 800971c:	73fb      	strb	r3, [r7, #15]
            break;
 800971e:	e003      	b.n	8009728 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 8009720:	2302      	movs	r3, #2
 8009722:	73fb      	strb	r3, [r7, #15]
            break;
 8009724:	e000      	b.n	8009728 <SUBGRF_SetRfTxPower+0x50>
            break;
 8009726:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8009728:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800972c:	7bfb      	ldrb	r3, [r7, #15]
 800972e:	2202      	movs	r2, #2
 8009730:	4618      	mov	r0, r3
 8009732:	f7ff fbcd 	bl	8008ed0 <SUBGRF_SetTxParams>

    return paSelect;
 8009736:	7bfb      	ldrb	r3, [r7, #15]
}
 8009738:	4618      	mov	r0, r3
 800973a:	3710      	adds	r7, #16
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}

08009740 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 8009740:	b480      	push	{r7}
 8009742:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 8009744:	2301      	movs	r3, #1
}
 8009746:	4618      	mov	r0, r3
 8009748:	46bd      	mov	sp, r7
 800974a:	bc80      	pop	{r7}
 800974c:	4770      	bx	lr
	...

08009750 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b082      	sub	sp, #8
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8009758:	4b03      	ldr	r3, [pc, #12]	; (8009768 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	2001      	movs	r0, #1
 800975e:	4798      	blx	r3
}
 8009760:	bf00      	nop
 8009762:	3708      	adds	r7, #8
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}
 8009768:	20000550 	.word	0x20000550

0800976c <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b082      	sub	sp, #8
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8009774:	4b03      	ldr	r3, [pc, #12]	; (8009784 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	2002      	movs	r0, #2
 800977a:	4798      	blx	r3
}
 800977c:	bf00      	nop
 800977e:	3708      	adds	r7, #8
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}
 8009784:	20000550 	.word	0x20000550

08009788 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b082      	sub	sp, #8
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8009790:	4b03      	ldr	r3, [pc, #12]	; (80097a0 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	2040      	movs	r0, #64	; 0x40
 8009796:	4798      	blx	r3
}
 8009798:	bf00      	nop
 800979a:	3708      	adds	r7, #8
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}
 80097a0:	20000550 	.word	0x20000550

080097a4 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b082      	sub	sp, #8
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
 80097ac:	460b      	mov	r3, r1
 80097ae:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 80097b0:	78fb      	ldrb	r3, [r7, #3]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d002      	beq.n	80097bc <HAL_SUBGHZ_CADStatusCallback+0x18>
 80097b6:	2b01      	cmp	r3, #1
 80097b8:	d005      	beq.n	80097c6 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 80097ba:	e00a      	b.n	80097d2 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 80097bc:	4b07      	ldr	r3, [pc, #28]	; (80097dc <HAL_SUBGHZ_CADStatusCallback+0x38>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	2080      	movs	r0, #128	; 0x80
 80097c2:	4798      	blx	r3
            break;
 80097c4:	e005      	b.n	80097d2 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 80097c6:	4b05      	ldr	r3, [pc, #20]	; (80097dc <HAL_SUBGHZ_CADStatusCallback+0x38>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f44f 7080 	mov.w	r0, #256	; 0x100
 80097ce:	4798      	blx	r3
            break;
 80097d0:	bf00      	nop
    }
}
 80097d2:	bf00      	nop
 80097d4:	3708      	adds	r7, #8
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}
 80097da:	bf00      	nop
 80097dc:	20000550 	.word	0x20000550

080097e0 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b082      	sub	sp, #8
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 80097e8:	4b04      	ldr	r3, [pc, #16]	; (80097fc <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f44f 7000 	mov.w	r0, #512	; 0x200
 80097f0:	4798      	blx	r3
}
 80097f2:	bf00      	nop
 80097f4:	3708      	adds	r7, #8
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}
 80097fa:	bf00      	nop
 80097fc:	20000550 	.word	0x20000550

08009800 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b082      	sub	sp, #8
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8009808:	4b03      	ldr	r3, [pc, #12]	; (8009818 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	2020      	movs	r0, #32
 800980e:	4798      	blx	r3
}
 8009810:	bf00      	nop
 8009812:	3708      	adds	r7, #8
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}
 8009818:	20000550 	.word	0x20000550

0800981c <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b082      	sub	sp, #8
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8009824:	4b03      	ldr	r3, [pc, #12]	; (8009834 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	2004      	movs	r0, #4
 800982a:	4798      	blx	r3
}
 800982c:	bf00      	nop
 800982e:	3708      	adds	r7, #8
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}
 8009834:	20000550 	.word	0x20000550

08009838 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b082      	sub	sp, #8
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8009840:	4b03      	ldr	r3, [pc, #12]	; (8009850 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	2008      	movs	r0, #8
 8009846:	4798      	blx	r3
}
 8009848:	bf00      	nop
 800984a:	3708      	adds	r7, #8
 800984c:	46bd      	mov	sp, r7
 800984e:	bd80      	pop	{r7, pc}
 8009850:	20000550 	.word	0x20000550

08009854 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b082      	sub	sp, #8
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 800985c:	4b03      	ldr	r3, [pc, #12]	; (800986c <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	2010      	movs	r0, #16
 8009862:	4798      	blx	r3
}
 8009864:	bf00      	nop
 8009866:	3708      	adds	r7, #8
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}
 800986c:	20000550 	.word	0x20000550

08009870 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b082      	sub	sp, #8
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 8009878:	4b04      	ldr	r3, [pc, #16]	; (800988c <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8009880:	4798      	blx	r3
}
 8009882:	bf00      	nop
 8009884:	3708      	adds	r7, #8
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}
 800988a:	bf00      	nop
 800988c:	20000550 	.word	0x20000550

08009890 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b084      	sub	sp, #16
 8009894:	af00      	add	r7, sp, #0
 8009896:	4603      	mov	r3, r0
 8009898:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 800989a:	f000 fa5f 	bl	8009d5c <RBI_IsDCDC>
 800989e:	4603      	mov	r3, r0
 80098a0:	2b01      	cmp	r3, #1
 80098a2:	d112      	bne.n	80098ca <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 80098a4:	f640 1023 	movw	r0, #2339	; 0x923
 80098a8:	f7ff fe0e 	bl	80094c8 <SUBGRF_ReadRegister>
 80098ac:	4603      	mov	r3, r0
 80098ae:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 80098b0:	7bfb      	ldrb	r3, [r7, #15]
 80098b2:	f023 0306 	bic.w	r3, r3, #6
 80098b6:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 80098b8:	7bfa      	ldrb	r2, [r7, #15]
 80098ba:	79fb      	ldrb	r3, [r7, #7]
 80098bc:	4313      	orrs	r3, r2
 80098be:	b2db      	uxtb	r3, r3
 80098c0:	4619      	mov	r1, r3
 80098c2:	f640 1023 	movw	r0, #2339	; 0x923
 80098c6:	f7ff fdeb 	bl	80094a0 <SUBGRF_WriteRegister>
  }
}
 80098ca:	bf00      	nop
 80098cc:	3710      	adds	r7, #16
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}
	...

080098d4 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 80098d4:	b480      	push	{r7}
 80098d6:	b085      	sub	sp, #20
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d101      	bne.n	80098e6 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 80098e2:	231f      	movs	r3, #31
 80098e4:	e016      	b.n	8009914 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 80098e6:	2300      	movs	r3, #0
 80098e8:	73fb      	strb	r3, [r7, #15]
 80098ea:	e00f      	b.n	800990c <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 80098ec:	7bfb      	ldrb	r3, [r7, #15]
 80098ee:	4a0c      	ldr	r2, [pc, #48]	; (8009920 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 80098f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80098f4:	687a      	ldr	r2, [r7, #4]
 80098f6:	429a      	cmp	r2, r3
 80098f8:	d205      	bcs.n	8009906 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 80098fa:	7bfb      	ldrb	r3, [r7, #15]
 80098fc:	4a08      	ldr	r2, [pc, #32]	; (8009920 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 80098fe:	00db      	lsls	r3, r3, #3
 8009900:	4413      	add	r3, r2
 8009902:	791b      	ldrb	r3, [r3, #4]
 8009904:	e006      	b.n	8009914 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8009906:	7bfb      	ldrb	r3, [r7, #15]
 8009908:	3301      	adds	r3, #1
 800990a:	73fb      	strb	r3, [r7, #15]
 800990c:	7bfb      	ldrb	r3, [r7, #15]
 800990e:	2b15      	cmp	r3, #21
 8009910:	d9ec      	bls.n	80098ec <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 8009912:	e7fe      	b.n	8009912 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 8009914:	4618      	mov	r0, r3
 8009916:	3714      	adds	r7, #20
 8009918:	46bd      	mov	sp, r7
 800991a:	bc80      	pop	{r7}
 800991c:	4770      	bx	lr
 800991e:	bf00      	nop
 8009920:	0800b1cc 	.word	0x0800b1cc

08009924 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b08a      	sub	sp, #40	; 0x28
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
 800992c:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 800992e:	4b35      	ldr	r3, [pc, #212]	; (8009a04 <SUBGRF_GetCFO+0xe0>)
 8009930:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 8009932:	f640 0007 	movw	r0, #2055	; 0x807
 8009936:	f7ff fdc7 	bl	80094c8 <SUBGRF_ReadRegister>
 800993a:	4603      	mov	r3, r0
 800993c:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 800993e:	7ffb      	ldrb	r3, [r7, #31]
 8009940:	08db      	lsrs	r3, r3, #3
 8009942:	b2db      	uxtb	r3, r3
 8009944:	f003 0303 	and.w	r3, r3, #3
 8009948:	3328      	adds	r3, #40	; 0x28
 800994a:	443b      	add	r3, r7
 800994c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8009950:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 8009952:	7ffb      	ldrb	r3, [r7, #31]
 8009954:	f003 0307 	and.w	r3, r3, #7
 8009958:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 800995a:	7fba      	ldrb	r2, [r7, #30]
 800995c:	7f7b      	ldrb	r3, [r7, #29]
 800995e:	3301      	adds	r3, #1
 8009960:	fa02 f303 	lsl.w	r3, r2, r3
 8009964:	461a      	mov	r2, r3
 8009966:	4b28      	ldr	r3, [pc, #160]	; (8009a08 <SUBGRF_GetCFO+0xe4>)
 8009968:	fbb3 f3f2 	udiv	r3, r3, r2
 800996c:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 800996e:	69ba      	ldr	r2, [r7, #24]
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	fbb2 f3f3 	udiv	r3, r2, r3
 8009976:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 8009978:	2301      	movs	r3, #1
 800997a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 800997e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009982:	697a      	ldr	r2, [r7, #20]
 8009984:	fb02 f303 	mul.w	r3, r2, r3
 8009988:	2b07      	cmp	r3, #7
 800998a:	d802      	bhi.n	8009992 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 800998c:	2302      	movs	r3, #2
 800998e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 8009992:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009996:	697a      	ldr	r2, [r7, #20]
 8009998:	fb02 f303 	mul.w	r3, r2, r3
 800999c:	2b03      	cmp	r3, #3
 800999e:	d802      	bhi.n	80099a6 <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 80099a0:	2304      	movs	r3, #4
 80099a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 80099a6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80099aa:	69bb      	ldr	r3, [r7, #24]
 80099ac:	fb02 f303 	mul.w	r3, r2, r3
 80099b0:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 80099b2:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 80099b6:	f7ff fd87 	bl	80094c8 <SUBGRF_ReadRegister>
 80099ba:	4603      	mov	r3, r0
 80099bc:	021b      	lsls	r3, r3, #8
 80099be:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80099c2:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 80099c4:	f240 60b1 	movw	r0, #1713	; 0x6b1
 80099c8:	f7ff fd7e 	bl	80094c8 <SUBGRF_ReadRegister>
 80099cc:	4603      	mov	r3, r0
 80099ce:	461a      	mov	r2, r3
 80099d0:	6a3b      	ldr	r3, [r7, #32]
 80099d2:	4313      	orrs	r3, r2
 80099d4:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 80099d6:	6a3b      	ldr	r3, [r7, #32]
 80099d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d005      	beq.n	80099ec <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 80099e0:	6a3b      	ldr	r3, [r7, #32]
 80099e2:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 80099e6:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 80099ea:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 80099ec:	693b      	ldr	r3, [r7, #16]
 80099ee:	095b      	lsrs	r3, r3, #5
 80099f0:	6a3a      	ldr	r2, [r7, #32]
 80099f2:	fb02 f303 	mul.w	r3, r2, r3
 80099f6:	11da      	asrs	r2, r3, #7
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	601a      	str	r2, [r3, #0]
}
 80099fc:	bf00      	nop
 80099fe:	3728      	adds	r7, #40	; 0x28
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bd80      	pop	{r7, pc}
 8009a04:	0c0a0804 	.word	0x0c0a0804
 8009a08:	01e84800 	.word	0x01e84800

08009a0c <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	b087      	sub	sp, #28
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	4603      	mov	r3, r0
 8009a14:	60b9      	str	r1, [r7, #8]
 8009a16:	607a      	str	r2, [r7, #4]
 8009a18:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 8009a1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009a22:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 8009a24:	697b      	ldr	r3, [r7, #20]
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	371c      	adds	r7, #28
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bc80      	pop	{r7}
 8009a2e:	4770      	bx	lr

08009a30 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 8009a30:	b480      	push	{r7}
 8009a32:	b087      	sub	sp, #28
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	4603      	mov	r3, r0
 8009a38:	60b9      	str	r1, [r7, #8]
 8009a3a:	607a      	str	r2, [r7, #4]
 8009a3c:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 8009a3e:	2300      	movs	r3, #0
 8009a40:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 8009a42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009a46:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 8009a48:	697b      	ldr	r3, [r7, #20]
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	371c      	adds	r7, #28
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bc80      	pop	{r7}
 8009a52:	4770      	bx	lr

08009a54 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 8009a54:	b480      	push	{r7}
 8009a56:	b085      	sub	sp, #20
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	60f8      	str	r0, [r7, #12]
 8009a5c:	60b9      	str	r1, [r7, #8]
 8009a5e:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 8009a60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	3714      	adds	r7, #20
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bc80      	pop	{r7}
 8009a6c:	4770      	bx	lr

08009a6e <RFW_DeInit>:

void RFW_DeInit( void )
{
 8009a6e:	b480      	push	{r7}
 8009a70:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 8009a72:	bf00      	nop
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bc80      	pop	{r7}
 8009a78:	4770      	bx	lr

08009a7a <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 8009a7a:	b480      	push	{r7}
 8009a7c:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 8009a7e:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bc80      	pop	{r7}
 8009a86:	4770      	bx	lr

08009a88 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 8009a88:	b480      	push	{r7}
 8009a8a:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 8009a8c:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bc80      	pop	{r7}
 8009a94:	4770      	bx	lr

08009a96 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 8009a96:	b480      	push	{r7}
 8009a98:	b083      	sub	sp, #12
 8009a9a:	af00      	add	r7, sp, #0
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 8009aa0:	bf00      	nop
 8009aa2:	370c      	adds	r7, #12
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bc80      	pop	{r7}
 8009aa8:	4770      	bx	lr

08009aaa <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 8009aaa:	b480      	push	{r7}
 8009aac:	b087      	sub	sp, #28
 8009aae:	af00      	add	r7, sp, #0
 8009ab0:	60f8      	str	r0, [r7, #12]
 8009ab2:	460b      	mov	r3, r1
 8009ab4:	607a      	str	r2, [r7, #4]
 8009ab6:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 8009ab8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009abc:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 8009abe:	697b      	ldr	r3, [r7, #20]
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	371c      	adds	r7, #28
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bc80      	pop	{r7}
 8009ac8:	4770      	bx	lr

08009aca <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 8009aca:	b480      	push	{r7}
 8009acc:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 8009ace:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bc80      	pop	{r7}
 8009ad8:	4770      	bx	lr

08009ada <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 8009ada:	b480      	push	{r7}
 8009adc:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 8009ade:	bf00      	nop
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bc80      	pop	{r7}
 8009ae4:	4770      	bx	lr

08009ae6 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 8009ae6:	b480      	push	{r7}
 8009ae8:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 8009aea:	bf00      	nop
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bc80      	pop	{r7}
 8009af0:	4770      	bx	lr

08009af2 <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 8009af2:	b480      	push	{r7}
 8009af4:	b083      	sub	sp, #12
 8009af6:	af00      	add	r7, sp, #0
 8009af8:	4603      	mov	r3, r0
 8009afa:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 8009afc:	bf00      	nop
 8009afe:	370c      	adds	r7, #12
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bc80      	pop	{r7}
 8009b04:	4770      	bx	lr

08009b06 <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 8009b06:	b580      	push	{r7, lr}
 8009b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 8009b0a:	f7f7 fe3d 	bl	8001788 <SystemApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1_1 */
  SubghzApp_Init();
 8009b0e:	f000 f809 	bl	8009b24 <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 8009b12:	bf00      	nop
 8009b14:	bd80      	pop	{r7, pc}

08009b16 <MX_SubGHz_Phy_Process>:

void MX_SubGHz_Phy_Process(void)
{
 8009b16:	b480      	push	{r7}
 8009b18:	af00      	add	r7, sp, #0

  /* USER CODE END MX_SubGHz_Phy_Process_1 */
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_OS */

  /* USER CODE END MX_SubGHz_Phy_Process_OS */
}
 8009b1a:	bf00      	nop
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bc80      	pop	{r7}
 8009b20:	4770      	bx	lr
	...

08009b24 <SubghzApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SubghzApp_Init(void)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SubghzApp_Init_1 */

  /* USER CODE END SubghzApp_Init_1 */

  /* Radio initialization */
  RadioEvents.TxDone = OnTxDone;
 8009b28:	4b0a      	ldr	r3, [pc, #40]	; (8009b54 <SubghzApp_Init+0x30>)
 8009b2a:	4a0b      	ldr	r2, [pc, #44]	; (8009b58 <SubghzApp_Init+0x34>)
 8009b2c:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 8009b2e:	4b09      	ldr	r3, [pc, #36]	; (8009b54 <SubghzApp_Init+0x30>)
 8009b30:	4a0a      	ldr	r2, [pc, #40]	; (8009b5c <SubghzApp_Init+0x38>)
 8009b32:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 8009b34:	4b07      	ldr	r3, [pc, #28]	; (8009b54 <SubghzApp_Init+0x30>)
 8009b36:	4a0a      	ldr	r2, [pc, #40]	; (8009b60 <SubghzApp_Init+0x3c>)
 8009b38:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 8009b3a:	4b06      	ldr	r3, [pc, #24]	; (8009b54 <SubghzApp_Init+0x30>)
 8009b3c:	4a09      	ldr	r2, [pc, #36]	; (8009b64 <SubghzApp_Init+0x40>)
 8009b3e:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 8009b40:	4b04      	ldr	r3, [pc, #16]	; (8009b54 <SubghzApp_Init+0x30>)
 8009b42:	4a09      	ldr	r2, [pc, #36]	; (8009b68 <SubghzApp_Init+0x44>)
 8009b44:	611a      	str	r2, [r3, #16]

  Radio.Init(&RadioEvents);
 8009b46:	4b09      	ldr	r3, [pc, #36]	; (8009b6c <SubghzApp_Init+0x48>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	4802      	ldr	r0, [pc, #8]	; (8009b54 <SubghzApp_Init+0x30>)
 8009b4c:	4798      	blx	r3

  /* USER CODE BEGIN SubghzApp_Init_2 */

  /* USER CODE END SubghzApp_Init_2 */
}
 8009b4e:	bf00      	nop
 8009b50:	bd80      	pop	{r7, pc}
 8009b52:	bf00      	nop
 8009b54:	20000554 	.word	0x20000554
 8009b58:	08009b71 	.word	0x08009b71
 8009b5c:	08009b7d 	.word	0x08009b7d
 8009b60:	08009ba1 	.word	0x08009ba1
 8009b64:	08009bad 	.word	0x08009bad
 8009b68:	08009bb9 	.word	0x08009bb9
 8009b6c:	0800b13c 	.word	0x0800b13c

08009b70 <OnTxDone>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void OnTxDone(void)
{
 8009b70:	b480      	push	{r7}
 8009b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone */
  /* USER CODE END OnTxDone */
}
 8009b74:	bf00      	nop
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bc80      	pop	{r7}
 8009b7a:	4770      	bx	lr

08009b7c <OnRxDone>:

static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	b085      	sub	sp, #20
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	60f8      	str	r0, [r7, #12]
 8009b84:	4608      	mov	r0, r1
 8009b86:	4611      	mov	r1, r2
 8009b88:	461a      	mov	r2, r3
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	817b      	strh	r3, [r7, #10]
 8009b8e:	460b      	mov	r3, r1
 8009b90:	813b      	strh	r3, [r7, #8]
 8009b92:	4613      	mov	r3, r2
 8009b94:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnRxDone */
  /* USER CODE END OnRxDone */
}
 8009b96:	bf00      	nop
 8009b98:	3714      	adds	r7, #20
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bc80      	pop	{r7}
 8009b9e:	4770      	bx	lr

08009ba0 <OnTxTimeout>:

static void OnTxTimeout(void)
{
 8009ba0:	b480      	push	{r7}
 8009ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout */
  /* USER CODE END OnTxTimeout */
}
 8009ba4:	bf00      	nop
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bc80      	pop	{r7}
 8009baa:	4770      	bx	lr

08009bac <OnRxTimeout>:

static void OnRxTimeout(void)
{
 8009bac:	b480      	push	{r7}
 8009bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxTimeout */
  /* USER CODE END OnRxTimeout */
}
 8009bb0:	bf00      	nop
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bc80      	pop	{r7}
 8009bb6:	4770      	bx	lr

08009bb8 <OnRxError>:

static void OnRxError(void)
{
 8009bb8:	b480      	push	{r7}
 8009bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxError */
  /* USER CODE END OnRxError */
}
 8009bbc:	bf00      	nop
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bc80      	pop	{r7}
 8009bc2:	4770      	bx	lr

08009bc4 <LL_AHB2_GRP1_EnableClock>:
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	b085      	sub	sp, #20
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8009bcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009bd0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009bd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	4313      	orrs	r3, r2
 8009bda:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8009bdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009be0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	4013      	ands	r3, r2
 8009be6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009be8:	68fb      	ldr	r3, [r7, #12]
}
 8009bea:	bf00      	nop
 8009bec:	3714      	adds	r7, #20
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bc80      	pop	{r7}
 8009bf2:	4770      	bx	lr

08009bf4 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b086      	sub	sp, #24
 8009bf8:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
#else
  /* 2/ Or implement RBI_Init here */
  int32_t retcode = 0;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN RBI_Init_2 */
	GPIO_InitTypeDef gpio_init_structure = { 0 };
 8009bfe:	463b      	mov	r3, r7
 8009c00:	2200      	movs	r2, #0
 8009c02:	601a      	str	r2, [r3, #0]
 8009c04:	605a      	str	r2, [r3, #4]
 8009c06:	609a      	str	r2, [r3, #8]
 8009c08:	60da      	str	r2, [r3, #12]
 8009c0a:	611a      	str	r2, [r3, #16]

	/* Enable the Radio Switch Clock */
	RF_SW_CTRL3_GPIO_CLK_ENABLE();
 8009c0c:	2004      	movs	r0, #4
 8009c0e:	f7ff ffd9 	bl	8009bc4 <LL_AHB2_GRP1_EnableClock>

	/* Configure the Radio Switch pin */
	gpio_init_structure.Pin = RF_SW_CTRL1_PIN;
 8009c12:	2310      	movs	r3, #16
 8009c14:	603b      	str	r3, [r7, #0]
	gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8009c16:	2301      	movs	r3, #1
 8009c18:	607b      	str	r3, [r7, #4]
	gpio_init_structure.Pull = GPIO_NOPULL;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	60bb      	str	r3, [r7, #8]
	gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009c1e:	2303      	movs	r3, #3
 8009c20:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8009c22:	463b      	mov	r3, r7
 8009c24:	4619      	mov	r1, r3
 8009c26:	4812      	ldr	r0, [pc, #72]	; (8009c70 <RBI_Init+0x7c>)
 8009c28:	f7f8 fbac 	bl	8002384 <HAL_GPIO_Init>

	gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8009c2c:	2320      	movs	r3, #32
 8009c2e:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8009c30:	463b      	mov	r3, r7
 8009c32:	4619      	mov	r1, r3
 8009c34:	480e      	ldr	r0, [pc, #56]	; (8009c70 <RBI_Init+0x7c>)
 8009c36:	f7f8 fba5 	bl	8002384 <HAL_GPIO_Init>

	gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 8009c3a:	2308      	movs	r3, #8
 8009c3c:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 8009c3e:	463b      	mov	r3, r7
 8009c40:	4619      	mov	r1, r3
 8009c42:	480b      	ldr	r0, [pc, #44]	; (8009c70 <RBI_Init+0x7c>)
 8009c44:	f7f8 fb9e 	bl	8002384 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8009c48:	2200      	movs	r2, #0
 8009c4a:	2120      	movs	r1, #32
 8009c4c:	4808      	ldr	r0, [pc, #32]	; (8009c70 <RBI_Init+0x7c>)
 8009c4e:	f7f8 fcf9 	bl	8002644 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8009c52:	2200      	movs	r2, #0
 8009c54:	2110      	movs	r1, #16
 8009c56:	4806      	ldr	r0, [pc, #24]	; (8009c70 <RBI_Init+0x7c>)
 8009c58:	f7f8 fcf4 	bl	8002644 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	2108      	movs	r1, #8
 8009c60:	4803      	ldr	r0, [pc, #12]	; (8009c70 <RBI_Init+0x7c>)
 8009c62:	f7f8 fcef 	bl	8002644 <HAL_GPIO_WritePin>
  /* USER CODE END RBI_Init_2 */
  return retcode;
 8009c66:	697b      	ldr	r3, [r7, #20]
#endif  /* USE_BSP_DRIVER  */
}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	3718      	adds	r7, #24
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd80      	pop	{r7, pc}
 8009c70:	48000800 	.word	0x48000800

08009c74 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b084      	sub	sp, #16
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
#else
  /* 2/ Or implement RBI_ConfigRFSwitch here */
  int32_t retcode = 0;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
	switch (Config) {
 8009c82:	79fb      	ldrb	r3, [r7, #7]
 8009c84:	2b03      	cmp	r3, #3
 8009c86:	d84b      	bhi.n	8009d20 <RBI_ConfigRFSwitch+0xac>
 8009c88:	a201      	add	r2, pc, #4	; (adr r2, 8009c90 <RBI_ConfigRFSwitch+0x1c>)
 8009c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c8e:	bf00      	nop
 8009c90:	08009ca1 	.word	0x08009ca1
 8009c94:	08009cc1 	.word	0x08009cc1
 8009c98:	08009ce1 	.word	0x08009ce1
 8009c9c:	08009d01 	.word	0x08009d01
	case RADIO_SWITCH_OFF: {
		/* Turn off switch */
		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN,
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	2108      	movs	r1, #8
 8009ca4:	4821      	ldr	r0, [pc, #132]	; (8009d2c <RBI_ConfigRFSwitch+0xb8>)
 8009ca6:	f7f8 fccd 	bl	8002644 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN,
 8009caa:	2200      	movs	r2, #0
 8009cac:	2110      	movs	r1, #16
 8009cae:	481f      	ldr	r0, [pc, #124]	; (8009d2c <RBI_ConfigRFSwitch+0xb8>)
 8009cb0:	f7f8 fcc8 	bl	8002644 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN,
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	2120      	movs	r1, #32
 8009cb8:	481c      	ldr	r0, [pc, #112]	; (8009d2c <RBI_ConfigRFSwitch+0xb8>)
 8009cba:	f7f8 fcc3 	bl	8002644 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		break;
 8009cbe:	e030      	b.n	8009d22 <RBI_ConfigRFSwitch+0xae>
	}
	case RADIO_SWITCH_RX: {
		/*Turns On in Rx Mode the RF Switch */
		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8009cc0:	2201      	movs	r2, #1
 8009cc2:	2108      	movs	r1, #8
 8009cc4:	4819      	ldr	r0, [pc, #100]	; (8009d2c <RBI_ConfigRFSwitch+0xb8>)
 8009cc6:	f7f8 fcbd 	bl	8002644 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET);
 8009cca:	2201      	movs	r2, #1
 8009ccc:	2110      	movs	r1, #16
 8009cce:	4817      	ldr	r0, [pc, #92]	; (8009d2c <RBI_ConfigRFSwitch+0xb8>)
 8009cd0:	f7f8 fcb8 	bl	8002644 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN,
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	2120      	movs	r1, #32
 8009cd8:	4814      	ldr	r0, [pc, #80]	; (8009d2c <RBI_ConfigRFSwitch+0xb8>)
 8009cda:	f7f8 fcb3 	bl	8002644 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		break;
 8009cde:	e020      	b.n	8009d22 <RBI_ConfigRFSwitch+0xae>
	}
	case RADIO_SWITCH_RFO_LP: {
		/*Turns On in Tx Low Power the RF Switch */
		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8009ce0:	2201      	movs	r2, #1
 8009ce2:	2108      	movs	r1, #8
 8009ce4:	4811      	ldr	r0, [pc, #68]	; (8009d2c <RBI_ConfigRFSwitch+0xb8>)
 8009ce6:	f7f8 fcad 	bl	8002644 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET);
 8009cea:	2201      	movs	r2, #1
 8009cec:	2110      	movs	r1, #16
 8009cee:	480f      	ldr	r0, [pc, #60]	; (8009d2c <RBI_ConfigRFSwitch+0xb8>)
 8009cf0:	f7f8 fca8 	bl	8002644 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 8009cf4:	2201      	movs	r2, #1
 8009cf6:	2120      	movs	r1, #32
 8009cf8:	480c      	ldr	r0, [pc, #48]	; (8009d2c <RBI_ConfigRFSwitch+0xb8>)
 8009cfa:	f7f8 fca3 	bl	8002644 <HAL_GPIO_WritePin>
		break;
 8009cfe:	e010      	b.n	8009d22 <RBI_ConfigRFSwitch+0xae>
	}
	case RADIO_SWITCH_RFO_HP: {
		/*Turns On in Tx High Power the RF Switch */
		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8009d00:	2201      	movs	r2, #1
 8009d02:	2108      	movs	r1, #8
 8009d04:	4809      	ldr	r0, [pc, #36]	; (8009d2c <RBI_ConfigRFSwitch+0xb8>)
 8009d06:	f7f8 fc9d 	bl	8002644 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN,
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	2110      	movs	r1, #16
 8009d0e:	4807      	ldr	r0, [pc, #28]	; (8009d2c <RBI_ConfigRFSwitch+0xb8>)
 8009d10:	f7f8 fc98 	bl	8002644 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 8009d14:	2201      	movs	r2, #1
 8009d16:	2120      	movs	r1, #32
 8009d18:	4804      	ldr	r0, [pc, #16]	; (8009d2c <RBI_ConfigRFSwitch+0xb8>)
 8009d1a:	f7f8 fc93 	bl	8002644 <HAL_GPIO_WritePin>
		break;
 8009d1e:	e000      	b.n	8009d22 <RBI_ConfigRFSwitch+0xae>
	}
	default:
		break;
 8009d20:	bf00      	nop
	}
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
 8009d22:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER */
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	3710      	adds	r7, #16
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}
 8009d2c:	48000800 	.word	0x48000800

08009d30 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8009d30:	b480      	push	{r7}
 8009d32:	b083      	sub	sp, #12
 8009d34:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
#else
  /* 2/ Or implement RBI_GetTxConfig here */
  int32_t retcode = RBI_CONF_RFO;
 8009d36:	2300      	movs	r3, #0
 8009d38:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
	return RADIO_CONF_RFO_LP_HP;
 8009d3a:	2300      	movs	r3, #0
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	370c      	adds	r7, #12
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bc80      	pop	{r7}
 8009d44:	4770      	bx	lr

08009d46 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8009d46:	b480      	push	{r7}
 8009d48:	b083      	sub	sp, #12
 8009d4a:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
#else
  /* 2/ Or implement RBI_IsTCXO here */
  int32_t retcode = IS_TCXO_SUPPORTED;
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsTCXO_2 */
	return IS_TCXO_SUPPORTED;
 8009d50:	2301      	movs	r3, #1
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	370c      	adds	r7, #12
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bc80      	pop	{r7}
 8009d5a:	4770      	bx	lr

08009d5c <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	b083      	sub	sp, #12
 8009d60:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
#else
  /* 2/ Or implement RBI_IsDCDC here */
  int32_t retcode = IS_DCDC_SUPPORTED;
 8009d62:	2301      	movs	r3, #1
 8009d64:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsDCDC_2 */
	return IS_DCDC_SUPPORTED;
 8009d66:	2301      	movs	r3, #1
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	370c      	adds	r7, #12
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bc80      	pop	{r7}
 8009d70:	4770      	bx	lr

08009d72 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 8009d72:	b480      	push	{r7}
 8009d74:	b085      	sub	sp, #20
 8009d76:	af00      	add	r7, sp, #0
 8009d78:	4603      	mov	r3, r0
 8009d7a:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
#else
  /* 2/ Or implement RBI_RBI_GetRFOMaxPowerConfig here */
  int32_t ret = 0;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_GetRFOMaxPowerConfig_2 */
// #warning user to provide its board code or to call his board driver functions
	if (Config == RBI_RFO_LP_MAXPOWER) {
 8009d80:	79fb      	ldrb	r3, [r7, #7]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d102      	bne.n	8009d8c <RBI_GetRFOMaxPowerConfig+0x1a>
		ret = 15; /*dBm*/
 8009d86:	230f      	movs	r3, #15
 8009d88:	60fb      	str	r3, [r7, #12]
 8009d8a:	e001      	b.n	8009d90 <RBI_GetRFOMaxPowerConfig+0x1e>
	} else {
		ret = 22; /*dBm*/
 8009d8c:	2316      	movs	r3, #22
 8009d8e:	60fb      	str	r3, [r7, #12]
	}
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
 8009d90:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER  */
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	3714      	adds	r7, #20
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bc80      	pop	{r7}
 8009d9a:	4770      	bx	lr

08009d9c <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b087      	sub	sp, #28
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	60f8      	str	r0, [r7, #12]
 8009da4:	60b9      	str	r1, [r7, #8]
 8009da6:	4613      	mov	r3, r2
 8009da8:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	613b      	str	r3, [r7, #16]

  while( size-- )
 8009db2:	e007      	b.n	8009dc4 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 8009db4:	693a      	ldr	r2, [r7, #16]
 8009db6:	1c53      	adds	r3, r2, #1
 8009db8:	613b      	str	r3, [r7, #16]
 8009dba:	697b      	ldr	r3, [r7, #20]
 8009dbc:	1c59      	adds	r1, r3, #1
 8009dbe:	6179      	str	r1, [r7, #20]
 8009dc0:	7812      	ldrb	r2, [r2, #0]
 8009dc2:	701a      	strb	r2, [r3, #0]
  while( size-- )
 8009dc4:	88fb      	ldrh	r3, [r7, #6]
 8009dc6:	1e5a      	subs	r2, r3, #1
 8009dc8:	80fa      	strh	r2, [r7, #6]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d1f2      	bne.n	8009db4 <UTIL_MEM_cpy_8+0x18>
    }
}
 8009dce:	bf00      	nop
 8009dd0:	bf00      	nop
 8009dd2:	371c      	adds	r7, #28
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bc80      	pop	{r7}
 8009dd8:	4770      	bx	lr

08009dda <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 8009dda:	b480      	push	{r7}
 8009ddc:	b085      	sub	sp, #20
 8009dde:	af00      	add	r7, sp, #0
 8009de0:	6078      	str	r0, [r7, #4]
 8009de2:	460b      	mov	r3, r1
 8009de4:	70fb      	strb	r3, [r7, #3]
 8009de6:	4613      	mov	r3, r2
 8009de8:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	60fb      	str	r3, [r7, #12]
  while( size-- )
 8009dee:	e004      	b.n	8009dfa <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	1c5a      	adds	r2, r3, #1
 8009df4:	60fa      	str	r2, [r7, #12]
 8009df6:	78fa      	ldrb	r2, [r7, #3]
 8009df8:	701a      	strb	r2, [r3, #0]
  while( size-- )
 8009dfa:	883b      	ldrh	r3, [r7, #0]
 8009dfc:	1e5a      	subs	r2, r3, #1
 8009dfe:	803a      	strh	r2, [r7, #0]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d1f5      	bne.n	8009df0 <UTIL_MEM_set_8+0x16>
  }
}
 8009e04:	bf00      	nop
 8009e06:	bf00      	nop
 8009e08:	3714      	adds	r7, #20
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bc80      	pop	{r7}
 8009e0e:	4770      	bx	lr

08009e10 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b084      	sub	sp, #16
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	60f8      	str	r0, [r7, #12]
 8009e18:	60b9      	str	r1, [r7, #8]
 8009e1a:	603b      	str	r3, [r7, #0]
 8009e1c:	4613      	mov	r3, r2
 8009e1e:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d023      	beq.n	8009e6e <UTIL_TIMER_Create+0x5e>
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d020      	beq.n	8009e6e <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8009e32:	4b11      	ldr	r3, [pc, #68]	; (8009e78 <UTIL_TIMER_Create+0x68>)
 8009e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e36:	68b8      	ldr	r0, [r7, #8]
 8009e38:	4798      	blx	r3
 8009e3a:	4602      	mov	r2, r0
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	2200      	movs	r2, #0
 8009e44:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	2200      	movs	r2, #0
 8009e4a:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	683a      	ldr	r2, [r7, #0]
 8009e56:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	69ba      	ldr	r2, [r7, #24]
 8009e5c:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	79fa      	ldrb	r2, [r7, #7]
 8009e62:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	2200      	movs	r2, #0
 8009e68:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	e000      	b.n	8009e70 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 8009e6e:	2301      	movs	r3, #1
  }
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3710      	adds	r7, #16
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}
 8009e78:	0800b0e8 	.word	0x0800b0e8

08009e7c <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b08a      	sub	sp, #40	; 0x28
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8009e84:	2300      	movs	r3, #0
 8009e86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d056      	beq.n	8009f3e <UTIL_TIMER_Start+0xc2>
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f000 f929 	bl	800a0e8 <TimerExists>
 8009e96:	4603      	mov	r3, r0
 8009e98:	f083 0301 	eor.w	r3, r3, #1
 8009e9c:	b2db      	uxtb	r3, r3
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d04d      	beq.n	8009f3e <UTIL_TIMER_Start+0xc2>
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	7a5b      	ldrb	r3, [r3, #9]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d149      	bne.n	8009f3e <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009eaa:	f3ef 8310 	mrs	r3, PRIMASK
 8009eae:	613b      	str	r3, [r7, #16]
  return(result);
 8009eb0:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 8009eb2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8009eb4:	b672      	cpsid	i
}
 8009eb6:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	685b      	ldr	r3, [r3, #4]
 8009ebc:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 8009ebe:	4b24      	ldr	r3, [pc, #144]	; (8009f50 <UTIL_TIMER_Start+0xd4>)
 8009ec0:	6a1b      	ldr	r3, [r3, #32]
 8009ec2:	4798      	blx	r3
 8009ec4:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 8009ec6:	6a3a      	ldr	r2, [r7, #32]
 8009ec8:	69bb      	ldr	r3, [r7, #24]
 8009eca:	429a      	cmp	r2, r3
 8009ecc:	d201      	bcs.n	8009ed2 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 8009ece:	69bb      	ldr	r3, [r7, #24]
 8009ed0:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6a3a      	ldr	r2, [r7, #32]
 8009ed6:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2200      	movs	r2, #0
 8009edc:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2201      	movs	r2, #1
 8009ee2:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 8009eea:	4b1a      	ldr	r3, [pc, #104]	; (8009f54 <UTIL_TIMER_Start+0xd8>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d106      	bne.n	8009f00 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 8009ef2:	4b17      	ldr	r3, [pc, #92]	; (8009f50 <UTIL_TIMER_Start+0xd4>)
 8009ef4:	691b      	ldr	r3, [r3, #16]
 8009ef6:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	f000 f96b 	bl	800a1d4 <TimerInsertNewHeadTimer>
 8009efe:	e017      	b.n	8009f30 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 8009f00:	4b13      	ldr	r3, [pc, #76]	; (8009f50 <UTIL_TIMER_Start+0xd4>)
 8009f02:	699b      	ldr	r3, [r3, #24]
 8009f04:	4798      	blx	r3
 8009f06:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681a      	ldr	r2, [r3, #0]
 8009f0c:	697b      	ldr	r3, [r7, #20]
 8009f0e:	441a      	add	r2, r3
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681a      	ldr	r2, [r3, #0]
 8009f18:	4b0e      	ldr	r3, [pc, #56]	; (8009f54 <UTIL_TIMER_Start+0xd8>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	429a      	cmp	r2, r3
 8009f20:	d203      	bcs.n	8009f2a <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 8009f22:	6878      	ldr	r0, [r7, #4]
 8009f24:	f000 f956 	bl	800a1d4 <TimerInsertNewHeadTimer>
 8009f28:	e002      	b.n	8009f30 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f000 f922 	bl	800a174 <TimerInsertTimer>
 8009f30:	69fb      	ldr	r3, [r7, #28]
 8009f32:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	f383 8810 	msr	PRIMASK, r3
}
 8009f3a:	bf00      	nop
  {
 8009f3c:	e002      	b.n	8009f44 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 8009f3e:	2301      	movs	r3, #1
 8009f40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 8009f44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	3728      	adds	r7, #40	; 0x28
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}
 8009f50:	0800b0e8 	.word	0x0800b0e8
 8009f54:	20000570 	.word	0x20000570

08009f58 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b088      	sub	sp, #32
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8009f60:	2300      	movs	r3, #0
 8009f62:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d05b      	beq.n	800a022 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f6a:	f3ef 8310 	mrs	r3, PRIMASK
 8009f6e:	60fb      	str	r3, [r7, #12]
  return(result);
 8009f70:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 8009f72:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8009f74:	b672      	cpsid	i
}
 8009f76:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 8009f78:	4b2d      	ldr	r3, [pc, #180]	; (800a030 <UTIL_TIMER_Stop+0xd8>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 8009f7e:	4b2c      	ldr	r3, [pc, #176]	; (800a030 <UTIL_TIMER_Stop+0xd8>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2201      	movs	r2, #1
 8009f88:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 8009f8a:	4b29      	ldr	r3, [pc, #164]	; (800a030 <UTIL_TIMER_Stop+0xd8>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d041      	beq.n	800a016 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2200      	movs	r2, #0
 8009f96:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 8009f98:	4b25      	ldr	r3, [pc, #148]	; (800a030 <UTIL_TIMER_Stop+0xd8>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	687a      	ldr	r2, [r7, #4]
 8009f9e:	429a      	cmp	r2, r3
 8009fa0:	d134      	bne.n	800a00c <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 8009fa2:	4b23      	ldr	r3, [pc, #140]	; (800a030 <UTIL_TIMER_Stop+0xd8>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 8009faa:	4b21      	ldr	r3, [pc, #132]	; (800a030 <UTIL_TIMER_Stop+0xd8>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	695b      	ldr	r3, [r3, #20]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d00a      	beq.n	8009fca <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 8009fb4:	4b1e      	ldr	r3, [pc, #120]	; (800a030 <UTIL_TIMER_Stop+0xd8>)
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	695b      	ldr	r3, [r3, #20]
 8009fba:	4a1d      	ldr	r2, [pc, #116]	; (800a030 <UTIL_TIMER_Stop+0xd8>)
 8009fbc:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 8009fbe:	4b1c      	ldr	r3, [pc, #112]	; (800a030 <UTIL_TIMER_Stop+0xd8>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f000 f8ac 	bl	800a120 <TimerSetTimeout>
 8009fc8:	e023      	b.n	800a012 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 8009fca:	4b1a      	ldr	r3, [pc, #104]	; (800a034 <UTIL_TIMER_Stop+0xdc>)
 8009fcc:	68db      	ldr	r3, [r3, #12]
 8009fce:	4798      	blx	r3
            TimerListHead = NULL;
 8009fd0:	4b17      	ldr	r3, [pc, #92]	; (800a030 <UTIL_TIMER_Stop+0xd8>)
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	601a      	str	r2, [r3, #0]
 8009fd6:	e01c      	b.n	800a012 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 8009fd8:	697a      	ldr	r2, [r7, #20]
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	429a      	cmp	r2, r3
 8009fde:	d110      	bne.n	800a002 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 8009fe0:	697b      	ldr	r3, [r7, #20]
 8009fe2:	695b      	ldr	r3, [r3, #20]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d006      	beq.n	8009ff6 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 8009fe8:	697b      	ldr	r3, [r7, #20]
 8009fea:	695b      	ldr	r3, [r3, #20]
 8009fec:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 8009fee:	69bb      	ldr	r3, [r7, #24]
 8009ff0:	697a      	ldr	r2, [r7, #20]
 8009ff2:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 8009ff4:	e00d      	b.n	800a012 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 8009ffa:	69bb      	ldr	r3, [r7, #24]
 8009ffc:	697a      	ldr	r2, [r7, #20]
 8009ffe:	615a      	str	r2, [r3, #20]
            break;
 800a000:	e007      	b.n	800a012 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 800a002:	697b      	ldr	r3, [r7, #20]
 800a004:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	695b      	ldr	r3, [r3, #20]
 800a00a:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 800a00c:	697b      	ldr	r3, [r7, #20]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d1e2      	bne.n	8009fd8 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 800a012:	2300      	movs	r3, #0
 800a014:	77fb      	strb	r3, [r7, #31]
 800a016:	693b      	ldr	r3, [r7, #16]
 800a018:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	f383 8810 	msr	PRIMASK, r3
}
 800a020:	e001      	b.n	800a026 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 800a022:	2301      	movs	r3, #1
 800a024:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 800a026:	7ffb      	ldrb	r3, [r7, #31]
}
 800a028:	4618      	mov	r0, r3
 800a02a:	3720      	adds	r7, #32
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bd80      	pop	{r7, pc}
 800a030:	20000570 	.word	0x20000570
 800a034:	0800b0e8 	.word	0x0800b0e8

0800a038 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b084      	sub	sp, #16
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
 800a040:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800a042:	2300      	movs	r3, #0
 800a044:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d102      	bne.n	800a052 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 800a04c:	2301      	movs	r3, #1
 800a04e:	73fb      	strb	r3, [r7, #15]
 800a050:	e014      	b.n	800a07c <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800a052:	4b0d      	ldr	r3, [pc, #52]	; (800a088 <UTIL_TIMER_SetPeriod+0x50>)
 800a054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a056:	6838      	ldr	r0, [r7, #0]
 800a058:	4798      	blx	r3
 800a05a:	4602      	mov	r2, r0
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f000 f841 	bl	800a0e8 <TimerExists>
 800a066:	4603      	mov	r3, r0
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d007      	beq.n	800a07c <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f7ff ff73 	bl	8009f58 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f7ff ff02 	bl	8009e7c <UTIL_TIMER_Start>
 800a078:	4603      	mov	r3, r0
 800a07a:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 800a07c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a07e:	4618      	mov	r0, r3
 800a080:	3710      	adds	r7, #16
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}
 800a086:	bf00      	nop
 800a088:	0800b0e8 	.word	0x0800b0e8

0800a08c <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b082      	sub	sp, #8
 800a090:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800a092:	4b06      	ldr	r3, [pc, #24]	; (800a0ac <UTIL_TIMER_GetCurrentTime+0x20>)
 800a094:	69db      	ldr	r3, [r3, #28]
 800a096:	4798      	blx	r3
 800a098:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 800a09a:	4b04      	ldr	r3, [pc, #16]	; (800a0ac <UTIL_TIMER_GetCurrentTime+0x20>)
 800a09c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	4798      	blx	r3
 800a0a2:	4603      	mov	r3, r0
}
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	3708      	adds	r7, #8
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}
 800a0ac:	0800b0e8 	.word	0x0800b0e8

0800a0b0 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b084      	sub	sp, #16
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800a0b8:	4b0a      	ldr	r3, [pc, #40]	; (800a0e4 <UTIL_TIMER_GetElapsedTime+0x34>)
 800a0ba:	69db      	ldr	r3, [r3, #28]
 800a0bc:	4798      	blx	r3
 800a0be:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800a0c0:	4b08      	ldr	r3, [pc, #32]	; (800a0e4 <UTIL_TIMER_GetElapsedTime+0x34>)
 800a0c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	4798      	blx	r3
 800a0c8:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800a0ca:	4b06      	ldr	r3, [pc, #24]	; (800a0e4 <UTIL_TIMER_GetElapsedTime+0x34>)
 800a0cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0ce:	68f9      	ldr	r1, [r7, #12]
 800a0d0:	68ba      	ldr	r2, [r7, #8]
 800a0d2:	1a8a      	subs	r2, r1, r2
 800a0d4:	4610      	mov	r0, r2
 800a0d6:	4798      	blx	r3
 800a0d8:	4603      	mov	r3, r0
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3710      	adds	r7, #16
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}
 800a0e2:	bf00      	nop
 800a0e4:	0800b0e8 	.word	0x0800b0e8

0800a0e8 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b085      	sub	sp, #20
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800a0f0:	4b0a      	ldr	r3, [pc, #40]	; (800a11c <TimerExists+0x34>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 800a0f6:	e008      	b.n	800a10a <TimerExists+0x22>
  {
    if( cur == TimerObject )
 800a0f8:	68fa      	ldr	r2, [r7, #12]
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	429a      	cmp	r2, r3
 800a0fe:	d101      	bne.n	800a104 <TimerExists+0x1c>
    {
      return true;
 800a100:	2301      	movs	r3, #1
 800a102:	e006      	b.n	800a112 <TimerExists+0x2a>
    }
    cur = cur->Next;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	695b      	ldr	r3, [r3, #20]
 800a108:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d1f3      	bne.n	800a0f8 <TimerExists+0x10>
  }
  return false;
 800a110:	2300      	movs	r3, #0
}
 800a112:	4618      	mov	r0, r3
 800a114:	3714      	adds	r7, #20
 800a116:	46bd      	mov	sp, r7
 800a118:	bc80      	pop	{r7}
 800a11a:	4770      	bx	lr
 800a11c:	20000570 	.word	0x20000570

0800a120 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800a120:	b590      	push	{r4, r7, lr}
 800a122:	b085      	sub	sp, #20
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800a128:	4b11      	ldr	r3, [pc, #68]	; (800a170 <TimerSetTimeout+0x50>)
 800a12a:	6a1b      	ldr	r3, [r3, #32]
 800a12c:	4798      	blx	r3
 800a12e:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2201      	movs	r2, #1
 800a134:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681c      	ldr	r4, [r3, #0]
 800a13a:	4b0d      	ldr	r3, [pc, #52]	; (800a170 <TimerSetTimeout+0x50>)
 800a13c:	699b      	ldr	r3, [r3, #24]
 800a13e:	4798      	blx	r3
 800a140:	4602      	mov	r2, r0
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	4413      	add	r3, r2
 800a146:	429c      	cmp	r4, r3
 800a148:	d207      	bcs.n	800a15a <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800a14a:	4b09      	ldr	r3, [pc, #36]	; (800a170 <TimerSetTimeout+0x50>)
 800a14c:	699b      	ldr	r3, [r3, #24]
 800a14e:	4798      	blx	r3
 800a150:	4602      	mov	r2, r0
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	441a      	add	r2, r3
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800a15a:	4b05      	ldr	r3, [pc, #20]	; (800a170 <TimerSetTimeout+0x50>)
 800a15c:	689b      	ldr	r3, [r3, #8]
 800a15e:	687a      	ldr	r2, [r7, #4]
 800a160:	6812      	ldr	r2, [r2, #0]
 800a162:	4610      	mov	r0, r2
 800a164:	4798      	blx	r3
}
 800a166:	bf00      	nop
 800a168:	3714      	adds	r7, #20
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd90      	pop	{r4, r7, pc}
 800a16e:	bf00      	nop
 800a170:	0800b0e8 	.word	0x0800b0e8

0800a174 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 800a174:	b480      	push	{r7}
 800a176:	b085      	sub	sp, #20
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800a17c:	4b14      	ldr	r3, [pc, #80]	; (800a1d0 <TimerInsertTimer+0x5c>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800a182:	4b13      	ldr	r3, [pc, #76]	; (800a1d0 <TimerInsertTimer+0x5c>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	695b      	ldr	r3, [r3, #20]
 800a188:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 800a18a:	e012      	b.n	800a1b2 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681a      	ldr	r2, [r3, #0]
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	429a      	cmp	r2, r3
 800a196:	d905      	bls.n	800a1a4 <TimerInsertTimer+0x30>
    {
        cur = next;
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	695b      	ldr	r3, [r3, #20]
 800a1a0:	60bb      	str	r3, [r7, #8]
 800a1a2:	e006      	b.n	800a1b2 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	687a      	ldr	r2, [r7, #4]
 800a1a8:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	68ba      	ldr	r2, [r7, #8]
 800a1ae:	615a      	str	r2, [r3, #20]
        return;
 800a1b0:	e009      	b.n	800a1c6 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	695b      	ldr	r3, [r3, #20]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d1e8      	bne.n	800a18c <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	687a      	ldr	r2, [r7, #4]
 800a1be:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	615a      	str	r2, [r3, #20]
}
 800a1c6:	3714      	adds	r7, #20
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bc80      	pop	{r7}
 800a1cc:	4770      	bx	lr
 800a1ce:	bf00      	nop
 800a1d0:	20000570 	.word	0x20000570

0800a1d4 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b084      	sub	sp, #16
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800a1dc:	4b0b      	ldr	r3, [pc, #44]	; (800a20c <TimerInsertNewHeadTimer+0x38>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d002      	beq.n	800a1ee <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	68fa      	ldr	r2, [r7, #12]
 800a1f2:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 800a1f4:	4a05      	ldr	r2, [pc, #20]	; (800a20c <TimerInsertNewHeadTimer+0x38>)
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800a1fa:	4b04      	ldr	r3, [pc, #16]	; (800a20c <TimerInsertNewHeadTimer+0x38>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	4618      	mov	r0, r3
 800a200:	f7ff ff8e 	bl	800a120 <TimerSetTimeout>
}
 800a204:	bf00      	nop
 800a206:	3710      	adds	r7, #16
 800a208:	46bd      	mov	sp, r7
 800a20a:	bd80      	pop	{r7, pc}
 800a20c:	20000570 	.word	0x20000570

0800a210 <_vsniprintf_r>:
 800a210:	b530      	push	{r4, r5, lr}
 800a212:	4614      	mov	r4, r2
 800a214:	2c00      	cmp	r4, #0
 800a216:	b09b      	sub	sp, #108	; 0x6c
 800a218:	4605      	mov	r5, r0
 800a21a:	461a      	mov	r2, r3
 800a21c:	da05      	bge.n	800a22a <_vsniprintf_r+0x1a>
 800a21e:	238b      	movs	r3, #139	; 0x8b
 800a220:	6003      	str	r3, [r0, #0]
 800a222:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a226:	b01b      	add	sp, #108	; 0x6c
 800a228:	bd30      	pop	{r4, r5, pc}
 800a22a:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a22e:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a232:	bf14      	ite	ne
 800a234:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800a238:	4623      	moveq	r3, r4
 800a23a:	9302      	str	r3, [sp, #8]
 800a23c:	9305      	str	r3, [sp, #20]
 800a23e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a242:	9100      	str	r1, [sp, #0]
 800a244:	9104      	str	r1, [sp, #16]
 800a246:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a24a:	4669      	mov	r1, sp
 800a24c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a24e:	f000 f8b5 	bl	800a3bc <_svfiprintf_r>
 800a252:	1c43      	adds	r3, r0, #1
 800a254:	bfbc      	itt	lt
 800a256:	238b      	movlt	r3, #139	; 0x8b
 800a258:	602b      	strlt	r3, [r5, #0]
 800a25a:	2c00      	cmp	r4, #0
 800a25c:	d0e3      	beq.n	800a226 <_vsniprintf_r+0x16>
 800a25e:	9b00      	ldr	r3, [sp, #0]
 800a260:	2200      	movs	r2, #0
 800a262:	701a      	strb	r2, [r3, #0]
 800a264:	e7df      	b.n	800a226 <_vsniprintf_r+0x16>
	...

0800a268 <vsniprintf>:
 800a268:	b507      	push	{r0, r1, r2, lr}
 800a26a:	9300      	str	r3, [sp, #0]
 800a26c:	4613      	mov	r3, r2
 800a26e:	460a      	mov	r2, r1
 800a270:	4601      	mov	r1, r0
 800a272:	4803      	ldr	r0, [pc, #12]	; (800a280 <vsniprintf+0x18>)
 800a274:	6800      	ldr	r0, [r0, #0]
 800a276:	f7ff ffcb 	bl	800a210 <_vsniprintf_r>
 800a27a:	b003      	add	sp, #12
 800a27c:	f85d fb04 	ldr.w	pc, [sp], #4
 800a280:	2000005c 	.word	0x2000005c

0800a284 <memset>:
 800a284:	4402      	add	r2, r0
 800a286:	4603      	mov	r3, r0
 800a288:	4293      	cmp	r3, r2
 800a28a:	d100      	bne.n	800a28e <memset+0xa>
 800a28c:	4770      	bx	lr
 800a28e:	f803 1b01 	strb.w	r1, [r3], #1
 800a292:	e7f9      	b.n	800a288 <memset+0x4>

0800a294 <__errno>:
 800a294:	4b01      	ldr	r3, [pc, #4]	; (800a29c <__errno+0x8>)
 800a296:	6818      	ldr	r0, [r3, #0]
 800a298:	4770      	bx	lr
 800a29a:	bf00      	nop
 800a29c:	2000005c 	.word	0x2000005c

0800a2a0 <__libc_init_array>:
 800a2a0:	b570      	push	{r4, r5, r6, lr}
 800a2a2:	4d0d      	ldr	r5, [pc, #52]	; (800a2d8 <__libc_init_array+0x38>)
 800a2a4:	4c0d      	ldr	r4, [pc, #52]	; (800a2dc <__libc_init_array+0x3c>)
 800a2a6:	1b64      	subs	r4, r4, r5
 800a2a8:	10a4      	asrs	r4, r4, #2
 800a2aa:	2600      	movs	r6, #0
 800a2ac:	42a6      	cmp	r6, r4
 800a2ae:	d109      	bne.n	800a2c4 <__libc_init_array+0x24>
 800a2b0:	4d0b      	ldr	r5, [pc, #44]	; (800a2e0 <__libc_init_array+0x40>)
 800a2b2:	4c0c      	ldr	r4, [pc, #48]	; (800a2e4 <__libc_init_array+0x44>)
 800a2b4:	f000 fc68 	bl	800ab88 <_init>
 800a2b8:	1b64      	subs	r4, r4, r5
 800a2ba:	10a4      	asrs	r4, r4, #2
 800a2bc:	2600      	movs	r6, #0
 800a2be:	42a6      	cmp	r6, r4
 800a2c0:	d105      	bne.n	800a2ce <__libc_init_array+0x2e>
 800a2c2:	bd70      	pop	{r4, r5, r6, pc}
 800a2c4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a2c8:	4798      	blx	r3
 800a2ca:	3601      	adds	r6, #1
 800a2cc:	e7ee      	b.n	800a2ac <__libc_init_array+0xc>
 800a2ce:	f855 3b04 	ldr.w	r3, [r5], #4
 800a2d2:	4798      	blx	r3
 800a2d4:	3601      	adds	r6, #1
 800a2d6:	e7f2      	b.n	800a2be <__libc_init_array+0x1e>
 800a2d8:	0800b2b8 	.word	0x0800b2b8
 800a2dc:	0800b2b8 	.word	0x0800b2b8
 800a2e0:	0800b2b8 	.word	0x0800b2b8
 800a2e4:	0800b2bc 	.word	0x0800b2bc

0800a2e8 <__retarget_lock_acquire_recursive>:
 800a2e8:	4770      	bx	lr

0800a2ea <__retarget_lock_release_recursive>:
 800a2ea:	4770      	bx	lr

0800a2ec <memcpy>:
 800a2ec:	440a      	add	r2, r1
 800a2ee:	4291      	cmp	r1, r2
 800a2f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a2f4:	d100      	bne.n	800a2f8 <memcpy+0xc>
 800a2f6:	4770      	bx	lr
 800a2f8:	b510      	push	{r4, lr}
 800a2fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a2fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a302:	4291      	cmp	r1, r2
 800a304:	d1f9      	bne.n	800a2fa <memcpy+0xe>
 800a306:	bd10      	pop	{r4, pc}

0800a308 <__ssputs_r>:
 800a308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a30c:	688e      	ldr	r6, [r1, #8]
 800a30e:	461f      	mov	r7, r3
 800a310:	42be      	cmp	r6, r7
 800a312:	680b      	ldr	r3, [r1, #0]
 800a314:	4682      	mov	sl, r0
 800a316:	460c      	mov	r4, r1
 800a318:	4690      	mov	r8, r2
 800a31a:	d82c      	bhi.n	800a376 <__ssputs_r+0x6e>
 800a31c:	898a      	ldrh	r2, [r1, #12]
 800a31e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a322:	d026      	beq.n	800a372 <__ssputs_r+0x6a>
 800a324:	6965      	ldr	r5, [r4, #20]
 800a326:	6909      	ldr	r1, [r1, #16]
 800a328:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a32c:	eba3 0901 	sub.w	r9, r3, r1
 800a330:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a334:	1c7b      	adds	r3, r7, #1
 800a336:	444b      	add	r3, r9
 800a338:	106d      	asrs	r5, r5, #1
 800a33a:	429d      	cmp	r5, r3
 800a33c:	bf38      	it	cc
 800a33e:	461d      	movcc	r5, r3
 800a340:	0553      	lsls	r3, r2, #21
 800a342:	d527      	bpl.n	800a394 <__ssputs_r+0x8c>
 800a344:	4629      	mov	r1, r5
 800a346:	f000 f957 	bl	800a5f8 <_malloc_r>
 800a34a:	4606      	mov	r6, r0
 800a34c:	b360      	cbz	r0, 800a3a8 <__ssputs_r+0xa0>
 800a34e:	6921      	ldr	r1, [r4, #16]
 800a350:	464a      	mov	r2, r9
 800a352:	f7ff ffcb 	bl	800a2ec <memcpy>
 800a356:	89a3      	ldrh	r3, [r4, #12]
 800a358:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a35c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a360:	81a3      	strh	r3, [r4, #12]
 800a362:	6126      	str	r6, [r4, #16]
 800a364:	6165      	str	r5, [r4, #20]
 800a366:	444e      	add	r6, r9
 800a368:	eba5 0509 	sub.w	r5, r5, r9
 800a36c:	6026      	str	r6, [r4, #0]
 800a36e:	60a5      	str	r5, [r4, #8]
 800a370:	463e      	mov	r6, r7
 800a372:	42be      	cmp	r6, r7
 800a374:	d900      	bls.n	800a378 <__ssputs_r+0x70>
 800a376:	463e      	mov	r6, r7
 800a378:	6820      	ldr	r0, [r4, #0]
 800a37a:	4632      	mov	r2, r6
 800a37c:	4641      	mov	r1, r8
 800a37e:	f000 fb86 	bl	800aa8e <memmove>
 800a382:	68a3      	ldr	r3, [r4, #8]
 800a384:	1b9b      	subs	r3, r3, r6
 800a386:	60a3      	str	r3, [r4, #8]
 800a388:	6823      	ldr	r3, [r4, #0]
 800a38a:	4433      	add	r3, r6
 800a38c:	6023      	str	r3, [r4, #0]
 800a38e:	2000      	movs	r0, #0
 800a390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a394:	462a      	mov	r2, r5
 800a396:	f000 fb4b 	bl	800aa30 <_realloc_r>
 800a39a:	4606      	mov	r6, r0
 800a39c:	2800      	cmp	r0, #0
 800a39e:	d1e0      	bne.n	800a362 <__ssputs_r+0x5a>
 800a3a0:	6921      	ldr	r1, [r4, #16]
 800a3a2:	4650      	mov	r0, sl
 800a3a4:	f000 fb9e 	bl	800aae4 <_free_r>
 800a3a8:	230c      	movs	r3, #12
 800a3aa:	f8ca 3000 	str.w	r3, [sl]
 800a3ae:	89a3      	ldrh	r3, [r4, #12]
 800a3b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3b4:	81a3      	strh	r3, [r4, #12]
 800a3b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a3ba:	e7e9      	b.n	800a390 <__ssputs_r+0x88>

0800a3bc <_svfiprintf_r>:
 800a3bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3c0:	4698      	mov	r8, r3
 800a3c2:	898b      	ldrh	r3, [r1, #12]
 800a3c4:	061b      	lsls	r3, r3, #24
 800a3c6:	b09d      	sub	sp, #116	; 0x74
 800a3c8:	4607      	mov	r7, r0
 800a3ca:	460d      	mov	r5, r1
 800a3cc:	4614      	mov	r4, r2
 800a3ce:	d50e      	bpl.n	800a3ee <_svfiprintf_r+0x32>
 800a3d0:	690b      	ldr	r3, [r1, #16]
 800a3d2:	b963      	cbnz	r3, 800a3ee <_svfiprintf_r+0x32>
 800a3d4:	2140      	movs	r1, #64	; 0x40
 800a3d6:	f000 f90f 	bl	800a5f8 <_malloc_r>
 800a3da:	6028      	str	r0, [r5, #0]
 800a3dc:	6128      	str	r0, [r5, #16]
 800a3de:	b920      	cbnz	r0, 800a3ea <_svfiprintf_r+0x2e>
 800a3e0:	230c      	movs	r3, #12
 800a3e2:	603b      	str	r3, [r7, #0]
 800a3e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a3e8:	e0d0      	b.n	800a58c <_svfiprintf_r+0x1d0>
 800a3ea:	2340      	movs	r3, #64	; 0x40
 800a3ec:	616b      	str	r3, [r5, #20]
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	9309      	str	r3, [sp, #36]	; 0x24
 800a3f2:	2320      	movs	r3, #32
 800a3f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a3f8:	f8cd 800c 	str.w	r8, [sp, #12]
 800a3fc:	2330      	movs	r3, #48	; 0x30
 800a3fe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a5a4 <_svfiprintf_r+0x1e8>
 800a402:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a406:	f04f 0901 	mov.w	r9, #1
 800a40a:	4623      	mov	r3, r4
 800a40c:	469a      	mov	sl, r3
 800a40e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a412:	b10a      	cbz	r2, 800a418 <_svfiprintf_r+0x5c>
 800a414:	2a25      	cmp	r2, #37	; 0x25
 800a416:	d1f9      	bne.n	800a40c <_svfiprintf_r+0x50>
 800a418:	ebba 0b04 	subs.w	fp, sl, r4
 800a41c:	d00b      	beq.n	800a436 <_svfiprintf_r+0x7a>
 800a41e:	465b      	mov	r3, fp
 800a420:	4622      	mov	r2, r4
 800a422:	4629      	mov	r1, r5
 800a424:	4638      	mov	r0, r7
 800a426:	f7ff ff6f 	bl	800a308 <__ssputs_r>
 800a42a:	3001      	adds	r0, #1
 800a42c:	f000 80a9 	beq.w	800a582 <_svfiprintf_r+0x1c6>
 800a430:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a432:	445a      	add	r2, fp
 800a434:	9209      	str	r2, [sp, #36]	; 0x24
 800a436:	f89a 3000 	ldrb.w	r3, [sl]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	f000 80a1 	beq.w	800a582 <_svfiprintf_r+0x1c6>
 800a440:	2300      	movs	r3, #0
 800a442:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a446:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a44a:	f10a 0a01 	add.w	sl, sl, #1
 800a44e:	9304      	str	r3, [sp, #16]
 800a450:	9307      	str	r3, [sp, #28]
 800a452:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a456:	931a      	str	r3, [sp, #104]	; 0x68
 800a458:	4654      	mov	r4, sl
 800a45a:	2205      	movs	r2, #5
 800a45c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a460:	4850      	ldr	r0, [pc, #320]	; (800a5a4 <_svfiprintf_r+0x1e8>)
 800a462:	f7f5 fe8d 	bl	8000180 <memchr>
 800a466:	9a04      	ldr	r2, [sp, #16]
 800a468:	b9d8      	cbnz	r0, 800a4a2 <_svfiprintf_r+0xe6>
 800a46a:	06d0      	lsls	r0, r2, #27
 800a46c:	bf44      	itt	mi
 800a46e:	2320      	movmi	r3, #32
 800a470:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a474:	0711      	lsls	r1, r2, #28
 800a476:	bf44      	itt	mi
 800a478:	232b      	movmi	r3, #43	; 0x2b
 800a47a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a47e:	f89a 3000 	ldrb.w	r3, [sl]
 800a482:	2b2a      	cmp	r3, #42	; 0x2a
 800a484:	d015      	beq.n	800a4b2 <_svfiprintf_r+0xf6>
 800a486:	9a07      	ldr	r2, [sp, #28]
 800a488:	4654      	mov	r4, sl
 800a48a:	2000      	movs	r0, #0
 800a48c:	f04f 0c0a 	mov.w	ip, #10
 800a490:	4621      	mov	r1, r4
 800a492:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a496:	3b30      	subs	r3, #48	; 0x30
 800a498:	2b09      	cmp	r3, #9
 800a49a:	d94d      	bls.n	800a538 <_svfiprintf_r+0x17c>
 800a49c:	b1b0      	cbz	r0, 800a4cc <_svfiprintf_r+0x110>
 800a49e:	9207      	str	r2, [sp, #28]
 800a4a0:	e014      	b.n	800a4cc <_svfiprintf_r+0x110>
 800a4a2:	eba0 0308 	sub.w	r3, r0, r8
 800a4a6:	fa09 f303 	lsl.w	r3, r9, r3
 800a4aa:	4313      	orrs	r3, r2
 800a4ac:	9304      	str	r3, [sp, #16]
 800a4ae:	46a2      	mov	sl, r4
 800a4b0:	e7d2      	b.n	800a458 <_svfiprintf_r+0x9c>
 800a4b2:	9b03      	ldr	r3, [sp, #12]
 800a4b4:	1d19      	adds	r1, r3, #4
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	9103      	str	r1, [sp, #12]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	bfbb      	ittet	lt
 800a4be:	425b      	neglt	r3, r3
 800a4c0:	f042 0202 	orrlt.w	r2, r2, #2
 800a4c4:	9307      	strge	r3, [sp, #28]
 800a4c6:	9307      	strlt	r3, [sp, #28]
 800a4c8:	bfb8      	it	lt
 800a4ca:	9204      	strlt	r2, [sp, #16]
 800a4cc:	7823      	ldrb	r3, [r4, #0]
 800a4ce:	2b2e      	cmp	r3, #46	; 0x2e
 800a4d0:	d10c      	bne.n	800a4ec <_svfiprintf_r+0x130>
 800a4d2:	7863      	ldrb	r3, [r4, #1]
 800a4d4:	2b2a      	cmp	r3, #42	; 0x2a
 800a4d6:	d134      	bne.n	800a542 <_svfiprintf_r+0x186>
 800a4d8:	9b03      	ldr	r3, [sp, #12]
 800a4da:	1d1a      	adds	r2, r3, #4
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	9203      	str	r2, [sp, #12]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	bfb8      	it	lt
 800a4e4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a4e8:	3402      	adds	r4, #2
 800a4ea:	9305      	str	r3, [sp, #20]
 800a4ec:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800a5a8 <_svfiprintf_r+0x1ec>
 800a4f0:	7821      	ldrb	r1, [r4, #0]
 800a4f2:	2203      	movs	r2, #3
 800a4f4:	4650      	mov	r0, sl
 800a4f6:	f7f5 fe43 	bl	8000180 <memchr>
 800a4fa:	b138      	cbz	r0, 800a50c <_svfiprintf_r+0x150>
 800a4fc:	9b04      	ldr	r3, [sp, #16]
 800a4fe:	eba0 000a 	sub.w	r0, r0, sl
 800a502:	2240      	movs	r2, #64	; 0x40
 800a504:	4082      	lsls	r2, r0
 800a506:	4313      	orrs	r3, r2
 800a508:	3401      	adds	r4, #1
 800a50a:	9304      	str	r3, [sp, #16]
 800a50c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a510:	4826      	ldr	r0, [pc, #152]	; (800a5ac <_svfiprintf_r+0x1f0>)
 800a512:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a516:	2206      	movs	r2, #6
 800a518:	f7f5 fe32 	bl	8000180 <memchr>
 800a51c:	2800      	cmp	r0, #0
 800a51e:	d038      	beq.n	800a592 <_svfiprintf_r+0x1d6>
 800a520:	4b23      	ldr	r3, [pc, #140]	; (800a5b0 <_svfiprintf_r+0x1f4>)
 800a522:	bb1b      	cbnz	r3, 800a56c <_svfiprintf_r+0x1b0>
 800a524:	9b03      	ldr	r3, [sp, #12]
 800a526:	3307      	adds	r3, #7
 800a528:	f023 0307 	bic.w	r3, r3, #7
 800a52c:	3308      	adds	r3, #8
 800a52e:	9303      	str	r3, [sp, #12]
 800a530:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a532:	4433      	add	r3, r6
 800a534:	9309      	str	r3, [sp, #36]	; 0x24
 800a536:	e768      	b.n	800a40a <_svfiprintf_r+0x4e>
 800a538:	fb0c 3202 	mla	r2, ip, r2, r3
 800a53c:	460c      	mov	r4, r1
 800a53e:	2001      	movs	r0, #1
 800a540:	e7a6      	b.n	800a490 <_svfiprintf_r+0xd4>
 800a542:	2300      	movs	r3, #0
 800a544:	3401      	adds	r4, #1
 800a546:	9305      	str	r3, [sp, #20]
 800a548:	4619      	mov	r1, r3
 800a54a:	f04f 0c0a 	mov.w	ip, #10
 800a54e:	4620      	mov	r0, r4
 800a550:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a554:	3a30      	subs	r2, #48	; 0x30
 800a556:	2a09      	cmp	r2, #9
 800a558:	d903      	bls.n	800a562 <_svfiprintf_r+0x1a6>
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d0c6      	beq.n	800a4ec <_svfiprintf_r+0x130>
 800a55e:	9105      	str	r1, [sp, #20]
 800a560:	e7c4      	b.n	800a4ec <_svfiprintf_r+0x130>
 800a562:	fb0c 2101 	mla	r1, ip, r1, r2
 800a566:	4604      	mov	r4, r0
 800a568:	2301      	movs	r3, #1
 800a56a:	e7f0      	b.n	800a54e <_svfiprintf_r+0x192>
 800a56c:	ab03      	add	r3, sp, #12
 800a56e:	9300      	str	r3, [sp, #0]
 800a570:	462a      	mov	r2, r5
 800a572:	4b10      	ldr	r3, [pc, #64]	; (800a5b4 <_svfiprintf_r+0x1f8>)
 800a574:	a904      	add	r1, sp, #16
 800a576:	4638      	mov	r0, r7
 800a578:	f3af 8000 	nop.w
 800a57c:	1c42      	adds	r2, r0, #1
 800a57e:	4606      	mov	r6, r0
 800a580:	d1d6      	bne.n	800a530 <_svfiprintf_r+0x174>
 800a582:	89ab      	ldrh	r3, [r5, #12]
 800a584:	065b      	lsls	r3, r3, #25
 800a586:	f53f af2d 	bmi.w	800a3e4 <_svfiprintf_r+0x28>
 800a58a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a58c:	b01d      	add	sp, #116	; 0x74
 800a58e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a592:	ab03      	add	r3, sp, #12
 800a594:	9300      	str	r3, [sp, #0]
 800a596:	462a      	mov	r2, r5
 800a598:	4b06      	ldr	r3, [pc, #24]	; (800a5b4 <_svfiprintf_r+0x1f8>)
 800a59a:	a904      	add	r1, sp, #16
 800a59c:	4638      	mov	r0, r7
 800a59e:	f000 f919 	bl	800a7d4 <_printf_i>
 800a5a2:	e7eb      	b.n	800a57c <_svfiprintf_r+0x1c0>
 800a5a4:	0800b27c 	.word	0x0800b27c
 800a5a8:	0800b282 	.word	0x0800b282
 800a5ac:	0800b286 	.word	0x0800b286
 800a5b0:	00000000 	.word	0x00000000
 800a5b4:	0800a309 	.word	0x0800a309

0800a5b8 <sbrk_aligned>:
 800a5b8:	b570      	push	{r4, r5, r6, lr}
 800a5ba:	4e0e      	ldr	r6, [pc, #56]	; (800a5f4 <sbrk_aligned+0x3c>)
 800a5bc:	460c      	mov	r4, r1
 800a5be:	6831      	ldr	r1, [r6, #0]
 800a5c0:	4605      	mov	r5, r0
 800a5c2:	b911      	cbnz	r1, 800a5ca <sbrk_aligned+0x12>
 800a5c4:	f000 fa7e 	bl	800aac4 <_sbrk_r>
 800a5c8:	6030      	str	r0, [r6, #0]
 800a5ca:	4621      	mov	r1, r4
 800a5cc:	4628      	mov	r0, r5
 800a5ce:	f000 fa79 	bl	800aac4 <_sbrk_r>
 800a5d2:	1c43      	adds	r3, r0, #1
 800a5d4:	d00a      	beq.n	800a5ec <sbrk_aligned+0x34>
 800a5d6:	1cc4      	adds	r4, r0, #3
 800a5d8:	f024 0403 	bic.w	r4, r4, #3
 800a5dc:	42a0      	cmp	r0, r4
 800a5de:	d007      	beq.n	800a5f0 <sbrk_aligned+0x38>
 800a5e0:	1a21      	subs	r1, r4, r0
 800a5e2:	4628      	mov	r0, r5
 800a5e4:	f000 fa6e 	bl	800aac4 <_sbrk_r>
 800a5e8:	3001      	adds	r0, #1
 800a5ea:	d101      	bne.n	800a5f0 <sbrk_aligned+0x38>
 800a5ec:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a5f0:	4620      	mov	r0, r4
 800a5f2:	bd70      	pop	{r4, r5, r6, pc}
 800a5f4:	200006b4 	.word	0x200006b4

0800a5f8 <_malloc_r>:
 800a5f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5fc:	1ccd      	adds	r5, r1, #3
 800a5fe:	f025 0503 	bic.w	r5, r5, #3
 800a602:	3508      	adds	r5, #8
 800a604:	2d0c      	cmp	r5, #12
 800a606:	bf38      	it	cc
 800a608:	250c      	movcc	r5, #12
 800a60a:	2d00      	cmp	r5, #0
 800a60c:	4607      	mov	r7, r0
 800a60e:	db01      	blt.n	800a614 <_malloc_r+0x1c>
 800a610:	42a9      	cmp	r1, r5
 800a612:	d905      	bls.n	800a620 <_malloc_r+0x28>
 800a614:	230c      	movs	r3, #12
 800a616:	603b      	str	r3, [r7, #0]
 800a618:	2600      	movs	r6, #0
 800a61a:	4630      	mov	r0, r6
 800a61c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a620:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a6f4 <_malloc_r+0xfc>
 800a624:	f000 f9f8 	bl	800aa18 <__malloc_lock>
 800a628:	f8d8 3000 	ldr.w	r3, [r8]
 800a62c:	461c      	mov	r4, r3
 800a62e:	bb5c      	cbnz	r4, 800a688 <_malloc_r+0x90>
 800a630:	4629      	mov	r1, r5
 800a632:	4638      	mov	r0, r7
 800a634:	f7ff ffc0 	bl	800a5b8 <sbrk_aligned>
 800a638:	1c43      	adds	r3, r0, #1
 800a63a:	4604      	mov	r4, r0
 800a63c:	d155      	bne.n	800a6ea <_malloc_r+0xf2>
 800a63e:	f8d8 4000 	ldr.w	r4, [r8]
 800a642:	4626      	mov	r6, r4
 800a644:	2e00      	cmp	r6, #0
 800a646:	d145      	bne.n	800a6d4 <_malloc_r+0xdc>
 800a648:	2c00      	cmp	r4, #0
 800a64a:	d048      	beq.n	800a6de <_malloc_r+0xe6>
 800a64c:	6823      	ldr	r3, [r4, #0]
 800a64e:	4631      	mov	r1, r6
 800a650:	4638      	mov	r0, r7
 800a652:	eb04 0903 	add.w	r9, r4, r3
 800a656:	f000 fa35 	bl	800aac4 <_sbrk_r>
 800a65a:	4581      	cmp	r9, r0
 800a65c:	d13f      	bne.n	800a6de <_malloc_r+0xe6>
 800a65e:	6821      	ldr	r1, [r4, #0]
 800a660:	1a6d      	subs	r5, r5, r1
 800a662:	4629      	mov	r1, r5
 800a664:	4638      	mov	r0, r7
 800a666:	f7ff ffa7 	bl	800a5b8 <sbrk_aligned>
 800a66a:	3001      	adds	r0, #1
 800a66c:	d037      	beq.n	800a6de <_malloc_r+0xe6>
 800a66e:	6823      	ldr	r3, [r4, #0]
 800a670:	442b      	add	r3, r5
 800a672:	6023      	str	r3, [r4, #0]
 800a674:	f8d8 3000 	ldr.w	r3, [r8]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d038      	beq.n	800a6ee <_malloc_r+0xf6>
 800a67c:	685a      	ldr	r2, [r3, #4]
 800a67e:	42a2      	cmp	r2, r4
 800a680:	d12b      	bne.n	800a6da <_malloc_r+0xe2>
 800a682:	2200      	movs	r2, #0
 800a684:	605a      	str	r2, [r3, #4]
 800a686:	e00f      	b.n	800a6a8 <_malloc_r+0xb0>
 800a688:	6822      	ldr	r2, [r4, #0]
 800a68a:	1b52      	subs	r2, r2, r5
 800a68c:	d41f      	bmi.n	800a6ce <_malloc_r+0xd6>
 800a68e:	2a0b      	cmp	r2, #11
 800a690:	d917      	bls.n	800a6c2 <_malloc_r+0xca>
 800a692:	1961      	adds	r1, r4, r5
 800a694:	42a3      	cmp	r3, r4
 800a696:	6025      	str	r5, [r4, #0]
 800a698:	bf18      	it	ne
 800a69a:	6059      	strne	r1, [r3, #4]
 800a69c:	6863      	ldr	r3, [r4, #4]
 800a69e:	bf08      	it	eq
 800a6a0:	f8c8 1000 	streq.w	r1, [r8]
 800a6a4:	5162      	str	r2, [r4, r5]
 800a6a6:	604b      	str	r3, [r1, #4]
 800a6a8:	4638      	mov	r0, r7
 800a6aa:	f104 060b 	add.w	r6, r4, #11
 800a6ae:	f000 f9b9 	bl	800aa24 <__malloc_unlock>
 800a6b2:	f026 0607 	bic.w	r6, r6, #7
 800a6b6:	1d23      	adds	r3, r4, #4
 800a6b8:	1af2      	subs	r2, r6, r3
 800a6ba:	d0ae      	beq.n	800a61a <_malloc_r+0x22>
 800a6bc:	1b9b      	subs	r3, r3, r6
 800a6be:	50a3      	str	r3, [r4, r2]
 800a6c0:	e7ab      	b.n	800a61a <_malloc_r+0x22>
 800a6c2:	42a3      	cmp	r3, r4
 800a6c4:	6862      	ldr	r2, [r4, #4]
 800a6c6:	d1dd      	bne.n	800a684 <_malloc_r+0x8c>
 800a6c8:	f8c8 2000 	str.w	r2, [r8]
 800a6cc:	e7ec      	b.n	800a6a8 <_malloc_r+0xb0>
 800a6ce:	4623      	mov	r3, r4
 800a6d0:	6864      	ldr	r4, [r4, #4]
 800a6d2:	e7ac      	b.n	800a62e <_malloc_r+0x36>
 800a6d4:	4634      	mov	r4, r6
 800a6d6:	6876      	ldr	r6, [r6, #4]
 800a6d8:	e7b4      	b.n	800a644 <_malloc_r+0x4c>
 800a6da:	4613      	mov	r3, r2
 800a6dc:	e7cc      	b.n	800a678 <_malloc_r+0x80>
 800a6de:	230c      	movs	r3, #12
 800a6e0:	603b      	str	r3, [r7, #0]
 800a6e2:	4638      	mov	r0, r7
 800a6e4:	f000 f99e 	bl	800aa24 <__malloc_unlock>
 800a6e8:	e797      	b.n	800a61a <_malloc_r+0x22>
 800a6ea:	6025      	str	r5, [r4, #0]
 800a6ec:	e7dc      	b.n	800a6a8 <_malloc_r+0xb0>
 800a6ee:	605b      	str	r3, [r3, #4]
 800a6f0:	deff      	udf	#255	; 0xff
 800a6f2:	bf00      	nop
 800a6f4:	200006b0 	.word	0x200006b0

0800a6f8 <_printf_common>:
 800a6f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6fc:	4616      	mov	r6, r2
 800a6fe:	4699      	mov	r9, r3
 800a700:	688a      	ldr	r2, [r1, #8]
 800a702:	690b      	ldr	r3, [r1, #16]
 800a704:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a708:	4293      	cmp	r3, r2
 800a70a:	bfb8      	it	lt
 800a70c:	4613      	movlt	r3, r2
 800a70e:	6033      	str	r3, [r6, #0]
 800a710:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a714:	4607      	mov	r7, r0
 800a716:	460c      	mov	r4, r1
 800a718:	b10a      	cbz	r2, 800a71e <_printf_common+0x26>
 800a71a:	3301      	adds	r3, #1
 800a71c:	6033      	str	r3, [r6, #0]
 800a71e:	6823      	ldr	r3, [r4, #0]
 800a720:	0699      	lsls	r1, r3, #26
 800a722:	bf42      	ittt	mi
 800a724:	6833      	ldrmi	r3, [r6, #0]
 800a726:	3302      	addmi	r3, #2
 800a728:	6033      	strmi	r3, [r6, #0]
 800a72a:	6825      	ldr	r5, [r4, #0]
 800a72c:	f015 0506 	ands.w	r5, r5, #6
 800a730:	d106      	bne.n	800a740 <_printf_common+0x48>
 800a732:	f104 0a19 	add.w	sl, r4, #25
 800a736:	68e3      	ldr	r3, [r4, #12]
 800a738:	6832      	ldr	r2, [r6, #0]
 800a73a:	1a9b      	subs	r3, r3, r2
 800a73c:	42ab      	cmp	r3, r5
 800a73e:	dc26      	bgt.n	800a78e <_printf_common+0x96>
 800a740:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a744:	1e13      	subs	r3, r2, #0
 800a746:	6822      	ldr	r2, [r4, #0]
 800a748:	bf18      	it	ne
 800a74a:	2301      	movne	r3, #1
 800a74c:	0692      	lsls	r2, r2, #26
 800a74e:	d42b      	bmi.n	800a7a8 <_printf_common+0xb0>
 800a750:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a754:	4649      	mov	r1, r9
 800a756:	4638      	mov	r0, r7
 800a758:	47c0      	blx	r8
 800a75a:	3001      	adds	r0, #1
 800a75c:	d01e      	beq.n	800a79c <_printf_common+0xa4>
 800a75e:	6823      	ldr	r3, [r4, #0]
 800a760:	6922      	ldr	r2, [r4, #16]
 800a762:	f003 0306 	and.w	r3, r3, #6
 800a766:	2b04      	cmp	r3, #4
 800a768:	bf02      	ittt	eq
 800a76a:	68e5      	ldreq	r5, [r4, #12]
 800a76c:	6833      	ldreq	r3, [r6, #0]
 800a76e:	1aed      	subeq	r5, r5, r3
 800a770:	68a3      	ldr	r3, [r4, #8]
 800a772:	bf0c      	ite	eq
 800a774:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a778:	2500      	movne	r5, #0
 800a77a:	4293      	cmp	r3, r2
 800a77c:	bfc4      	itt	gt
 800a77e:	1a9b      	subgt	r3, r3, r2
 800a780:	18ed      	addgt	r5, r5, r3
 800a782:	2600      	movs	r6, #0
 800a784:	341a      	adds	r4, #26
 800a786:	42b5      	cmp	r5, r6
 800a788:	d11a      	bne.n	800a7c0 <_printf_common+0xc8>
 800a78a:	2000      	movs	r0, #0
 800a78c:	e008      	b.n	800a7a0 <_printf_common+0xa8>
 800a78e:	2301      	movs	r3, #1
 800a790:	4652      	mov	r2, sl
 800a792:	4649      	mov	r1, r9
 800a794:	4638      	mov	r0, r7
 800a796:	47c0      	blx	r8
 800a798:	3001      	adds	r0, #1
 800a79a:	d103      	bne.n	800a7a4 <_printf_common+0xac>
 800a79c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a7a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7a4:	3501      	adds	r5, #1
 800a7a6:	e7c6      	b.n	800a736 <_printf_common+0x3e>
 800a7a8:	18e1      	adds	r1, r4, r3
 800a7aa:	1c5a      	adds	r2, r3, #1
 800a7ac:	2030      	movs	r0, #48	; 0x30
 800a7ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a7b2:	4422      	add	r2, r4
 800a7b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a7b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a7bc:	3302      	adds	r3, #2
 800a7be:	e7c7      	b.n	800a750 <_printf_common+0x58>
 800a7c0:	2301      	movs	r3, #1
 800a7c2:	4622      	mov	r2, r4
 800a7c4:	4649      	mov	r1, r9
 800a7c6:	4638      	mov	r0, r7
 800a7c8:	47c0      	blx	r8
 800a7ca:	3001      	adds	r0, #1
 800a7cc:	d0e6      	beq.n	800a79c <_printf_common+0xa4>
 800a7ce:	3601      	adds	r6, #1
 800a7d0:	e7d9      	b.n	800a786 <_printf_common+0x8e>
	...

0800a7d4 <_printf_i>:
 800a7d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a7d8:	7e0f      	ldrb	r7, [r1, #24]
 800a7da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a7dc:	2f78      	cmp	r7, #120	; 0x78
 800a7de:	4691      	mov	r9, r2
 800a7e0:	4680      	mov	r8, r0
 800a7e2:	460c      	mov	r4, r1
 800a7e4:	469a      	mov	sl, r3
 800a7e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a7ea:	d807      	bhi.n	800a7fc <_printf_i+0x28>
 800a7ec:	2f62      	cmp	r7, #98	; 0x62
 800a7ee:	d80a      	bhi.n	800a806 <_printf_i+0x32>
 800a7f0:	2f00      	cmp	r7, #0
 800a7f2:	f000 80d4 	beq.w	800a99e <_printf_i+0x1ca>
 800a7f6:	2f58      	cmp	r7, #88	; 0x58
 800a7f8:	f000 80c0 	beq.w	800a97c <_printf_i+0x1a8>
 800a7fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a800:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a804:	e03a      	b.n	800a87c <_printf_i+0xa8>
 800a806:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a80a:	2b15      	cmp	r3, #21
 800a80c:	d8f6      	bhi.n	800a7fc <_printf_i+0x28>
 800a80e:	a101      	add	r1, pc, #4	; (adr r1, 800a814 <_printf_i+0x40>)
 800a810:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a814:	0800a86d 	.word	0x0800a86d
 800a818:	0800a881 	.word	0x0800a881
 800a81c:	0800a7fd 	.word	0x0800a7fd
 800a820:	0800a7fd 	.word	0x0800a7fd
 800a824:	0800a7fd 	.word	0x0800a7fd
 800a828:	0800a7fd 	.word	0x0800a7fd
 800a82c:	0800a881 	.word	0x0800a881
 800a830:	0800a7fd 	.word	0x0800a7fd
 800a834:	0800a7fd 	.word	0x0800a7fd
 800a838:	0800a7fd 	.word	0x0800a7fd
 800a83c:	0800a7fd 	.word	0x0800a7fd
 800a840:	0800a985 	.word	0x0800a985
 800a844:	0800a8ad 	.word	0x0800a8ad
 800a848:	0800a93f 	.word	0x0800a93f
 800a84c:	0800a7fd 	.word	0x0800a7fd
 800a850:	0800a7fd 	.word	0x0800a7fd
 800a854:	0800a9a7 	.word	0x0800a9a7
 800a858:	0800a7fd 	.word	0x0800a7fd
 800a85c:	0800a8ad 	.word	0x0800a8ad
 800a860:	0800a7fd 	.word	0x0800a7fd
 800a864:	0800a7fd 	.word	0x0800a7fd
 800a868:	0800a947 	.word	0x0800a947
 800a86c:	682b      	ldr	r3, [r5, #0]
 800a86e:	1d1a      	adds	r2, r3, #4
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	602a      	str	r2, [r5, #0]
 800a874:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a878:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a87c:	2301      	movs	r3, #1
 800a87e:	e09f      	b.n	800a9c0 <_printf_i+0x1ec>
 800a880:	6820      	ldr	r0, [r4, #0]
 800a882:	682b      	ldr	r3, [r5, #0]
 800a884:	0607      	lsls	r7, r0, #24
 800a886:	f103 0104 	add.w	r1, r3, #4
 800a88a:	6029      	str	r1, [r5, #0]
 800a88c:	d501      	bpl.n	800a892 <_printf_i+0xbe>
 800a88e:	681e      	ldr	r6, [r3, #0]
 800a890:	e003      	b.n	800a89a <_printf_i+0xc6>
 800a892:	0646      	lsls	r6, r0, #25
 800a894:	d5fb      	bpl.n	800a88e <_printf_i+0xba>
 800a896:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a89a:	2e00      	cmp	r6, #0
 800a89c:	da03      	bge.n	800a8a6 <_printf_i+0xd2>
 800a89e:	232d      	movs	r3, #45	; 0x2d
 800a8a0:	4276      	negs	r6, r6
 800a8a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a8a6:	485a      	ldr	r0, [pc, #360]	; (800aa10 <_printf_i+0x23c>)
 800a8a8:	230a      	movs	r3, #10
 800a8aa:	e012      	b.n	800a8d2 <_printf_i+0xfe>
 800a8ac:	682b      	ldr	r3, [r5, #0]
 800a8ae:	6820      	ldr	r0, [r4, #0]
 800a8b0:	1d19      	adds	r1, r3, #4
 800a8b2:	6029      	str	r1, [r5, #0]
 800a8b4:	0605      	lsls	r5, r0, #24
 800a8b6:	d501      	bpl.n	800a8bc <_printf_i+0xe8>
 800a8b8:	681e      	ldr	r6, [r3, #0]
 800a8ba:	e002      	b.n	800a8c2 <_printf_i+0xee>
 800a8bc:	0641      	lsls	r1, r0, #25
 800a8be:	d5fb      	bpl.n	800a8b8 <_printf_i+0xe4>
 800a8c0:	881e      	ldrh	r6, [r3, #0]
 800a8c2:	4853      	ldr	r0, [pc, #332]	; (800aa10 <_printf_i+0x23c>)
 800a8c4:	2f6f      	cmp	r7, #111	; 0x6f
 800a8c6:	bf0c      	ite	eq
 800a8c8:	2308      	moveq	r3, #8
 800a8ca:	230a      	movne	r3, #10
 800a8cc:	2100      	movs	r1, #0
 800a8ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a8d2:	6865      	ldr	r5, [r4, #4]
 800a8d4:	60a5      	str	r5, [r4, #8]
 800a8d6:	2d00      	cmp	r5, #0
 800a8d8:	bfa2      	ittt	ge
 800a8da:	6821      	ldrge	r1, [r4, #0]
 800a8dc:	f021 0104 	bicge.w	r1, r1, #4
 800a8e0:	6021      	strge	r1, [r4, #0]
 800a8e2:	b90e      	cbnz	r6, 800a8e8 <_printf_i+0x114>
 800a8e4:	2d00      	cmp	r5, #0
 800a8e6:	d04b      	beq.n	800a980 <_printf_i+0x1ac>
 800a8e8:	4615      	mov	r5, r2
 800a8ea:	fbb6 f1f3 	udiv	r1, r6, r3
 800a8ee:	fb03 6711 	mls	r7, r3, r1, r6
 800a8f2:	5dc7      	ldrb	r7, [r0, r7]
 800a8f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a8f8:	4637      	mov	r7, r6
 800a8fa:	42bb      	cmp	r3, r7
 800a8fc:	460e      	mov	r6, r1
 800a8fe:	d9f4      	bls.n	800a8ea <_printf_i+0x116>
 800a900:	2b08      	cmp	r3, #8
 800a902:	d10b      	bne.n	800a91c <_printf_i+0x148>
 800a904:	6823      	ldr	r3, [r4, #0]
 800a906:	07de      	lsls	r6, r3, #31
 800a908:	d508      	bpl.n	800a91c <_printf_i+0x148>
 800a90a:	6923      	ldr	r3, [r4, #16]
 800a90c:	6861      	ldr	r1, [r4, #4]
 800a90e:	4299      	cmp	r1, r3
 800a910:	bfde      	ittt	le
 800a912:	2330      	movle	r3, #48	; 0x30
 800a914:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a918:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a91c:	1b52      	subs	r2, r2, r5
 800a91e:	6122      	str	r2, [r4, #16]
 800a920:	f8cd a000 	str.w	sl, [sp]
 800a924:	464b      	mov	r3, r9
 800a926:	aa03      	add	r2, sp, #12
 800a928:	4621      	mov	r1, r4
 800a92a:	4640      	mov	r0, r8
 800a92c:	f7ff fee4 	bl	800a6f8 <_printf_common>
 800a930:	3001      	adds	r0, #1
 800a932:	d14a      	bne.n	800a9ca <_printf_i+0x1f6>
 800a934:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a938:	b004      	add	sp, #16
 800a93a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a93e:	6823      	ldr	r3, [r4, #0]
 800a940:	f043 0320 	orr.w	r3, r3, #32
 800a944:	6023      	str	r3, [r4, #0]
 800a946:	4833      	ldr	r0, [pc, #204]	; (800aa14 <_printf_i+0x240>)
 800a948:	2778      	movs	r7, #120	; 0x78
 800a94a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a94e:	6823      	ldr	r3, [r4, #0]
 800a950:	6829      	ldr	r1, [r5, #0]
 800a952:	061f      	lsls	r7, r3, #24
 800a954:	f851 6b04 	ldr.w	r6, [r1], #4
 800a958:	d402      	bmi.n	800a960 <_printf_i+0x18c>
 800a95a:	065f      	lsls	r7, r3, #25
 800a95c:	bf48      	it	mi
 800a95e:	b2b6      	uxthmi	r6, r6
 800a960:	07df      	lsls	r7, r3, #31
 800a962:	bf48      	it	mi
 800a964:	f043 0320 	orrmi.w	r3, r3, #32
 800a968:	6029      	str	r1, [r5, #0]
 800a96a:	bf48      	it	mi
 800a96c:	6023      	strmi	r3, [r4, #0]
 800a96e:	b91e      	cbnz	r6, 800a978 <_printf_i+0x1a4>
 800a970:	6823      	ldr	r3, [r4, #0]
 800a972:	f023 0320 	bic.w	r3, r3, #32
 800a976:	6023      	str	r3, [r4, #0]
 800a978:	2310      	movs	r3, #16
 800a97a:	e7a7      	b.n	800a8cc <_printf_i+0xf8>
 800a97c:	4824      	ldr	r0, [pc, #144]	; (800aa10 <_printf_i+0x23c>)
 800a97e:	e7e4      	b.n	800a94a <_printf_i+0x176>
 800a980:	4615      	mov	r5, r2
 800a982:	e7bd      	b.n	800a900 <_printf_i+0x12c>
 800a984:	682b      	ldr	r3, [r5, #0]
 800a986:	6826      	ldr	r6, [r4, #0]
 800a988:	6961      	ldr	r1, [r4, #20]
 800a98a:	1d18      	adds	r0, r3, #4
 800a98c:	6028      	str	r0, [r5, #0]
 800a98e:	0635      	lsls	r5, r6, #24
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	d501      	bpl.n	800a998 <_printf_i+0x1c4>
 800a994:	6019      	str	r1, [r3, #0]
 800a996:	e002      	b.n	800a99e <_printf_i+0x1ca>
 800a998:	0670      	lsls	r0, r6, #25
 800a99a:	d5fb      	bpl.n	800a994 <_printf_i+0x1c0>
 800a99c:	8019      	strh	r1, [r3, #0]
 800a99e:	2300      	movs	r3, #0
 800a9a0:	6123      	str	r3, [r4, #16]
 800a9a2:	4615      	mov	r5, r2
 800a9a4:	e7bc      	b.n	800a920 <_printf_i+0x14c>
 800a9a6:	682b      	ldr	r3, [r5, #0]
 800a9a8:	1d1a      	adds	r2, r3, #4
 800a9aa:	602a      	str	r2, [r5, #0]
 800a9ac:	681d      	ldr	r5, [r3, #0]
 800a9ae:	6862      	ldr	r2, [r4, #4]
 800a9b0:	2100      	movs	r1, #0
 800a9b2:	4628      	mov	r0, r5
 800a9b4:	f7f5 fbe4 	bl	8000180 <memchr>
 800a9b8:	b108      	cbz	r0, 800a9be <_printf_i+0x1ea>
 800a9ba:	1b40      	subs	r0, r0, r5
 800a9bc:	6060      	str	r0, [r4, #4]
 800a9be:	6863      	ldr	r3, [r4, #4]
 800a9c0:	6123      	str	r3, [r4, #16]
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a9c8:	e7aa      	b.n	800a920 <_printf_i+0x14c>
 800a9ca:	6923      	ldr	r3, [r4, #16]
 800a9cc:	462a      	mov	r2, r5
 800a9ce:	4649      	mov	r1, r9
 800a9d0:	4640      	mov	r0, r8
 800a9d2:	47d0      	blx	sl
 800a9d4:	3001      	adds	r0, #1
 800a9d6:	d0ad      	beq.n	800a934 <_printf_i+0x160>
 800a9d8:	6823      	ldr	r3, [r4, #0]
 800a9da:	079b      	lsls	r3, r3, #30
 800a9dc:	d413      	bmi.n	800aa06 <_printf_i+0x232>
 800a9de:	68e0      	ldr	r0, [r4, #12]
 800a9e0:	9b03      	ldr	r3, [sp, #12]
 800a9e2:	4298      	cmp	r0, r3
 800a9e4:	bfb8      	it	lt
 800a9e6:	4618      	movlt	r0, r3
 800a9e8:	e7a6      	b.n	800a938 <_printf_i+0x164>
 800a9ea:	2301      	movs	r3, #1
 800a9ec:	4632      	mov	r2, r6
 800a9ee:	4649      	mov	r1, r9
 800a9f0:	4640      	mov	r0, r8
 800a9f2:	47d0      	blx	sl
 800a9f4:	3001      	adds	r0, #1
 800a9f6:	d09d      	beq.n	800a934 <_printf_i+0x160>
 800a9f8:	3501      	adds	r5, #1
 800a9fa:	68e3      	ldr	r3, [r4, #12]
 800a9fc:	9903      	ldr	r1, [sp, #12]
 800a9fe:	1a5b      	subs	r3, r3, r1
 800aa00:	42ab      	cmp	r3, r5
 800aa02:	dcf2      	bgt.n	800a9ea <_printf_i+0x216>
 800aa04:	e7eb      	b.n	800a9de <_printf_i+0x20a>
 800aa06:	2500      	movs	r5, #0
 800aa08:	f104 0619 	add.w	r6, r4, #25
 800aa0c:	e7f5      	b.n	800a9fa <_printf_i+0x226>
 800aa0e:	bf00      	nop
 800aa10:	0800b28d 	.word	0x0800b28d
 800aa14:	0800b29e 	.word	0x0800b29e

0800aa18 <__malloc_lock>:
 800aa18:	4801      	ldr	r0, [pc, #4]	; (800aa20 <__malloc_lock+0x8>)
 800aa1a:	f7ff bc65 	b.w	800a2e8 <__retarget_lock_acquire_recursive>
 800aa1e:	bf00      	nop
 800aa20:	200006ac 	.word	0x200006ac

0800aa24 <__malloc_unlock>:
 800aa24:	4801      	ldr	r0, [pc, #4]	; (800aa2c <__malloc_unlock+0x8>)
 800aa26:	f7ff bc60 	b.w	800a2ea <__retarget_lock_release_recursive>
 800aa2a:	bf00      	nop
 800aa2c:	200006ac 	.word	0x200006ac

0800aa30 <_realloc_r>:
 800aa30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa34:	4680      	mov	r8, r0
 800aa36:	4614      	mov	r4, r2
 800aa38:	460e      	mov	r6, r1
 800aa3a:	b921      	cbnz	r1, 800aa46 <_realloc_r+0x16>
 800aa3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa40:	4611      	mov	r1, r2
 800aa42:	f7ff bdd9 	b.w	800a5f8 <_malloc_r>
 800aa46:	b92a      	cbnz	r2, 800aa54 <_realloc_r+0x24>
 800aa48:	f000 f84c 	bl	800aae4 <_free_r>
 800aa4c:	4625      	mov	r5, r4
 800aa4e:	4628      	mov	r0, r5
 800aa50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa54:	f000 f890 	bl	800ab78 <_malloc_usable_size_r>
 800aa58:	4284      	cmp	r4, r0
 800aa5a:	4607      	mov	r7, r0
 800aa5c:	d802      	bhi.n	800aa64 <_realloc_r+0x34>
 800aa5e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aa62:	d812      	bhi.n	800aa8a <_realloc_r+0x5a>
 800aa64:	4621      	mov	r1, r4
 800aa66:	4640      	mov	r0, r8
 800aa68:	f7ff fdc6 	bl	800a5f8 <_malloc_r>
 800aa6c:	4605      	mov	r5, r0
 800aa6e:	2800      	cmp	r0, #0
 800aa70:	d0ed      	beq.n	800aa4e <_realloc_r+0x1e>
 800aa72:	42bc      	cmp	r4, r7
 800aa74:	4622      	mov	r2, r4
 800aa76:	4631      	mov	r1, r6
 800aa78:	bf28      	it	cs
 800aa7a:	463a      	movcs	r2, r7
 800aa7c:	f7ff fc36 	bl	800a2ec <memcpy>
 800aa80:	4631      	mov	r1, r6
 800aa82:	4640      	mov	r0, r8
 800aa84:	f000 f82e 	bl	800aae4 <_free_r>
 800aa88:	e7e1      	b.n	800aa4e <_realloc_r+0x1e>
 800aa8a:	4635      	mov	r5, r6
 800aa8c:	e7df      	b.n	800aa4e <_realloc_r+0x1e>

0800aa8e <memmove>:
 800aa8e:	4288      	cmp	r0, r1
 800aa90:	b510      	push	{r4, lr}
 800aa92:	eb01 0402 	add.w	r4, r1, r2
 800aa96:	d902      	bls.n	800aa9e <memmove+0x10>
 800aa98:	4284      	cmp	r4, r0
 800aa9a:	4623      	mov	r3, r4
 800aa9c:	d807      	bhi.n	800aaae <memmove+0x20>
 800aa9e:	1e43      	subs	r3, r0, #1
 800aaa0:	42a1      	cmp	r1, r4
 800aaa2:	d008      	beq.n	800aab6 <memmove+0x28>
 800aaa4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aaa8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aaac:	e7f8      	b.n	800aaa0 <memmove+0x12>
 800aaae:	4402      	add	r2, r0
 800aab0:	4601      	mov	r1, r0
 800aab2:	428a      	cmp	r2, r1
 800aab4:	d100      	bne.n	800aab8 <memmove+0x2a>
 800aab6:	bd10      	pop	{r4, pc}
 800aab8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aabc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aac0:	e7f7      	b.n	800aab2 <memmove+0x24>
	...

0800aac4 <_sbrk_r>:
 800aac4:	b538      	push	{r3, r4, r5, lr}
 800aac6:	4d06      	ldr	r5, [pc, #24]	; (800aae0 <_sbrk_r+0x1c>)
 800aac8:	2300      	movs	r3, #0
 800aaca:	4604      	mov	r4, r0
 800aacc:	4608      	mov	r0, r1
 800aace:	602b      	str	r3, [r5, #0]
 800aad0:	f7f6 fe80 	bl	80017d4 <_sbrk>
 800aad4:	1c43      	adds	r3, r0, #1
 800aad6:	d102      	bne.n	800aade <_sbrk_r+0x1a>
 800aad8:	682b      	ldr	r3, [r5, #0]
 800aada:	b103      	cbz	r3, 800aade <_sbrk_r+0x1a>
 800aadc:	6023      	str	r3, [r4, #0]
 800aade:	bd38      	pop	{r3, r4, r5, pc}
 800aae0:	200006b8 	.word	0x200006b8

0800aae4 <_free_r>:
 800aae4:	b538      	push	{r3, r4, r5, lr}
 800aae6:	4605      	mov	r5, r0
 800aae8:	2900      	cmp	r1, #0
 800aaea:	d041      	beq.n	800ab70 <_free_r+0x8c>
 800aaec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aaf0:	1f0c      	subs	r4, r1, #4
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	bfb8      	it	lt
 800aaf6:	18e4      	addlt	r4, r4, r3
 800aaf8:	f7ff ff8e 	bl	800aa18 <__malloc_lock>
 800aafc:	4a1d      	ldr	r2, [pc, #116]	; (800ab74 <_free_r+0x90>)
 800aafe:	6813      	ldr	r3, [r2, #0]
 800ab00:	b933      	cbnz	r3, 800ab10 <_free_r+0x2c>
 800ab02:	6063      	str	r3, [r4, #4]
 800ab04:	6014      	str	r4, [r2, #0]
 800ab06:	4628      	mov	r0, r5
 800ab08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab0c:	f7ff bf8a 	b.w	800aa24 <__malloc_unlock>
 800ab10:	42a3      	cmp	r3, r4
 800ab12:	d908      	bls.n	800ab26 <_free_r+0x42>
 800ab14:	6820      	ldr	r0, [r4, #0]
 800ab16:	1821      	adds	r1, r4, r0
 800ab18:	428b      	cmp	r3, r1
 800ab1a:	bf01      	itttt	eq
 800ab1c:	6819      	ldreq	r1, [r3, #0]
 800ab1e:	685b      	ldreq	r3, [r3, #4]
 800ab20:	1809      	addeq	r1, r1, r0
 800ab22:	6021      	streq	r1, [r4, #0]
 800ab24:	e7ed      	b.n	800ab02 <_free_r+0x1e>
 800ab26:	461a      	mov	r2, r3
 800ab28:	685b      	ldr	r3, [r3, #4]
 800ab2a:	b10b      	cbz	r3, 800ab30 <_free_r+0x4c>
 800ab2c:	42a3      	cmp	r3, r4
 800ab2e:	d9fa      	bls.n	800ab26 <_free_r+0x42>
 800ab30:	6811      	ldr	r1, [r2, #0]
 800ab32:	1850      	adds	r0, r2, r1
 800ab34:	42a0      	cmp	r0, r4
 800ab36:	d10b      	bne.n	800ab50 <_free_r+0x6c>
 800ab38:	6820      	ldr	r0, [r4, #0]
 800ab3a:	4401      	add	r1, r0
 800ab3c:	1850      	adds	r0, r2, r1
 800ab3e:	4283      	cmp	r3, r0
 800ab40:	6011      	str	r1, [r2, #0]
 800ab42:	d1e0      	bne.n	800ab06 <_free_r+0x22>
 800ab44:	6818      	ldr	r0, [r3, #0]
 800ab46:	685b      	ldr	r3, [r3, #4]
 800ab48:	6053      	str	r3, [r2, #4]
 800ab4a:	4408      	add	r0, r1
 800ab4c:	6010      	str	r0, [r2, #0]
 800ab4e:	e7da      	b.n	800ab06 <_free_r+0x22>
 800ab50:	d902      	bls.n	800ab58 <_free_r+0x74>
 800ab52:	230c      	movs	r3, #12
 800ab54:	602b      	str	r3, [r5, #0]
 800ab56:	e7d6      	b.n	800ab06 <_free_r+0x22>
 800ab58:	6820      	ldr	r0, [r4, #0]
 800ab5a:	1821      	adds	r1, r4, r0
 800ab5c:	428b      	cmp	r3, r1
 800ab5e:	bf04      	itt	eq
 800ab60:	6819      	ldreq	r1, [r3, #0]
 800ab62:	685b      	ldreq	r3, [r3, #4]
 800ab64:	6063      	str	r3, [r4, #4]
 800ab66:	bf04      	itt	eq
 800ab68:	1809      	addeq	r1, r1, r0
 800ab6a:	6021      	streq	r1, [r4, #0]
 800ab6c:	6054      	str	r4, [r2, #4]
 800ab6e:	e7ca      	b.n	800ab06 <_free_r+0x22>
 800ab70:	bd38      	pop	{r3, r4, r5, pc}
 800ab72:	bf00      	nop
 800ab74:	200006b0 	.word	0x200006b0

0800ab78 <_malloc_usable_size_r>:
 800ab78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab7c:	1f18      	subs	r0, r3, #4
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	bfbc      	itt	lt
 800ab82:	580b      	ldrlt	r3, [r1, r0]
 800ab84:	18c0      	addlt	r0, r0, r3
 800ab86:	4770      	bx	lr

0800ab88 <_init>:
 800ab88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab8a:	bf00      	nop
 800ab8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab8e:	bc08      	pop	{r3}
 800ab90:	469e      	mov	lr, r3
 800ab92:	4770      	bx	lr

0800ab94 <_fini>:
 800ab94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab96:	bf00      	nop
 800ab98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab9a:	bc08      	pop	{r3}
 800ab9c:	469e      	mov	lr, r3
 800ab9e:	4770      	bx	lr
