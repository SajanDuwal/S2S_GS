
COM_GS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab70  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000724  0800acb0  0800acb0  0001acb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b3d4  0800b3d4  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  0800b3d4  0800b3d4  0001b3d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b3dc  0800b3dc  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b3dc  0800b3dc  0001b3dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b3e0  0800b3e0  0001b3e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800b3e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000660  20000060  0800b444  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006c0  0800b444  000206c0  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008a  2**0
                  CONTENTS, READONLY
 13 .debug_info   000215aa  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004c67  00000000  00000000  00041677  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e98  00000000  00000000  000462e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000174d  00000000  00000000  00048178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022010  00000000  00000000  000498c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021b87  00000000  00000000  0006b8d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4305  00000000  00000000  0008d45c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008300  00000000  00000000  00151764  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00159a64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000060 	.word	0x20000060
 800015c:	00000000 	.word	0x00000000
 8000160:	0800ac98 	.word	0x0800ac98

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000064 	.word	0x20000064
 800017c:	0800ac98 	.word	0x0800ac98

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000234:	f000 b970 	b.w	8000518 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	460f      	mov	r7, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d965      	bls.n	8000332 <__udivmoddi4+0xe2>
 8000266:	fab2 f382 	clz	r3, r2
 800026a:	b143      	cbz	r3, 800027e <__udivmoddi4+0x2e>
 800026c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000270:	f1c3 0220 	rsb	r2, r3, #32
 8000274:	409f      	lsls	r7, r3
 8000276:	fa20 f202 	lsr.w	r2, r0, r2
 800027a:	4317      	orrs	r7, r2
 800027c:	409c      	lsls	r4, r3
 800027e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000282:	fa1f f58c 	uxth.w	r5, ip
 8000286:	fbb7 f1fe 	udiv	r1, r7, lr
 800028a:	0c22      	lsrs	r2, r4, #16
 800028c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000290:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000294:	fb01 f005 	mul.w	r0, r1, r5
 8000298:	4290      	cmp	r0, r2
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029c:	eb1c 0202 	adds.w	r2, ip, r2
 80002a0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002a4:	f080 811b 	bcs.w	80004de <__udivmoddi4+0x28e>
 80002a8:	4290      	cmp	r0, r2
 80002aa:	f240 8118 	bls.w	80004de <__udivmoddi4+0x28e>
 80002ae:	3902      	subs	r1, #2
 80002b0:	4462      	add	r2, ip
 80002b2:	1a12      	subs	r2, r2, r0
 80002b4:	b2a4      	uxth	r4, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002c2:	fb00 f505 	mul.w	r5, r0, r5
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	d90a      	bls.n	80002e0 <__udivmoddi4+0x90>
 80002ca:	eb1c 0404 	adds.w	r4, ip, r4
 80002ce:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002d2:	f080 8106 	bcs.w	80004e2 <__udivmoddi4+0x292>
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	f240 8103 	bls.w	80004e2 <__udivmoddi4+0x292>
 80002dc:	4464      	add	r4, ip
 80002de:	3802      	subs	r0, #2
 80002e0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e4:	1b64      	subs	r4, r4, r5
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11e      	cbz	r6, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40dc      	lsrs	r4, r3
 80002ec:	2300      	movs	r3, #0
 80002ee:	e9c6 4300 	strd	r4, r3, [r6]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d908      	bls.n	800030c <__udivmoddi4+0xbc>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80ec 	beq.w	80004d8 <__udivmoddi4+0x288>
 8000300:	2100      	movs	r1, #0
 8000302:	e9c6 0500 	strd	r0, r5, [r6]
 8000306:	4608      	mov	r0, r1
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	fab3 f183 	clz	r1, r3
 8000310:	2900      	cmp	r1, #0
 8000312:	d149      	bne.n	80003a8 <__udivmoddi4+0x158>
 8000314:	42ab      	cmp	r3, r5
 8000316:	d302      	bcc.n	800031e <__udivmoddi4+0xce>
 8000318:	4282      	cmp	r2, r0
 800031a:	f200 80f7 	bhi.w	800050c <__udivmoddi4+0x2bc>
 800031e:	1a84      	subs	r4, r0, r2
 8000320:	eb65 0203 	sbc.w	r2, r5, r3
 8000324:	2001      	movs	r0, #1
 8000326:	4617      	mov	r7, r2
 8000328:	2e00      	cmp	r6, #0
 800032a:	d0e2      	beq.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	e9c6 4700 	strd	r4, r7, [r6]
 8000330:	e7df      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000332:	b902      	cbnz	r2, 8000336 <__udivmoddi4+0xe6>
 8000334:	deff      	udf	#255	; 0xff
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	2b00      	cmp	r3, #0
 800033c:	f040 808f 	bne.w	800045e <__udivmoddi4+0x20e>
 8000340:	1a8a      	subs	r2, r1, r2
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2101      	movs	r1, #1
 800034c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000350:	fb07 2015 	mls	r0, r7, r5, r2
 8000354:	0c22      	lsrs	r2, r4, #16
 8000356:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800035a:	fb0e f005 	mul.w	r0, lr, r5
 800035e:	4290      	cmp	r0, r2
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x124>
 8000362:	eb1c 0202 	adds.w	r2, ip, r2
 8000366:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4290      	cmp	r0, r2
 800036e:	f200 80ca 	bhi.w	8000506 <__udivmoddi4+0x2b6>
 8000372:	4645      	mov	r5, r8
 8000374:	1a12      	subs	r2, r2, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb2 f0f7 	udiv	r0, r2, r7
 800037c:	fb07 2210 	mls	r2, r7, r0, r2
 8000380:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x14e>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x14c>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80ba 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800039c:	4610      	mov	r0, r2
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003a6:	e79f      	b.n	80002e8 <__udivmoddi4+0x98>
 80003a8:	f1c1 0720 	rsb	r7, r1, #32
 80003ac:	408b      	lsls	r3, r1
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa05 f401 	lsl.w	r4, r5, r1
 80003ba:	fa20 f307 	lsr.w	r3, r0, r7
 80003be:	40fd      	lsrs	r5, r7
 80003c0:	4323      	orrs	r3, r4
 80003c2:	fa00 f901 	lsl.w	r9, r0, r1
 80003c6:	ea4f 401c 	mov.w	r0, ip, lsr #16
 80003ca:	fa1f fe8c 	uxth.w	lr, ip
 80003ce:	fbb5 f8f0 	udiv	r8, r5, r0
 80003d2:	0c1c      	lsrs	r4, r3, #16
 80003d4:	fb00 5518 	mls	r5, r0, r8, r5
 80003d8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003dc:	fb08 f50e 	mul.w	r5, r8, lr
 80003e0:	42a5      	cmp	r5, r4
 80003e2:	fa02 f201 	lsl.w	r2, r2, r1
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003f0:	f080 8087 	bcs.w	8000502 <__udivmoddi4+0x2b2>
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	f240 8084 	bls.w	8000502 <__udivmoddi4+0x2b2>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4464      	add	r4, ip
 8000400:	1b64      	subs	r4, r4, r5
 8000402:	b29d      	uxth	r5, r3
 8000404:	fbb4 f3f0 	udiv	r3, r4, r0
 8000408:	fb00 4413 	mls	r4, r0, r3, r4
 800040c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000410:	fb03 fe0e 	mul.w	lr, r3, lr
 8000414:	45a6      	cmp	lr, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1c 0404 	adds.w	r4, ip, r4
 800041c:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 8000420:	d26b      	bcs.n	80004fa <__udivmoddi4+0x2aa>
 8000422:	45a6      	cmp	lr, r4
 8000424:	d969      	bls.n	80004fa <__udivmoddi4+0x2aa>
 8000426:	3b02      	subs	r3, #2
 8000428:	4464      	add	r4, ip
 800042a:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800042e:	fba0 8302 	umull	r8, r3, r0, r2
 8000432:	eba4 040e 	sub.w	r4, r4, lr
 8000436:	429c      	cmp	r4, r3
 8000438:	46c6      	mov	lr, r8
 800043a:	461d      	mov	r5, r3
 800043c:	d355      	bcc.n	80004ea <__udivmoddi4+0x29a>
 800043e:	d052      	beq.n	80004e6 <__udivmoddi4+0x296>
 8000440:	b156      	cbz	r6, 8000458 <__udivmoddi4+0x208>
 8000442:	ebb9 030e 	subs.w	r3, r9, lr
 8000446:	eb64 0405 	sbc.w	r4, r4, r5
 800044a:	fa04 f707 	lsl.w	r7, r4, r7
 800044e:	40cb      	lsrs	r3, r1
 8000450:	40cc      	lsrs	r4, r1
 8000452:	431f      	orrs	r7, r3
 8000454:	e9c6 7400 	strd	r7, r4, [r6]
 8000458:	2100      	movs	r1, #0
 800045a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045e:	f1c3 0120 	rsb	r1, r3, #32
 8000462:	fa02 fc03 	lsl.w	ip, r2, r3
 8000466:	fa20 f201 	lsr.w	r2, r0, r1
 800046a:	fa25 f101 	lsr.w	r1, r5, r1
 800046e:	409d      	lsls	r5, r3
 8000470:	432a      	orrs	r2, r5
 8000472:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000476:	fa1f fe8c 	uxth.w	lr, ip
 800047a:	fbb1 f0f7 	udiv	r0, r1, r7
 800047e:	fb07 1510 	mls	r5, r7, r0, r1
 8000482:	0c11      	lsrs	r1, r2, #16
 8000484:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000488:	fb00 f50e 	mul.w	r5, r0, lr
 800048c:	428d      	cmp	r5, r1
 800048e:	fa04 f403 	lsl.w	r4, r4, r3
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x256>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800049c:	d22f      	bcs.n	80004fe <__udivmoddi4+0x2ae>
 800049e:	428d      	cmp	r5, r1
 80004a0:	d92d      	bls.n	80004fe <__udivmoddi4+0x2ae>
 80004a2:	3802      	subs	r0, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1b49      	subs	r1, r1, r5
 80004a8:	b292      	uxth	r2, r2
 80004aa:	fbb1 f5f7 	udiv	r5, r1, r7
 80004ae:	fb07 1115 	mls	r1, r7, r5, r1
 80004b2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b6:	fb05 f10e 	mul.w	r1, r5, lr
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x280>
 80004be:	eb1c 0202 	adds.w	r2, ip, r2
 80004c2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004c6:	d216      	bcs.n	80004f6 <__udivmoddi4+0x2a6>
 80004c8:	4291      	cmp	r1, r2
 80004ca:	d914      	bls.n	80004f6 <__udivmoddi4+0x2a6>
 80004cc:	3d02      	subs	r5, #2
 80004ce:	4462      	add	r2, ip
 80004d0:	1a52      	subs	r2, r2, r1
 80004d2:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d6:	e739      	b.n	800034c <__udivmoddi4+0xfc>
 80004d8:	4631      	mov	r1, r6
 80004da:	4630      	mov	r0, r6
 80004dc:	e709      	b.n	80002f2 <__udivmoddi4+0xa2>
 80004de:	4639      	mov	r1, r7
 80004e0:	e6e7      	b.n	80002b2 <__udivmoddi4+0x62>
 80004e2:	4610      	mov	r0, r2
 80004e4:	e6fc      	b.n	80002e0 <__udivmoddi4+0x90>
 80004e6:	45c1      	cmp	r9, r8
 80004e8:	d2aa      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004ea:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ee:	eb63 050c 	sbc.w	r5, r3, ip
 80004f2:	3801      	subs	r0, #1
 80004f4:	e7a4      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f6:	4645      	mov	r5, r8
 80004f8:	e7ea      	b.n	80004d0 <__udivmoddi4+0x280>
 80004fa:	4603      	mov	r3, r0
 80004fc:	e795      	b.n	800042a <__udivmoddi4+0x1da>
 80004fe:	4640      	mov	r0, r8
 8000500:	e7d1      	b.n	80004a6 <__udivmoddi4+0x256>
 8000502:	46d0      	mov	r8, sl
 8000504:	e77c      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000506:	3d02      	subs	r5, #2
 8000508:	4462      	add	r2, ip
 800050a:	e733      	b.n	8000374 <__udivmoddi4+0x124>
 800050c:	4608      	mov	r0, r1
 800050e:	e70b      	b.n	8000328 <__udivmoddi4+0xd8>
 8000510:	4464      	add	r4, ip
 8000512:	3802      	subs	r0, #2
 8000514:	e743      	b.n	800039e <__udivmoddi4+0x14e>
 8000516:	bf00      	nop

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <AX_25PacketFormation>:

#define CMD_PAYLOAD	(35)

extern uint8_t tx_cmd[CMD_PAYLOAD];

void AX_25PacketFormation(uint8_t *main_cmd) {
 800051c:	b580      	push	{r7, lr}
 800051e:	b08c      	sub	sp, #48	; 0x30
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]

	myDebug("AX.25 information field: 0x%x \r\n");
 8000524:	4869      	ldr	r0, [pc, #420]	; (80006cc <AX_25PacketFormation+0x1b0>)
 8000526:	f000 f8f7 	bl	8000718 <myDebug>
	for (int i = 0; i < 13; i++) {
 800052a:	2300      	movs	r3, #0
 800052c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800052e:	e00a      	b.n	8000546 <AX_25PacketFormation+0x2a>
		myDebug("%02x ", main_cmd[i]);
 8000530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000532:	687a      	ldr	r2, [r7, #4]
 8000534:	4413      	add	r3, r2
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	4619      	mov	r1, r3
 800053a:	4865      	ldr	r0, [pc, #404]	; (80006d0 <AX_25PacketFormation+0x1b4>)
 800053c:	f000 f8ec 	bl	8000718 <myDebug>
	for (int i = 0; i < 13; i++) {
 8000540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000542:	3301      	adds	r3, #1
 8000544:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000548:	2b0c      	cmp	r3, #12
 800054a:	ddf1      	ble.n	8000530 <AX_25PacketFormation+0x14>
	}
	myDebug("\r\n");
 800054c:	4861      	ldr	r0, [pc, #388]	; (80006d4 <AX_25PacketFormation+0x1b8>)
 800054e:	f000 f8e3 	bl	8000718 <myDebug>

	uint8_t buff_head[17];
	// AX.25 Packet header
	tx_cmd[0] = 0x73;
 8000552:	4b61      	ldr	r3, [pc, #388]	; (80006d8 <AX_25PacketFormation+0x1bc>)
 8000554:	2273      	movs	r2, #115	; 0x73
 8000556:	701a      	strb	r2, [r3, #0]

	// destination callsign
	tx_cmd[1] = 0x72;    // callsign  9
 8000558:	4b5f      	ldr	r3, [pc, #380]	; (80006d8 <AX_25PacketFormation+0x1bc>)
 800055a:	2272      	movs	r2, #114	; 0x72
 800055c:	705a      	strb	r2, [r3, #1]
	tx_cmd[2] = 0x9C;	//callsign	N
 800055e:	4b5e      	ldr	r3, [pc, #376]	; (80006d8 <AX_25PacketFormation+0x1bc>)
 8000560:	229c      	movs	r2, #156	; 0x9c
 8000562:	709a      	strb	r2, [r3, #2]
	tx_cmd[3] = 0x64;	//callsign	2
 8000564:	4b5c      	ldr	r3, [pc, #368]	; (80006d8 <AX_25PacketFormation+0x1bc>)
 8000566:	2264      	movs	r2, #100	; 0x64
 8000568:	70da      	strb	r2, [r3, #3]
	tx_cmd[4] = 0xA6;	//callsign	S
 800056a:	4b5b      	ldr	r3, [pc, #364]	; (80006d8 <AX_25PacketFormation+0x1bc>)
 800056c:	22a6      	movs	r2, #166	; 0xa6
 800056e:	711a      	strb	r2, [r3, #4]
	tx_cmd[5] = 0x92;	//callsign	I
 8000570:	4b59      	ldr	r3, [pc, #356]	; (80006d8 <AX_25PacketFormation+0x1bc>)
 8000572:	2292      	movs	r2, #146	; 0x92
 8000574:	715a      	strb	r2, [r3, #5]
	tx_cmd[6] = 0x40;	// callsign    space 0x20 -> 1bit left shift 0x40
 8000576:	4b58      	ldr	r3, [pc, #352]	; (80006d8 <AX_25PacketFormation+0x1bc>)
 8000578:	2240      	movs	r2, #64	; 0x40
 800057a:	719a      	strb	r2, [r3, #6]
	tx_cmd[7] = 0xE0;	// destination SSID
 800057c:	4b56      	ldr	r3, [pc, #344]	; (80006d8 <AX_25PacketFormation+0x1bc>)
 800057e:	22e0      	movs	r2, #224	; 0xe0
 8000580:	71da      	strb	r2, [r3, #7]

	// source callsign					Sajan
	tx_cmd[8] = 0x53;    // callsign S
 8000582:	4b55      	ldr	r3, [pc, #340]	; (80006d8 <AX_25PacketFormation+0x1bc>)
 8000584:	2253      	movs	r2, #83	; 0x53
 8000586:	721a      	strb	r2, [r3, #8]
	tx_cmd[9] = 0x41;	//callsign	A
 8000588:	4b53      	ldr	r3, [pc, #332]	; (80006d8 <AX_25PacketFormation+0x1bc>)
 800058a:	2241      	movs	r2, #65	; 0x41
 800058c:	725a      	strb	r2, [r3, #9]
	tx_cmd[10] = 0x4A;	//callsign	J
 800058e:	4b52      	ldr	r3, [pc, #328]	; (80006d8 <AX_25PacketFormation+0x1bc>)
 8000590:	224a      	movs	r2, #74	; 0x4a
 8000592:	729a      	strb	r2, [r3, #10]
	tx_cmd[11] = 0x41;	//callsign	A
 8000594:	4b50      	ldr	r3, [pc, #320]	; (80006d8 <AX_25PacketFormation+0x1bc>)
 8000596:	2241      	movs	r2, #65	; 0x41
 8000598:	72da      	strb	r2, [r3, #11]
	tx_cmd[12] = 0x4E;	//callsign	N
 800059a:	4b4f      	ldr	r3, [pc, #316]	; (80006d8 <AX_25PacketFormation+0x1bc>)
 800059c:	224e      	movs	r2, #78	; 0x4e
 800059e:	731a      	strb	r2, [r3, #12]
	tx_cmd[13] = 0x40;	// callsign space
 80005a0:	4b4d      	ldr	r3, [pc, #308]	; (80006d8 <AX_25PacketFormation+0x1bc>)
 80005a2:	2240      	movs	r2, #64	; 0x40
 80005a4:	735a      	strb	r2, [r3, #13]
	tx_cmd[14] = 0x36;	// source SSID
 80005a6:	4b4c      	ldr	r3, [pc, #304]	; (80006d8 <AX_25PacketFormation+0x1bc>)
 80005a8:	2236      	movs	r2, #54	; 0x36
 80005aa:	739a      	strb	r2, [r3, #14]

	// control field
	tx_cmd[15] = 0x03;
 80005ac:	4b4a      	ldr	r3, [pc, #296]	; (80006d8 <AX_25PacketFormation+0x1bc>)
 80005ae:	2203      	movs	r2, #3
 80005b0:	73da      	strb	r2, [r3, #15]

	// PID control bit
	tx_cmd[16] = 0xF0;
 80005b2:	4b49      	ldr	r3, [pc, #292]	; (80006d8 <AX_25PacketFormation+0x1bc>)
 80005b4:	22f0      	movs	r2, #240	; 0xf0
 80005b6:	741a      	strb	r2, [r3, #16]

	for (int a = 0; a < 17; a++) {
 80005b8:	2300      	movs	r3, #0
 80005ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80005bc:	e00c      	b.n	80005d8 <AX_25PacketFormation+0xbc>
		buff_head[a] = tx_cmd[a];
 80005be:	4a46      	ldr	r2, [pc, #280]	; (80006d8 <AX_25PacketFormation+0x1bc>)
 80005c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005c2:	4413      	add	r3, r2
 80005c4:	7819      	ldrb	r1, [r3, #0]
 80005c6:	f107 0208 	add.w	r2, r7, #8
 80005ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005cc:	4413      	add	r3, r2
 80005ce:	460a      	mov	r2, r1
 80005d0:	701a      	strb	r2, [r3, #0]
	for (int a = 0; a < 17; a++) {
 80005d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005d4:	3301      	adds	r3, #1
 80005d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80005d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005da:	2b10      	cmp	r3, #16
 80005dc:	ddef      	ble.n	80005be <AX_25PacketFormation+0xa2>
	}

	// Calculate CRC-CCITT for the packet data starting from tx_cmd[0] to tx_cmd[16]

	uint16_t crc = 0;
 80005de:	2300      	movs	r3, #0
 80005e0:	837b      	strh	r3, [r7, #26]
	crc = calc_CRC(buff_head, sizeof(buff_head));
 80005e2:	f107 0308 	add.w	r3, r7, #8
 80005e6:	2111      	movs	r1, #17
 80005e8:	4618      	mov	r0, r3
 80005ea:	f000 f940 	bl	800086e <calc_CRC>
 80005ee:	4603      	mov	r3, r0
 80005f0:	837b      	strh	r3, [r7, #26]

	tx_cmd[17] = (crc >> 8);
 80005f2:	8b7b      	ldrh	r3, [r7, #26]
 80005f4:	0a1b      	lsrs	r3, r3, #8
 80005f6:	b29b      	uxth	r3, r3
 80005f8:	b2da      	uxtb	r2, r3
 80005fa:	4b37      	ldr	r3, [pc, #220]	; (80006d8 <AX_25PacketFormation+0x1bc>)
 80005fc:	745a      	strb	r2, [r3, #17]
	tx_cmd[18] = crc;
 80005fe:	8b7b      	ldrh	r3, [r7, #26]
 8000600:	b2da      	uxtb	r2, r3
 8000602:	4b35      	ldr	r3, [pc, #212]	; (80006d8 <AX_25PacketFormation+0x1bc>)
 8000604:	749a      	strb	r2, [r3, #18]

	// information field
	int i = 19;
 8000606:	2313      	movs	r3, #19
 8000608:	627b      	str	r3, [r7, #36]	; 0x24
	for (int k = 0; k < 13; k++) {
 800060a:	2300      	movs	r3, #0
 800060c:	623b      	str	r3, [r7, #32]
 800060e:	e00e      	b.n	800062e <AX_25PacketFormation+0x112>
		tx_cmd[i] = main_cmd[k];
 8000610:	6a3b      	ldr	r3, [r7, #32]
 8000612:	687a      	ldr	r2, [r7, #4]
 8000614:	4413      	add	r3, r2
 8000616:	7819      	ldrb	r1, [r3, #0]
 8000618:	4a2f      	ldr	r2, [pc, #188]	; (80006d8 <AX_25PacketFormation+0x1bc>)
 800061a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800061c:	4413      	add	r3, r2
 800061e:	460a      	mov	r2, r1
 8000620:	701a      	strb	r2, [r3, #0]
		i++;
 8000622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000624:	3301      	adds	r3, #1
 8000626:	627b      	str	r3, [r7, #36]	; 0x24
	for (int k = 0; k < 13; k++) {
 8000628:	6a3b      	ldr	r3, [r7, #32]
 800062a:	3301      	adds	r3, #1
 800062c:	623b      	str	r3, [r7, #32]
 800062e:	6a3b      	ldr	r3, [r7, #32]
 8000630:	2b0c      	cmp	r3, #12
 8000632:	dded      	ble.n	8000610 <AX_25PacketFormation+0xf4>
	}

	// Calculate CRC-CCITT for the packet data starting from packet[1]
	crc = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	837b      	strh	r3, [r7, #26]
	crc = calculateCRC_CCITT_AX25(main_cmd, 13);
 8000638:	210d      	movs	r1, #13
 800063a:	6878      	ldr	r0, [r7, #4]
 800063c:	f000 f8d8 	bl	80007f0 <calculateCRC_CCITT_AX25>
 8000640:	4603      	mov	r3, r0
 8000642:	837b      	strh	r3, [r7, #26]

	memset(main_cmd, '\0', 13);
 8000644:	220d      	movs	r2, #13
 8000646:	2100      	movs	r1, #0
 8000648:	6878      	ldr	r0, [r7, #4]
 800064a:	f009 fea3 	bl	800a394 <memset>

	// Store CRC result in the packet array (from packet[1] to end of for loop)
	tx_cmd[i] = (crc >> 8) & 0xFF; // Most significant byte
 800064e:	8b7b      	ldrh	r3, [r7, #26]
 8000650:	0a1b      	lsrs	r3, r3, #8
 8000652:	b29b      	uxth	r3, r3
 8000654:	b2d9      	uxtb	r1, r3
 8000656:	4a20      	ldr	r2, [pc, #128]	; (80006d8 <AX_25PacketFormation+0x1bc>)
 8000658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800065a:	4413      	add	r3, r2
 800065c:	460a      	mov	r2, r1
 800065e:	701a      	strb	r2, [r3, #0]
	i++;
 8000660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000662:	3301      	adds	r3, #1
 8000664:	627b      	str	r3, [r7, #36]	; 0x24
	tx_cmd[i] = crc & 0xFF;        // Least significant byte
 8000666:	8b7b      	ldrh	r3, [r7, #26]
 8000668:	b2d9      	uxtb	r1, r3
 800066a:	4a1b      	ldr	r2, [pc, #108]	; (80006d8 <AX_25PacketFormation+0x1bc>)
 800066c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800066e:	4413      	add	r3, r2
 8000670:	460a      	mov	r2, r1
 8000672:	701a      	strb	r2, [r3, #0]
	i++;
 8000674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000676:	3301      	adds	r3, #1
 8000678:	627b      	str	r3, [r7, #36]	; 0x24
	// AX.25 Packet footer
	tx_cmd[i] = 0x73;
 800067a:	4a17      	ldr	r2, [pc, #92]	; (80006d8 <AX_25PacketFormation+0x1bc>)
 800067c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800067e:	4413      	add	r3, r2
 8000680:	2273      	movs	r2, #115	; 0x73
 8000682:	701a      	strb	r2, [r3, #0]
	myDebug("\npacket_len: %d\r\n", i + 1);
 8000684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000686:	3301      	adds	r3, #1
 8000688:	4619      	mov	r1, r3
 800068a:	4814      	ldr	r0, [pc, #80]	; (80006dc <AX_25PacketFormation+0x1c0>)
 800068c:	f000 f844 	bl	8000718 <myDebug>
	myDebug("packet: 0x%x\r\n", tx_cmd);
 8000690:	4911      	ldr	r1, [pc, #68]	; (80006d8 <AX_25PacketFormation+0x1bc>)
 8000692:	4813      	ldr	r0, [pc, #76]	; (80006e0 <AX_25PacketFormation+0x1c4>)
 8000694:	f000 f840 	bl	8000718 <myDebug>
	for (int j = 0; j <= i; j++) {
 8000698:	2300      	movs	r3, #0
 800069a:	61fb      	str	r3, [r7, #28]
 800069c:	e00a      	b.n	80006b4 <AX_25PacketFormation+0x198>
		myDebug("%02x ", tx_cmd[j]);
 800069e:	4a0e      	ldr	r2, [pc, #56]	; (80006d8 <AX_25PacketFormation+0x1bc>)
 80006a0:	69fb      	ldr	r3, [r7, #28]
 80006a2:	4413      	add	r3, r2
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	4619      	mov	r1, r3
 80006a8:	4809      	ldr	r0, [pc, #36]	; (80006d0 <AX_25PacketFormation+0x1b4>)
 80006aa:	f000 f835 	bl	8000718 <myDebug>
	for (int j = 0; j <= i; j++) {
 80006ae:	69fb      	ldr	r3, [r7, #28]
 80006b0:	3301      	adds	r3, #1
 80006b2:	61fb      	str	r3, [r7, #28]
 80006b4:	69fa      	ldr	r2, [r7, #28]
 80006b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006b8:	429a      	cmp	r2, r3
 80006ba:	ddf0      	ble.n	800069e <AX_25PacketFormation+0x182>
	}
	myDebug("\r\n");
 80006bc:	4805      	ldr	r0, [pc, #20]	; (80006d4 <AX_25PacketFormation+0x1b8>)
 80006be:	f000 f82b 	bl	8000718 <myDebug>
}
 80006c2:	bf00      	nop
 80006c4:	3730      	adds	r7, #48	; 0x30
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	0800acb0 	.word	0x0800acb0
 80006d0:	0800acd4 	.word	0x0800acd4
 80006d4:	0800acdc 	.word	0x0800acdc
 80006d8:	20000188 	.word	0x20000188
 80006dc:	0800ace0 	.word	0x0800ace0
 80006e0:	0800acf4 	.word	0x0800acf4

080006e4 <delay_us>:
#include "com_debug.h"
#include "stdio.h"
#include "stdarg.h"
#include "stdint.h"

void delay_us(uint32_t us) {
 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
	uint32_t delay_counter_disp;
	__HAL_TIM_SET_COUNTER(&htim2, 0);  // set the counter value a 0
 80006ec:	4b09      	ldr	r3, [pc, #36]	; (8000714 <delay_us+0x30>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	2200      	movs	r2, #0
 80006f2:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us)
 80006f4:	e002      	b.n	80006fc <delay_us+0x18>
		delay_counter_disp++;
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	3301      	adds	r3, #1
 80006fa:	60fb      	str	r3, [r7, #12]
	while (__HAL_TIM_GET_COUNTER(&htim2) < us)
 80006fc:	4b05      	ldr	r3, [pc, #20]	; (8000714 <delay_us+0x30>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000702:	687a      	ldr	r2, [r7, #4]
 8000704:	429a      	cmp	r2, r3
 8000706:	d8f6      	bhi.n	80006f6 <delay_us+0x12>
	// wait for the counter to reach the us input in the parameter
}
 8000708:	bf00      	nop
 800070a:	bf00      	nop
 800070c:	3714      	adds	r7, #20
 800070e:	46bd      	mov	sp, r7
 8000710:	bc80      	pop	{r7}
 8000712:	4770      	bx	lr
 8000714:	20000210 	.word	0x20000210

08000718 <myDebug>:

void myDebug(const char *fmt, ...) {
 8000718:	b40f      	push	{r0, r1, r2, r3}
 800071a:	b580      	push	{r7, lr}
 800071c:	b082      	sub	sp, #8
 800071e:	af00      	add	r7, sp, #0
	static char temp[100];
	va_list args;
	va_start(args, fmt);
 8000720:	f107 0314 	add.w	r3, r7, #20
 8000724:	603b      	str	r3, [r7, #0]
	vsnprintf(temp, sizeof(temp), fmt, args);
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	693a      	ldr	r2, [r7, #16]
 800072a:	2164      	movs	r1, #100	; 0x64
 800072c:	480a      	ldr	r0, [pc, #40]	; (8000758 <myDebug+0x40>)
 800072e:	f009 fe23 	bl	800a378 <vsniprintf>
	va_end(args);
	int len = bufferSize(temp);
 8000732:	4809      	ldr	r0, [pc, #36]	; (8000758 <myDebug+0x40>)
 8000734:	f000 f814 	bl	8000760 <bufferSize>
 8000738:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) temp, len, 1000);
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	b29a      	uxth	r2, r3
 800073e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000742:	4905      	ldr	r1, [pc, #20]	; (8000758 <myDebug+0x40>)
 8000744:	4805      	ldr	r0, [pc, #20]	; (800075c <myDebug+0x44>)
 8000746:	f004 fc9b 	bl	8005080 <HAL_UART_Transmit>
}
 800074a:	bf00      	nop
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000754:	b004      	add	sp, #16
 8000756:	4770      	bx	lr
 8000758:	2000007c 	.word	0x2000007c
 800075c:	20000260 	.word	0x20000260

08000760 <bufferSize>:

int bufferSize(char *buffer) {
 8000760:	b480      	push	{r7}
 8000762:	b085      	sub	sp, #20
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
	int i = 0;
 8000768:	2300      	movs	r3, #0
 800076a:	60fb      	str	r3, [r7, #12]
	while (*buffer++ != '\0')
 800076c:	e002      	b.n	8000774 <bufferSize+0x14>
		i++;
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	3301      	adds	r3, #1
 8000772:	60fb      	str	r3, [r7, #12]
	while (*buffer++ != '\0')
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	1c5a      	adds	r2, r3, #1
 8000778:	607a      	str	r2, [r7, #4]
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d1f6      	bne.n	800076e <bufferSize+0xe>
	return i;
 8000780:	68fb      	ldr	r3, [r7, #12]
}
 8000782:	4618      	mov	r0, r3
 8000784:	3714      	adds	r7, #20
 8000786:	46bd      	mov	sp, r7
 8000788:	bc80      	pop	{r7}
 800078a:	4770      	bx	lr

0800078c <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_DMAMUX1
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800078c:	b480      	push	{r7}
 800078e:	b085      	sub	sp, #20
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000794:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000798:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800079a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	4313      	orrs	r3, r2
 80007a2:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80007a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	4013      	ands	r3, r2
 80007ae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007b0:	68fb      	ldr	r3, [r7, #12]
}
 80007b2:	bf00      	nop
 80007b4:	3714      	adds	r7, #20
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bc80      	pop	{r7}
 80007ba:	4770      	bx	lr

080007bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80007c0:	2004      	movs	r0, #4
 80007c2:	f7ff ffe3 	bl	800078c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007c6:	2001      	movs	r0, #1
 80007c8:	f7ff ffe0 	bl	800078c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80007cc:	2200      	movs	r2, #0
 80007ce:	2100      	movs	r1, #0
 80007d0:	200b      	movs	r0, #11
 80007d2:	f001 faa8 	bl	8001d26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007d6:	200b      	movs	r0, #11
 80007d8:	f001 fabf 	bl	8001d5a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80007dc:	2200      	movs	r2, #0
 80007de:	2100      	movs	r1, #0
 80007e0:	200c      	movs	r0, #12
 80007e2:	f001 faa0 	bl	8001d26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80007e6:	200c      	movs	r0, #12
 80007e8:	f001 fab7 	bl	8001d5a <HAL_NVIC_EnableIRQ>

}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <calculateCRC_CCITT_AX25>:
 */

#include "error_detection.h"

// Function to calculate CRC-CCITT for AX.25 frames
uint16_t calculateCRC_CCITT_AX25(const uint8_t *data, size_t length) {
 80007f0:	b480      	push	{r7}
 80007f2:	b087      	sub	sp, #28
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	6039      	str	r1, [r7, #0]
	uint16_t crc = 0xFFFF; // Initialize CRC register with 0xFFFF
 80007fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007fe:	82fb      	strh	r3, [r7, #22]
	uint16_t CRC_POLY = 0x1021; // CRC polynomial for CCITT (0x1021)
 8000800:	f241 0321 	movw	r3, #4129	; 0x1021
 8000804:	817b      	strh	r3, [r7, #10]

	// Iterate through each byte of the input data
	for (size_t i = 0; i < length; i++) {
 8000806:	2300      	movs	r3, #0
 8000808:	613b      	str	r3, [r7, #16]
 800080a:	e026      	b.n	800085a <calculateCRC_CCITT_AX25+0x6a>
		crc ^= ((uint16_t) data[i] << 8); // XOR CRC with next byte of input data
 800080c:	687a      	ldr	r2, [r7, #4]
 800080e:	693b      	ldr	r3, [r7, #16]
 8000810:	4413      	add	r3, r2
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	021b      	lsls	r3, r3, #8
 8000816:	b21a      	sxth	r2, r3
 8000818:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800081c:	4053      	eors	r3, r2
 800081e:	b21b      	sxth	r3, r3
 8000820:	82fb      	strh	r3, [r7, #22]

		// Iterate through each bit of the current byte
		for (int j = 0; j < 8; j++) {
 8000822:	2300      	movs	r3, #0
 8000824:	60fb      	str	r3, [r7, #12]
 8000826:	e012      	b.n	800084e <calculateCRC_CCITT_AX25+0x5e>
			if (crc & 0x8000) { // If MSB of CRC is 1
 8000828:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800082c:	2b00      	cmp	r3, #0
 800082e:	da08      	bge.n	8000842 <calculateCRC_CCITT_AX25+0x52>
				crc = (crc << 1) ^ CRC_POLY; // Left shift CRC and XOR with polynomial
 8000830:	8afb      	ldrh	r3, [r7, #22]
 8000832:	005b      	lsls	r3, r3, #1
 8000834:	b21a      	sxth	r2, r3
 8000836:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800083a:	4053      	eors	r3, r2
 800083c:	b21b      	sxth	r3, r3
 800083e:	82fb      	strh	r3, [r7, #22]
 8000840:	e002      	b.n	8000848 <calculateCRC_CCITT_AX25+0x58>
			} else {
				crc <<= 1; // Left shift CRC
 8000842:	8afb      	ldrh	r3, [r7, #22]
 8000844:	005b      	lsls	r3, r3, #1
 8000846:	82fb      	strh	r3, [r7, #22]
		for (int j = 0; j < 8; j++) {
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	3301      	adds	r3, #1
 800084c:	60fb      	str	r3, [r7, #12]
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	2b07      	cmp	r3, #7
 8000852:	dde9      	ble.n	8000828 <calculateCRC_CCITT_AX25+0x38>
	for (size_t i = 0; i < length; i++) {
 8000854:	693b      	ldr	r3, [r7, #16]
 8000856:	3301      	adds	r3, #1
 8000858:	613b      	str	r3, [r7, #16]
 800085a:	693a      	ldr	r2, [r7, #16]
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	429a      	cmp	r2, r3
 8000860:	d3d4      	bcc.n	800080c <calculateCRC_CCITT_AX25+0x1c>
			}
		}
	}

	return crc; // Return calculated CRC
 8000862:	8afb      	ldrh	r3, [r7, #22]
}
 8000864:	4618      	mov	r0, r3
 8000866:	371c      	adds	r7, #28
 8000868:	46bd      	mov	sp, r7
 800086a:	bc80      	pop	{r7}
 800086c:	4770      	bx	lr

0800086e <calc_CRC>:

uint16_t calc_CRC(const uint8_t *data, size_t length) {
 800086e:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8000872:	b08b      	sub	sp, #44	; 0x2c
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
 8000878:	6039      	str	r1, [r7, #0]
 800087a:	466b      	mov	r3, sp
 800087c:	4618      	mov	r0, r3

	uint16_t crcReg = 0xFFFF;	// Initialize the CRC register with 0xFFFF
 800087e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000882:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t calc = 0x8408;		// Polynomial for CRC-16
 8000884:	f248 4308 	movw	r3, #33800	; 0x8408
 8000888:	837b      	strh	r3, [r7, #26]
	uint16_t w;
	int i, j;
	uint8_t calc_data[length];  // in 16 bytes, 14 are data bytes
 800088a:	6839      	ldr	r1, [r7, #0]
 800088c:	460b      	mov	r3, r1
 800088e:	3b01      	subs	r3, #1
 8000890:	617b      	str	r3, [r7, #20]
 8000892:	2300      	movs	r3, #0
 8000894:	4688      	mov	r8, r1
 8000896:	4699      	mov	r9, r3
 8000898:	f04f 0200 	mov.w	r2, #0
 800089c:	f04f 0300 	mov.w	r3, #0
 80008a0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80008a4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80008a8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80008ac:	2300      	movs	r3, #0
 80008ae:	460c      	mov	r4, r1
 80008b0:	461d      	mov	r5, r3
 80008b2:	f04f 0200 	mov.w	r2, #0
 80008b6:	f04f 0300 	mov.w	r3, #0
 80008ba:	00eb      	lsls	r3, r5, #3
 80008bc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80008c0:	00e2      	lsls	r2, r4, #3
 80008c2:	1dcb      	adds	r3, r1, #7
 80008c4:	08db      	lsrs	r3, r3, #3
 80008c6:	00db      	lsls	r3, r3, #3
 80008c8:	ebad 0d03 	sub.w	sp, sp, r3
 80008cc:	466b      	mov	r3, sp
 80008ce:	3300      	adds	r3, #0
 80008d0:	613b      	str	r3, [r7, #16]

	// Copy data into calc_data
	for (i = 0; i < length; i++) {
 80008d2:	2300      	movs	r3, #0
 80008d4:	623b      	str	r3, [r7, #32]
 80008d6:	e034      	b.n	8000942 <calc_CRC+0xd4>
		calc_data[i] = data[i];
 80008d8:	6a3b      	ldr	r3, [r7, #32]
 80008da:	687a      	ldr	r2, [r7, #4]
 80008dc:	4413      	add	r3, r2
 80008de:	7819      	ldrb	r1, [r3, #0]
 80008e0:	693a      	ldr	r2, [r7, #16]
 80008e2:	6a3b      	ldr	r3, [r7, #32]
 80008e4:	4413      	add	r3, r2
 80008e6:	460a      	mov	r2, r1
 80008e8:	701a      	strb	r2, [r3, #0]
		// Iterate over each byte of data
		for (j = 0; j < 8; j++) {
 80008ea:	2300      	movs	r3, #0
 80008ec:	61fb      	str	r3, [r7, #28]
 80008ee:	e022      	b.n	8000936 <calc_CRC+0xc8>
			w = (crcReg ^ calc_data[i]) & 0x0001; // XOR the LSB of crcReg with the LSB of calc_data
 80008f0:	693a      	ldr	r2, [r7, #16]
 80008f2:	6a3b      	ldr	r3, [r7, #32]
 80008f4:	4413      	add	r3, r2
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	b29a      	uxth	r2, r3
 80008fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80008fc:	4053      	eors	r3, r2
 80008fe:	b29b      	uxth	r3, r3
 8000900:	f003 0301 	and.w	r3, r3, #1
 8000904:	81fb      	strh	r3, [r7, #14]
			crcReg = crcReg >> 1;			// Right-shift the crcReg by 1 bit
 8000906:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (w == 1) {
 800090c:	89fb      	ldrh	r3, [r7, #14]
 800090e:	2b01      	cmp	r3, #1
 8000910:	d103      	bne.n	800091a <calc_CRC+0xac>
				crcReg = crcReg ^ calc;	// If w is 1, XOR the crcReg with the polynomial
 8000912:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000914:	8b7b      	ldrh	r3, [r7, #26]
 8000916:	4053      	eors	r3, r2
 8000918:	84fb      	strh	r3, [r7, #38]	; 0x26
			}
			calc_data[i] = calc_data[i] >> 1;// Right-shift the data byte by 1 bit
 800091a:	693a      	ldr	r2, [r7, #16]
 800091c:	6a3b      	ldr	r3, [r7, #32]
 800091e:	4413      	add	r3, r2
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	085b      	lsrs	r3, r3, #1
 8000924:	b2d9      	uxtb	r1, r3
 8000926:	693a      	ldr	r2, [r7, #16]
 8000928:	6a3b      	ldr	r3, [r7, #32]
 800092a:	4413      	add	r3, r2
 800092c:	460a      	mov	r2, r1
 800092e:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < 8; j++) {
 8000930:	69fb      	ldr	r3, [r7, #28]
 8000932:	3301      	adds	r3, #1
 8000934:	61fb      	str	r3, [r7, #28]
 8000936:	69fb      	ldr	r3, [r7, #28]
 8000938:	2b07      	cmp	r3, #7
 800093a:	ddd9      	ble.n	80008f0 <calc_CRC+0x82>
	for (i = 0; i < length; i++) {
 800093c:	6a3b      	ldr	r3, [r7, #32]
 800093e:	3301      	adds	r3, #1
 8000940:	623b      	str	r3, [r7, #32]
 8000942:	6a3b      	ldr	r3, [r7, #32]
 8000944:	683a      	ldr	r2, [r7, #0]
 8000946:	429a      	cmp	r2, r3
 8000948:	d8c6      	bhi.n	80008d8 <calc_CRC+0x6a>
		}
	}
	crcReg = crcReg ^ 0xFFFF;						// Final XOR with 0xFFFF
 800094a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800094c:	43db      	mvns	r3, r3
 800094e:	84fb      	strh	r3, [r7, #38]	; 0x26
	return crcReg;
 8000950:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000952:	4685      	mov	sp, r0
}
 8000954:	4618      	mov	r0, r3
 8000956:	372c      	adds	r7, #44	; 0x2c
 8000958:	46bd      	mov	sp, r7
 800095a:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 800095e:	4770      	bx	lr

08000960 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000960:	b480      	push	{r7}
 8000962:	b085      	sub	sp, #20
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000968:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800096c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800096e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4313      	orrs	r3, r2
 8000976:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000978:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800097c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4013      	ands	r3, r2
 8000982:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000984:	68fb      	ldr	r3, [r7, #12]
}
 8000986:	bf00      	nop
 8000988:	3714      	adds	r7, #20
 800098a:	46bd      	mov	sp, r7
 800098c:	bc80      	pop	{r7}
 800098e:	4770      	bx	lr

08000990 <MX_GPIO_Init>:
        * EXTI
     PA10   ------> USART1_RX
     PA9   ------> USART1_TX
*/
void MX_GPIO_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b086      	sub	sp, #24
 8000994:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]
 80009a2:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a4:	2001      	movs	r0, #1
 80009a6:	f7ff ffdb 	bl	8000960 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009aa:	2002      	movs	r0, #2
 80009ac:	f7ff ffd8 	bl	8000960 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b0:	2004      	movs	r0, #4
 80009b2:	f7ff ffd5 	bl	8000960 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 80009b6:	2200      	movs	r2, #0
 80009b8:	f44f 410a 	mov.w	r1, #35328	; 0x8a00
 80009bc:	4828      	ldr	r0, [pc, #160]	; (8000a60 <MX_GPIO_Init+0xd0>)
 80009be:	f001 fec9 	bl	8002754 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin, GPIO_PIN_RESET);
 80009c2:	2200      	movs	r2, #0
 80009c4:	2138      	movs	r1, #56	; 0x38
 80009c6:	4827      	ldr	r0, [pc, #156]	; (8000a64 <MX_GPIO_Init+0xd4>)
 80009c8:	f001 fec4 	bl	8002754 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 80009cc:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 80009d0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d2:	2301      	movs	r3, #1
 80009d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009da:	2302      	movs	r3, #2
 80009dc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009de:	1d3b      	adds	r3, r7, #4
 80009e0:	4619      	mov	r1, r3
 80009e2:	481f      	ldr	r0, [pc, #124]	; (8000a60 <MX_GPIO_Init+0xd0>)
 80009e4:	f001 fd56 	bl	8002494 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 80009e8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80009ec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ee:	2302      	movs	r3, #2
 80009f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f6:	2300      	movs	r3, #0
 80009f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009fa:	2307      	movs	r3, #7
 80009fc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	4619      	mov	r1, r3
 8000a02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a06:	f001 fd45 	bl	8002494 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin;
 8000a0a:	2338      	movs	r3, #56	; 0x38
 8000a0c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a16:	2303      	movs	r3, #3
 8000a18:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a1a:	1d3b      	adds	r3, r7, #4
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4811      	ldr	r0, [pc, #68]	; (8000a64 <MX_GPIO_Init+0xd4>)
 8000a20:	f001 fd38 	bl	8002494 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|B2_Pin;
 8000a24:	2303      	movs	r3, #3
 8000a26:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a28:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a2c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a32:	1d3b      	adds	r3, r7, #4
 8000a34:	4619      	mov	r1, r3
 8000a36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a3a:	f001 fd2b 	bl	8002494 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B3_Pin;
 8000a3e:	2340      	movs	r3, #64	; 0x40
 8000a40:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a42:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a46:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 8000a4c:	1d3b      	adds	r3, r7, #4
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4804      	ldr	r0, [pc, #16]	; (8000a64 <MX_GPIO_Init+0xd4>)
 8000a52:	f001 fd1f 	bl	8002494 <HAL_GPIO_Init>

}
 8000a56:	bf00      	nop
 8000a58:	3718      	adds	r7, #24
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	48000400 	.word	0x48000400
 8000a64:	48000800 	.word	0x48000800

08000a68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b086      	sub	sp, #24
 8000a6c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a6e:	f001 f817 	bl	8001aa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a72:	f000 f9fd 	bl	8000e70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a76:	f7ff ff8b 	bl	8000990 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a7a:	f7ff fe9f 	bl	80007bc <MX_DMA_Init>
  MX_TIM1_Init();
 8000a7e:	f000 fd6f 	bl	8001560 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000a82:	f000 fdc1 	bl	8001608 <MX_TIM2_Init>
  MX_SubGHz_Phy_Init();
 8000a86:	f009 f8c6 	bl	8009c16 <MX_SubGHz_Phy_Init>
  MX_USART2_UART_Init();
 8000a8a:	f000 fed7 	bl	800183c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim2);
 8000a8e:	48c2      	ldr	r0, [pc, #776]	; (8000d98 <main+0x330>)
 8000a90:	f003 feb8 	bl	8004804 <HAL_TIM_Base_Start>

	myDebug("########## Slippers2Sat Ground Station: BEGIN ##########\r\n");
 8000a94:	48c1      	ldr	r0, [pc, #772]	; (8000d9c <main+0x334>)
 8000a96:	f7ff fe3f 	bl	8000718 <myDebug>
	myDebug("########## COMMUNICATION PARAMETERS ##########\r\n");
 8000a9a:	48c1      	ldr	r0, [pc, #772]	; (8000da0 <main+0x338>)
 8000a9c:	f7ff fe3c 	bl	8000718 <myDebug>
	myDebug("Modulation: GFSK PACKET\r\n");
 8000aa0:	48c0      	ldr	r0, [pc, #768]	; (8000da4 <main+0x33c>)
 8000aa2:	f7ff fe39 	bl	8000718 <myDebug>
	myDebug("FREQUENCY MODES: DOWNLINK FREQ: %luHz, UPLINK FREQ: %lu Hz\r\n",
 8000aa6:	4ac0      	ldr	r2, [pc, #768]	; (8000da8 <main+0x340>)
 8000aa8:	49c0      	ldr	r1, [pc, #768]	; (8000dac <main+0x344>)
 8000aaa:	48c1      	ldr	r0, [pc, #772]	; (8000db0 <main+0x348>)
 8000aac:	f7ff fe34 	bl	8000718 <myDebug>
	FREQ_437_MHZ, FREQ_435_MHZ);
	myDebug("STM32 BSP_SubGHz-WL Radio: Low Power\n");
 8000ab0:	48c0      	ldr	r0, [pc, #768]	; (8000db4 <main+0x34c>)
 8000ab2:	f7ff fe31 	bl	8000718 <myDebug>
	myDebug("POWER CONFIG:::: \n"
 8000ab6:	230e      	movs	r3, #14
 8000ab8:	9300      	str	r3, [sp, #0]
 8000aba:	2301      	movs	r3, #1
 8000abc:	2200      	movs	r2, #0
 8000abe:	2104      	movs	r1, #4
 8000ac0:	48bd      	ldr	r0, [pc, #756]	; (8000db8 <main+0x350>)
 8000ac2:	f7ff fe29 	bl	8000718 <myDebug>
			"\t PA_DUTY_CYCLE: %x, HP_MAX: %x, PA_SEL: %x, POWER TX: %u dBm\r\n",
	PA_DUTY_CYCLE, HP_MAX, PA_SEL, POWER);

	myDebug("\n########## Operation Starts ##########\r\n");
 8000ac6:	48bd      	ldr	r0, [pc, #756]	; (8000dbc <main+0x354>)
 8000ac8:	f7ff fe26 	bl	8000718 <myDebug>
	myDebug("________________Waiting Beacon Type_1 ____________\r\n");
 8000acc:	48bc      	ldr	r0, [pc, #752]	; (8000dc0 <main+0x358>)
 8000ace:	f7ff fe23 	bl	8000718 <myDebug>

	pkt_params.PacketType = PACKET_TYPE_GFSK;
 8000ad2:	4bbc      	ldr	r3, [pc, #752]	; (8000dc4 <main+0x35c>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	701a      	strb	r2, [r3, #0]
	pkt_params.Params.Gfsk.PayloadLength = PAYLOAD_LENGTH;
 8000ad8:	4bba      	ldr	r3, [pc, #744]	; (8000dc4 <main+0x35c>)
 8000ada:	2267      	movs	r2, #103	; 0x67
 8000adc:	721a      	strb	r2, [r3, #8]
	pkt_params.Params.Gfsk.PreambleLength = 8; /*Convert byte into bit*/
 8000ade:	4bb9      	ldr	r3, [pc, #740]	; (8000dc4 <main+0x35c>)
 8000ae0:	2208      	movs	r2, #8
 8000ae2:	805a      	strh	r2, [r3, #2]
	pkt_params.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8000ae4:	4bb7      	ldr	r3, [pc, #732]	; (8000dc4 <main+0x35c>)
 8000ae6:	2204      	movs	r2, #4
 8000ae8:	711a      	strb	r2, [r3, #4]
	pkt_params.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8000aea:	4bb6      	ldr	r3, [pc, #728]	; (8000dc4 <main+0x35c>)
 8000aec:	2218      	movs	r2, #24
 8000aee:	715a      	strb	r2, [r3, #5]
	pkt_params.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8000af0:	4bb4      	ldr	r3, [pc, #720]	; (8000dc4 <main+0x35c>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	719a      	strb	r2, [r3, #6]
	pkt_params.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8000af6:	4bb3      	ldr	r3, [pc, #716]	; (8000dc4 <main+0x35c>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	71da      	strb	r2, [r3, #7]
	pkt_params.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8000afc:	4bb1      	ldr	r3, [pc, #708]	; (8000dc4 <main+0x35c>)
 8000afe:	22f2      	movs	r2, #242	; 0xf2
 8000b00:	725a      	strb	r2, [r3, #9]
	pkt_params.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8000b02:	4bb0      	ldr	r3, [pc, #704]	; (8000dc4 <main+0x35c>)
 8000b04:	2201      	movs	r2, #1
 8000b06:	729a      	strb	r2, [r3, #10]

	mod_params.PacketType = PACKET_TYPE_GFSK;
 8000b08:	4baf      	ldr	r3, [pc, #700]	; (8000dc8 <main+0x360>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	701a      	strb	r2, [r3, #0]
	mod_params.Params.Gfsk.Bandwidth = RX_BW_29300; /*Not used in TX*/
 8000b0e:	4bae      	ldr	r3, [pc, #696]	; (8000dc8 <main+0x360>)
 8000b10:	220d      	movs	r2, #13
 8000b12:	735a      	strb	r2, [r3, #13]
	mod_params.Params.Gfsk.BitRate = DEMO_DEFAULT_BR_4800;
 8000b14:	4bac      	ldr	r3, [pc, #688]	; (8000dc8 <main+0x360>)
 8000b16:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8000b1a:	605a      	str	r2, [r3, #4]
	mod_params.Params.Gfsk.Fdev = DEMO_DEFAULT_FDEV_4800;
 8000b1c:	4baa      	ldr	r3, [pc, #680]	; (8000dc8 <main+0x360>)
 8000b1e:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8000b22:	609a      	str	r2, [r3, #8]
	mod_params.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8000b24:	4ba8      	ldr	r3, [pc, #672]	; (8000dc8 <main+0x360>)
 8000b26:	220b      	movs	r2, #11
 8000b28:	731a      	strb	r2, [r3, #12]

	SUBGRF_Init(DioIrqHndlr);
 8000b2a:	48a8      	ldr	r0, [pc, #672]	; (8000dcc <main+0x364>)
 8000b2c:	f007 fe2a 	bl	8008784 <SUBGRF_Init>
	SUBGRF_SetBufferBaseAddress(0x00, 0x00);
 8000b30:	2100      	movs	r1, #0
 8000b32:	2000      	movs	r0, #0
 8000b34:	f008 fc92 	bl	800945c <SUBGRF_SetBufferBaseAddress>

	SUBGRF_SetPacketParams(&pkt_params);
 8000b38:	48a2      	ldr	r0, [pc, #648]	; (8000dc4 <main+0x35c>)
 8000b3a:	f008 fbf1 	bl	8009320 <SUBGRF_SetPacketParams>
	SUBGRF_SetSyncWord(( uint8_t[] ) { 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00,
 8000b3e:	4aa4      	ldr	r2, [pc, #656]	; (8000dd0 <main+0x368>)
 8000b40:	f107 0308 	add.w	r3, r7, #8
 8000b44:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b48:	e883 0003 	stmia.w	r3, {r0, r1}
 8000b4c:	f107 0308 	add.w	r3, r7, #8
 8000b50:	4618      	mov	r0, r3
 8000b52:	f007 feae 	bl	80088b2 <SUBGRF_SetSyncWord>
					0x00 });
	SUBGRF_SetWhiteningSeed(0x01FF);
 8000b56:	f240 10ff 	movw	r0, #511	; 0x1ff
 8000b5a:	f007 fef9 	bl	8008950 <SUBGRF_SetWhiteningSeed>
	SUBGRF_SetRfFrequency(FREQ_437_MHZ);
 8000b5e:	4893      	ldr	r0, [pc, #588]	; (8000dac <main+0x344>)
 8000b60:	f008 f9d2 	bl	8008f08 <SUBGRF_SetRfFrequency>
	SUBGRF_SetPaConfig(PA_DUTY_CYCLE, HP_MAX, PA_SEL, 0x01);
 8000b64:	2301      	movs	r3, #1
 8000b66:	2201      	movs	r2, #1
 8000b68:	2100      	movs	r1, #0
 8000b6a:	2004      	movs	r0, #4
 8000b6c:	f008 f94e 	bl	8008e0c <SUBGRF_SetPaConfig>
	//SUBGRF_SetTxParams(RFO_HP, POWER, RAMP_TIME);
	SUBGRF_SetTxParams(RFO_LP, POWER, RAMP_TIME);
 8000b70:	2202      	movs	r2, #2
 8000b72:	210e      	movs	r1, #14
 8000b74:	2001      	movs	r0, #1
 8000b76:	f008 fa33 	bl	8008fe0 <SUBGRF_SetTxParams>
	SUBGRF_SetModulationParams(&mod_params);
 8000b7a:	4893      	ldr	r0, [pc, #588]	; (8000dc8 <main+0x360>)
 8000b7c:	f008 fafe 	bl	800917c <SUBGRF_SetModulationParams>
	SUBGRF_SetDioIrqParams(
 8000b80:	2300      	movs	r3, #0
 8000b82:	2200      	movs	r2, #0
 8000b84:	f240 210f 	movw	r1, #527	; 0x20f
 8000b88:	f240 200f 	movw	r0, #527	; 0x20f
 8000b8c:	f008 f960 	bl	8008e50 <SUBGRF_SetDioIrqParams>
					| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID,
			IRQ_TX_DONE | IRQ_PREAMBLE_DETECTED | IRQ_RX_DONE
					| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID, IRQ_RADIO_NONE,
			IRQ_RADIO_NONE);

	myDebug("\n########## RX Configuration: ##########\n");
 8000b90:	4890      	ldr	r0, [pc, #576]	; (8000dd4 <main+0x36c>)
 8000b92:	f7ff fdc1 	bl	8000718 <myDebug>

	myDebug("FREQUENCY MODS: Downlink FREQ: %lu Hz\r\n", FREQ_437_MHZ);
 8000b96:	4985      	ldr	r1, [pc, #532]	; (8000dac <main+0x344>)
 8000b98:	488f      	ldr	r0, [pc, #572]	; (8000dd8 <main+0x370>)
 8000b9a:	f7ff fdbd 	bl	8000718 <myDebug>
	myDebug("Bit Rate: 	%d\n\r", mod_params.Params.Gfsk.BitRate);
 8000b9e:	4b8a      	ldr	r3, [pc, #552]	; (8000dc8 <main+0x360>)
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	488d      	ldr	r0, [pc, #564]	; (8000ddc <main+0x374>)
 8000ba6:	f7ff fdb7 	bl	8000718 <myDebug>
	myDebug("Frequency Deviation: 	%d\n\r", mod_params.Params.Gfsk.Fdev);
 8000baa:	4b87      	ldr	r3, [pc, #540]	; (8000dc8 <main+0x360>)
 8000bac:	689b      	ldr	r3, [r3, #8]
 8000bae:	4619      	mov	r1, r3
 8000bb0:	488b      	ldr	r0, [pc, #556]	; (8000de0 <main+0x378>)
 8000bb2:	f7ff fdb1 	bl	8000718 <myDebug>
	myDebug("RECEVING BANDWIDTH: 	%d\n\r", mod_params.Params.Gfsk.Bandwidth);
 8000bb6:	4b84      	ldr	r3, [pc, #528]	; (8000dc8 <main+0x360>)
 8000bb8:	7b5b      	ldrb	r3, [r3, #13]
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4889      	ldr	r0, [pc, #548]	; (8000de4 <main+0x37c>)
 8000bbe:	f7ff fdab 	bl	8000718 <myDebug>
	myDebug("Packet Type 			%d\n\r", pkt_params.PacketType);
 8000bc2:	4b80      	ldr	r3, [pc, #512]	; (8000dc4 <main+0x35c>)
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4887      	ldr	r0, [pc, #540]	; (8000de8 <main+0x380>)
 8000bca:	f7ff fda5 	bl	8000718 <myDebug>
	myDebug("PayloadLength 			%d\n\r", pkt_params.Params.Gfsk.PayloadLength);
 8000bce:	4b7d      	ldr	r3, [pc, #500]	; (8000dc4 <main+0x35c>)
 8000bd0:	7a1b      	ldrb	r3, [r3, #8]
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4885      	ldr	r0, [pc, #532]	; (8000dec <main+0x384>)
 8000bd6:	f7ff fd9f 	bl	8000718 <myDebug>
	myDebug("PreambleLength 		%d\n\r", pkt_params.Params.Gfsk.PreambleLength);
 8000bda:	4b7a      	ldr	r3, [pc, #488]	; (8000dc4 <main+0x35c>)
 8000bdc:	885b      	ldrh	r3, [r3, #2]
 8000bde:	4619      	mov	r1, r3
 8000be0:	4883      	ldr	r0, [pc, #524]	; (8000df0 <main+0x388>)
 8000be2:	f7ff fd99 	bl	8000718 <myDebug>
	myDebug("PreambleMinDetect		%d\n\r",
			pkt_params.Params.Gfsk.PreambleMinDetect);
 8000be6:	4b77      	ldr	r3, [pc, #476]	; (8000dc4 <main+0x35c>)
 8000be8:	791b      	ldrb	r3, [r3, #4]
	myDebug("PreambleMinDetect		%d\n\r",
 8000bea:	4619      	mov	r1, r3
 8000bec:	4881      	ldr	r0, [pc, #516]	; (8000df4 <main+0x38c>)
 8000bee:	f7ff fd93 	bl	8000718 <myDebug>
	myDebug("HeaderType 			%d\n\r", pkt_params.Params.Gfsk.HeaderType);
 8000bf2:	4b74      	ldr	r3, [pc, #464]	; (8000dc4 <main+0x35c>)
 8000bf4:	79db      	ldrb	r3, [r3, #7]
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	487f      	ldr	r0, [pc, #508]	; (8000df8 <main+0x390>)
 8000bfa:	f7ff fd8d 	bl	8000718 <myDebug>
	myDebug("______________*******************______________\r\n");
 8000bfe:	487f      	ldr	r0, [pc, #508]	; (8000dfc <main+0x394>)
 8000c00:	f7ff fd8a 	bl	8000718 <myDebug>

	SUBGRF_SetRfFrequency(FREQ_437_MHZ);
 8000c04:	4869      	ldr	r0, [pc, #420]	; (8000dac <main+0x344>)
 8000c06:	f008 f97f 	bl	8008f08 <SUBGRF_SetRfFrequency>
	SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX); /*Set RF switch*/
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	2001      	movs	r0, #1
 8000c0e:	f008 fdc3 	bl	8009798 <SUBGRF_SetSwitch>
	SUBGRF_SetRxBoosted(0xFFFFFF);
 8000c12:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8000c16:	f007 ffa3 	bl	8008b60 <SUBGRF_SetRxBoosted>

	HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_SET);
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c20:	4877      	ldr	r0, [pc, #476]	; (8000e00 <main+0x398>)
 8000c22:	f001 fd97 	bl	8002754 <HAL_GPIO_WritePin>
	delay_us(500000);  // 500ms delay
 8000c26:	4877      	ldr	r0, [pc, #476]	; (8000e04 <main+0x39c>)
 8000c28:	f7ff fd5c 	bl	80006e4 <delay_us>
	HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_RESET);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c32:	4873      	ldr	r0, [pc, #460]	; (8000e00 <main+0x398>)
 8000c34:	f001 fd8e 	bl	8002754 <HAL_GPIO_WritePin>
	delay_us(500000);
 8000c38:	4872      	ldr	r0, [pc, #456]	; (8000e04 <main+0x39c>)
 8000c3a:	f7ff fd53 	bl	80006e4 <delay_us>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_RESET);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c44:	486e      	ldr	r0, [pc, #440]	; (8000e00 <main+0x398>)
 8000c46:	f001 fd85 	bl	8002754 <HAL_GPIO_WritePin>
		delay_us(500000);
 8000c4a:	486e      	ldr	r0, [pc, #440]	; (8000e04 <main+0x39c>)
 8000c4c:	f7ff fd4a 	bl	80006e4 <delay_us>
		HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_SET);
 8000c50:	2201      	movs	r2, #1
 8000c52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c56:	486a      	ldr	r0, [pc, #424]	; (8000e00 <main+0x398>)
 8000c58:	f001 fd7c 	bl	8002754 <HAL_GPIO_WritePin>
		delay_us(500000);
 8000c5c:	4869      	ldr	r0, [pc, #420]	; (8000e04 <main+0x39c>)
 8000c5e:	f7ff fd41 	bl	80006e4 <delay_us>

		if (TX_FLAG) {
 8000c62:	4b69      	ldr	r3, [pc, #420]	; (8000e08 <main+0x3a0>)
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	f000 80f3 	beq.w	8000e52 <main+0x3ea>

			AX_25PacketFormation(rx_buffer);
 8000c6c:	4867      	ldr	r0, [pc, #412]	; (8000e0c <main+0x3a4>)
 8000c6e:	f7ff fc55 	bl	800051c <AX_25PacketFormation>

			memset(rx_buffer, '\0', sizeof(rx_buffer));
 8000c72:	220d      	movs	r2, #13
 8000c74:	2100      	movs	r1, #0
 8000c76:	4865      	ldr	r0, [pc, #404]	; (8000e0c <main+0x3a4>)
 8000c78:	f009 fb8c 	bl	800a394 <memset>

			pkt_params.PacketType = PACKET_TYPE_GFSK;
 8000c7c:	4b51      	ldr	r3, [pc, #324]	; (8000dc4 <main+0x35c>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	701a      	strb	r2, [r3, #0]
			pkt_params.Params.Gfsk.PayloadLength = CMD_PAYLOAD;
 8000c82:	4b50      	ldr	r3, [pc, #320]	; (8000dc4 <main+0x35c>)
 8000c84:	2223      	movs	r2, #35	; 0x23
 8000c86:	721a      	strb	r2, [r3, #8]
			pkt_params.Params.Gfsk.PreambleLength = 8; /*Convert byte into bit*/
 8000c88:	4b4e      	ldr	r3, [pc, #312]	; (8000dc4 <main+0x35c>)
 8000c8a:	2208      	movs	r2, #8
 8000c8c:	805a      	strh	r2, [r3, #2]
			pkt_params.Params.Gfsk.PreambleMinDetect =
 8000c8e:	4b4d      	ldr	r3, [pc, #308]	; (8000dc4 <main+0x35c>)
 8000c90:	2204      	movs	r2, #4
 8000c92:	711a      	strb	r2, [r3, #4]
					RADIO_PREAMBLE_DETECTOR_08_BITS;
			pkt_params.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8000c94:	4b4b      	ldr	r3, [pc, #300]	; (8000dc4 <main+0x35c>)
 8000c96:	2218      	movs	r2, #24
 8000c98:	715a      	strb	r2, [r3, #5]
			pkt_params.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8000c9a:	4b4a      	ldr	r3, [pc, #296]	; (8000dc4 <main+0x35c>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	719a      	strb	r2, [r3, #6]
			pkt_params.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8000ca0:	4b48      	ldr	r3, [pc, #288]	; (8000dc4 <main+0x35c>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	71da      	strb	r2, [r3, #7]
			pkt_params.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8000ca6:	4b47      	ldr	r3, [pc, #284]	; (8000dc4 <main+0x35c>)
 8000ca8:	22f2      	movs	r2, #242	; 0xf2
 8000caa:	725a      	strb	r2, [r3, #9]
			pkt_params.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8000cac:	4b45      	ldr	r3, [pc, #276]	; (8000dc4 <main+0x35c>)
 8000cae:	2201      	movs	r2, #1
 8000cb0:	729a      	strb	r2, [r3, #10]

			mod_params.PacketType = PACKET_TYPE_GFSK;
 8000cb2:	4b45      	ldr	r3, [pc, #276]	; (8000dc8 <main+0x360>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	701a      	strb	r2, [r3, #0]
			mod_params.Params.Gfsk.Bandwidth = RX_BW_29300; /*Not used in TX*/
 8000cb8:	4b43      	ldr	r3, [pc, #268]	; (8000dc8 <main+0x360>)
 8000cba:	220d      	movs	r2, #13
 8000cbc:	735a      	strb	r2, [r3, #13]
			mod_params.Params.Gfsk.BitRate = DEMO_DEFAULT_BR_1200;
 8000cbe:	4b42      	ldr	r3, [pc, #264]	; (8000dc8 <main+0x360>)
 8000cc0:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8000cc4:	605a      	str	r2, [r3, #4]
			mod_params.Params.Gfsk.Fdev = DEMO_DEFAULT_FDEV_1200;
 8000cc6:	4b40      	ldr	r3, [pc, #256]	; (8000dc8 <main+0x360>)
 8000cc8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000ccc:	609a      	str	r2, [r3, #8]
			mod_params.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8000cce:	4b3e      	ldr	r3, [pc, #248]	; (8000dc8 <main+0x360>)
 8000cd0:	220b      	movs	r2, #11
 8000cd2:	731a      	strb	r2, [r3, #12]

			SUBGRF_Init(DioIrqHndlr);
 8000cd4:	483d      	ldr	r0, [pc, #244]	; (8000dcc <main+0x364>)
 8000cd6:	f007 fd55 	bl	8008784 <SUBGRF_Init>
			SUBGRF_SetBufferBaseAddress(0x00, 0x00);
 8000cda:	2100      	movs	r1, #0
 8000cdc:	2000      	movs	r0, #0
 8000cde:	f008 fbbd 	bl	800945c <SUBGRF_SetBufferBaseAddress>
			SUBGRF_SetPayload(tx_cmd, CMD_PAYLOAD);
 8000ce2:	2123      	movs	r1, #35	; 0x23
 8000ce4:	484a      	ldr	r0, [pc, #296]	; (8000e10 <main+0x3a8>)
 8000ce6:	f007 fd9f 	bl	8008828 <SUBGRF_SetPayload>
			SUBGRF_SetPacketParams(&pkt_params);
 8000cea:	4836      	ldr	r0, [pc, #216]	; (8000dc4 <main+0x35c>)
 8000cec:	f008 fb18 	bl	8009320 <SUBGRF_SetPacketParams>
			SUBGRF_SetSyncWord(( uint8_t[] ) { 0xC1, 0x94, 0xC1, 0x00, 0x00,
 8000cf0:	4a37      	ldr	r2, [pc, #220]	; (8000dd0 <main+0x368>)
 8000cf2:	463b      	mov	r3, r7
 8000cf4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cf8:	e883 0003 	stmia.w	r3, {r0, r1}
 8000cfc:	463b      	mov	r3, r7
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f007 fdd7 	bl	80088b2 <SUBGRF_SetSyncWord>
							0x00, 0x00, 0x00 });
			SUBGRF_SetWhiteningSeed(0x01FF);
 8000d04:	f240 10ff 	movw	r0, #511	; 0x1ff
 8000d08:	f007 fe22 	bl	8008950 <SUBGRF_SetWhiteningSeed>
			SUBGRF_SetRfFrequency(FREQ_435_MHZ);
 8000d0c:	4826      	ldr	r0, [pc, #152]	; (8000da8 <main+0x340>)
 8000d0e:	f008 f8fb 	bl	8008f08 <SUBGRF_SetRfFrequency>
			SUBGRF_SetPaConfig(PA_DUTY_CYCLE, HP_MAX, PA_SEL, 0x01);
 8000d12:	2301      	movs	r3, #1
 8000d14:	2201      	movs	r2, #1
 8000d16:	2100      	movs	r1, #0
 8000d18:	2004      	movs	r0, #4
 8000d1a:	f008 f877 	bl	8008e0c <SUBGRF_SetPaConfig>
			//SUBGRF_SetTxParams(RFO_HP, POWER, RAMP_TIME);
			SUBGRF_SetTxParams(RFO_LP, POWER, RAMP_TIME);
 8000d1e:	2202      	movs	r2, #2
 8000d20:	210e      	movs	r1, #14
 8000d22:	2001      	movs	r0, #1
 8000d24:	f008 f95c 	bl	8008fe0 <SUBGRF_SetTxParams>
			SUBGRF_SetModulationParams(&mod_params);
 8000d28:	4827      	ldr	r0, [pc, #156]	; (8000dc8 <main+0x360>)
 8000d2a:	f008 fa27 	bl	800917c <SUBGRF_SetModulationParams>
			SUBGRF_SetDioIrqParams(
 8000d2e:	2300      	movs	r3, #0
 8000d30:	2200      	movs	r2, #0
 8000d32:	f240 210f 	movw	r1, #527	; 0x20f
 8000d36:	f240 200f 	movw	r0, #527	; 0x20f
 8000d3a:	f008 f889 	bl	8008e50 <SUBGRF_SetDioIrqParams>
							| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID,
					IRQ_TX_DONE | IRQ_PREAMBLE_DETECTED | IRQ_RX_DONE
							| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID,
					IRQ_RADIO_NONE, IRQ_RADIO_NONE);

			myDebug("########## TX Configuration: ##########\n");
 8000d3e:	4835      	ldr	r0, [pc, #212]	; (8000e14 <main+0x3ac>)
 8000d40:	f7ff fcea 	bl	8000718 <myDebug>

			myDebug("FREQUENCY MODS: UPLINK FREQ: %lu Hz\r\n", FREQ_435_MHZ);
 8000d44:	4918      	ldr	r1, [pc, #96]	; (8000da8 <main+0x340>)
 8000d46:	4834      	ldr	r0, [pc, #208]	; (8000e18 <main+0x3b0>)
 8000d48:	f7ff fce6 	bl	8000718 <myDebug>
			myDebug("Bit Rate: 	%d\n\r", mod_params.Params.Gfsk.BitRate);
 8000d4c:	4b1e      	ldr	r3, [pc, #120]	; (8000dc8 <main+0x360>)
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	4619      	mov	r1, r3
 8000d52:	4822      	ldr	r0, [pc, #136]	; (8000ddc <main+0x374>)
 8000d54:	f7ff fce0 	bl	8000718 <myDebug>
			myDebug("Frequency Deviation: 	%d\n\r",
 8000d58:	4b1b      	ldr	r3, [pc, #108]	; (8000dc8 <main+0x360>)
 8000d5a:	689b      	ldr	r3, [r3, #8]
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4820      	ldr	r0, [pc, #128]	; (8000de0 <main+0x378>)
 8000d60:	f7ff fcda 	bl	8000718 <myDebug>
					mod_params.Params.Gfsk.Fdev);
			myDebug("RECEVING BANDWIDTH: 	%d\n\r",
					mod_params.Params.Gfsk.Bandwidth);
 8000d64:	4b18      	ldr	r3, [pc, #96]	; (8000dc8 <main+0x360>)
 8000d66:	7b5b      	ldrb	r3, [r3, #13]
			myDebug("RECEVING BANDWIDTH: 	%d\n\r",
 8000d68:	4619      	mov	r1, r3
 8000d6a:	481e      	ldr	r0, [pc, #120]	; (8000de4 <main+0x37c>)
 8000d6c:	f7ff fcd4 	bl	8000718 <myDebug>
			myDebug("Packet Type 			%d\n\r", pkt_params.PacketType);
 8000d70:	4b14      	ldr	r3, [pc, #80]	; (8000dc4 <main+0x35c>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	4619      	mov	r1, r3
 8000d76:	481c      	ldr	r0, [pc, #112]	; (8000de8 <main+0x380>)
 8000d78:	f7ff fcce 	bl	8000718 <myDebug>
			myDebug("PayloadLength 			%d\n\r",
					pkt_params.Params.Gfsk.PayloadLength);
 8000d7c:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <main+0x35c>)
 8000d7e:	7a1b      	ldrb	r3, [r3, #8]
			myDebug("PayloadLength 			%d\n\r",
 8000d80:	4619      	mov	r1, r3
 8000d82:	481a      	ldr	r0, [pc, #104]	; (8000dec <main+0x384>)
 8000d84:	f7ff fcc8 	bl	8000718 <myDebug>
			myDebug("PreambleLength 		%d\n\r",
					pkt_params.Params.Gfsk.PreambleLength);
 8000d88:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <main+0x35c>)
 8000d8a:	885b      	ldrh	r3, [r3, #2]
			myDebug("PreambleLength 		%d\n\r",
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4818      	ldr	r0, [pc, #96]	; (8000df0 <main+0x388>)
 8000d90:	f7ff fcc2 	bl	8000718 <myDebug>
 8000d94:	e042      	b.n	8000e1c <main+0x3b4>
 8000d96:	bf00      	nop
 8000d98:	20000210 	.word	0x20000210
 8000d9c:	0800ad04 	.word	0x0800ad04
 8000da0:	0800ad40 	.word	0x0800ad40
 8000da4:	0800ad74 	.word	0x0800ad74
 8000da8:	19f25968 	.word	0x19f25968
 8000dac:	1a11d018 	.word	0x1a11d018
 8000db0:	0800ad90 	.word	0x0800ad90
 8000db4:	0800add0 	.word	0x0800add0
 8000db8:	0800adf8 	.word	0x0800adf8
 8000dbc:	0800ae4c 	.word	0x0800ae4c
 8000dc0:	0800ae78 	.word	0x0800ae78
 8000dc4:	200000e0 	.word	0x200000e0
 8000dc8:	200000f4 	.word	0x200000f4
 8000dcc:	08000f99 	.word	0x08000f99
 8000dd0:	0800b044 	.word	0x0800b044
 8000dd4:	0800aeb0 	.word	0x0800aeb0
 8000dd8:	0800aedc 	.word	0x0800aedc
 8000ddc:	0800af04 	.word	0x0800af04
 8000de0:	0800af14 	.word	0x0800af14
 8000de4:	0800af30 	.word	0x0800af30
 8000de8:	0800af4c 	.word	0x0800af4c
 8000dec:	0800af60 	.word	0x0800af60
 8000df0:	0800af78 	.word	0x0800af78
 8000df4:	0800af90 	.word	0x0800af90
 8000df8:	0800afa8 	.word	0x0800afa8
 8000dfc:	0800afbc 	.word	0x0800afbc
 8000e00:	48000400 	.word	0x48000400
 8000e04:	0007a120 	.word	0x0007a120
 8000e08:	200001ac 	.word	0x200001ac
 8000e0c:	20000178 	.word	0x20000178
 8000e10:	20000188 	.word	0x20000188
 8000e14:	0800aff0 	.word	0x0800aff0
 8000e18:	0800b01c 	.word	0x0800b01c
			myDebug("PreambleMinDetect		%d\n\r",
					pkt_params.Params.Gfsk.PreambleMinDetect);
 8000e1c:	4b0e      	ldr	r3, [pc, #56]	; (8000e58 <main+0x3f0>)
 8000e1e:	791b      	ldrb	r3, [r3, #4]
			myDebug("PreambleMinDetect		%d\n\r",
 8000e20:	4619      	mov	r1, r3
 8000e22:	480e      	ldr	r0, [pc, #56]	; (8000e5c <main+0x3f4>)
 8000e24:	f7ff fc78 	bl	8000718 <myDebug>
			myDebug("HeaderType 			%d\n\r", pkt_params.Params.Gfsk.HeaderType);
 8000e28:	4b0b      	ldr	r3, [pc, #44]	; (8000e58 <main+0x3f0>)
 8000e2a:	79db      	ldrb	r3, [r3, #7]
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	480c      	ldr	r0, [pc, #48]	; (8000e60 <main+0x3f8>)
 8000e30:	f7ff fc72 	bl	8000718 <myDebug>
			myDebug("______________*******************______________\r\n");
 8000e34:	480b      	ldr	r0, [pc, #44]	; (8000e64 <main+0x3fc>)
 8000e36:	f7ff fc6f 	bl	8000718 <myDebug>

			SUBGRF_SetRfFrequency(FREQ_435_MHZ);
 8000e3a:	480b      	ldr	r0, [pc, #44]	; (8000e68 <main+0x400>)
 8000e3c:	f008 f864 	bl	8008f08 <SUBGRF_SetRfFrequency>
			SUBGRF_SetSwitch(RFO_LP, RFSWITCH_TX); /*Set RF switch*/
 8000e40:	2101      	movs	r1, #1
 8000e42:	2001      	movs	r0, #1
 8000e44:	f008 fca8 	bl	8009798 <SUBGRF_SetSwitch>
			SUBGRF_SendPayload(tx_cmd, CMD_PAYLOAD, 0);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2123      	movs	r1, #35	; 0x23
 8000e4c:	4807      	ldr	r0, [pc, #28]	; (8000e6c <main+0x404>)
 8000e4e:	f007 fd1d 	bl	800888c <SUBGRF_SendPayload>
		}

    /* USER CODE END WHILE */
    MX_SubGHz_Phy_Process();
 8000e52:	f008 fee8 	bl	8009c26 <MX_SubGHz_Phy_Process>
		HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_RESET);
 8000e56:	e6f2      	b.n	8000c3e <main+0x1d6>
 8000e58:	200000e0 	.word	0x200000e0
 8000e5c:	0800af90 	.word	0x0800af90
 8000e60:	0800afa8 	.word	0x0800afa8
 8000e64:	0800afbc 	.word	0x0800afbc
 8000e68:	19f25968 	.word	0x19f25968
 8000e6c:	20000188 	.word	0x20000188

08000e70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b09a      	sub	sp, #104	; 0x68
 8000e74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e76:	f107 0320 	add.w	r3, r7, #32
 8000e7a:	2248      	movs	r2, #72	; 0x48
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f009 fa88 	bl	800a394 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e84:	1d3b      	adds	r3, r7, #4
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	605a      	str	r2, [r3, #4]
 8000e8c:	609a      	str	r2, [r3, #8]
 8000e8e:	60da      	str	r2, [r3, #12]
 8000e90:	611a      	str	r2, [r3, #16]
 8000e92:	615a      	str	r2, [r3, #20]
 8000e94:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e96:	4b25      	ldr	r3, [pc, #148]	; (8000f2c <SystemClock_Config+0xbc>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e9e:	4a23      	ldr	r2, [pc, #140]	; (8000f2c <SystemClock_Config+0xbc>)
 8000ea0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ea4:	6013      	str	r3, [r2, #0]
 8000ea6:	4b21      	ldr	r3, [pc, #132]	; (8000f2c <SystemClock_Config+0xbc>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000eae:	603b      	str	r3, [r7, #0]
 8000eb0:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_PWR;
 8000eb6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000eba:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEDiv = RCC_HSE_DIV1;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000ec8:	2310      	movs	r3, #16
 8000eca:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 6;
 8000ecc:	2306      	movs	r3, #6
 8000ece:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ed0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ed4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ed6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000eda:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000edc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ee0:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ee2:	f107 0320 	add.w	r3, r7, #32
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f001 ff1e 	bl	8002d28 <HAL_RCC_OscConfig>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000ef2:	f000 fa01 	bl	80012f8 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8000ef6:	234f      	movs	r3, #79	; 0x4f
 8000ef8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000efa:	2303      	movs	r3, #3
 8000efc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f02:	2300      	movs	r3, #0
 8000f04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f06:	2300      	movs	r3, #0
 8000f08:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f0e:	1d3b      	adds	r3, r7, #4
 8000f10:	2102      	movs	r1, #2
 8000f12:	4618      	mov	r0, r3
 8000f14:	f002 fa8a 	bl	800342c <HAL_RCC_ClockConfig>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000f1e:	f000 f9eb 	bl	80012f8 <Error_Handler>
  }
}
 8000f22:	bf00      	nop
 8000f24:	3768      	adds	r7, #104	; 0x68
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	58000400 	.word	0x58000400

08000f30 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) {
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4a11      	ldr	r2, [pc, #68]	; (8000f80 <HAL_UART_RxCpltCallback+0x50>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d11a      	bne.n	8000f76 <HAL_UART_RxCpltCallback+0x46>
		myDebug("\n-->Main command Received: 0x%x\r\n", rx_buffer);
 8000f40:	4910      	ldr	r1, [pc, #64]	; (8000f84 <HAL_UART_RxCpltCallback+0x54>)
 8000f42:	4811      	ldr	r0, [pc, #68]	; (8000f88 <HAL_UART_RxCpltCallback+0x58>)
 8000f44:	f7ff fbe8 	bl	8000718 <myDebug>
		for (int i = 0; i < sizeof(rx_buffer); i++) {
 8000f48:	2300      	movs	r3, #0
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	e00a      	b.n	8000f64 <HAL_UART_RxCpltCallback+0x34>
			myDebug("%02x ", rx_buffer[i]);
 8000f4e:	4a0d      	ldr	r2, [pc, #52]	; (8000f84 <HAL_UART_RxCpltCallback+0x54>)
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	4413      	add	r3, r2
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	4619      	mov	r1, r3
 8000f58:	480c      	ldr	r0, [pc, #48]	; (8000f8c <HAL_UART_RxCpltCallback+0x5c>)
 8000f5a:	f7ff fbdd 	bl	8000718 <myDebug>
		for (int i = 0; i < sizeof(rx_buffer); i++) {
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	3301      	adds	r3, #1
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	2b0c      	cmp	r3, #12
 8000f68:	d9f1      	bls.n	8000f4e <HAL_UART_RxCpltCallback+0x1e>
		}
		myDebug("\r\n");
 8000f6a:	4809      	ldr	r0, [pc, #36]	; (8000f90 <HAL_UART_RxCpltCallback+0x60>)
 8000f6c:	f7ff fbd4 	bl	8000718 <myDebug>

		TX_FLAG = 1;
 8000f70:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <HAL_UART_RxCpltCallback+0x64>)
 8000f72:	2201      	movs	r2, #1
 8000f74:	701a      	strb	r2, [r3, #0]
	}
}
 8000f76:	bf00      	nop
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000260 	.word	0x20000260
 8000f84:	20000178 	.word	0x20000178
 8000f88:	0800b04c 	.word	0x0800b04c
 8000f8c:	0800b070 	.word	0x0800b070
 8000f90:	0800b078 	.word	0x0800b078
 8000f94:	200001ac 	.word	0x200001ac

08000f98 <DioIrqHndlr>:

void DioIrqHndlr(RadioIrqMasks_t radioIrq) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	80fb      	strh	r3, [r7, #6]
	if (radioIrq == IRQ_RX_DONE) {
 8000fa2:	88fb      	ldrh	r3, [r7, #6]
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	d17a      	bne.n	800109e <DioIrqHndlr+0x106>
		SUBGRF_GetPayload(rx_cmd, &p_len, PAYLOAD_LENGTH);
 8000fa8:	2267      	movs	r2, #103	; 0x67
 8000faa:	49b2      	ldr	r1, [pc, #712]	; (8001274 <DioIrqHndlr+0x2dc>)
 8000fac:	48b2      	ldr	r0, [pc, #712]	; (8001278 <DioIrqHndlr+0x2e0>)
 8000fae:	f007 fc4b 	bl	8008848 <SUBGRF_GetPayload>
		rssi_value = SUBGRF_GetRssiInst();
 8000fb2:	f008 fa6a 	bl	800948a <SUBGRF_GetRssiInst>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	4bb0      	ldr	r3, [pc, #704]	; (800127c <DioIrqHndlr+0x2e4>)
 8000fbc:	701a      	strb	r2, [r3, #0]
		myDebug("Satellite Data Received: 0x%x\r\n");
 8000fbe:	48b0      	ldr	r0, [pc, #704]	; (8001280 <DioIrqHndlr+0x2e8>)
 8000fc0:	f7ff fbaa 	bl	8000718 <myDebug>
		for (int i = 0; i < sizeof(rx_cmd); i++) {
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	617b      	str	r3, [r7, #20]
 8000fc8:	e00a      	b.n	8000fe0 <DioIrqHndlr+0x48>
			myDebug("%02x ", rx_cmd[i]);
 8000fca:	4aab      	ldr	r2, [pc, #684]	; (8001278 <DioIrqHndlr+0x2e0>)
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	4413      	add	r3, r2
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	48ab      	ldr	r0, [pc, #684]	; (8001284 <DioIrqHndlr+0x2ec>)
 8000fd6:	f7ff fb9f 	bl	8000718 <myDebug>
		for (int i = 0; i < sizeof(rx_cmd); i++) {
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	617b      	str	r3, [r7, #20]
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	2b66      	cmp	r3, #102	; 0x66
 8000fe4:	d9f1      	bls.n	8000fca <DioIrqHndlr+0x32>
		}
		myDebug("\r\n");
 8000fe6:	48a8      	ldr	r0, [pc, #672]	; (8001288 <DioIrqHndlr+0x2f0>)
 8000fe8:	f7ff fb96 	bl	8000718 <myDebug>

		memset(rx_cmd, '\0', sizeof(rx_cmd));
 8000fec:	2267      	movs	r2, #103	; 0x67
 8000fee:	2100      	movs	r1, #0
 8000ff0:	48a1      	ldr	r0, [pc, #644]	; (8001278 <DioIrqHndlr+0x2e0>)
 8000ff2:	f009 f9cf 	bl	800a394 <memset>

		delay_us(500000);
 8000ff6:	48a5      	ldr	r0, [pc, #660]	; (800128c <DioIrqHndlr+0x2f4>)
 8000ff8:	f7ff fb74 	bl	80006e4 <delay_us>

		myDebug("\n########## RX Configuration: ##########\n");
 8000ffc:	48a4      	ldr	r0, [pc, #656]	; (8001290 <DioIrqHndlr+0x2f8>)
 8000ffe:	f7ff fb8b 	bl	8000718 <myDebug>
		myDebug("FREQUENCY MODS: DOWNLINK FREQ: %lu Hz\r\n", FREQ_437_MHZ);
 8001002:	49a4      	ldr	r1, [pc, #656]	; (8001294 <DioIrqHndlr+0x2fc>)
 8001004:	48a4      	ldr	r0, [pc, #656]	; (8001298 <DioIrqHndlr+0x300>)
 8001006:	f7ff fb87 	bl	8000718 <myDebug>
		myDebug("Bit Rate: 	%d\n\r", mod_params.Params.Gfsk.BitRate);
 800100a:	4ba4      	ldr	r3, [pc, #656]	; (800129c <DioIrqHndlr+0x304>)
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	4619      	mov	r1, r3
 8001010:	48a3      	ldr	r0, [pc, #652]	; (80012a0 <DioIrqHndlr+0x308>)
 8001012:	f7ff fb81 	bl	8000718 <myDebug>
		myDebug("Frequency Deviation: 	%d\n\r", mod_params.Params.Gfsk.Fdev);
 8001016:	4ba1      	ldr	r3, [pc, #644]	; (800129c <DioIrqHndlr+0x304>)
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	4619      	mov	r1, r3
 800101c:	48a1      	ldr	r0, [pc, #644]	; (80012a4 <DioIrqHndlr+0x30c>)
 800101e:	f7ff fb7b 	bl	8000718 <myDebug>
		myDebug("RECEVING BANDWIDTH: 	%d\n\r",
				mod_params.Params.Gfsk.Bandwidth);
 8001022:	4b9e      	ldr	r3, [pc, #632]	; (800129c <DioIrqHndlr+0x304>)
 8001024:	7b5b      	ldrb	r3, [r3, #13]
		myDebug("RECEVING BANDWIDTH: 	%d\n\r",
 8001026:	4619      	mov	r1, r3
 8001028:	489f      	ldr	r0, [pc, #636]	; (80012a8 <DioIrqHndlr+0x310>)
 800102a:	f7ff fb75 	bl	8000718 <myDebug>
		myDebug("Packet Type 			%d\n\r", pkt_params.PacketType);
 800102e:	4b9f      	ldr	r3, [pc, #636]	; (80012ac <DioIrqHndlr+0x314>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	4619      	mov	r1, r3
 8001034:	489e      	ldr	r0, [pc, #632]	; (80012b0 <DioIrqHndlr+0x318>)
 8001036:	f7ff fb6f 	bl	8000718 <myDebug>
		myDebug("PayloadLength 			%d\n\r",
				pkt_params.Params.Gfsk.PayloadLength);
 800103a:	4b9c      	ldr	r3, [pc, #624]	; (80012ac <DioIrqHndlr+0x314>)
 800103c:	7a1b      	ldrb	r3, [r3, #8]
		myDebug("PayloadLength 			%d\n\r",
 800103e:	4619      	mov	r1, r3
 8001040:	489c      	ldr	r0, [pc, #624]	; (80012b4 <DioIrqHndlr+0x31c>)
 8001042:	f7ff fb69 	bl	8000718 <myDebug>
		myDebug("PreambleLength 		%d\n\r",
				pkt_params.Params.Gfsk.PreambleLength);
 8001046:	4b99      	ldr	r3, [pc, #612]	; (80012ac <DioIrqHndlr+0x314>)
 8001048:	885b      	ldrh	r3, [r3, #2]
		myDebug("PreambleLength 		%d\n\r",
 800104a:	4619      	mov	r1, r3
 800104c:	489a      	ldr	r0, [pc, #616]	; (80012b8 <DioIrqHndlr+0x320>)
 800104e:	f7ff fb63 	bl	8000718 <myDebug>
		myDebug("PreambleMinDetect		%d\n\r",
				pkt_params.Params.Gfsk.PreambleMinDetect);
 8001052:	4b96      	ldr	r3, [pc, #600]	; (80012ac <DioIrqHndlr+0x314>)
 8001054:	791b      	ldrb	r3, [r3, #4]
		myDebug("PreambleMinDetect		%d\n\r",
 8001056:	4619      	mov	r1, r3
 8001058:	4898      	ldr	r0, [pc, #608]	; (80012bc <DioIrqHndlr+0x324>)
 800105a:	f7ff fb5d 	bl	8000718 <myDebug>
		myDebug("HeaderType 			%d\n\r", pkt_params.Params.Gfsk.HeaderType);
 800105e:	4b93      	ldr	r3, [pc, #588]	; (80012ac <DioIrqHndlr+0x314>)
 8001060:	79db      	ldrb	r3, [r3, #7]
 8001062:	4619      	mov	r1, r3
 8001064:	4896      	ldr	r0, [pc, #600]	; (80012c0 <DioIrqHndlr+0x328>)
 8001066:	f7ff fb57 	bl	8000718 <myDebug>
		myDebug("______________*******************______________\r\n");
 800106a:	4896      	ldr	r0, [pc, #600]	; (80012c4 <DioIrqHndlr+0x32c>)
 800106c:	f7ff fb54 	bl	8000718 <myDebug>
		myDebug("\n_____Satellite Receiver_____OR_____Command Transmitter_____\r\n");
 8001070:	4895      	ldr	r0, [pc, #596]	; (80012c8 <DioIrqHndlr+0x330>)
 8001072:	f7ff fb51 	bl	8000718 <myDebug>

		SUBGRF_SetRfFrequency(FREQ_437_MHZ);
 8001076:	4887      	ldr	r0, [pc, #540]	; (8001294 <DioIrqHndlr+0x2fc>)
 8001078:	f007 ff46 	bl	8008f08 <SUBGRF_SetRfFrequency>
		SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX); /*Set RF switch*/
 800107c:	2100      	movs	r1, #0
 800107e:	2001      	movs	r0, #1
 8001080:	f008 fb8a 	bl	8009798 <SUBGRF_SetSwitch>
		SUBGRF_SetRxBoosted(0xFFFFFF);
 8001084:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8001088:	f007 fd6a 	bl	8008b60 <SUBGRF_SetRxBoosted>

		HAL_UART_Receive_DMA(&huart2, rx_buffer, main_cmd_plen);
 800108c:	4b8f      	ldr	r3, [pc, #572]	; (80012cc <DioIrqHndlr+0x334>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	b29b      	uxth	r3, r3
 8001092:	461a      	mov	r2, r3
 8001094:	498e      	ldr	r1, [pc, #568]	; (80012d0 <DioIrqHndlr+0x338>)
 8001096:	488f      	ldr	r0, [pc, #572]	; (80012d4 <DioIrqHndlr+0x33c>)
 8001098:	f004 f878 	bl	800518c <HAL_UART_Receive_DMA>
		HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_RESET);
		delay_us(500000);

		HAL_UART_Receive_DMA(&huart2, rx_buffer, main_cmd_plen);
	}
}
 800109c:	e0e6      	b.n	800126c <DioIrqHndlr+0x2d4>
	} else if (radioIrq == IRQ_TX_DONE) {
 800109e:	88fb      	ldrh	r3, [r7, #6]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	f040 80e3 	bne.w	800126c <DioIrqHndlr+0x2d4>
		TX_FLAG = 0;
 80010a6:	4b8c      	ldr	r3, [pc, #560]	; (80012d8 <DioIrqHndlr+0x340>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	701a      	strb	r2, [r3, #0]
		myDebug("\n\rS2S Command Transmitted Successful:\r\n");
 80010ac:	488b      	ldr	r0, [pc, #556]	; (80012dc <DioIrqHndlr+0x344>)
 80010ae:	f7ff fb33 	bl	8000718 <myDebug>
		for (int i = 0; i < sizeof(tx_cmd); i++) {
 80010b2:	2300      	movs	r3, #0
 80010b4:	613b      	str	r3, [r7, #16]
 80010b6:	e00a      	b.n	80010ce <DioIrqHndlr+0x136>
			myDebug("%02x ", tx_cmd[i]);
 80010b8:	4a89      	ldr	r2, [pc, #548]	; (80012e0 <DioIrqHndlr+0x348>)
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	4413      	add	r3, r2
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	4619      	mov	r1, r3
 80010c2:	4870      	ldr	r0, [pc, #448]	; (8001284 <DioIrqHndlr+0x2ec>)
 80010c4:	f7ff fb28 	bl	8000718 <myDebug>
		for (int i = 0; i < sizeof(tx_cmd); i++) {
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	3301      	adds	r3, #1
 80010cc:	613b      	str	r3, [r7, #16]
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	2b22      	cmp	r3, #34	; 0x22
 80010d2:	d9f1      	bls.n	80010b8 <DioIrqHndlr+0x120>
		myDebug("\r\n");
 80010d4:	486c      	ldr	r0, [pc, #432]	; (8001288 <DioIrqHndlr+0x2f0>)
 80010d6:	f7ff fb1f 	bl	8000718 <myDebug>
		memset(tx_cmd, '\0', sizeof(tx_cmd));
 80010da:	2223      	movs	r2, #35	; 0x23
 80010dc:	2100      	movs	r1, #0
 80010de:	4880      	ldr	r0, [pc, #512]	; (80012e0 <DioIrqHndlr+0x348>)
 80010e0:	f009 f958 	bl	800a394 <memset>
		delay_us(500000);
 80010e4:	4869      	ldr	r0, [pc, #420]	; (800128c <DioIrqHndlr+0x2f4>)
 80010e6:	f7ff fafd 	bl	80006e4 <delay_us>
		pkt_params.PacketType = PACKET_TYPE_GFSK;
 80010ea:	4b70      	ldr	r3, [pc, #448]	; (80012ac <DioIrqHndlr+0x314>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	701a      	strb	r2, [r3, #0]
		pkt_params.Params.Gfsk.PayloadLength = PAYLOAD_LENGTH;
 80010f0:	4b6e      	ldr	r3, [pc, #440]	; (80012ac <DioIrqHndlr+0x314>)
 80010f2:	2267      	movs	r2, #103	; 0x67
 80010f4:	721a      	strb	r2, [r3, #8]
		pkt_params.Params.Gfsk.PreambleLength = 8; /*Convert byte into bit*/
 80010f6:	4b6d      	ldr	r3, [pc, #436]	; (80012ac <DioIrqHndlr+0x314>)
 80010f8:	2208      	movs	r2, #8
 80010fa:	805a      	strh	r2, [r3, #2]
		pkt_params.Params.Gfsk.PreambleMinDetect =
 80010fc:	4b6b      	ldr	r3, [pc, #428]	; (80012ac <DioIrqHndlr+0x314>)
 80010fe:	2204      	movs	r2, #4
 8001100:	711a      	strb	r2, [r3, #4]
		pkt_params.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8001102:	4b6a      	ldr	r3, [pc, #424]	; (80012ac <DioIrqHndlr+0x314>)
 8001104:	2218      	movs	r2, #24
 8001106:	715a      	strb	r2, [r3, #5]
		pkt_params.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8001108:	4b68      	ldr	r3, [pc, #416]	; (80012ac <DioIrqHndlr+0x314>)
 800110a:	2200      	movs	r2, #0
 800110c:	719a      	strb	r2, [r3, #6]
		pkt_params.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 800110e:	4b67      	ldr	r3, [pc, #412]	; (80012ac <DioIrqHndlr+0x314>)
 8001110:	2200      	movs	r2, #0
 8001112:	71da      	strb	r2, [r3, #7]
		pkt_params.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8001114:	4b65      	ldr	r3, [pc, #404]	; (80012ac <DioIrqHndlr+0x314>)
 8001116:	22f2      	movs	r2, #242	; 0xf2
 8001118:	725a      	strb	r2, [r3, #9]
		pkt_params.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800111a:	4b64      	ldr	r3, [pc, #400]	; (80012ac <DioIrqHndlr+0x314>)
 800111c:	2201      	movs	r2, #1
 800111e:	729a      	strb	r2, [r3, #10]
		mod_params.PacketType = PACKET_TYPE_GFSK;
 8001120:	4b5e      	ldr	r3, [pc, #376]	; (800129c <DioIrqHndlr+0x304>)
 8001122:	2200      	movs	r2, #0
 8001124:	701a      	strb	r2, [r3, #0]
		mod_params.Params.Gfsk.Bandwidth = RX_BW_29300; /*Not used in TX*/
 8001126:	4b5d      	ldr	r3, [pc, #372]	; (800129c <DioIrqHndlr+0x304>)
 8001128:	220d      	movs	r2, #13
 800112a:	735a      	strb	r2, [r3, #13]
		mod_params.Params.Gfsk.BitRate = DEMO_DEFAULT_BR_4800;
 800112c:	4b5b      	ldr	r3, [pc, #364]	; (800129c <DioIrqHndlr+0x304>)
 800112e:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8001132:	605a      	str	r2, [r3, #4]
		mod_params.Params.Gfsk.Fdev = DEMO_DEFAULT_FDEV_4800;
 8001134:	4b59      	ldr	r3, [pc, #356]	; (800129c <DioIrqHndlr+0x304>)
 8001136:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 800113a:	609a      	str	r2, [r3, #8]
		mod_params.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800113c:	4b57      	ldr	r3, [pc, #348]	; (800129c <DioIrqHndlr+0x304>)
 800113e:	220b      	movs	r2, #11
 8001140:	731a      	strb	r2, [r3, #12]
		myDebug("\n########## RX Configuration: ##########\n");
 8001142:	4853      	ldr	r0, [pc, #332]	; (8001290 <DioIrqHndlr+0x2f8>)
 8001144:	f7ff fae8 	bl	8000718 <myDebug>
		myDebug("FREQUENCY MODS: UPLINK FREQ: %lu Hz\r\n", FREQ_435_MHZ);
 8001148:	4966      	ldr	r1, [pc, #408]	; (80012e4 <DioIrqHndlr+0x34c>)
 800114a:	4867      	ldr	r0, [pc, #412]	; (80012e8 <DioIrqHndlr+0x350>)
 800114c:	f7ff fae4 	bl	8000718 <myDebug>
		myDebug("Bit Rate: 	%d\n\r", mod_params.Params.Gfsk.BitRate);
 8001150:	4b52      	ldr	r3, [pc, #328]	; (800129c <DioIrqHndlr+0x304>)
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	4619      	mov	r1, r3
 8001156:	4852      	ldr	r0, [pc, #328]	; (80012a0 <DioIrqHndlr+0x308>)
 8001158:	f7ff fade 	bl	8000718 <myDebug>
		myDebug("Frequency Deviation: 	%d\n\r", mod_params.Params.Gfsk.Fdev);
 800115c:	4b4f      	ldr	r3, [pc, #316]	; (800129c <DioIrqHndlr+0x304>)
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	4619      	mov	r1, r3
 8001162:	4850      	ldr	r0, [pc, #320]	; (80012a4 <DioIrqHndlr+0x30c>)
 8001164:	f7ff fad8 	bl	8000718 <myDebug>
				mod_params.Params.Gfsk.Bandwidth);
 8001168:	4b4c      	ldr	r3, [pc, #304]	; (800129c <DioIrqHndlr+0x304>)
 800116a:	7b5b      	ldrb	r3, [r3, #13]
		myDebug("RECEVING BANDWIDTH: 	%d\n\r",
 800116c:	4619      	mov	r1, r3
 800116e:	484e      	ldr	r0, [pc, #312]	; (80012a8 <DioIrqHndlr+0x310>)
 8001170:	f7ff fad2 	bl	8000718 <myDebug>
		myDebug("Packet Type 			%d\n\r", pkt_params.PacketType);
 8001174:	4b4d      	ldr	r3, [pc, #308]	; (80012ac <DioIrqHndlr+0x314>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	4619      	mov	r1, r3
 800117a:	484d      	ldr	r0, [pc, #308]	; (80012b0 <DioIrqHndlr+0x318>)
 800117c:	f7ff facc 	bl	8000718 <myDebug>
				pkt_params.Params.Gfsk.PayloadLength);
 8001180:	4b4a      	ldr	r3, [pc, #296]	; (80012ac <DioIrqHndlr+0x314>)
 8001182:	7a1b      	ldrb	r3, [r3, #8]
		myDebug("PayloadLength 			%d\n\r",
 8001184:	4619      	mov	r1, r3
 8001186:	484b      	ldr	r0, [pc, #300]	; (80012b4 <DioIrqHndlr+0x31c>)
 8001188:	f7ff fac6 	bl	8000718 <myDebug>
				pkt_params.Params.Gfsk.PreambleLength);
 800118c:	4b47      	ldr	r3, [pc, #284]	; (80012ac <DioIrqHndlr+0x314>)
 800118e:	885b      	ldrh	r3, [r3, #2]
		myDebug("PreambleLength 		%d\n\r",
 8001190:	4619      	mov	r1, r3
 8001192:	4849      	ldr	r0, [pc, #292]	; (80012b8 <DioIrqHndlr+0x320>)
 8001194:	f7ff fac0 	bl	8000718 <myDebug>
				pkt_params.Params.Gfsk.PreambleMinDetect);
 8001198:	4b44      	ldr	r3, [pc, #272]	; (80012ac <DioIrqHndlr+0x314>)
 800119a:	791b      	ldrb	r3, [r3, #4]
		myDebug("PreambleMinDetect		%d\n\r",
 800119c:	4619      	mov	r1, r3
 800119e:	4847      	ldr	r0, [pc, #284]	; (80012bc <DioIrqHndlr+0x324>)
 80011a0:	f7ff faba 	bl	8000718 <myDebug>
		myDebug("HeaderType 			%d\n\r", pkt_params.Params.Gfsk.HeaderType);
 80011a4:	4b41      	ldr	r3, [pc, #260]	; (80012ac <DioIrqHndlr+0x314>)
 80011a6:	79db      	ldrb	r3, [r3, #7]
 80011a8:	4619      	mov	r1, r3
 80011aa:	4845      	ldr	r0, [pc, #276]	; (80012c0 <DioIrqHndlr+0x328>)
 80011ac:	f7ff fab4 	bl	8000718 <myDebug>
		myDebug("______________*******************______________\r\n");
 80011b0:	4844      	ldr	r0, [pc, #272]	; (80012c4 <DioIrqHndlr+0x32c>)
 80011b2:	f7ff fab1 	bl	8000718 <myDebug>
		myDebug("\n_____Satellite Receiver_____OR_____Command Transmitter_____\r\n");
 80011b6:	4844      	ldr	r0, [pc, #272]	; (80012c8 <DioIrqHndlr+0x330>)
 80011b8:	f7ff faae 	bl	8000718 <myDebug>
		SUBGRF_Init(DioIrqHndlr);
 80011bc:	484b      	ldr	r0, [pc, #300]	; (80012ec <DioIrqHndlr+0x354>)
 80011be:	f007 fae1 	bl	8008784 <SUBGRF_Init>
		SUBGRF_SetBufferBaseAddress(0x00, 0x00);
 80011c2:	2100      	movs	r1, #0
 80011c4:	2000      	movs	r0, #0
 80011c6:	f008 f949 	bl	800945c <SUBGRF_SetBufferBaseAddress>
		SUBGRF_SetPacketParams(&pkt_params);
 80011ca:	4838      	ldr	r0, [pc, #224]	; (80012ac <DioIrqHndlr+0x314>)
 80011cc:	f008 f8a8 	bl	8009320 <SUBGRF_SetPacketParams>
		SUBGRF_SetSyncWord(( uint8_t[] ) { 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00,
 80011d0:	4a47      	ldr	r2, [pc, #284]	; (80012f0 <DioIrqHndlr+0x358>)
 80011d2:	f107 0308 	add.w	r3, r7, #8
 80011d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011da:	e883 0003 	stmia.w	r3, {r0, r1}
 80011de:	f107 0308 	add.w	r3, r7, #8
 80011e2:	4618      	mov	r0, r3
 80011e4:	f007 fb65 	bl	80088b2 <SUBGRF_SetSyncWord>
		SUBGRF_SetWhiteningSeed(0x01FF);
 80011e8:	f240 10ff 	movw	r0, #511	; 0x1ff
 80011ec:	f007 fbb0 	bl	8008950 <SUBGRF_SetWhiteningSeed>
		SUBGRF_SetRfFrequency(FREQ_437_MHZ);
 80011f0:	4828      	ldr	r0, [pc, #160]	; (8001294 <DioIrqHndlr+0x2fc>)
 80011f2:	f007 fe89 	bl	8008f08 <SUBGRF_SetRfFrequency>
		SUBGRF_SetPaConfig(PA_DUTY_CYCLE, HP_MAX, PA_SEL, 0x01);
 80011f6:	2301      	movs	r3, #1
 80011f8:	2201      	movs	r2, #1
 80011fa:	2100      	movs	r1, #0
 80011fc:	2004      	movs	r0, #4
 80011fe:	f007 fe05 	bl	8008e0c <SUBGRF_SetPaConfig>
		SUBGRF_SetTxParams(RFO_LP, POWER, RAMP_TIME);
 8001202:	2202      	movs	r2, #2
 8001204:	210e      	movs	r1, #14
 8001206:	2001      	movs	r0, #1
 8001208:	f007 feea 	bl	8008fe0 <SUBGRF_SetTxParams>
		SUBGRF_SetModulationParams(&mod_params);
 800120c:	4823      	ldr	r0, [pc, #140]	; (800129c <DioIrqHndlr+0x304>)
 800120e:	f007 ffb5 	bl	800917c <SUBGRF_SetModulationParams>
		SUBGRF_SetDioIrqParams(
 8001212:	2300      	movs	r3, #0
 8001214:	2200      	movs	r2, #0
 8001216:	f240 210f 	movw	r1, #527	; 0x20f
 800121a:	f240 200f 	movw	r0, #527	; 0x20f
 800121e:	f007 fe17 	bl	8008e50 <SUBGRF_SetDioIrqParams>
		SUBGRF_SetRfFrequency(FREQ_437_MHZ);
 8001222:	481c      	ldr	r0, [pc, #112]	; (8001294 <DioIrqHndlr+0x2fc>)
 8001224:	f007 fe70 	bl	8008f08 <SUBGRF_SetRfFrequency>
		SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX); /*Set RF switch*/
 8001228:	2100      	movs	r1, #0
 800122a:	2001      	movs	r0, #1
 800122c:	f008 fab4 	bl	8009798 <SUBGRF_SetSwitch>
		SUBGRF_SetRxBoosted(0xFFFFFF);
 8001230:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8001234:	f007 fc94 	bl	8008b60 <SUBGRF_SetRxBoosted>
		HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_SET);
 8001238:	2201      	movs	r2, #1
 800123a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800123e:	482d      	ldr	r0, [pc, #180]	; (80012f4 <DioIrqHndlr+0x35c>)
 8001240:	f001 fa88 	bl	8002754 <HAL_GPIO_WritePin>
		delay_us(500000);  // 500ms delay
 8001244:	4811      	ldr	r0, [pc, #68]	; (800128c <DioIrqHndlr+0x2f4>)
 8001246:	f7ff fa4d 	bl	80006e4 <delay_us>
		HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_RESET);
 800124a:	2200      	movs	r2, #0
 800124c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001250:	4828      	ldr	r0, [pc, #160]	; (80012f4 <DioIrqHndlr+0x35c>)
 8001252:	f001 fa7f 	bl	8002754 <HAL_GPIO_WritePin>
		delay_us(500000);
 8001256:	480d      	ldr	r0, [pc, #52]	; (800128c <DioIrqHndlr+0x2f4>)
 8001258:	f7ff fa44 	bl	80006e4 <delay_us>
		HAL_UART_Receive_DMA(&huart2, rx_buffer, main_cmd_plen);
 800125c:	4b1b      	ldr	r3, [pc, #108]	; (80012cc <DioIrqHndlr+0x334>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	b29b      	uxth	r3, r3
 8001262:	461a      	mov	r2, r3
 8001264:	491a      	ldr	r1, [pc, #104]	; (80012d0 <DioIrqHndlr+0x338>)
 8001266:	481b      	ldr	r0, [pc, #108]	; (80012d4 <DioIrqHndlr+0x33c>)
 8001268:	f003 ff90 	bl	800518c <HAL_UART_Receive_DMA>
}
 800126c:	bf00      	nop
 800126e:	3718      	adds	r7, #24
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	20000000 	.word	0x20000000
 8001278:	20000110 	.word	0x20000110
 800127c:	200001ab 	.word	0x200001ab
 8001280:	0800b07c 	.word	0x0800b07c
 8001284:	0800b070 	.word	0x0800b070
 8001288:	0800b078 	.word	0x0800b078
 800128c:	0007a120 	.word	0x0007a120
 8001290:	0800aeb0 	.word	0x0800aeb0
 8001294:	1a11d018 	.word	0x1a11d018
 8001298:	0800b09c 	.word	0x0800b09c
 800129c:	200000f4 	.word	0x200000f4
 80012a0:	0800af04 	.word	0x0800af04
 80012a4:	0800af14 	.word	0x0800af14
 80012a8:	0800af30 	.word	0x0800af30
 80012ac:	200000e0 	.word	0x200000e0
 80012b0:	0800af4c 	.word	0x0800af4c
 80012b4:	0800af60 	.word	0x0800af60
 80012b8:	0800af78 	.word	0x0800af78
 80012bc:	0800af90 	.word	0x0800af90
 80012c0:	0800afa8 	.word	0x0800afa8
 80012c4:	0800afbc 	.word	0x0800afbc
 80012c8:	0800b0c4 	.word	0x0800b0c4
 80012cc:	20000001 	.word	0x20000001
 80012d0:	20000178 	.word	0x20000178
 80012d4:	20000260 	.word	0x20000260
 80012d8:	200001ac 	.word	0x200001ac
 80012dc:	0800b104 	.word	0x0800b104
 80012e0:	20000188 	.word	0x20000188
 80012e4:	19f25968 	.word	0x19f25968
 80012e8:	0800b01c 	.word	0x0800b01c
 80012ec:	08000f99 	.word	0x08000f99
 80012f0:	0800b044 	.word	0x0800b044
 80012f4:	48000400 	.word	0x48000400

080012f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012fc:	b672      	cpsid	i
}
 80012fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001300:	e7fe      	b.n	8001300 <Error_Handler+0x8>

08001302 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001302:	b480      	push	{r7}
 8001304:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001306:	bf00      	nop
 8001308:	46bd      	mov	sp, r7
 800130a:	bc80      	pop	{r7}
 800130c:	4770      	bx	lr

0800130e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800130e:	b480      	push	{r7}
 8001310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001312:	e7fe      	b.n	8001312 <NMI_Handler+0x4>

08001314 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001318:	e7fe      	b.n	8001318 <HardFault_Handler+0x4>

0800131a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800131a:	b480      	push	{r7}
 800131c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800131e:	e7fe      	b.n	800131e <MemManage_Handler+0x4>

08001320 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001324:	e7fe      	b.n	8001324 <BusFault_Handler+0x4>

08001326 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001326:	b480      	push	{r7}
 8001328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800132a:	e7fe      	b.n	800132a <UsageFault_Handler+0x4>

0800132c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001330:	bf00      	nop
 8001332:	46bd      	mov	sp, r7
 8001334:	bc80      	pop	{r7}
 8001336:	4770      	bx	lr

08001338 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	bc80      	pop	{r7}
 8001342:	4770      	bx	lr

08001344 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001348:	bf00      	nop
 800134a:	46bd      	mov	sp, r7
 800134c:	bc80      	pop	{r7}
 800134e:	4770      	bx	lr

08001350 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001354:	f000 fbfe 	bl	8001b54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001358:	bf00      	nop
 800135a:	bd80      	pop	{r7, pc}

0800135c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001360:	4802      	ldr	r0, [pc, #8]	; (800136c <DMA1_Channel1_IRQHandler+0x10>)
 8001362:	f000 fef9 	bl	8002158 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	200002f4 	.word	0x200002f4

08001370 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 2 Interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001374:	4802      	ldr	r0, [pc, #8]	; (8001380 <DMA1_Channel2_IRQHandler+0x10>)
 8001376:	f000 feef 	bl	8002158 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20000354 	.word	0x20000354

08001384 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update Interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001388:	4802      	ldr	r0, [pc, #8]	; (8001394 <TIM1_UP_IRQHandler+0x10>)
 800138a:	f003 fa7f 	bl	800488c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	200001c4 	.word	0x200001c4

08001398 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800139c:	4802      	ldr	r0, [pc, #8]	; (80013a8 <USART2_IRQHandler+0x10>)
 800139e:	f003 ff41 	bl	8005224 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20000260 	.word	0x20000260

080013ac <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 80013b0:	4802      	ldr	r0, [pc, #8]	; (80013bc <SUBGHZ_Radio_IRQHandler+0x10>)
 80013b2:	f003 f831 	bl	8004418 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	200001b0 	.word	0x200001b0

080013c0 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 80013c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013cc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80013ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 80013d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013dc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4013      	ands	r3, r2
 80013e2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013e4:	68fb      	ldr	r3, [r7, #12]
}
 80013e6:	bf00      	nop
 80013e8:	3714      	adds	r7, #20
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr

080013f0 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_8;
 80013f4:	4b06      	ldr	r3, [pc, #24]	; (8001410 <MX_SUBGHZ_Init+0x20>)
 80013f6:	2210      	movs	r2, #16
 80013f8:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80013fa:	4805      	ldr	r0, [pc, #20]	; (8001410 <MX_SUBGHZ_Init+0x20>)
 80013fc:	f002 fd8a 	bl	8003f14 <HAL_SUBGHZ_Init>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8001406:	f7ff ff77 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 800140a:	bf00      	nop
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	200001b0 	.word	0x200001b0

08001414 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 800141c:	2001      	movs	r0, #1
 800141e:	f7ff ffcf 	bl	80013c0 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8001422:	2200      	movs	r2, #0
 8001424:	2100      	movs	r1, #0
 8001426:	2032      	movs	r0, #50	; 0x32
 8001428:	f000 fc7d 	bl	8001d26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 800142c:	2032      	movs	r0, #50	; 0x32
 800142e:	f000 fc94 	bl	8001d5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

}
 800143e:	bf00      	nop
 8001440:	46bd      	mov	sp, r7
 8001442:	bc80      	pop	{r7}
 8001444:	4770      	bx	lr
	...

08001448 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800144e:	2300      	movs	r3, #0
 8001450:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8001452:	4b06      	ldr	r3, [pc, #24]	; (800146c <HAL_GetTick+0x24>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d002      	beq.n	8001460 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 800145a:	f000 f988 	bl	800176e <TIMER_IF_GetTimerValue>
 800145e:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8001460:	687b      	ldr	r3, [r7, #4]
}
 8001462:	4618      	mov	r0, r3
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	200001bc 	.word	0x200001bc

08001470 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	4618      	mov	r0, r3
 800147c:	f000 f9a5 	bl	80017ca <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001480:	bf00      	nop
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}

08001488 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001490:	4a14      	ldr	r2, [pc, #80]	; (80014e4 <_sbrk+0x5c>)
 8001492:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <_sbrk+0x60>)
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800149c:	4b13      	ldr	r3, [pc, #76]	; (80014ec <_sbrk+0x64>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d102      	bne.n	80014aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014a4:	4b11      	ldr	r3, [pc, #68]	; (80014ec <_sbrk+0x64>)
 80014a6:	4a12      	ldr	r2, [pc, #72]	; (80014f0 <_sbrk+0x68>)
 80014a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014aa:	4b10      	ldr	r3, [pc, #64]	; (80014ec <_sbrk+0x64>)
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4413      	add	r3, r2
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d207      	bcs.n	80014c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014b8:	f008 ff74 	bl	800a3a4 <__errno>
 80014bc:	4603      	mov	r3, r0
 80014be:	220c      	movs	r2, #12
 80014c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014c6:	e009      	b.n	80014dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014c8:	4b08      	ldr	r3, [pc, #32]	; (80014ec <_sbrk+0x64>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ce:	4b07      	ldr	r3, [pc, #28]	; (80014ec <_sbrk+0x64>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4413      	add	r3, r2
 80014d6:	4a05      	ldr	r2, [pc, #20]	; (80014ec <_sbrk+0x64>)
 80014d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014da:	68fb      	ldr	r3, [r7, #12]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3718      	adds	r7, #24
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	20010000 	.word	0x20010000
 80014e8:	00000400 	.word	0x00000400
 80014ec:	200001c0 	.word	0x200001c0
 80014f0:	200006c0 	.word	0x200006c0

080014f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr

08001500 <LL_APB1_GRP1_EnableClock>:
{
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001508:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800150c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800150e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4313      	orrs	r3, r2
 8001516:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001518:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800151c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4013      	ands	r3, r2
 8001522:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001524:	68fb      	ldr	r3, [r7, #12]
}
 8001526:	bf00      	nop
 8001528:	3714      	adds	r7, #20
 800152a:	46bd      	mov	sp, r7
 800152c:	bc80      	pop	{r7}
 800152e:	4770      	bx	lr

08001530 <LL_APB2_GRP1_EnableClock>:
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001538:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800153c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800153e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4313      	orrs	r3, r2
 8001546:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001548:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800154c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4013      	ands	r3, r2
 8001552:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001554:	68fb      	ldr	r3, [r7, #12]
}
 8001556:	bf00      	nop
 8001558:	3714      	adds	r7, #20
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr

08001560 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b088      	sub	sp, #32
 8001564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001566:	f107 0310 	add.w	r3, r7, #16
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	605a      	str	r2, [r3, #4]
 8001570:	609a      	str	r2, [r3, #8]
 8001572:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001574:	1d3b      	adds	r3, r7, #4
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	605a      	str	r2, [r3, #4]
 800157c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800157e:	4b20      	ldr	r3, [pc, #128]	; (8001600 <MX_TIM1_Init+0xa0>)
 8001580:	4a20      	ldr	r2, [pc, #128]	; (8001604 <MX_TIM1_Init+0xa4>)
 8001582:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48-1;
 8001584:	4b1e      	ldr	r3, [pc, #120]	; (8001600 <MX_TIM1_Init+0xa0>)
 8001586:	222f      	movs	r2, #47	; 0x2f
 8001588:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800158a:	4b1d      	ldr	r3, [pc, #116]	; (8001600 <MX_TIM1_Init+0xa0>)
 800158c:	2200      	movs	r2, #0
 800158e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8001590:	4b1b      	ldr	r3, [pc, #108]	; (8001600 <MX_TIM1_Init+0xa0>)
 8001592:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001596:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001598:	4b19      	ldr	r3, [pc, #100]	; (8001600 <MX_TIM1_Init+0xa0>)
 800159a:	2200      	movs	r2, #0
 800159c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800159e:	4b18      	ldr	r3, [pc, #96]	; (8001600 <MX_TIM1_Init+0xa0>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015a4:	4b16      	ldr	r3, [pc, #88]	; (8001600 <MX_TIM1_Init+0xa0>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015aa:	4815      	ldr	r0, [pc, #84]	; (8001600 <MX_TIM1_Init+0xa0>)
 80015ac:	f003 f8d2 	bl	8004754 <HAL_TIM_Base_Init>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80015b6:	f7ff fe9f 	bl	80012f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015be:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015c0:	f107 0310 	add.w	r3, r7, #16
 80015c4:	4619      	mov	r1, r3
 80015c6:	480e      	ldr	r0, [pc, #56]	; (8001600 <MX_TIM1_Init+0xa0>)
 80015c8:	f003 fa7f 	bl	8004aca <HAL_TIM_ConfigClockSource>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80015d2:	f7ff fe91 	bl	80012f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015d6:	2300      	movs	r3, #0
 80015d8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80015da:	2300      	movs	r3, #0
 80015dc:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015de:	2300      	movs	r3, #0
 80015e0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015e2:	1d3b      	adds	r3, r7, #4
 80015e4:	4619      	mov	r1, r3
 80015e6:	4806      	ldr	r0, [pc, #24]	; (8001600 <MX_TIM1_Init+0xa0>)
 80015e8:	f003 fc60 	bl	8004eac <HAL_TIMEx_MasterConfigSynchronization>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80015f2:	f7ff fe81 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80015f6:	bf00      	nop
 80015f8:	3720      	adds	r7, #32
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	200001c4 	.word	0x200001c4
 8001604:	40012c00 	.word	0x40012c00

08001608 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b088      	sub	sp, #32
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800160e:	f107 0310 	add.w	r3, r7, #16
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	605a      	str	r2, [r3, #4]
 8001618:	609a      	str	r2, [r3, #8]
 800161a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800161c:	1d3b      	adds	r3, r7, #4
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	605a      	str	r2, [r3, #4]
 8001624:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001626:	4b1d      	ldr	r3, [pc, #116]	; (800169c <MX_TIM2_Init+0x94>)
 8001628:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800162c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48;
 800162e:	4b1b      	ldr	r3, [pc, #108]	; (800169c <MX_TIM2_Init+0x94>)
 8001630:	2230      	movs	r2, #48	; 0x30
 8001632:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001634:	4b19      	ldr	r3, [pc, #100]	; (800169c <MX_TIM2_Init+0x94>)
 8001636:	2200      	movs	r2, #0
 8001638:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000001-1;
 800163a:	4b18      	ldr	r3, [pc, #96]	; (800169c <MX_TIM2_Init+0x94>)
 800163c:	4a18      	ldr	r2, [pc, #96]	; (80016a0 <MX_TIM2_Init+0x98>)
 800163e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001640:	4b16      	ldr	r3, [pc, #88]	; (800169c <MX_TIM2_Init+0x94>)
 8001642:	2200      	movs	r2, #0
 8001644:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001646:	4b15      	ldr	r3, [pc, #84]	; (800169c <MX_TIM2_Init+0x94>)
 8001648:	2200      	movs	r2, #0
 800164a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800164c:	4813      	ldr	r0, [pc, #76]	; (800169c <MX_TIM2_Init+0x94>)
 800164e:	f003 f881 	bl	8004754 <HAL_TIM_Base_Init>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001658:	f7ff fe4e 	bl	80012f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800165c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001660:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001662:	f107 0310 	add.w	r3, r7, #16
 8001666:	4619      	mov	r1, r3
 8001668:	480c      	ldr	r0, [pc, #48]	; (800169c <MX_TIM2_Init+0x94>)
 800166a:	f003 fa2e 	bl	8004aca <HAL_TIM_ConfigClockSource>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001674:	f7ff fe40 	bl	80012f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001678:	2300      	movs	r3, #0
 800167a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800167c:	2300      	movs	r3, #0
 800167e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001680:	1d3b      	adds	r3, r7, #4
 8001682:	4619      	mov	r1, r3
 8001684:	4805      	ldr	r0, [pc, #20]	; (800169c <MX_TIM2_Init+0x94>)
 8001686:	f003 fc11 	bl	8004eac <HAL_TIMEx_MasterConfigSynchronization>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001690:	f7ff fe32 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001694:	bf00      	nop
 8001696:	3720      	adds	r7, #32
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20000210 	.word	0x20000210
 80016a0:	000f4240 	.word	0x000f4240

080016a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a0d      	ldr	r2, [pc, #52]	; (80016e8 <HAL_TIM_Base_MspInit+0x44>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d10c      	bne.n	80016d0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016b6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80016ba:	f7ff ff39 	bl	8001530 <LL_APB2_GRP1_EnableClock>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80016be:	2200      	movs	r2, #0
 80016c0:	2100      	movs	r1, #0
 80016c2:	2018      	movs	r0, #24
 80016c4:	f000 fb2f 	bl	8001d26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80016c8:	2018      	movs	r0, #24
 80016ca:	f000 fb46 	bl	8001d5a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80016ce:	e007      	b.n	80016e0 <HAL_TIM_Base_MspInit+0x3c>
  else if(tim_baseHandle->Instance==TIM2)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016d8:	d102      	bne.n	80016e0 <HAL_TIM_Base_MspInit+0x3c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016da:	2001      	movs	r0, #1
 80016dc:	f7ff ff10 	bl	8001500 <LL_APB1_GRP1_EnableClock>
}
 80016e0:	bf00      	nop
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40012c00 	.word	0x40012c00

080016ec <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80016f2:	2300      	movs	r3, #0
 80016f4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  return ret;
 80016f6:	79fb      	ldrb	r3, [r7, #7]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bc80      	pop	{r7}
 8001700:	4770      	bx	lr

08001702 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8001702:	b480      	push	{r7}
 8001704:	b085      	sub	sp, #20
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 800170a:	2300      	movs	r3, #0
 800170c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  return ret;
 800170e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001710:	4618      	mov	r0, r3
 8001712:	3714      	adds	r7, #20
 8001714:	46bd      	mov	sp, r7
 8001716:	bc80      	pop	{r7}
 8001718:	4770      	bx	lr

0800171a <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 800171a:	b480      	push	{r7}
 800171c:	b083      	sub	sp, #12
 800171e:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001720:	2300      	movs	r3, #0
 8001722:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  return ret;
 8001724:	79fb      	ldrb	r3, [r7, #7]
}
 8001726:	4618      	mov	r0, r3
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr

08001730 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_SetTimerContext */

  /* USER CODE END TIMER_IF_SetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 8001734:	4b02      	ldr	r3, [pc, #8]	; (8001740 <TIMER_IF_SetTimerContext+0x10>)
 8001736:	681b      	ldr	r3, [r3, #0]
}
 8001738:	4618      	mov	r0, r3
 800173a:	46bd      	mov	sp, r7
 800173c:	bc80      	pop	{r7}
 800173e:	4770      	bx	lr
 8001740:	2000025c 	.word	0x2000025c

08001744 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_GetTimerContext */

  /* USER CODE END TIMER_IF_GetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 8001748:	4b02      	ldr	r3, [pc, #8]	; (8001754 <TIMER_IF_GetTimerContext+0x10>)
 800174a:	681b      	ldr	r3, [r3, #0]
}
 800174c:	4618      	mov	r0, r3
 800174e:	46bd      	mov	sp, r7
 8001750:	bc80      	pop	{r7}
 8001752:	4770      	bx	lr
 8001754:	2000025c 	.word	0x2000025c

08001758 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800175e:	2300      	movs	r3, #0
 8001760:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  return ret;
 8001762:	687b      	ldr	r3, [r7, #4]
}
 8001764:	4618      	mov	r0, r3
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	bc80      	pop	{r7}
 800176c:	4770      	bx	lr

0800176e <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 800176e:	b480      	push	{r7}
 8001770:	b083      	sub	sp, #12
 8001772:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001774:	2300      	movs	r3, #0
 8001776:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  return ret;
 8001778:	687b      	ldr	r3, [r7, #4]
}
 800177a:	4618      	mov	r0, r3
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr

08001784 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800178a:	2300      	movs	r3, #0
 800178c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  return ret;
 800178e:	687b      	ldr	r3, [r7, #4]
}
 8001790:	4618      	mov	r0, r3
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	bc80      	pop	{r7}
 8001798:	4770      	bx	lr

0800179a <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 800179a:	b480      	push	{r7}
 800179c:	b085      	sub	sp, #20
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 80017a2:	2300      	movs	r3, #0
 80017a4:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  return ret;
 80017a6:	68fb      	ldr	r3, [r7, #12]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3714      	adds	r7, #20
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bc80      	pop	{r7}
 80017b0:	4770      	bx	lr

080017b2 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 80017b2:	b480      	push	{r7}
 80017b4:	b085      	sub	sp, #20
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 80017ba:	2300      	movs	r3, #0
 80017bc:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  return ret;
 80017be:	68fb      	ldr	r3, [r7, #12]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3714      	adds	r7, #20
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bc80      	pop	{r7}
 80017c8:	4770      	bx	lr

080017ca <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 80017ca:	b480      	push	{r7}
 80017cc:	b083      	sub	sp, #12
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
}
 80017d2:	bf00      	nop
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc80      	pop	{r7}
 80017da:	4770      	bx	lr

080017dc <LL_AHB2_GRP1_EnableClock>:
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80017e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80017f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4013      	ands	r3, r2
 80017fe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001800:	68fb      	ldr	r3, [r7, #12]
}
 8001802:	bf00      	nop
 8001804:	3714      	adds	r7, #20
 8001806:	46bd      	mov	sp, r7
 8001808:	bc80      	pop	{r7}
 800180a:	4770      	bx	lr

0800180c <LL_APB1_GRP1_EnableClock>:
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001814:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001818:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800181a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4313      	orrs	r3, r2
 8001822:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001824:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001828:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4013      	ands	r3, r2
 800182e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001830:	68fb      	ldr	r3, [r7, #12]
}
 8001832:	bf00      	nop
 8001834:	3714      	adds	r7, #20
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr

0800183c <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001840:	4b22      	ldr	r3, [pc, #136]	; (80018cc <MX_USART2_UART_Init+0x90>)
 8001842:	4a23      	ldr	r2, [pc, #140]	; (80018d0 <MX_USART2_UART_Init+0x94>)
 8001844:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001846:	4b21      	ldr	r3, [pc, #132]	; (80018cc <MX_USART2_UART_Init+0x90>)
 8001848:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800184c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800184e:	4b1f      	ldr	r3, [pc, #124]	; (80018cc <MX_USART2_UART_Init+0x90>)
 8001850:	2200      	movs	r2, #0
 8001852:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001854:	4b1d      	ldr	r3, [pc, #116]	; (80018cc <MX_USART2_UART_Init+0x90>)
 8001856:	2200      	movs	r2, #0
 8001858:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800185a:	4b1c      	ldr	r3, [pc, #112]	; (80018cc <MX_USART2_UART_Init+0x90>)
 800185c:	2200      	movs	r2, #0
 800185e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001860:	4b1a      	ldr	r3, [pc, #104]	; (80018cc <MX_USART2_UART_Init+0x90>)
 8001862:	220c      	movs	r2, #12
 8001864:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001866:	4b19      	ldr	r3, [pc, #100]	; (80018cc <MX_USART2_UART_Init+0x90>)
 8001868:	2200      	movs	r2, #0
 800186a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800186c:	4b17      	ldr	r3, [pc, #92]	; (80018cc <MX_USART2_UART_Init+0x90>)
 800186e:	2200      	movs	r2, #0
 8001870:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001872:	4b16      	ldr	r3, [pc, #88]	; (80018cc <MX_USART2_UART_Init+0x90>)
 8001874:	2200      	movs	r2, #0
 8001876:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001878:	4b14      	ldr	r3, [pc, #80]	; (80018cc <MX_USART2_UART_Init+0x90>)
 800187a:	2200      	movs	r2, #0
 800187c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800187e:	4b13      	ldr	r3, [pc, #76]	; (80018cc <MX_USART2_UART_Init+0x90>)
 8001880:	2200      	movs	r2, #0
 8001882:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001884:	4811      	ldr	r0, [pc, #68]	; (80018cc <MX_USART2_UART_Init+0x90>)
 8001886:	f003 fbab 	bl	8004fe0 <HAL_UART_Init>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001890:	f7ff fd32 	bl	80012f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001894:	2100      	movs	r1, #0
 8001896:	480d      	ldr	r0, [pc, #52]	; (80018cc <MX_USART2_UART_Init+0x90>)
 8001898:	f004 ff0e 	bl	80066b8 <HAL_UARTEx_SetTxFifoThreshold>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80018a2:	f7ff fd29 	bl	80012f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018a6:	2100      	movs	r1, #0
 80018a8:	4808      	ldr	r0, [pc, #32]	; (80018cc <MX_USART2_UART_Init+0x90>)
 80018aa:	f004 ff43 	bl	8006734 <HAL_UARTEx_SetRxFifoThreshold>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80018b4:	f7ff fd20 	bl	80012f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80018b8:	4804      	ldr	r0, [pc, #16]	; (80018cc <MX_USART2_UART_Init+0x90>)
 80018ba:	f004 fec5 	bl	8006648 <HAL_UARTEx_DisableFifoMode>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80018c4:	f7ff fd18 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018c8:	bf00      	nop
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	20000260 	.word	0x20000260
 80018d0:	40004400 	.word	0x40004400

080018d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b096      	sub	sp, #88	; 0x58
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018dc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	605a      	str	r2, [r3, #4]
 80018e6:	609a      	str	r2, [r3, #8]
 80018e8:	60da      	str	r2, [r3, #12]
 80018ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018ec:	f107 030c 	add.w	r3, r7, #12
 80018f0:	2238      	movs	r2, #56	; 0x38
 80018f2:	2100      	movs	r1, #0
 80018f4:	4618      	mov	r0, r3
 80018f6:	f008 fd4d 	bl	800a394 <memset>
  if(uartHandle->Instance==USART2)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a4e      	ldr	r2, [pc, #312]	; (8001a38 <HAL_UART_MspInit+0x164>)
 8001900:	4293      	cmp	r3, r2
 8001902:	f040 8094 	bne.w	8001a2e <HAL_UART_MspInit+0x15a>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001906:	2302      	movs	r3, #2
 8001908:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800190a:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800190e:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001910:	f107 030c 	add.w	r3, r7, #12
 8001914:	4618      	mov	r0, r3
 8001916:	f002 f949 	bl	8003bac <HAL_RCCEx_PeriphCLKConfig>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001920:	f7ff fcea 	bl	80012f8 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001924:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001928:	f7ff ff70 	bl	800180c <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800192c:	2001      	movs	r0, #1
 800192e:	f7ff ff55 	bl	80017dc <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8001932:	230c      	movs	r3, #12
 8001934:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001936:	2302      	movs	r3, #2
 8001938:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193a:	2300      	movs	r3, #0
 800193c:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193e:	2300      	movs	r3, #0
 8001940:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001942:	2307      	movs	r3, #7
 8001944:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001946:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800194a:	4619      	mov	r1, r3
 800194c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001950:	f000 fda0 	bl	8002494 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8001954:	4b39      	ldr	r3, [pc, #228]	; (8001a3c <HAL_UART_MspInit+0x168>)
 8001956:	4a3a      	ldr	r2, [pc, #232]	; (8001a40 <HAL_UART_MspInit+0x16c>)
 8001958:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800195a:	4b38      	ldr	r3, [pc, #224]	; (8001a3c <HAL_UART_MspInit+0x168>)
 800195c:	2213      	movs	r2, #19
 800195e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001960:	4b36      	ldr	r3, [pc, #216]	; (8001a3c <HAL_UART_MspInit+0x168>)
 8001962:	2200      	movs	r2, #0
 8001964:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001966:	4b35      	ldr	r3, [pc, #212]	; (8001a3c <HAL_UART_MspInit+0x168>)
 8001968:	2200      	movs	r2, #0
 800196a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800196c:	4b33      	ldr	r3, [pc, #204]	; (8001a3c <HAL_UART_MspInit+0x168>)
 800196e:	2280      	movs	r2, #128	; 0x80
 8001970:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001972:	4b32      	ldr	r3, [pc, #200]	; (8001a3c <HAL_UART_MspInit+0x168>)
 8001974:	2200      	movs	r2, #0
 8001976:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001978:	4b30      	ldr	r3, [pc, #192]	; (8001a3c <HAL_UART_MspInit+0x168>)
 800197a:	2200      	movs	r2, #0
 800197c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800197e:	4b2f      	ldr	r3, [pc, #188]	; (8001a3c <HAL_UART_MspInit+0x168>)
 8001980:	2200      	movs	r2, #0
 8001982:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001984:	4b2d      	ldr	r3, [pc, #180]	; (8001a3c <HAL_UART_MspInit+0x168>)
 8001986:	2200      	movs	r2, #0
 8001988:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800198a:	482c      	ldr	r0, [pc, #176]	; (8001a3c <HAL_UART_MspInit+0x168>)
 800198c:	f000 fa00 	bl	8001d90 <HAL_DMA_Init>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8001996:	f7ff fcaf 	bl	80012f8 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 800199a:	2110      	movs	r1, #16
 800199c:	4827      	ldr	r0, [pc, #156]	; (8001a3c <HAL_UART_MspInit+0x168>)
 800199e:	f000 fca1 	bl	80022e4 <HAL_DMA_ConfigChannelAttributes>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <HAL_UART_MspInit+0xd8>
    {
      Error_Handler();
 80019a8:	f7ff fca6 	bl	80012f8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4a23      	ldr	r2, [pc, #140]	; (8001a3c <HAL_UART_MspInit+0x168>)
 80019b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80019b4:	4a21      	ldr	r2, [pc, #132]	; (8001a3c <HAL_UART_MspInit+0x168>)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel2;
 80019ba:	4b22      	ldr	r3, [pc, #136]	; (8001a44 <HAL_UART_MspInit+0x170>)
 80019bc:	4a22      	ldr	r2, [pc, #136]	; (8001a48 <HAL_UART_MspInit+0x174>)
 80019be:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80019c0:	4b20      	ldr	r3, [pc, #128]	; (8001a44 <HAL_UART_MspInit+0x170>)
 80019c2:	2214      	movs	r2, #20
 80019c4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019c6:	4b1f      	ldr	r3, [pc, #124]	; (8001a44 <HAL_UART_MspInit+0x170>)
 80019c8:	2210      	movs	r2, #16
 80019ca:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019cc:	4b1d      	ldr	r3, [pc, #116]	; (8001a44 <HAL_UART_MspInit+0x170>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019d2:	4b1c      	ldr	r3, [pc, #112]	; (8001a44 <HAL_UART_MspInit+0x170>)
 80019d4:	2280      	movs	r2, #128	; 0x80
 80019d6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019d8:	4b1a      	ldr	r3, [pc, #104]	; (8001a44 <HAL_UART_MspInit+0x170>)
 80019da:	2200      	movs	r2, #0
 80019dc:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019de:	4b19      	ldr	r3, [pc, #100]	; (8001a44 <HAL_UART_MspInit+0x170>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80019e4:	4b17      	ldr	r3, [pc, #92]	; (8001a44 <HAL_UART_MspInit+0x170>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80019ea:	4b16      	ldr	r3, [pc, #88]	; (8001a44 <HAL_UART_MspInit+0x170>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80019f0:	4814      	ldr	r0, [pc, #80]	; (8001a44 <HAL_UART_MspInit+0x170>)
 80019f2:	f000 f9cd 	bl	8001d90 <HAL_DMA_Init>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 80019fc:	f7ff fc7c 	bl	80012f8 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001a00:	2110      	movs	r1, #16
 8001a02:	4810      	ldr	r0, [pc, #64]	; (8001a44 <HAL_UART_MspInit+0x170>)
 8001a04:	f000 fc6e 	bl	80022e4 <HAL_DMA_ConfigChannelAttributes>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <HAL_UART_MspInit+0x13e>
    {
      Error_Handler();
 8001a0e:	f7ff fc73 	bl	80012f8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a0b      	ldr	r2, [pc, #44]	; (8001a44 <HAL_UART_MspInit+0x170>)
 8001a16:	67da      	str	r2, [r3, #124]	; 0x7c
 8001a18:	4a0a      	ldr	r2, [pc, #40]	; (8001a44 <HAL_UART_MspInit+0x170>)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001a1e:	2200      	movs	r2, #0
 8001a20:	2100      	movs	r1, #0
 8001a22:	2025      	movs	r0, #37	; 0x25
 8001a24:	f000 f97f 	bl	8001d26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a28:	2025      	movs	r0, #37	; 0x25
 8001a2a:	f000 f996 	bl	8001d5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001a2e:	bf00      	nop
 8001a30:	3758      	adds	r7, #88	; 0x58
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40004400 	.word	0x40004400
 8001a3c:	200002f4 	.word	0x200002f4
 8001a40:	40020008 	.word	0x40020008
 8001a44:	20000354 	.word	0x20000354
 8001a48:	4002001c 	.word	0x4002001c

08001a4c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a4c:	480d      	ldr	r0, [pc, #52]	; (8001a84 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a4e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a50:	f7ff fd50 	bl	80014f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a54:	480c      	ldr	r0, [pc, #48]	; (8001a88 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a56:	490d      	ldr	r1, [pc, #52]	; (8001a8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a58:	4a0d      	ldr	r2, [pc, #52]	; (8001a90 <LoopForever+0xe>)
  movs r3, #0
 8001a5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a5c:	e002      	b.n	8001a64 <LoopCopyDataInit>

08001a5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a62:	3304      	adds	r3, #4

08001a64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a68:	d3f9      	bcc.n	8001a5e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a6a:	4a0a      	ldr	r2, [pc, #40]	; (8001a94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a6c:	4c0a      	ldr	r4, [pc, #40]	; (8001a98 <LoopForever+0x16>)
  movs r3, #0
 8001a6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a70:	e001      	b.n	8001a76 <LoopFillZerobss>

08001a72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a74:	3204      	adds	r2, #4

08001a76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a78:	d3fb      	bcc.n	8001a72 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001a7a:	f008 fc99 	bl	800a3b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a7e:	f7fe fff3 	bl	8000a68 <main>

08001a82 <LoopForever>:

LoopForever:
    b LoopForever
 8001a82:	e7fe      	b.n	8001a82 <LoopForever>
  ldr   r0, =_estack
 8001a84:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001a88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a8c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001a90:	0800b3e4 	.word	0x0800b3e4
  ldr r2, =_sbss
 8001a94:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001a98:	200006c0 	.word	0x200006c0

08001a9c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a9c:	e7fe      	b.n	8001a9c <ADC_IRQHandler>
	...

08001aa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aaa:	2003      	movs	r0, #3
 8001aac:	f000 f930 	bl	8001d10 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001ab0:	f001 fe9e 	bl	80037f0 <HAL_RCC_GetHCLKFreq>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	4a09      	ldr	r2, [pc, #36]	; (8001adc <HAL_Init+0x3c>)
 8001ab8:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001aba:	2000      	movs	r0, #0
 8001abc:	f000 f810 	bl	8001ae0 <HAL_InitTick>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d002      	beq.n	8001acc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	71fb      	strb	r3, [r7, #7]
 8001aca:	e001      	b.n	8001ad0 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001acc:	f7ff fc19 	bl	8001302 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ad0:	79fb      	ldrb	r3, [r7, #7]
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20000004 	.word	0x20000004

08001ae0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001aec:	4b17      	ldr	r3, [pc, #92]	; (8001b4c <HAL_InitTick+0x6c>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d024      	beq.n	8001b3e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001af4:	f001 fe7c 	bl	80037f0 <HAL_RCC_GetHCLKFreq>
 8001af8:	4602      	mov	r2, r0
 8001afa:	4b14      	ldr	r3, [pc, #80]	; (8001b4c <HAL_InitTick+0x6c>)
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	4619      	mov	r1, r3
 8001b00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b04:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f000 f932 	bl	8001d76 <HAL_SYSTICK_Config>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d10f      	bne.n	8001b38 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2b0f      	cmp	r3, #15
 8001b1c:	d809      	bhi.n	8001b32 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b1e:	2200      	movs	r2, #0
 8001b20:	6879      	ldr	r1, [r7, #4]
 8001b22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b26:	f000 f8fe 	bl	8001d26 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b2a:	4a09      	ldr	r2, [pc, #36]	; (8001b50 <HAL_InitTick+0x70>)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6013      	str	r3, [r2, #0]
 8001b30:	e007      	b.n	8001b42 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	73fb      	strb	r3, [r7, #15]
 8001b36:	e004      	b.n	8001b42 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	73fb      	strb	r3, [r7, #15]
 8001b3c:	e001      	b.n	8001b42 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3710      	adds	r7, #16
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	2000000c 	.word	0x2000000c
 8001b50:	20000008 	.word	0x20000008

08001b54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b58:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <HAL_IncTick+0x1c>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	4b05      	ldr	r3, [pc, #20]	; (8001b74 <HAL_IncTick+0x20>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4413      	add	r3, r2
 8001b64:	4a03      	ldr	r2, [pc, #12]	; (8001b74 <HAL_IncTick+0x20>)
 8001b66:	6013      	str	r3, [r2, #0]
}
 8001b68:	bf00      	nop
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bc80      	pop	{r7}
 8001b6e:	4770      	bx	lr
 8001b70:	2000000c 	.word	0x2000000c
 8001b74:	200003b4 	.word	0x200003b4

08001b78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f003 0307 	and.w	r3, r3, #7
 8001b86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b88:	4b0c      	ldr	r3, [pc, #48]	; (8001bbc <__NVIC_SetPriorityGrouping+0x44>)
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b8e:	68ba      	ldr	r2, [r7, #8]
 8001b90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b94:	4013      	ands	r3, r2
 8001b96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ba0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ba4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ba8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001baa:	4a04      	ldr	r2, [pc, #16]	; (8001bbc <__NVIC_SetPriorityGrouping+0x44>)
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	60d3      	str	r3, [r2, #12]
}
 8001bb0:	bf00      	nop
 8001bb2:	3714      	adds	r7, #20
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bc80      	pop	{r7}
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	e000ed00 	.word	0xe000ed00

08001bc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bc4:	4b04      	ldr	r3, [pc, #16]	; (8001bd8 <__NVIC_GetPriorityGrouping+0x18>)
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	0a1b      	lsrs	r3, r3, #8
 8001bca:	f003 0307 	and.w	r3, r3, #7
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bc80      	pop	{r7}
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	e000ed00 	.word	0xe000ed00

08001bdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	4603      	mov	r3, r0
 8001be4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	db0b      	blt.n	8001c06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bee:	79fb      	ldrb	r3, [r7, #7]
 8001bf0:	f003 021f 	and.w	r2, r3, #31
 8001bf4:	4906      	ldr	r1, [pc, #24]	; (8001c10 <__NVIC_EnableIRQ+0x34>)
 8001bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfa:	095b      	lsrs	r3, r3, #5
 8001bfc:	2001      	movs	r0, #1
 8001bfe:	fa00 f202 	lsl.w	r2, r0, r2
 8001c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bc80      	pop	{r7}
 8001c0e:	4770      	bx	lr
 8001c10:	e000e100 	.word	0xe000e100

08001c14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	6039      	str	r1, [r7, #0]
 8001c1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	db0a      	blt.n	8001c3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	b2da      	uxtb	r2, r3
 8001c2c:	490c      	ldr	r1, [pc, #48]	; (8001c60 <__NVIC_SetPriority+0x4c>)
 8001c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c32:	0112      	lsls	r2, r2, #4
 8001c34:	b2d2      	uxtb	r2, r2
 8001c36:	440b      	add	r3, r1
 8001c38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c3c:	e00a      	b.n	8001c54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	b2da      	uxtb	r2, r3
 8001c42:	4908      	ldr	r1, [pc, #32]	; (8001c64 <__NVIC_SetPriority+0x50>)
 8001c44:	79fb      	ldrb	r3, [r7, #7]
 8001c46:	f003 030f 	and.w	r3, r3, #15
 8001c4a:	3b04      	subs	r3, #4
 8001c4c:	0112      	lsls	r2, r2, #4
 8001c4e:	b2d2      	uxtb	r2, r2
 8001c50:	440b      	add	r3, r1
 8001c52:	761a      	strb	r2, [r3, #24]
}
 8001c54:	bf00      	nop
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bc80      	pop	{r7}
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	e000e100 	.word	0xe000e100
 8001c64:	e000ed00 	.word	0xe000ed00

08001c68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b089      	sub	sp, #36	; 0x24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f003 0307 	and.w	r3, r3, #7
 8001c7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	f1c3 0307 	rsb	r3, r3, #7
 8001c82:	2b04      	cmp	r3, #4
 8001c84:	bf28      	it	cs
 8001c86:	2304      	movcs	r3, #4
 8001c88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	3304      	adds	r3, #4
 8001c8e:	2b06      	cmp	r3, #6
 8001c90:	d902      	bls.n	8001c98 <NVIC_EncodePriority+0x30>
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	3b03      	subs	r3, #3
 8001c96:	e000      	b.n	8001c9a <NVIC_EncodePriority+0x32>
 8001c98:	2300      	movs	r3, #0
 8001c9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	43da      	mvns	r2, r3
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	401a      	ands	r2, r3
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cb0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cba:	43d9      	mvns	r1, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc0:	4313      	orrs	r3, r2
         );
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3724      	adds	r7, #36	; 0x24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bc80      	pop	{r7}
 8001cca:	4770      	bx	lr

08001ccc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cdc:	d301      	bcc.n	8001ce2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e00f      	b.n	8001d02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ce2:	4a0a      	ldr	r2, [pc, #40]	; (8001d0c <SysTick_Config+0x40>)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cea:	210f      	movs	r1, #15
 8001cec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001cf0:	f7ff ff90 	bl	8001c14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cf4:	4b05      	ldr	r3, [pc, #20]	; (8001d0c <SysTick_Config+0x40>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cfa:	4b04      	ldr	r3, [pc, #16]	; (8001d0c <SysTick_Config+0x40>)
 8001cfc:	2207      	movs	r2, #7
 8001cfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	e000e010 	.word	0xe000e010

08001d10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f7ff ff2d 	bl	8001b78 <__NVIC_SetPriorityGrouping>
}
 8001d1e:	bf00      	nop
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b086      	sub	sp, #24
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	60b9      	str	r1, [r7, #8]
 8001d30:	607a      	str	r2, [r7, #4]
 8001d32:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d34:	f7ff ff44 	bl	8001bc0 <__NVIC_GetPriorityGrouping>
 8001d38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	68b9      	ldr	r1, [r7, #8]
 8001d3e:	6978      	ldr	r0, [r7, #20]
 8001d40:	f7ff ff92 	bl	8001c68 <NVIC_EncodePriority>
 8001d44:	4602      	mov	r2, r0
 8001d46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d4a:	4611      	mov	r1, r2
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff ff61 	bl	8001c14 <__NVIC_SetPriority>
}
 8001d52:	bf00      	nop
 8001d54:	3718      	adds	r7, #24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b082      	sub	sp, #8
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	4603      	mov	r3, r0
 8001d62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff ff37 	bl	8001bdc <__NVIC_EnableIRQ>
}
 8001d6e:	bf00      	nop
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b082      	sub	sp, #8
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f7ff ffa4 	bl	8001ccc <SysTick_Config>
 8001d84:	4603      	mov	r3, r0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
	...

08001d90 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d101      	bne.n	8001da2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e08e      	b.n	8001ec0 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	461a      	mov	r2, r3
 8001da8:	4b47      	ldr	r3, [pc, #284]	; (8001ec8 <HAL_DMA_Init+0x138>)
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d80f      	bhi.n	8001dce <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	461a      	mov	r2, r3
 8001db4:	4b45      	ldr	r3, [pc, #276]	; (8001ecc <HAL_DMA_Init+0x13c>)
 8001db6:	4413      	add	r3, r2
 8001db8:	4a45      	ldr	r2, [pc, #276]	; (8001ed0 <HAL_DMA_Init+0x140>)
 8001dba:	fba2 2303 	umull	r2, r3, r2, r3
 8001dbe:	091b      	lsrs	r3, r3, #4
 8001dc0:	009a      	lsls	r2, r3, #2
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a42      	ldr	r2, [pc, #264]	; (8001ed4 <HAL_DMA_Init+0x144>)
 8001dca:	641a      	str	r2, [r3, #64]	; 0x40
 8001dcc:	e00e      	b.n	8001dec <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	4b40      	ldr	r3, [pc, #256]	; (8001ed8 <HAL_DMA_Init+0x148>)
 8001dd6:	4413      	add	r3, r2
 8001dd8:	4a3d      	ldr	r2, [pc, #244]	; (8001ed0 <HAL_DMA_Init+0x140>)
 8001dda:	fba2 2303 	umull	r2, r3, r2, r3
 8001dde:	091b      	lsrs	r3, r3, #4
 8001de0:	009a      	lsls	r2, r3, #2
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a3c      	ldr	r2, [pc, #240]	; (8001edc <HAL_DMA_Init+0x14c>)
 8001dea:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2202      	movs	r2, #2
 8001df0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	6812      	ldr	r2, [r2, #0]
 8001dfe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e06:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	6819      	ldr	r1, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	689a      	ldr	r2, [r3, #8]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	431a      	orrs	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	691b      	ldr	r3, [r3, #16]
 8001e1c:	431a      	orrs	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	431a      	orrs	r2, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	431a      	orrs	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	69db      	ldr	r3, [r3, #28]
 8001e2e:	431a      	orrs	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a1b      	ldr	r3, [r3, #32]
 8001e34:	431a      	orrs	r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 fabc 	bl	80023bc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e4c:	d102      	bne.n	8001e54 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685a      	ldr	r2, [r3, #4]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e5c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e60:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001e6a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d010      	beq.n	8001e96 <HAL_DMA_Init+0x106>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	2b04      	cmp	r3, #4
 8001e7a:	d80c      	bhi.n	8001e96 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f000 fae5 	bl	800244c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001e92:	605a      	str	r2, [r3, #4]
 8001e94:	e008      	b.n	8001ea8 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40020407 	.word	0x40020407
 8001ecc:	bffdfff8 	.word	0xbffdfff8
 8001ed0:	cccccccd 	.word	0xcccccccd
 8001ed4:	40020000 	.word	0x40020000
 8001ed8:	bffdfbf8 	.word	0xbffdfbf8
 8001edc:	40020400 	.word	0x40020400

08001ee0 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	607a      	str	r2, [r7, #4]
 8001eec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d101      	bne.n	8001f00 <HAL_DMA_Start_IT+0x20>
 8001efc:	2302      	movs	r3, #2
 8001efe:	e069      	b.n	8001fd4 <HAL_DMA_Start_IT+0xf4>
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d155      	bne.n	8001fc0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2202      	movs	r2, #2
 8001f18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f022 0201 	bic.w	r2, r2, #1
 8001f30:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	68b9      	ldr	r1, [r7, #8]
 8001f38:	68f8      	ldr	r0, [r7, #12]
 8001f3a:	f000 fa02 	bl	8002342 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d008      	beq.n	8001f58 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f042 020e 	orr.w	r2, r2, #14
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	e00f      	b.n	8001f78 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f022 0204 	bic.w	r2, r2, #4
 8001f66:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f042 020a 	orr.w	r2, r2, #10
 8001f76:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d007      	beq.n	8001f96 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f94:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d007      	beq.n	8001fae <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fac:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f042 0201 	orr.w	r2, r2, #1
 8001fbc:	601a      	str	r2, [r3, #0]
 8001fbe:	e008      	b.n	8001fd2 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2280      	movs	r2, #128	; 0x80
 8001fc4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001fd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3718      	adds	r7, #24
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d101      	bne.n	8001fee <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e04f      	b.n	800208e <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d008      	beq.n	800200c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2204      	movs	r2, #4
 8001ffe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e040      	b.n	800208e <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f022 020e 	bic.w	r2, r2, #14
 800201a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002026:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800202a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f022 0201 	bic.w	r2, r2, #1
 800203a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002040:	f003 021c 	and.w	r2, r3, #28
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002048:	2101      	movs	r1, #1
 800204a:	fa01 f202 	lsl.w	r2, r1, r2
 800204e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002058:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800205e:	2b00      	cmp	r3, #0
 8002060:	d00c      	beq.n	800207c <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800206c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002070:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800207a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	bc80      	pop	{r7}
 8002096:	4770      	bx	lr

08002098 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020a0:	2300      	movs	r3, #0
 80020a2:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d005      	beq.n	80020bc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2204      	movs	r2, #4
 80020b4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	73fb      	strb	r3, [r7, #15]
 80020ba:	e047      	b.n	800214c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f022 020e 	bic.w	r2, r2, #14
 80020ca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f022 0201 	bic.w	r2, r2, #1
 80020da:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f0:	f003 021c 	and.w	r2, r3, #28
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f8:	2101      	movs	r1, #1
 80020fa:	fa01 f202 	lsl.w	r2, r1, r2
 80020fe:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002108:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00c      	beq.n	800212c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800211c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002120:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800212a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002140:	2b00      	cmp	r3, #0
 8002142:	d003      	beq.n	800214c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	4798      	blx	r3
    }
  }
  return status;
 800214c:	7bfb      	ldrb	r3, [r7, #15]
}
 800214e:	4618      	mov	r0, r3
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
	...

08002158 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002174:	f003 031c 	and.w	r3, r3, #28
 8002178:	2204      	movs	r2, #4
 800217a:	409a      	lsls	r2, r3
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	4013      	ands	r3, r2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d027      	beq.n	80021d4 <HAL_DMA_IRQHandler+0x7c>
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	f003 0304 	and.w	r3, r3, #4
 800218a:	2b00      	cmp	r3, #0
 800218c:	d022      	beq.n	80021d4 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0320 	and.w	r3, r3, #32
 8002198:	2b00      	cmp	r3, #0
 800219a:	d107      	bne.n	80021ac <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f022 0204 	bic.w	r2, r2, #4
 80021aa:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b0:	f003 021c 	and.w	r2, r3, #28
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b8:	2104      	movs	r1, #4
 80021ba:	fa01 f202 	lsl.w	r2, r1, r2
 80021be:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f000 8081 	beq.w	80022cc <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80021d2:	e07b      	b.n	80022cc <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d8:	f003 031c 	and.w	r3, r3, #28
 80021dc:	2202      	movs	r2, #2
 80021de:	409a      	lsls	r2, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	4013      	ands	r3, r2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d03d      	beq.n	8002264 <HAL_DMA_IRQHandler+0x10c>
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d038      	beq.n	8002264 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0320 	and.w	r3, r3, #32
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d10b      	bne.n	8002218 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f022 020a 	bic.w	r2, r2, #10
 800220e:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	461a      	mov	r2, r3
 800221e:	4b2e      	ldr	r3, [pc, #184]	; (80022d8 <HAL_DMA_IRQHandler+0x180>)
 8002220:	429a      	cmp	r2, r3
 8002222:	d909      	bls.n	8002238 <HAL_DMA_IRQHandler+0xe0>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002228:	f003 031c 	and.w	r3, r3, #28
 800222c:	4a2b      	ldr	r2, [pc, #172]	; (80022dc <HAL_DMA_IRQHandler+0x184>)
 800222e:	2102      	movs	r1, #2
 8002230:	fa01 f303 	lsl.w	r3, r1, r3
 8002234:	6053      	str	r3, [r2, #4]
 8002236:	e008      	b.n	800224a <HAL_DMA_IRQHandler+0xf2>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223c:	f003 031c 	and.w	r3, r3, #28
 8002240:	4a27      	ldr	r2, [pc, #156]	; (80022e0 <HAL_DMA_IRQHandler+0x188>)
 8002242:	2102      	movs	r1, #2
 8002244:	fa01 f303 	lsl.w	r3, r1, r3
 8002248:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002256:	2b00      	cmp	r3, #0
 8002258:	d038      	beq.n	80022cc <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8002262:	e033      	b.n	80022cc <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002268:	f003 031c 	and.w	r3, r3, #28
 800226c:	2208      	movs	r2, #8
 800226e:	409a      	lsls	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	4013      	ands	r3, r2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d02a      	beq.n	80022ce <HAL_DMA_IRQHandler+0x176>
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	f003 0308 	and.w	r3, r3, #8
 800227e:	2b00      	cmp	r3, #0
 8002280:	d025      	beq.n	80022ce <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f022 020e 	bic.w	r2, r2, #14
 8002290:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002296:	f003 021c 	and.w	r2, r3, #28
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229e:	2101      	movs	r1, #1
 80022a0:	fa01 f202 	lsl.w	r2, r1, r2
 80022a4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2201      	movs	r2, #1
 80022aa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d004      	beq.n	80022ce <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80022cc:	bf00      	nop
 80022ce:	bf00      	nop
}
 80022d0:	3710      	adds	r7, #16
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	40020080 	.word	0x40020080
 80022dc:	40020400 	.word	0x40020400
 80022e0:	40020000 	.word	0x40020000

080022e4 <HAL_DMA_ConfigChannelAttributes>:
  * @param ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *        This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022ee:	2300      	movs	r3, #0
 80022f0:	72fb      	strb	r3, [r7, #11]
#if defined (CORE_CM0PLUS)
  uint32_t ccr_SECM;
#endif /* CORE_CM0PLUS */

  /* Check the DMA peripheral handle */
  if (hdma == NULL)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d103      	bne.n	8002300 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	72fb      	strb	r3, [r7, #11]
    return status;
 80022fc:	7afb      	ldrb	r3, [r7, #11]
 80022fe:	e01b      	b.n	8002338 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	f003 0310 	and.w	r3, r3, #16
 800230e:	2b00      	cmp	r3, #0
 8002310:	d00d      	beq.n	800232e <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d004      	beq.n	8002326 <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002322:	60fb      	str	r3, [r7, #12]
 8002324:	e003      	b.n	800232e <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800232c:	60fb      	str	r3, [r7, #12]
  }

#endif /* CORE_CM0PLUS */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	601a      	str	r2, [r3, #0]

  return status;
 8002336:	7afb      	ldrb	r3, [r7, #11]
}
 8002338:	4618      	mov	r0, r3
 800233a:	3714      	adds	r7, #20
 800233c:	46bd      	mov	sp, r7
 800233e:	bc80      	pop	{r7}
 8002340:	4770      	bx	lr

08002342 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002342:	b480      	push	{r7}
 8002344:	b085      	sub	sp, #20
 8002346:	af00      	add	r7, sp, #0
 8002348:	60f8      	str	r0, [r7, #12]
 800234a:	60b9      	str	r1, [r7, #8]
 800234c:	607a      	str	r2, [r7, #4]
 800234e:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002354:	68fa      	ldr	r2, [r7, #12]
 8002356:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002358:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800235e:	2b00      	cmp	r3, #0
 8002360:	d004      	beq.n	800236c <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800236a:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002370:	f003 021c 	and.w	r2, r3, #28
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002378:	2101      	movs	r1, #1
 800237a:	fa01 f202 	lsl.w	r2, r1, r2
 800237e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	2b10      	cmp	r3, #16
 800238e:	d108      	bne.n	80023a2 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68ba      	ldr	r2, [r7, #8]
 800239e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80023a0:	e007      	b.n	80023b2 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68ba      	ldr	r2, [r7, #8]
 80023a8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	60da      	str	r2, [r3, #12]
}
 80023b2:	bf00      	nop
 80023b4:	3714      	adds	r7, #20
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bc80      	pop	{r7}
 80023ba:	4770      	bx	lr

080023bc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80023bc:	b480      	push	{r7}
 80023be:	b085      	sub	sp, #20
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	461a      	mov	r2, r3
 80023ca:	4b1c      	ldr	r3, [pc, #112]	; (800243c <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d813      	bhi.n	80023f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d4:	089b      	lsrs	r3, r3, #2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80023dc:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	3b08      	subs	r3, #8
 80023ec:	4a14      	ldr	r2, [pc, #80]	; (8002440 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80023ee:	fba2 2303 	umull	r2, r3, r2, r3
 80023f2:	091b      	lsrs	r3, r3, #4
 80023f4:	60fb      	str	r3, [r7, #12]
 80023f6:	e011      	b.n	800241c <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fc:	089b      	lsrs	r3, r3, #2
 80023fe:	009a      	lsls	r2, r3, #2
 8002400:	4b10      	ldr	r3, [pc, #64]	; (8002444 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8002402:	4413      	add	r3, r2
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	b2db      	uxtb	r3, r3
 800240e:	3b08      	subs	r3, #8
 8002410:	4a0b      	ldr	r2, [pc, #44]	; (8002440 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8002412:	fba2 2303 	umull	r2, r3, r2, r3
 8002416:	091b      	lsrs	r3, r3, #4
 8002418:	3307      	adds	r3, #7
 800241a:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4a0a      	ldr	r2, [pc, #40]	; (8002448 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8002420:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	f003 031f 	and.w	r3, r3, #31
 8002428:	2201      	movs	r2, #1
 800242a:	409a      	lsls	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002430:	bf00      	nop
 8002432:	3714      	adds	r7, #20
 8002434:	46bd      	mov	sp, r7
 8002436:	bc80      	pop	{r7}
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	40020407 	.word	0x40020407
 8002440:	cccccccd 	.word	0xcccccccd
 8002444:	4002081c 	.word	0x4002081c
 8002448:	40020880 	.word	0x40020880

0800244c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800245c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800245e:	68fa      	ldr	r2, [r7, #12]
 8002460:	4b0a      	ldr	r3, [pc, #40]	; (800248c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002462:	4413      	add	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	461a      	mov	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a08      	ldr	r2, [pc, #32]	; (8002490 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002470:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	3b01      	subs	r3, #1
 8002476:	f003 0303 	and.w	r3, r3, #3
 800247a:	2201      	movs	r2, #1
 800247c:	409a      	lsls	r2, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002482:	bf00      	nop
 8002484:	3714      	adds	r7, #20
 8002486:	46bd      	mov	sp, r7
 8002488:	bc80      	pop	{r7}
 800248a:	4770      	bx	lr
 800248c:	1000823f 	.word	0x1000823f
 8002490:	40020940 	.word	0x40020940

08002494 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002494:	b480      	push	{r7}
 8002496:	b087      	sub	sp, #28
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800249e:	2300      	movs	r3, #0
 80024a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024a2:	e140      	b.n	8002726 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	2101      	movs	r1, #1
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	fa01 f303 	lsl.w	r3, r1, r3
 80024b0:	4013      	ands	r3, r2
 80024b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	f000 8132 	beq.w	8002720 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f003 0303 	and.w	r3, r3, #3
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d005      	beq.n	80024d4 <HAL_GPIO_Init+0x40>
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f003 0303 	and.w	r3, r3, #3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d130      	bne.n	8002536 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	2203      	movs	r2, #3
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	43db      	mvns	r3, r3
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	4013      	ands	r3, r2
 80024ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	68da      	ldr	r2, [r3, #12]
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	693a      	ldr	r2, [r7, #16]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800250a:	2201      	movs	r2, #1
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	43db      	mvns	r3, r3
 8002514:	693a      	ldr	r2, [r7, #16]
 8002516:	4013      	ands	r3, r2
 8002518:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	091b      	lsrs	r3, r3, #4
 8002520:	f003 0201 	and.w	r2, r3, #1
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	4313      	orrs	r3, r2
 800252e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f003 0303 	and.w	r3, r3, #3
 800253e:	2b03      	cmp	r3, #3
 8002540:	d017      	beq.n	8002572 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	2203      	movs	r2, #3
 800254e:	fa02 f303 	lsl.w	r3, r2, r3
 8002552:	43db      	mvns	r3, r3
 8002554:	693a      	ldr	r2, [r7, #16]
 8002556:	4013      	ands	r3, r2
 8002558:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	689a      	ldr	r2, [r3, #8]
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	fa02 f303 	lsl.w	r3, r2, r3
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	4313      	orrs	r3, r2
 800256a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f003 0303 	and.w	r3, r3, #3
 800257a:	2b02      	cmp	r3, #2
 800257c:	d123      	bne.n	80025c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	08da      	lsrs	r2, r3, #3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	3208      	adds	r2, #8
 8002586:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800258a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	f003 0307 	and.w	r3, r3, #7
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	220f      	movs	r2, #15
 8002596:	fa02 f303 	lsl.w	r3, r2, r3
 800259a:	43db      	mvns	r3, r3
 800259c:	693a      	ldr	r2, [r7, #16]
 800259e:	4013      	ands	r3, r2
 80025a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	691a      	ldr	r2, [r3, #16]
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	f003 0307 	and.w	r3, r3, #7
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	fa02 f303 	lsl.w	r3, r2, r3
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	08da      	lsrs	r2, r3, #3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	3208      	adds	r2, #8
 80025c0:	6939      	ldr	r1, [r7, #16]
 80025c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	2203      	movs	r2, #3
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	43db      	mvns	r3, r3
 80025d8:	693a      	ldr	r2, [r7, #16]
 80025da:	4013      	ands	r3, r2
 80025dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f003 0203 	and.w	r2, r3, #3
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	fa02 f303 	lsl.w	r3, r2, r3
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	693a      	ldr	r2, [r7, #16]
 80025f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002602:	2b00      	cmp	r3, #0
 8002604:	f000 808c 	beq.w	8002720 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002608:	4a4e      	ldr	r2, [pc, #312]	; (8002744 <HAL_GPIO_Init+0x2b0>)
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	089b      	lsrs	r3, r3, #2
 800260e:	3302      	adds	r3, #2
 8002610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002614:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	f003 0303 	and.w	r3, r3, #3
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	2207      	movs	r2, #7
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	43db      	mvns	r3, r3
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	4013      	ands	r3, r2
 800262a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002632:	d00d      	beq.n	8002650 <HAL_GPIO_Init+0x1bc>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4a44      	ldr	r2, [pc, #272]	; (8002748 <HAL_GPIO_Init+0x2b4>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d007      	beq.n	800264c <HAL_GPIO_Init+0x1b8>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	4a43      	ldr	r2, [pc, #268]	; (800274c <HAL_GPIO_Init+0x2b8>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d101      	bne.n	8002648 <HAL_GPIO_Init+0x1b4>
 8002644:	2302      	movs	r3, #2
 8002646:	e004      	b.n	8002652 <HAL_GPIO_Init+0x1be>
 8002648:	2307      	movs	r3, #7
 800264a:	e002      	b.n	8002652 <HAL_GPIO_Init+0x1be>
 800264c:	2301      	movs	r3, #1
 800264e:	e000      	b.n	8002652 <HAL_GPIO_Init+0x1be>
 8002650:	2300      	movs	r3, #0
 8002652:	697a      	ldr	r2, [r7, #20]
 8002654:	f002 0203 	and.w	r2, r2, #3
 8002658:	0092      	lsls	r2, r2, #2
 800265a:	4093      	lsls	r3, r2
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	4313      	orrs	r3, r2
 8002660:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002662:	4938      	ldr	r1, [pc, #224]	; (8002744 <HAL_GPIO_Init+0x2b0>)
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	089b      	lsrs	r3, r3, #2
 8002668:	3302      	adds	r3, #2
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002670:	4b37      	ldr	r3, [pc, #220]	; (8002750 <HAL_GPIO_Init+0x2bc>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	43db      	mvns	r3, r3
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	4013      	ands	r3, r2
 800267e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d003      	beq.n	8002694 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 800268c:	693a      	ldr	r2, [r7, #16]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	4313      	orrs	r3, r2
 8002692:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002694:	4a2e      	ldr	r2, [pc, #184]	; (8002750 <HAL_GPIO_Init+0x2bc>)
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800269a:	4b2d      	ldr	r3, [pc, #180]	; (8002750 <HAL_GPIO_Init+0x2bc>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	43db      	mvns	r3, r3
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	4013      	ands	r3, r2
 80026a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d003      	beq.n	80026be <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80026be:	4a24      	ldr	r2, [pc, #144]	; (8002750 <HAL_GPIO_Init+0x2bc>)
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80026c4:	4b22      	ldr	r3, [pc, #136]	; (8002750 <HAL_GPIO_Init+0x2bc>)
 80026c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026ca:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	43db      	mvns	r3, r3
 80026d0:	693a      	ldr	r2, [r7, #16]
 80026d2:	4013      	ands	r3, r2
 80026d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d003      	beq.n	80026ea <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80026ea:	4a19      	ldr	r2, [pc, #100]	; (8002750 <HAL_GPIO_Init+0x2bc>)
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80026f2:	4b17      	ldr	r3, [pc, #92]	; (8002750 <HAL_GPIO_Init+0x2bc>)
 80026f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026f8:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	43db      	mvns	r3, r3
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	4013      	ands	r3, r2
 8002702:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d003      	beq.n	8002718 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	4313      	orrs	r3, r2
 8002716:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8002718:	4a0d      	ldr	r2, [pc, #52]	; (8002750 <HAL_GPIO_Init+0x2bc>)
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	3301      	adds	r3, #1
 8002724:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	fa22 f303 	lsr.w	r3, r2, r3
 8002730:	2b00      	cmp	r3, #0
 8002732:	f47f aeb7 	bne.w	80024a4 <HAL_GPIO_Init+0x10>
  }
}
 8002736:	bf00      	nop
 8002738:	bf00      	nop
 800273a:	371c      	adds	r7, #28
 800273c:	46bd      	mov	sp, r7
 800273e:	bc80      	pop	{r7}
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	40010000 	.word	0x40010000
 8002748:	48000400 	.word	0x48000400
 800274c:	48000800 	.word	0x48000800
 8002750:	58000800 	.word	0x58000800

08002754 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	460b      	mov	r3, r1
 800275e:	807b      	strh	r3, [r7, #2]
 8002760:	4613      	mov	r3, r2
 8002762:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002764:	787b      	ldrb	r3, [r7, #1]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d003      	beq.n	8002772 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800276a:	887a      	ldrh	r2, [r7, #2]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002770:	e002      	b.n	8002778 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002772:	887a      	ldrh	r2, [r7, #2]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002778:	bf00      	nop
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	bc80      	pop	{r7}
 8002780:	4770      	bx	lr
	...

08002784 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002788:	4b04      	ldr	r3, [pc, #16]	; (800279c <HAL_PWR_EnableBkUpAccess+0x18>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a03      	ldr	r2, [pc, #12]	; (800279c <HAL_PWR_EnableBkUpAccess+0x18>)
 800278e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002792:	6013      	str	r3, [r2, #0]
}
 8002794:	bf00      	nop
 8002796:	46bd      	mov	sp, r7
 8002798:	bc80      	pop	{r7}
 800279a:	4770      	bx	lr
 800279c:	58000400 	.word	0x58000400

080027a0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80027a4:	4b03      	ldr	r3, [pc, #12]	; (80027b4 <HAL_PWREx_GetVoltageRange+0x14>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc80      	pop	{r7}
 80027b2:	4770      	bx	lr
 80027b4:	58000400 	.word	0x58000400

080027b8 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80027bc:	4b06      	ldr	r3, [pc, #24]	; (80027d8 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027c8:	d101      	bne.n	80027ce <LL_PWR_IsEnabledBkUpAccess+0x16>
 80027ca:	2301      	movs	r3, #1
 80027cc:	e000      	b.n	80027d0 <LL_PWR_IsEnabledBkUpAccess+0x18>
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bc80      	pop	{r7}
 80027d6:	4770      	bx	lr
 80027d8:	58000400 	.word	0x58000400

080027dc <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80027e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027ee:	6013      	str	r3, [r2, #0]
}
 80027f0:	bf00      	nop
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bc80      	pop	{r7}
 80027f6:	4770      	bx	lr

080027f8 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80027fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002806:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800280a:	6013      	str	r3, [r2, #0]
}
 800280c:	bf00      	nop
 800280e:	46bd      	mov	sp, r7
 8002810:	bc80      	pop	{r7}
 8002812:	4770      	bx	lr

08002814 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002818:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002822:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002826:	d101      	bne.n	800282c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002828:	2301      	movs	r3, #1
 800282a:	e000      	b.n	800282e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	46bd      	mov	sp, r7
 8002832:	bc80      	pop	{r7}
 8002834:	4770      	bx	lr

08002836 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8002836:	b480      	push	{r7}
 8002838:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800283a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002848:	6013      	str	r3, [r2, #0]
}
 800284a:	bf00      	nop
 800284c:	46bd      	mov	sp, r7
 800284e:	bc80      	pop	{r7}
 8002850:	4770      	bx	lr

08002852 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8002852:	b480      	push	{r7}
 8002854:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002856:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002860:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002864:	6013      	str	r3, [r2, #0]
}
 8002866:	bf00      	nop
 8002868:	46bd      	mov	sp, r7
 800286a:	bc80      	pop	{r7}
 800286c:	4770      	bx	lr

0800286e <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800286e:	b480      	push	{r7}
 8002870:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002872:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800287c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002880:	d101      	bne.n	8002886 <LL_RCC_HSE_IsReady+0x18>
 8002882:	2301      	movs	r3, #1
 8002884:	e000      	b.n	8002888 <LL_RCC_HSE_IsReady+0x1a>
 8002886:	2300      	movs	r3, #0
}
 8002888:	4618      	mov	r0, r3
 800288a:	46bd      	mov	sp, r7
 800288c:	bc80      	pop	{r7}
 800288e:	4770      	bx	lr

08002890 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002894:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800289e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028a2:	6013      	str	r3, [r2, #0]
}
 80028a4:	bf00      	nop
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bc80      	pop	{r7}
 80028aa:	4770      	bx	lr

080028ac <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80028b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028be:	6013      	str	r3, [r2, #0]
}
 80028c0:	bf00      	nop
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bc80      	pop	{r7}
 80028c6:	4770      	bx	lr

080028c8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80028cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028da:	d101      	bne.n	80028e0 <LL_RCC_HSI_IsReady+0x18>
 80028dc:	2301      	movs	r3, #1
 80028de:	e000      	b.n	80028e2 <LL_RCC_HSI_IsReady+0x1a>
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bc80      	pop	{r7}
 80028e8:	4770      	bx	lr

080028ea <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80028ea:	b480      	push	{r7}
 80028ec:	b083      	sub	sp, #12
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80028f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	061b      	lsls	r3, r3, #24
 8002900:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002904:	4313      	orrs	r3, r2
 8002906:	604b      	str	r3, [r1, #4]
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	bc80      	pop	{r7}
 8002910:	4770      	bx	lr

08002912 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002912:	b480      	push	{r7}
 8002914:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002916:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800291a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	2b02      	cmp	r3, #2
 8002924:	d101      	bne.n	800292a <LL_RCC_LSE_IsReady+0x18>
 8002926:	2301      	movs	r3, #1
 8002928:	e000      	b.n	800292c <LL_RCC_LSE_IsReady+0x1a>
 800292a:	2300      	movs	r3, #0
}
 800292c:	4618      	mov	r0, r3
 800292e:	46bd      	mov	sp, r7
 8002930:	bc80      	pop	{r7}
 8002932:	4770      	bx	lr

08002934 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8002938:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800293c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002940:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002944:	f043 0301 	orr.w	r3, r3, #1
 8002948:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800294c:	bf00      	nop
 800294e:	46bd      	mov	sp, r7
 8002950:	bc80      	pop	{r7}
 8002952:	4770      	bx	lr

08002954 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002958:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800295c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002960:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002964:	f023 0301 	bic.w	r3, r3, #1
 8002968:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800296c:	bf00      	nop
 800296e:	46bd      	mov	sp, r7
 8002970:	bc80      	pop	{r7}
 8002972:	4770      	bx	lr

08002974 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002978:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800297c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002980:	f003 0302 	and.w	r3, r3, #2
 8002984:	2b02      	cmp	r3, #2
 8002986:	d101      	bne.n	800298c <LL_RCC_LSI_IsReady+0x18>
 8002988:	2301      	movs	r3, #1
 800298a:	e000      	b.n	800298e <LL_RCC_LSI_IsReady+0x1a>
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	46bd      	mov	sp, r7
 8002992:	bc80      	pop	{r7}
 8002994:	4770      	bx	lr

08002996 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002996:	b480      	push	{r7}
 8002998:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800299a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029a4:	f043 0301 	orr.w	r3, r3, #1
 80029a8:	6013      	str	r3, [r2, #0]
}
 80029aa:	bf00      	nop
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bc80      	pop	{r7}
 80029b0:	4770      	bx	lr

080029b2 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80029b2:	b480      	push	{r7}
 80029b4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80029b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029c0:	f023 0301 	bic.w	r3, r3, #1
 80029c4:	6013      	str	r3, [r2, #0]
}
 80029c6:	bf00      	nop
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bc80      	pop	{r7}
 80029cc:	4770      	bx	lr

080029ce <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80029ce:	b480      	push	{r7}
 80029d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80029d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0302 	and.w	r3, r3, #2
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d101      	bne.n	80029e4 <LL_RCC_MSI_IsReady+0x16>
 80029e0:	2301      	movs	r3, #1
 80029e2:	e000      	b.n	80029e6 <LL_RCC_MSI_IsReady+0x18>
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bc80      	pop	{r7}
 80029ec:	4770      	bx	lr

080029ee <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 80029ee:	b480      	push	{r7}
 80029f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80029f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0308 	and.w	r3, r3, #8
 80029fc:	2b08      	cmp	r3, #8
 80029fe:	d101      	bne.n	8002a04 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8002a00:	2301      	movs	r3, #1
 8002a02:	e000      	b.n	8002a06 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bc80      	pop	{r7}
 8002a0c:	4770      	bx	lr

08002a0e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8002a0e:	b480      	push	{r7}
 8002a10:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8002a12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bc80      	pop	{r7}
 8002a22:	4770      	bx	lr

08002a24 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002a28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a30:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bc80      	pop	{r7}
 8002a3a:	4770      	bx	lr

08002a3c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002a44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	021b      	lsls	r3, r3, #8
 8002a52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a56:	4313      	orrs	r3, r2
 8002a58:	604b      	str	r3, [r1, #4]
}
 8002a5a:	bf00      	nop
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bc80      	pop	{r7}
 8002a62:	4770      	bx	lr

08002a64 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002a6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f023 0203 	bic.w	r2, r3, #3
 8002a76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	608b      	str	r3, [r1, #8]
}
 8002a80:	bf00      	nop
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bc80      	pop	{r7}
 8002a88:	4770      	bx	lr

08002a8a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002a8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f003 030c 	and.w	r3, r3, #12
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bc80      	pop	{r7}
 8002a9e:	4770      	bx	lr

08002aa0 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002aa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ab2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	608b      	str	r3, [r1, #8]
}
 8002abc:	bf00      	nop
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bc80      	pop	{r7}
 8002ac4:	4770      	bx	lr

08002ac6 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	b083      	sub	sp, #12
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002ace:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ad2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002ad6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ada:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002ae6:	bf00      	nop
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bc80      	pop	{r7}
 8002aee:	4770      	bx	lr

08002af0 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002af8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002afc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002b00:	f023 020f 	bic.w	r2, r3, #15
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	091b      	lsrs	r3, r3, #4
 8002b08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002b12:	bf00      	nop
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bc80      	pop	{r7}
 8002b1a:	4770      	bx	lr

08002b1c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002b24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	608b      	str	r3, [r1, #8]
}
 8002b38:	bf00      	nop
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bc80      	pop	{r7}
 8002b40:	4770      	bx	lr

08002b42 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002b42:	b480      	push	{r7}
 8002b44:	b083      	sub	sp, #12
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002b4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	608b      	str	r3, [r1, #8]
}
 8002b5e:	bf00      	nop
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bc80      	pop	{r7}
 8002b66:	4770      	bx	lr

08002b68 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002b6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bc80      	pop	{r7}
 8002b7c:	4770      	bx	lr

08002b7e <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8002b7e:	b480      	push	{r7}
 8002b80:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002b82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b86:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002b8a:	011b      	lsls	r3, r3, #4
 8002b8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bc80      	pop	{r7}
 8002b96:	4770      	bx	lr

08002b98 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002b9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bc80      	pop	{r7}
 8002bac:	4770      	bx	lr

08002bae <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002bae:	b480      	push	{r7}
 8002bb0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002bb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bc80      	pop	{r7}
 8002bc2:	4770      	bx	lr

08002bc4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002bc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bd6:	6013      	str	r3, [r2, #0]
}
 8002bd8:	bf00      	nop
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bc80      	pop	{r7}
 8002bde:	4770      	bx	lr

08002be0 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002be4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bf2:	6013      	str	r3, [r2, #0]
}
 8002bf4:	bf00      	nop
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bc80      	pop	{r7}
 8002bfa:	4770      	bx	lr

08002bfc <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002c00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c0e:	d101      	bne.n	8002c14 <LL_RCC_PLL_IsReady+0x18>
 8002c10:	2301      	movs	r3, #1
 8002c12:	e000      	b.n	8002c16 <LL_RCC_PLL_IsReady+0x1a>
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bc80      	pop	{r7}
 8002c1c:	4770      	bx	lr

08002c1e <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002c22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	0a1b      	lsrs	r3, r3, #8
 8002c2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bc80      	pop	{r7}
 8002c34:	4770      	bx	lr

08002c36 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002c36:	b480      	push	{r7}
 8002c38:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002c3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bc80      	pop	{r7}
 8002c4a:	4770      	bx	lr

08002c4c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002c50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bc80      	pop	{r7}
 8002c60:	4770      	bx	lr

08002c62 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002c62:	b480      	push	{r7}
 8002c64:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002c66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	f003 0303 	and.w	r3, r3, #3
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bc80      	pop	{r7}
 8002c76:	4770      	bx	lr

08002c78 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002c7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c8a:	d101      	bne.n	8002c90 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e000      	b.n	8002c92 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bc80      	pop	{r7}
 8002c98:	4770      	bx	lr

08002c9a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002c9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ca2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002caa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002cae:	d101      	bne.n	8002cb4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e000      	b.n	8002cb6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bc80      	pop	{r7}
 8002cbc:	4770      	bx	lr

08002cbe <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002cc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cc6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002cca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cd2:	d101      	bne.n	8002cd8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e000      	b.n	8002cda <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bc80      	pop	{r7}
 8002ce0:	4770      	bx	lr

08002ce2 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002ce6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002cf4:	d101      	bne.n	8002cfa <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e000      	b.n	8002cfc <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bc80      	pop	{r7}
 8002d02:	4770      	bx	lr

08002d04 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002d08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d12:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d16:	d101      	bne.n	8002d1c <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e000      	b.n	8002d1e <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bc80      	pop	{r7}
 8002d24:	4770      	bx	lr
	...

08002d28 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b088      	sub	sp, #32
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e36f      	b.n	800341a <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d3a:	f7ff fea6 	bl	8002a8a <LL_RCC_GetSysClkSource>
 8002d3e:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d40:	f7ff ff8f 	bl	8002c62 <LL_RCC_PLL_GetMainSource>
 8002d44:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0320 	and.w	r3, r3, #32
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	f000 80c4 	beq.w	8002edc <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d005      	beq.n	8002d66 <HAL_RCC_OscConfig+0x3e>
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	2b0c      	cmp	r3, #12
 8002d5e:	d176      	bne.n	8002e4e <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d173      	bne.n	8002e4e <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e353      	b.n	800341a <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0308 	and.w	r3, r3, #8
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d005      	beq.n	8002d90 <HAL_RCC_OscConfig+0x68>
 8002d84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d8e:	e006      	b.n	8002d9e <HAL_RCC_OscConfig+0x76>
 8002d90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d98:	091b      	lsrs	r3, r3, #4
 8002d9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d222      	bcs.n	8002de8 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da6:	4618      	mov	r0, r3
 8002da8:	f000 fd5a 	bl	8003860 <RCC_SetFlashLatencyFromMSIRange>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e331      	b.n	800341a <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002db6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dc0:	f043 0308 	orr.w	r3, r3, #8
 8002dc4:	6013      	str	r3, [r2, #0]
 8002dc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7ff fe2b 	bl	8002a3c <LL_RCC_MSI_SetCalibTrimming>
 8002de6:	e021      	b.n	8002e2c <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002de8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002df2:	f043 0308 	orr.w	r3, r3, #8
 8002df6:	6013      	str	r3, [r2, #0]
 8002df8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7ff fe12 	bl	8002a3c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f000 fd1f 	bl	8003860 <RCC_SetFlashLatencyFromMSIRange>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d001      	beq.n	8002e2c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e2f6      	b.n	800341a <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002e2c:	f000 fce0 	bl	80037f0 <HAL_RCC_GetHCLKFreq>
 8002e30:	4603      	mov	r3, r0
 8002e32:	4aa7      	ldr	r2, [pc, #668]	; (80030d0 <HAL_RCC_OscConfig+0x3a8>)
 8002e34:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8002e36:	4ba7      	ldr	r3, [pc, #668]	; (80030d4 <HAL_RCC_OscConfig+0x3ac>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7fe fe50 	bl	8001ae0 <HAL_InitTick>
 8002e40:	4603      	mov	r3, r0
 8002e42:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8002e44:	7cfb      	ldrb	r3, [r7, #19]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d047      	beq.n	8002eda <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8002e4a:	7cfb      	ldrb	r3, [r7, #19]
 8002e4c:	e2e5      	b.n	800341a <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a1b      	ldr	r3, [r3, #32]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d02c      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e56:	f7ff fd9e 	bl	8002996 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e5a:	f7fe faf5 	bl	8001448 <HAL_GetTick>
 8002e5e:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002e60:	e008      	b.n	8002e74 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e62:	f7fe faf1 	bl	8001448 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d901      	bls.n	8002e74 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e2d2      	b.n	800341a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002e74:	f7ff fdab 	bl	80029ce <LL_RCC_MSI_IsReady>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d0f1      	beq.n	8002e62 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e88:	f043 0308 	orr.w	r3, r3, #8
 8002e8c:	6013      	str	r3, [r2, #0]
 8002e8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7ff fdc7 	bl	8002a3c <LL_RCC_MSI_SetCalibTrimming>
 8002eae:	e015      	b.n	8002edc <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002eb0:	f7ff fd7f 	bl	80029b2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002eb4:	f7fe fac8 	bl	8001448 <HAL_GetTick>
 8002eb8:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002eba:	e008      	b.n	8002ece <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ebc:	f7fe fac4 	bl	8001448 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e2a5      	b.n	800341a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002ece:	f7ff fd7e 	bl	80029ce <LL_RCC_MSI_IsReady>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1f1      	bne.n	8002ebc <HAL_RCC_OscConfig+0x194>
 8002ed8:	e000      	b.n	8002edc <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002eda:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d058      	beq.n	8002f9a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	2b08      	cmp	r3, #8
 8002eec:	d005      	beq.n	8002efa <HAL_RCC_OscConfig+0x1d2>
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	2b0c      	cmp	r3, #12
 8002ef2:	d108      	bne.n	8002f06 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	2b03      	cmp	r3, #3
 8002ef8:	d105      	bne.n	8002f06 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d14b      	bne.n	8002f9a <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e289      	b.n	800341a <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8002f06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f24:	d102      	bne.n	8002f2c <HAL_RCC_OscConfig+0x204>
 8002f26:	f7ff fc86 	bl	8002836 <LL_RCC_HSE_Enable>
 8002f2a:	e00d      	b.n	8002f48 <HAL_RCC_OscConfig+0x220>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002f34:	d104      	bne.n	8002f40 <HAL_RCC_OscConfig+0x218>
 8002f36:	f7ff fc51 	bl	80027dc <LL_RCC_HSE_EnableTcxo>
 8002f3a:	f7ff fc7c 	bl	8002836 <LL_RCC_HSE_Enable>
 8002f3e:	e003      	b.n	8002f48 <HAL_RCC_OscConfig+0x220>
 8002f40:	f7ff fc87 	bl	8002852 <LL_RCC_HSE_Disable>
 8002f44:	f7ff fc58 	bl	80027f8 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d012      	beq.n	8002f76 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f50:	f7fe fa7a 	bl	8001448 <HAL_GetTick>
 8002f54:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002f56:	e008      	b.n	8002f6a <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f58:	f7fe fa76 	bl	8001448 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b64      	cmp	r3, #100	; 0x64
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e257      	b.n	800341a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002f6a:	f7ff fc80 	bl	800286e <LL_RCC_HSE_IsReady>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d0f1      	beq.n	8002f58 <HAL_RCC_OscConfig+0x230>
 8002f74:	e011      	b.n	8002f9a <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f76:	f7fe fa67 	bl	8001448 <HAL_GetTick>
 8002f7a:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002f7c:	e008      	b.n	8002f90 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f7e:	f7fe fa63 	bl	8001448 <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	2b64      	cmp	r3, #100	; 0x64
 8002f8a:	d901      	bls.n	8002f90 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e244      	b.n	800341a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002f90:	f7ff fc6d 	bl	800286e <LL_RCC_HSE_IsReady>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1f1      	bne.n	8002f7e <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d046      	beq.n	8003034 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	2b04      	cmp	r3, #4
 8002faa:	d005      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x290>
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	2b0c      	cmp	r3, #12
 8002fb0:	d10e      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d10b      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d101      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e22a      	b.n	800341a <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	695b      	ldr	r3, [r3, #20]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7ff fc8e 	bl	80028ea <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002fce:	e031      	b.n	8003034 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d019      	beq.n	800300c <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fd8:	f7ff fc5a 	bl	8002890 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fdc:	f7fe fa34 	bl	8001448 <HAL_GetTick>
 8002fe0:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fe4:	f7fe fa30 	bl	8001448 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e211      	b.n	800341a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002ff6:	f7ff fc67 	bl	80028c8 <LL_RCC_HSI_IsReady>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d0f1      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	695b      	ldr	r3, [r3, #20]
 8003004:	4618      	mov	r0, r3
 8003006:	f7ff fc70 	bl	80028ea <LL_RCC_HSI_SetCalibTrimming>
 800300a:	e013      	b.n	8003034 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800300c:	f7ff fc4e 	bl	80028ac <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003010:	f7fe fa1a 	bl	8001448 <HAL_GetTick>
 8003014:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003016:	e008      	b.n	800302a <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003018:	f7fe fa16 	bl	8001448 <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b02      	cmp	r3, #2
 8003024:	d901      	bls.n	800302a <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e1f7      	b.n	800341a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 800302a:	f7ff fc4d 	bl	80028c8 <LL_RCC_HSI_IsReady>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d1f1      	bne.n	8003018 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0308 	and.w	r3, r3, #8
 800303c:	2b00      	cmp	r3, #0
 800303e:	d06e      	beq.n	800311e <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d056      	beq.n	80030f6 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8003048:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800304c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003050:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	69da      	ldr	r2, [r3, #28]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f003 0310 	and.w	r3, r3, #16
 800305c:	429a      	cmp	r2, r3
 800305e:	d031      	beq.n	80030c4 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d006      	beq.n	8003078 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003070:	2b00      	cmp	r3, #0
 8003072:	d101      	bne.n	8003078 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e1d0      	b.n	800341a <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	2b00      	cmp	r3, #0
 8003080:	d013      	beq.n	80030aa <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8003082:	f7ff fc67 	bl	8002954 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003086:	f7fe f9df 	bl	8001448 <HAL_GetTick>
 800308a:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 800308c:	e008      	b.n	80030a0 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800308e:	f7fe f9db 	bl	8001448 <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	2b11      	cmp	r3, #17
 800309a:	d901      	bls.n	80030a0 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e1bc      	b.n	800341a <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 80030a0:	f7ff fc68 	bl	8002974 <LL_RCC_LSI_IsReady>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1f1      	bne.n	800308e <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80030aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030b2:	f023 0210 	bic.w	r2, r3, #16
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	69db      	ldr	r3, [r3, #28]
 80030ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030be:	4313      	orrs	r3, r2
 80030c0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030c4:	f7ff fc36 	bl	8002934 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030c8:	f7fe f9be 	bl	8001448 <HAL_GetTick>
 80030cc:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80030ce:	e00c      	b.n	80030ea <HAL_RCC_OscConfig+0x3c2>
 80030d0:	20000004 	.word	0x20000004
 80030d4:	20000008 	.word	0x20000008
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030d8:	f7fe f9b6 	bl	8001448 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b11      	cmp	r3, #17
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e197      	b.n	800341a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 80030ea:	f7ff fc43 	bl	8002974 <LL_RCC_LSI_IsReady>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d0f1      	beq.n	80030d8 <HAL_RCC_OscConfig+0x3b0>
 80030f4:	e013      	b.n	800311e <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030f6:	f7ff fc2d 	bl	8002954 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030fa:	f7fe f9a5 	bl	8001448 <HAL_GetTick>
 80030fe:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8003100:	e008      	b.n	8003114 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003102:	f7fe f9a1 	bl	8001448 <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	2b11      	cmp	r3, #17
 800310e:	d901      	bls.n	8003114 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e182      	b.n	800341a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8003114:	f7ff fc2e 	bl	8002974 <LL_RCC_LSI_IsReady>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1f1      	bne.n	8003102 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0304 	and.w	r3, r3, #4
 8003126:	2b00      	cmp	r3, #0
 8003128:	f000 80d8 	beq.w	80032dc <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800312c:	f7ff fb44 	bl	80027b8 <LL_PWR_IsEnabledBkUpAccess>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d113      	bne.n	800315e <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003136:	f7ff fb25 	bl	8002784 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800313a:	f7fe f985 	bl	8001448 <HAL_GetTick>
 800313e:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003140:	e008      	b.n	8003154 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003142:	f7fe f981 	bl	8001448 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	2b02      	cmp	r3, #2
 800314e:	d901      	bls.n	8003154 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e162      	b.n	800341a <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003154:	f7ff fb30 	bl	80027b8 <LL_PWR_IsEnabledBkUpAccess>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d0f1      	beq.n	8003142 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d07b      	beq.n	800325e <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	2b85      	cmp	r3, #133	; 0x85
 800316c:	d003      	beq.n	8003176 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	2b05      	cmp	r3, #5
 8003174:	d109      	bne.n	800318a <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003176:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800317a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800317e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003182:	f043 0304 	orr.w	r3, r3, #4
 8003186:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800318a:	f7fe f95d 	bl	8001448 <HAL_GetTick>
 800318e:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003190:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003198:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800319c:	f043 0301 	orr.w	r3, r3, #1
 80031a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80031a4:	e00a      	b.n	80031bc <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031a6:	f7fe f94f 	bl	8001448 <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d901      	bls.n	80031bc <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e12e      	b.n	800341a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 80031bc:	f7ff fba9 	bl	8002912 <LL_RCC_LSE_IsReady>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d0ef      	beq.n	80031a6 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	2b81      	cmp	r3, #129	; 0x81
 80031cc:	d003      	beq.n	80031d6 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	2b85      	cmp	r3, #133	; 0x85
 80031d4:	d121      	bne.n	800321a <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d6:	f7fe f937 	bl	8001448 <HAL_GetTick>
 80031da:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80031dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80031f0:	e00a      	b.n	8003208 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031f2:	f7fe f929 	bl	8001448 <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003200:	4293      	cmp	r3, r2
 8003202:	d901      	bls.n	8003208 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e108      	b.n	800341a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003208:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800320c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003210:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003214:	2b00      	cmp	r3, #0
 8003216:	d0ec      	beq.n	80031f2 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8003218:	e060      	b.n	80032dc <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800321a:	f7fe f915 	bl	8001448 <HAL_GetTick>
 800321e:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003228:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800322c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003230:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003234:	e00a      	b.n	800324c <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003236:	f7fe f907 	bl	8001448 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	f241 3288 	movw	r2, #5000	; 0x1388
 8003244:	4293      	cmp	r3, r2
 8003246:	d901      	bls.n	800324c <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e0e6      	b.n	800341a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800324c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003254:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003258:	2b00      	cmp	r3, #0
 800325a:	d1ec      	bne.n	8003236 <HAL_RCC_OscConfig+0x50e>
 800325c:	e03e      	b.n	80032dc <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800325e:	f7fe f8f3 	bl	8001448 <HAL_GetTick>
 8003262:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003264:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800326c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003270:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003274:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003278:	e00a      	b.n	8003290 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800327a:	f7fe f8e5 	bl	8001448 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	f241 3288 	movw	r2, #5000	; 0x1388
 8003288:	4293      	cmp	r3, r2
 800328a:	d901      	bls.n	8003290 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e0c4      	b.n	800341a <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003290:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003298:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800329c:	2b00      	cmp	r3, #0
 800329e:	d1ec      	bne.n	800327a <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032a0:	f7fe f8d2 	bl	8001448 <HAL_GetTick>
 80032a4:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80032a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032b2:	f023 0301 	bic.w	r3, r3, #1
 80032b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80032ba:	e00a      	b.n	80032d2 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032bc:	f7fe f8c4 	bl	8001448 <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e0a3      	b.n	800341a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 80032d2:	f7ff fb1e 	bl	8002912 <LL_RCC_LSE_IsReady>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d1ef      	bne.n	80032bc <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	f000 8099 	beq.w	8003418 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	2b0c      	cmp	r3, #12
 80032ea:	d06c      	beq.n	80033c6 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d14b      	bne.n	800338c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032f4:	f7ff fc74 	bl	8002be0 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f8:	f7fe f8a6 	bl	8001448 <HAL_GetTick>
 80032fc:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80032fe:	e008      	b.n	8003312 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003300:	f7fe f8a2 	bl	8001448 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b0a      	cmp	r3, #10
 800330c:	d901      	bls.n	8003312 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e083      	b.n	800341a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8003312:	f7ff fc73 	bl	8002bfc <LL_RCC_PLL_IsReady>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d1f1      	bne.n	8003300 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800331c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003320:	68da      	ldr	r2, [r3, #12]
 8003322:	4b40      	ldr	r3, [pc, #256]	; (8003424 <HAL_RCC_OscConfig+0x6fc>)
 8003324:	4013      	ands	r3, r2
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800332e:	4311      	orrs	r1, r2
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003334:	0212      	lsls	r2, r2, #8
 8003336:	4311      	orrs	r1, r2
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800333c:	4311      	orrs	r1, r2
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003342:	4311      	orrs	r1, r2
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003348:	430a      	orrs	r2, r1
 800334a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800334e:	4313      	orrs	r3, r2
 8003350:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003352:	f7ff fc37 	bl	8002bc4 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003356:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003364:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003366:	f7fe f86f 	bl	8001448 <HAL_GetTick>
 800336a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 800336c:	e008      	b.n	8003380 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800336e:	f7fe f86b 	bl	8001448 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	2b0a      	cmp	r3, #10
 800337a:	d901      	bls.n	8003380 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e04c      	b.n	800341a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8003380:	f7ff fc3c 	bl	8002bfc <LL_RCC_PLL_IsReady>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d0f1      	beq.n	800336e <HAL_RCC_OscConfig+0x646>
 800338a:	e045      	b.n	8003418 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800338c:	f7ff fc28 	bl	8002be0 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003390:	f7fe f85a 	bl	8001448 <HAL_GetTick>
 8003394:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8003396:	e008      	b.n	80033aa <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003398:	f7fe f856 	bl	8001448 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b0a      	cmp	r3, #10
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e037      	b.n	800341a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80033aa:	f7ff fc27 	bl	8002bfc <LL_RCC_PLL_IsReady>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d1f1      	bne.n	8003398 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80033b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033b8:	68da      	ldr	r2, [r3, #12]
 80033ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033be:	4b1a      	ldr	r3, [pc, #104]	; (8003428 <HAL_RCC_OscConfig+0x700>)
 80033c0:	4013      	ands	r3, r2
 80033c2:	60cb      	str	r3, [r1, #12]
 80033c4:	e028      	b.n	8003418 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d101      	bne.n	80033d2 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e023      	b.n	800341a <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	f003 0203 	and.w	r2, r3, #3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d115      	bne.n	8003414 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d10e      	bne.n	8003414 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003400:	021b      	lsls	r3, r3, #8
 8003402:	429a      	cmp	r2, r3
 8003404:	d106      	bne.n	8003414 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003410:	429a      	cmp	r2, r3
 8003412:	d001      	beq.n	8003418 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e000      	b.n	800341a <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3720      	adds	r7, #32
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	11c1808c 	.word	0x11c1808c
 8003428:	eefefffc 	.word	0xeefefffc

0800342c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d101      	bne.n	8003440 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e12c      	b.n	800369a <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003440:	4b98      	ldr	r3, [pc, #608]	; (80036a4 <HAL_RCC_ClockConfig+0x278>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0307 	and.w	r3, r3, #7
 8003448:	683a      	ldr	r2, [r7, #0]
 800344a:	429a      	cmp	r2, r3
 800344c:	d91b      	bls.n	8003486 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800344e:	4b95      	ldr	r3, [pc, #596]	; (80036a4 <HAL_RCC_ClockConfig+0x278>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f023 0207 	bic.w	r2, r3, #7
 8003456:	4993      	ldr	r1, [pc, #588]	; (80036a4 <HAL_RCC_ClockConfig+0x278>)
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	4313      	orrs	r3, r2
 800345c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800345e:	f7fd fff3 	bl	8001448 <HAL_GetTick>
 8003462:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003464:	e008      	b.n	8003478 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003466:	f7fd ffef 	bl	8001448 <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	2b02      	cmp	r3, #2
 8003472:	d901      	bls.n	8003478 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e110      	b.n	800369a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003478:	4b8a      	ldr	r3, [pc, #552]	; (80036a4 <HAL_RCC_ClockConfig+0x278>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0307 	and.w	r3, r3, #7
 8003480:	683a      	ldr	r2, [r7, #0]
 8003482:	429a      	cmp	r2, r3
 8003484:	d1ef      	bne.n	8003466 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b00      	cmp	r3, #0
 8003490:	d016      	beq.n	80034c0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	4618      	mov	r0, r3
 8003498:	f7ff fb02 	bl	8002aa0 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800349c:	f7fd ffd4 	bl	8001448 <HAL_GetTick>
 80034a0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80034a2:	e008      	b.n	80034b6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80034a4:	f7fd ffd0 	bl	8001448 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e0f1      	b.n	800369a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80034b6:	f7ff fbdf 	bl	8002c78 <LL_RCC_IsActiveFlag_HPRE>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d0f1      	beq.n	80034a4 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0320 	and.w	r3, r3, #32
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d016      	beq.n	80034fa <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	695b      	ldr	r3, [r3, #20]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7ff faf8 	bl	8002ac6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80034d6:	f7fd ffb7 	bl	8001448 <HAL_GetTick>
 80034da:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80034dc:	e008      	b.n	80034f0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80034de:	f7fd ffb3 	bl	8001448 <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d901      	bls.n	80034f0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e0d4      	b.n	800369a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80034f0:	f7ff fbd3 	bl	8002c9a <LL_RCC_IsActiveFlag_C2HPRE>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d0f1      	beq.n	80034de <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003502:	2b00      	cmp	r3, #0
 8003504:	d016      	beq.n	8003534 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	4618      	mov	r0, r3
 800350c:	f7ff faf0 	bl	8002af0 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003510:	f7fd ff9a 	bl	8001448 <HAL_GetTick>
 8003514:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003516:	e008      	b.n	800352a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003518:	f7fd ff96 	bl	8001448 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b02      	cmp	r3, #2
 8003524:	d901      	bls.n	800352a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e0b7      	b.n	800369a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800352a:	f7ff fbc8 	bl	8002cbe <LL_RCC_IsActiveFlag_SHDHPRE>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d0f1      	beq.n	8003518 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0304 	and.w	r3, r3, #4
 800353c:	2b00      	cmp	r3, #0
 800353e:	d016      	beq.n	800356e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	4618      	mov	r0, r3
 8003546:	f7ff fae9 	bl	8002b1c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800354a:	f7fd ff7d 	bl	8001448 <HAL_GetTick>
 800354e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003550:	e008      	b.n	8003564 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003552:	f7fd ff79 	bl	8001448 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	2b02      	cmp	r3, #2
 800355e:	d901      	bls.n	8003564 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e09a      	b.n	800369a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003564:	f7ff fbbd 	bl	8002ce2 <LL_RCC_IsActiveFlag_PPRE1>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d0f1      	beq.n	8003552 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0308 	and.w	r3, r3, #8
 8003576:	2b00      	cmp	r3, #0
 8003578:	d017      	beq.n	80035aa <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	00db      	lsls	r3, r3, #3
 8003580:	4618      	mov	r0, r3
 8003582:	f7ff fade 	bl	8002b42 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003586:	f7fd ff5f 	bl	8001448 <HAL_GetTick>
 800358a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800358c:	e008      	b.n	80035a0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800358e:	f7fd ff5b 	bl	8001448 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	2b02      	cmp	r3, #2
 800359a:	d901      	bls.n	80035a0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e07c      	b.n	800369a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80035a0:	f7ff fbb0 	bl	8002d04 <LL_RCC_IsActiveFlag_PPRE2>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d0f1      	beq.n	800358e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0301 	and.w	r3, r3, #1
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d043      	beq.n	800363e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d106      	bne.n	80035cc <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80035be:	f7ff f956 	bl	800286e <LL_RCC_HSE_IsReady>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d11e      	bne.n	8003606 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e066      	b.n	800369a <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	2b03      	cmp	r3, #3
 80035d2:	d106      	bne.n	80035e2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80035d4:	f7ff fb12 	bl	8002bfc <LL_RCC_PLL_IsReady>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d113      	bne.n	8003606 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e05b      	b.n	800369a <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d106      	bne.n	80035f8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80035ea:	f7ff f9f0 	bl	80029ce <LL_RCC_MSI_IsReady>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d108      	bne.n	8003606 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e050      	b.n	800369a <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80035f8:	f7ff f966 	bl	80028c8 <LL_RCC_HSI_IsReady>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d101      	bne.n	8003606 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e049      	b.n	800369a <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	4618      	mov	r0, r3
 800360c:	f7ff fa2a 	bl	8002a64 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003610:	f7fd ff1a 	bl	8001448 <HAL_GetTick>
 8003614:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003616:	e00a      	b.n	800362e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003618:	f7fd ff16 	bl	8001448 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	f241 3288 	movw	r2, #5000	; 0x1388
 8003626:	4293      	cmp	r3, r2
 8003628:	d901      	bls.n	800362e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e035      	b.n	800369a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800362e:	f7ff fa2c 	bl	8002a8a <LL_RCC_GetSysClkSource>
 8003632:	4602      	mov	r2, r0
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	429a      	cmp	r2, r3
 800363c:	d1ec      	bne.n	8003618 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800363e:	4b19      	ldr	r3, [pc, #100]	; (80036a4 <HAL_RCC_ClockConfig+0x278>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0307 	and.w	r3, r3, #7
 8003646:	683a      	ldr	r2, [r7, #0]
 8003648:	429a      	cmp	r2, r3
 800364a:	d21b      	bcs.n	8003684 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800364c:	4b15      	ldr	r3, [pc, #84]	; (80036a4 <HAL_RCC_ClockConfig+0x278>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f023 0207 	bic.w	r2, r3, #7
 8003654:	4913      	ldr	r1, [pc, #76]	; (80036a4 <HAL_RCC_ClockConfig+0x278>)
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	4313      	orrs	r3, r2
 800365a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800365c:	f7fd fef4 	bl	8001448 <HAL_GetTick>
 8003660:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003662:	e008      	b.n	8003676 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003664:	f7fd fef0 	bl	8001448 <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b02      	cmp	r3, #2
 8003670:	d901      	bls.n	8003676 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e011      	b.n	800369a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003676:	4b0b      	ldr	r3, [pc, #44]	; (80036a4 <HAL_RCC_ClockConfig+0x278>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0307 	and.w	r3, r3, #7
 800367e:	683a      	ldr	r2, [r7, #0]
 8003680:	429a      	cmp	r2, r3
 8003682:	d1ef      	bne.n	8003664 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003684:	f000 f8b4 	bl	80037f0 <HAL_RCC_GetHCLKFreq>
 8003688:	4603      	mov	r3, r0
 800368a:	4a07      	ldr	r2, [pc, #28]	; (80036a8 <HAL_RCC_ClockConfig+0x27c>)
 800368c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 800368e:	4b07      	ldr	r3, [pc, #28]	; (80036ac <HAL_RCC_ClockConfig+0x280>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4618      	mov	r0, r3
 8003694:	f7fe fa24 	bl	8001ae0 <HAL_InitTick>
 8003698:	4603      	mov	r3, r0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3710      	adds	r7, #16
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	58004000 	.word	0x58004000
 80036a8:	20000004 	.word	0x20000004
 80036ac:	20000008 	.word	0x20000008

080036b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036b0:	b590      	push	{r4, r7, lr}
 80036b2:	b087      	sub	sp, #28
 80036b4:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80036b6:	2300      	movs	r3, #0
 80036b8:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80036ba:	2300      	movs	r3, #0
 80036bc:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036be:	f7ff f9e4 	bl	8002a8a <LL_RCC_GetSysClkSource>
 80036c2:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036c4:	f7ff facd 	bl	8002c62 <LL_RCC_PLL_GetMainSource>
 80036c8:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d005      	beq.n	80036dc <HAL_RCC_GetSysClockFreq+0x2c>
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	2b0c      	cmp	r3, #12
 80036d4:	d139      	bne.n	800374a <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d136      	bne.n	800374a <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80036dc:	f7ff f987 	bl	80029ee <LL_RCC_MSI_IsEnabledRangeSelect>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d115      	bne.n	8003712 <HAL_RCC_GetSysClockFreq+0x62>
 80036e6:	f7ff f982 	bl	80029ee <LL_RCC_MSI_IsEnabledRangeSelect>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d106      	bne.n	80036fe <HAL_RCC_GetSysClockFreq+0x4e>
 80036f0:	f7ff f98d 	bl	8002a0e <LL_RCC_MSI_GetRange>
 80036f4:	4603      	mov	r3, r0
 80036f6:	0a1b      	lsrs	r3, r3, #8
 80036f8:	f003 030f 	and.w	r3, r3, #15
 80036fc:	e005      	b.n	800370a <HAL_RCC_GetSysClockFreq+0x5a>
 80036fe:	f7ff f991 	bl	8002a24 <LL_RCC_MSI_GetRangeAfterStandby>
 8003702:	4603      	mov	r3, r0
 8003704:	0a1b      	lsrs	r3, r3, #8
 8003706:	f003 030f 	and.w	r3, r3, #15
 800370a:	4a36      	ldr	r2, [pc, #216]	; (80037e4 <HAL_RCC_GetSysClockFreq+0x134>)
 800370c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003710:	e014      	b.n	800373c <HAL_RCC_GetSysClockFreq+0x8c>
 8003712:	f7ff f96c 	bl	80029ee <LL_RCC_MSI_IsEnabledRangeSelect>
 8003716:	4603      	mov	r3, r0
 8003718:	2b01      	cmp	r3, #1
 800371a:	d106      	bne.n	800372a <HAL_RCC_GetSysClockFreq+0x7a>
 800371c:	f7ff f977 	bl	8002a0e <LL_RCC_MSI_GetRange>
 8003720:	4603      	mov	r3, r0
 8003722:	091b      	lsrs	r3, r3, #4
 8003724:	f003 030f 	and.w	r3, r3, #15
 8003728:	e005      	b.n	8003736 <HAL_RCC_GetSysClockFreq+0x86>
 800372a:	f7ff f97b 	bl	8002a24 <LL_RCC_MSI_GetRangeAfterStandby>
 800372e:	4603      	mov	r3, r0
 8003730:	091b      	lsrs	r3, r3, #4
 8003732:	f003 030f 	and.w	r3, r3, #15
 8003736:	4a2b      	ldr	r2, [pc, #172]	; (80037e4 <HAL_RCC_GetSysClockFreq+0x134>)
 8003738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800373c:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d115      	bne.n	8003770 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003748:	e012      	b.n	8003770 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	2b04      	cmp	r3, #4
 800374e:	d102      	bne.n	8003756 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003750:	4b25      	ldr	r3, [pc, #148]	; (80037e8 <HAL_RCC_GetSysClockFreq+0x138>)
 8003752:	617b      	str	r3, [r7, #20]
 8003754:	e00c      	b.n	8003770 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	2b08      	cmp	r3, #8
 800375a:	d109      	bne.n	8003770 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800375c:	f7ff f85a 	bl	8002814 <LL_RCC_HSE_IsEnabledDiv2>
 8003760:	4603      	mov	r3, r0
 8003762:	2b01      	cmp	r3, #1
 8003764:	d102      	bne.n	800376c <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003766:	4b20      	ldr	r3, [pc, #128]	; (80037e8 <HAL_RCC_GetSysClockFreq+0x138>)
 8003768:	617b      	str	r3, [r7, #20]
 800376a:	e001      	b.n	8003770 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800376c:	4b1f      	ldr	r3, [pc, #124]	; (80037ec <HAL_RCC_GetSysClockFreq+0x13c>)
 800376e:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003770:	f7ff f98b 	bl	8002a8a <LL_RCC_GetSysClkSource>
 8003774:	4603      	mov	r3, r0
 8003776:	2b0c      	cmp	r3, #12
 8003778:	d12f      	bne.n	80037da <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800377a:	f7ff fa72 	bl	8002c62 <LL_RCC_PLL_GetMainSource>
 800377e:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2b02      	cmp	r3, #2
 8003784:	d003      	beq.n	800378e <HAL_RCC_GetSysClockFreq+0xde>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2b03      	cmp	r3, #3
 800378a:	d003      	beq.n	8003794 <HAL_RCC_GetSysClockFreq+0xe4>
 800378c:	e00d      	b.n	80037aa <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800378e:	4b16      	ldr	r3, [pc, #88]	; (80037e8 <HAL_RCC_GetSysClockFreq+0x138>)
 8003790:	60fb      	str	r3, [r7, #12]
        break;
 8003792:	e00d      	b.n	80037b0 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003794:	f7ff f83e 	bl	8002814 <LL_RCC_HSE_IsEnabledDiv2>
 8003798:	4603      	mov	r3, r0
 800379a:	2b01      	cmp	r3, #1
 800379c:	d102      	bne.n	80037a4 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800379e:	4b12      	ldr	r3, [pc, #72]	; (80037e8 <HAL_RCC_GetSysClockFreq+0x138>)
 80037a0:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80037a2:	e005      	b.n	80037b0 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80037a4:	4b11      	ldr	r3, [pc, #68]	; (80037ec <HAL_RCC_GetSysClockFreq+0x13c>)
 80037a6:	60fb      	str	r3, [r7, #12]
        break;
 80037a8:	e002      	b.n	80037b0 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	60fb      	str	r3, [r7, #12]
        break;
 80037ae:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80037b0:	f7ff fa35 	bl	8002c1e <LL_RCC_PLL_GetN>
 80037b4:	4602      	mov	r2, r0
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	fb03 f402 	mul.w	r4, r3, r2
 80037bc:	f7ff fa46 	bl	8002c4c <LL_RCC_PLL_GetDivider>
 80037c0:	4603      	mov	r3, r0
 80037c2:	091b      	lsrs	r3, r3, #4
 80037c4:	3301      	adds	r3, #1
 80037c6:	fbb4 f4f3 	udiv	r4, r4, r3
 80037ca:	f7ff fa34 	bl	8002c36 <LL_RCC_PLL_GetR>
 80037ce:	4603      	mov	r3, r0
 80037d0:	0f5b      	lsrs	r3, r3, #29
 80037d2:	3301      	adds	r3, #1
 80037d4:	fbb4 f3f3 	udiv	r3, r4, r3
 80037d8:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80037da:	697b      	ldr	r3, [r7, #20]
}
 80037dc:	4618      	mov	r0, r3
 80037de:	371c      	adds	r7, #28
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd90      	pop	{r4, r7, pc}
 80037e4:	0800b1cc 	.word	0x0800b1cc
 80037e8:	00f42400 	.word	0x00f42400
 80037ec:	01e84800 	.word	0x01e84800

080037f0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037f0:	b598      	push	{r3, r4, r7, lr}
 80037f2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80037f4:	f7ff ff5c 	bl	80036b0 <HAL_RCC_GetSysClockFreq>
 80037f8:	4604      	mov	r4, r0
 80037fa:	f7ff f9b5 	bl	8002b68 <LL_RCC_GetAHBPrescaler>
 80037fe:	4603      	mov	r3, r0
 8003800:	091b      	lsrs	r3, r3, #4
 8003802:	f003 030f 	and.w	r3, r3, #15
 8003806:	4a03      	ldr	r2, [pc, #12]	; (8003814 <HAL_RCC_GetHCLKFreq+0x24>)
 8003808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800380c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003810:	4618      	mov	r0, r3
 8003812:	bd98      	pop	{r3, r4, r7, pc}
 8003814:	0800b16c 	.word	0x0800b16c

08003818 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003818:	b598      	push	{r3, r4, r7, lr}
 800381a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800381c:	f7ff ffe8 	bl	80037f0 <HAL_RCC_GetHCLKFreq>
 8003820:	4604      	mov	r4, r0
 8003822:	f7ff f9b9 	bl	8002b98 <LL_RCC_GetAPB1Prescaler>
 8003826:	4603      	mov	r3, r0
 8003828:	0a1b      	lsrs	r3, r3, #8
 800382a:	4a03      	ldr	r2, [pc, #12]	; (8003838 <HAL_RCC_GetPCLK1Freq+0x20>)
 800382c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003830:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003834:	4618      	mov	r0, r3
 8003836:	bd98      	pop	{r3, r4, r7, pc}
 8003838:	0800b1ac 	.word	0x0800b1ac

0800383c <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800383c:	b598      	push	{r3, r4, r7, lr}
 800383e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003840:	f7ff ffd6 	bl	80037f0 <HAL_RCC_GetHCLKFreq>
 8003844:	4604      	mov	r4, r0
 8003846:	f7ff f9b2 	bl	8002bae <LL_RCC_GetAPB2Prescaler>
 800384a:	4603      	mov	r3, r0
 800384c:	0adb      	lsrs	r3, r3, #11
 800384e:	4a03      	ldr	r2, [pc, #12]	; (800385c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003854:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003858:	4618      	mov	r0, r3
 800385a:	bd98      	pop	{r3, r4, r7, pc}
 800385c:	0800b1ac 	.word	0x0800b1ac

08003860 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003860:	b590      	push	{r4, r7, lr}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	091b      	lsrs	r3, r3, #4
 800386c:	f003 030f 	and.w	r3, r3, #15
 8003870:	4a10      	ldr	r2, [pc, #64]	; (80038b4 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8003872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003876:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8003878:	f7ff f981 	bl	8002b7e <LL_RCC_GetAHB3Prescaler>
 800387c:	4603      	mov	r3, r0
 800387e:	091b      	lsrs	r3, r3, #4
 8003880:	f003 030f 	and.w	r3, r3, #15
 8003884:	4a0c      	ldr	r2, [pc, #48]	; (80038b8 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8003886:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003890:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	4a09      	ldr	r2, [pc, #36]	; (80038bc <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8003896:	fba2 2303 	umull	r2, r3, r2, r3
 800389a:	0c9c      	lsrs	r4, r3, #18
 800389c:	f7fe ff80 	bl	80027a0 <HAL_PWREx_GetVoltageRange>
 80038a0:	4603      	mov	r3, r0
 80038a2:	4619      	mov	r1, r3
 80038a4:	4620      	mov	r0, r4
 80038a6:	f000 f80b 	bl	80038c0 <RCC_SetFlashLatency>
 80038aa:	4603      	mov	r3, r0
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3714      	adds	r7, #20
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd90      	pop	{r4, r7, pc}
 80038b4:	0800b1cc 	.word	0x0800b1cc
 80038b8:	0800b16c 	.word	0x0800b16c
 80038bc:	431bde83 	.word	0x431bde83

080038c0 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b08e      	sub	sp, #56	; 0x38
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80038ca:	4a3a      	ldr	r2, [pc, #232]	; (80039b4 <RCC_SetFlashLatency+0xf4>)
 80038cc:	f107 0320 	add.w	r3, r7, #32
 80038d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80038d4:	6018      	str	r0, [r3, #0]
 80038d6:	3304      	adds	r3, #4
 80038d8:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80038da:	4a37      	ldr	r2, [pc, #220]	; (80039b8 <RCC_SetFlashLatency+0xf8>)
 80038dc:	f107 0318 	add.w	r3, r7, #24
 80038e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80038e4:	6018      	str	r0, [r3, #0]
 80038e6:	3304      	adds	r3, #4
 80038e8:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80038ea:	4a34      	ldr	r2, [pc, #208]	; (80039bc <RCC_SetFlashLatency+0xfc>)
 80038ec:	f107 030c 	add.w	r3, r7, #12
 80038f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80038f2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80038f6:	2300      	movs	r3, #0
 80038f8:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003900:	d11b      	bne.n	800393a <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003902:	2300      	movs	r3, #0
 8003904:	633b      	str	r3, [r7, #48]	; 0x30
 8003906:	e014      	b.n	8003932 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800390a:	005b      	lsls	r3, r3, #1
 800390c:	3338      	adds	r3, #56	; 0x38
 800390e:	443b      	add	r3, r7
 8003910:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003914:	461a      	mov	r2, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4293      	cmp	r3, r2
 800391a:	d807      	bhi.n	800392c <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800391c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	3338      	adds	r3, #56	; 0x38
 8003922:	443b      	add	r3, r7
 8003924:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003928:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800392a:	e021      	b.n	8003970 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800392c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800392e:	3301      	adds	r3, #1
 8003930:	633b      	str	r3, [r7, #48]	; 0x30
 8003932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003934:	2b02      	cmp	r3, #2
 8003936:	d9e7      	bls.n	8003908 <RCC_SetFlashLatency+0x48>
 8003938:	e01a      	b.n	8003970 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800393a:	2300      	movs	r3, #0
 800393c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800393e:	e014      	b.n	800396a <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003942:	005b      	lsls	r3, r3, #1
 8003944:	3338      	adds	r3, #56	; 0x38
 8003946:	443b      	add	r3, r7
 8003948:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 800394c:	461a      	mov	r2, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4293      	cmp	r3, r2
 8003952:	d807      	bhi.n	8003964 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	3338      	adds	r3, #56	; 0x38
 800395a:	443b      	add	r3, r7
 800395c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003960:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003962:	e005      	b.n	8003970 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003966:	3301      	adds	r3, #1
 8003968:	62fb      	str	r3, [r7, #44]	; 0x2c
 800396a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800396c:	2b02      	cmp	r3, #2
 800396e:	d9e7      	bls.n	8003940 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003970:	4b13      	ldr	r3, [pc, #76]	; (80039c0 <RCC_SetFlashLatency+0x100>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f023 0207 	bic.w	r2, r3, #7
 8003978:	4911      	ldr	r1, [pc, #68]	; (80039c0 <RCC_SetFlashLatency+0x100>)
 800397a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800397c:	4313      	orrs	r3, r2
 800397e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003980:	f7fd fd62 	bl	8001448 <HAL_GetTick>
 8003984:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003986:	e008      	b.n	800399a <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003988:	f7fd fd5e 	bl	8001448 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	2b02      	cmp	r3, #2
 8003994:	d901      	bls.n	800399a <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e007      	b.n	80039aa <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800399a:	4b09      	ldr	r3, [pc, #36]	; (80039c0 <RCC_SetFlashLatency+0x100>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0307 	and.w	r3, r3, #7
 80039a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d1ef      	bne.n	8003988 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3738      	adds	r7, #56	; 0x38
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	0800b12c 	.word	0x0800b12c
 80039b8:	0800b134 	.word	0x0800b134
 80039bc:	0800b13c 	.word	0x0800b13c
 80039c0:	58004000 	.word	0x58004000

080039c4 <LL_RCC_LSE_IsReady>:
{
 80039c4:	b480      	push	{r7}
 80039c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80039c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039d0:	f003 0302 	and.w	r3, r3, #2
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d101      	bne.n	80039dc <LL_RCC_LSE_IsReady+0x18>
 80039d8:	2301      	movs	r3, #1
 80039da:	e000      	b.n	80039de <LL_RCC_LSE_IsReady+0x1a>
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bc80      	pop	{r7}
 80039e4:	4770      	bx	lr

080039e6 <LL_RCC_SetUSARTClockSource>:
{
 80039e6:	b480      	push	{r7}
 80039e8:	b083      	sub	sp, #12
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80039ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039f2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	0c1b      	lsrs	r3, r3, #16
 80039fa:	43db      	mvns	r3, r3
 80039fc:	401a      	ands	r2, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a06:	4313      	orrs	r3, r2
 8003a08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003a0c:	bf00      	nop
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bc80      	pop	{r7}
 8003a14:	4770      	bx	lr

08003a16 <LL_RCC_SetI2SClockSource>:
{
 8003a16:	b480      	push	{r7}
 8003a18:	b083      	sub	sp, #12
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8003a1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a26:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003a36:	bf00      	nop
 8003a38:	370c      	adds	r7, #12
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bc80      	pop	{r7}
 8003a3e:	4770      	bx	lr

08003a40 <LL_RCC_SetLPUARTClockSource>:
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003a48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a50:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bc80      	pop	{r7}
 8003a68:	4770      	bx	lr

08003a6a <LL_RCC_SetI2CClockSource>:
{
 8003a6a:	b480      	push	{r7}
 8003a6c:	b083      	sub	sp, #12
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003a72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a76:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	091b      	lsrs	r3, r3, #4
 8003a7e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003a82:	43db      	mvns	r3, r3
 8003a84:	401a      	ands	r2, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	011b      	lsls	r3, r3, #4
 8003a8a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003a8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a92:	4313      	orrs	r3, r2
 8003a94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003a98:	bf00      	nop
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bc80      	pop	{r7}
 8003aa0:	4770      	bx	lr

08003aa2 <LL_RCC_SetLPTIMClockSource>:
{
 8003aa2:	b480      	push	{r7}
 8003aa4:	b083      	sub	sp, #12
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003aaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aae:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	0c1b      	lsrs	r3, r3, #16
 8003ab6:	041b      	lsls	r3, r3, #16
 8003ab8:	43db      	mvns	r3, r3
 8003aba:	401a      	ands	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	041b      	lsls	r3, r3, #16
 8003ac0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003aca:	bf00      	nop
 8003acc:	370c      	adds	r7, #12
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bc80      	pop	{r7}
 8003ad2:	4770      	bx	lr

08003ad4 <LL_RCC_SetRNGClockSource>:
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003adc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae4:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003ae8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003af4:	bf00      	nop
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bc80      	pop	{r7}
 8003afc:	4770      	bx	lr

08003afe <LL_RCC_SetADCClockSource>:
{
 8003afe:	b480      	push	{r7}
 8003b00:	b083      	sub	sp, #12
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003b06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b0e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003b1e:	bf00      	nop
 8003b20:	370c      	adds	r7, #12
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bc80      	pop	{r7}
 8003b26:	4770      	bx	lr

08003b28 <LL_RCC_SetRTCClockSource>:
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003b30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bc80      	pop	{r7}
 8003b50:	4770      	bx	lr

08003b52 <LL_RCC_GetRTCClockSource>:
{
 8003b52:	b480      	push	{r7}
 8003b54:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003b56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bc80      	pop	{r7}
 8003b68:	4770      	bx	lr

08003b6a <LL_RCC_ForceBackupDomainReset>:
{
 8003b6a:	b480      	push	{r7}
 8003b6c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003b6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003b82:	bf00      	nop
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bc80      	pop	{r7}
 8003b88:	4770      	bx	lr

08003b8a <LL_RCC_ReleaseBackupDomainReset>:
{
 8003b8a:	b480      	push	{r7}
 8003b8c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003b8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003ba2:	bf00      	nop
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bc80      	pop	{r7}
 8003ba8:	4770      	bx	lr
	...

08003bac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b086      	sub	sp, #24
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8003bb8:	2300      	movs	r3, #0
 8003bba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d058      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8003bcc:	f7fe fdda 	bl	8002784 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003bd0:	f7fd fc3a 	bl	8001448 <HAL_GetTick>
 8003bd4:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003bd6:	e009      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bd8:	f7fd fc36 	bl	8001448 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d902      	bls.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	74fb      	strb	r3, [r7, #19]
        break;
 8003bea:	e006      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003bec:	4b7b      	ldr	r3, [pc, #492]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bf8:	d1ee      	bne.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8003bfa:	7cfb      	ldrb	r3, [r7, #19]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d13c      	bne.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8003c00:	f7ff ffa7 	bl	8003b52 <LL_RCC_GetRTCClockSource>
 8003c04:	4602      	mov	r2, r0
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d00f      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c1a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c1c:	f7ff ffa5 	bl	8003b6a <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c20:	f7ff ffb3 	bl	8003b8a <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	f003 0302 	and.w	r3, r3, #2
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d014      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c38:	f7fd fc06 	bl	8001448 <HAL_GetTick>
 8003c3c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8003c3e:	e00b      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c40:	f7fd fc02 	bl	8001448 <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d902      	bls.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	74fb      	strb	r3, [r7, #19]
            break;
 8003c56:	e004      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8003c58:	f7ff feb4 	bl	80039c4 <LL_RCC_LSE_IsReady>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d1ee      	bne.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8003c62:	7cfb      	ldrb	r3, [r7, #19]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d105      	bne.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f7ff ff5b 	bl	8003b28 <LL_RCC_SetRTCClockSource>
 8003c72:	e004      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c74:	7cfb      	ldrb	r3, [r7, #19]
 8003c76:	74bb      	strb	r3, [r7, #18]
 8003c78:	e001      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c7a:	7cfb      	ldrb	r3, [r7, #19]
 8003c7c:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d004      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7ff fea9 	bl	80039e6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0302 	and.w	r3, r3, #2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d004      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7ff fe9e 	bl	80039e6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0320 	and.w	r3, r3, #32
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d004      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7ff fec0 	bl	8003a40 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d004      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a1b      	ldr	r3, [r3, #32]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f7ff fee6 	bl	8003aa2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d004      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7ff fedb 	bl	8003aa2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d004      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7ff fed0 	bl	8003aa2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d004      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7ff fea9 	bl	8003a6a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d004      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	699b      	ldr	r3, [r3, #24]
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7ff fe9e 	bl	8003a6a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d004      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	69db      	ldr	r3, [r3, #28]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7ff fe93 	bl	8003a6a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0310 	and.w	r3, r3, #16
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d011      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7ff fe5e 	bl	8003a16 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d62:	d107      	bne.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8003d64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d72:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d010      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d84:	4618      	mov	r0, r3
 8003d86:	f7ff fea5 	bl	8003ad4 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d107      	bne.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003d92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d9c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003da0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d011      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7ff fea3 	bl	8003afe <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dc0:	d107      	bne.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003dc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003dcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dd0:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8003dd2:	7cbb      	ldrb	r3, [r7, #18]
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3718      	adds	r7, #24
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	58000400 	.word	0x58000400

08003de0 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8003de8:	4b06      	ldr	r3, [pc, #24]	; (8003e04 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003df0:	4904      	ldr	r1, [pc, #16]	; (8003e04 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	608b      	str	r3, [r1, #8]
}
 8003df8:	bf00      	nop
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bc80      	pop	{r7}
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	58000400 	.word	0x58000400

08003e08 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003e0c:	4b05      	ldr	r3, [pc, #20]	; (8003e24 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8003e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e12:	4a04      	ldr	r2, [pc, #16]	; (8003e24 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8003e14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003e1c:	bf00      	nop
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bc80      	pop	{r7}
 8003e22:	4770      	bx	lr
 8003e24:	58000400 	.word	0x58000400

08003e28 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003e2c:	4b05      	ldr	r3, [pc, #20]	; (8003e44 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8003e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e32:	4a04      	ldr	r2, [pc, #16]	; (8003e44 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8003e34:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003e38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003e3c:	bf00      	nop
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bc80      	pop	{r7}
 8003e42:	4770      	bx	lr
 8003e44:	58000400 	.word	0x58000400

08003e48 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8003e4c:	4b03      	ldr	r3, [pc, #12]	; (8003e5c <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8003e4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e52:	619a      	str	r2, [r3, #24]
}
 8003e54:	bf00      	nop
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bc80      	pop	{r7}
 8003e5a:	4770      	bx	lr
 8003e5c:	58000400 	.word	0x58000400

08003e60 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8003e60:	b480      	push	{r7}
 8003e62:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8003e64:	4b06      	ldr	r3, [pc, #24]	; (8003e80 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8003e66:	695b      	ldr	r3, [r3, #20]
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d101      	bne.n	8003e74 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8003e70:	2301      	movs	r3, #1
 8003e72:	e000      	b.n	8003e76 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bc80      	pop	{r7}
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	58000400 	.word	0x58000400

08003e84 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8003e84:	b480      	push	{r7}
 8003e86:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8003e88:	4b06      	ldr	r3, [pc, #24]	; (8003ea4 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8003e8a:	695b      	ldr	r3, [r3, #20]
 8003e8c:	f003 0304 	and.w	r3, r3, #4
 8003e90:	2b04      	cmp	r3, #4
 8003e92:	d101      	bne.n	8003e98 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8003e94:	2301      	movs	r3, #1
 8003e96:	e000      	b.n	8003e9a <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bc80      	pop	{r7}
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	58000400 	.word	0x58000400

08003ea8 <LL_RCC_RF_DisableReset>:
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8003eac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003eb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003eb8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003ebc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003ec0:	bf00      	nop
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bc80      	pop	{r7}
 8003ec6:	4770      	bx	lr

08003ec8 <LL_RCC_IsRFUnderReset>:
{
 8003ec8:	b480      	push	{r7}
 8003eca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8003ecc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ed0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ed4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ed8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003edc:	d101      	bne.n	8003ee2 <LL_RCC_IsRFUnderReset+0x1a>
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e000      	b.n	8003ee4 <LL_RCC_IsRFUnderReset+0x1c>
 8003ee2:	2300      	movs	r3, #0
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bc80      	pop	{r7}
 8003eea:	4770      	bx	lr

08003eec <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8003ef4:	4b06      	ldr	r3, [pc, #24]	; (8003f10 <LL_EXTI_EnableIT_32_63+0x24>)
 8003ef6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003efa:	4905      	ldr	r1, [pc, #20]	; (8003f10 <LL_EXTI_EnableIT_32_63+0x24>)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bc80      	pop	{r7}
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	58000800 	.word	0x58000800

08003f14 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d103      	bne.n	8003f2a <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	73fb      	strb	r3, [r7, #15]
    return status;
 8003f26:	7bfb      	ldrb	r3, [r7, #15]
 8003f28:	e052      	b.n	8003fd0 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	799b      	ldrb	r3, [r3, #6]
 8003f32:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8003f34:	7bbb      	ldrb	r3, [r7, #14]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d002      	beq.n	8003f40 <HAL_SUBGHZ_Init+0x2c>
 8003f3a:	7bbb      	ldrb	r3, [r7, #14]
 8003f3c:	2b03      	cmp	r3, #3
 8003f3e:	d109      	bne.n	8003f54 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f7fd fa64 	bl	8001414 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8003f4c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003f50:	f7ff ffcc 	bl	8003eec <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8003f54:	7bbb      	ldrb	r3, [r7, #14]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d126      	bne.n	8003fa8 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2202      	movs	r2, #2
 8003f5e:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8003f60:	f7ff ffa2 	bl	8003ea8 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003f64:	4b1c      	ldr	r3, [pc, #112]	; (8003fd8 <HAL_SUBGHZ_Init+0xc4>)
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	4613      	mov	r3, r2
 8003f6a:	00db      	lsls	r3, r3, #3
 8003f6c:	1a9b      	subs	r3, r3, r2
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	0cdb      	lsrs	r3, r3, #19
 8003f72:	2264      	movs	r2, #100	; 0x64
 8003f74:	fb02 f303 	mul.w	r3, r2, r3
 8003f78:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d105      	bne.n	8003f8c <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	609a      	str	r2, [r3, #8]
        break;
 8003f8a:	e007      	b.n	8003f9c <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8003f92:	f7ff ff99 	bl	8003ec8 <LL_RCC_IsRFUnderReset>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1ee      	bne.n	8003f7a <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003f9c:	f7ff ff34 	bl	8003e08 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8003fa0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003fa4:	f7ff ff1c 	bl	8003de0 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8003fa8:	f7ff ff4e 	bl	8003e48 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8003fac:	7bfb      	ldrb	r3, [r7, #15]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d10a      	bne.n	8003fc8 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f000 faac 	bl	8004514 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	719a      	strb	r2, [r3, #6]

  return status;
 8003fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3710      	adds	r7, #16
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	20000004 	.word	0x20000004

08003fdc <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b086      	sub	sp, #24
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	607a      	str	r2, [r7, #4]
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	460b      	mov	r3, r1
 8003fea:	817b      	strh	r3, [r7, #10]
 8003fec:	4613      	mov	r3, r2
 8003fee:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	799b      	ldrb	r3, [r3, #6]
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d14a      	bne.n	8004090 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	795b      	ldrb	r3, [r3, #5]
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d101      	bne.n	8004006 <HAL_SUBGHZ_WriteRegisters+0x2a>
 8004002:	2302      	movs	r3, #2
 8004004:	e045      	b.n	8004092 <HAL_SUBGHZ_WriteRegisters+0xb6>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2201      	movs	r2, #1
 800400a:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2202      	movs	r2, #2
 8004010:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004012:	68f8      	ldr	r0, [r7, #12]
 8004014:	f000 fb4c 	bl	80046b0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004018:	f7ff ff06 	bl	8003e28 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 800401c:	210d      	movs	r1, #13
 800401e:	68f8      	ldr	r0, [r7, #12]
 8004020:	f000 fa98 	bl	8004554 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8004024:	897b      	ldrh	r3, [r7, #10]
 8004026:	0a1b      	lsrs	r3, r3, #8
 8004028:	b29b      	uxth	r3, r3
 800402a:	b2db      	uxtb	r3, r3
 800402c:	4619      	mov	r1, r3
 800402e:	68f8      	ldr	r0, [r7, #12]
 8004030:	f000 fa90 	bl	8004554 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8004034:	897b      	ldrh	r3, [r7, #10]
 8004036:	b2db      	uxtb	r3, r3
 8004038:	4619      	mov	r1, r3
 800403a:	68f8      	ldr	r0, [r7, #12]
 800403c:	f000 fa8a 	bl	8004554 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004040:	2300      	movs	r3, #0
 8004042:	82bb      	strh	r3, [r7, #20]
 8004044:	e00a      	b.n	800405c <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8004046:	8abb      	ldrh	r3, [r7, #20]
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	4413      	add	r3, r2
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	4619      	mov	r1, r3
 8004050:	68f8      	ldr	r0, [r7, #12]
 8004052:	f000 fa7f 	bl	8004554 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004056:	8abb      	ldrh	r3, [r7, #20]
 8004058:	3301      	adds	r3, #1
 800405a:	82bb      	strh	r3, [r7, #20]
 800405c:	8aba      	ldrh	r2, [r7, #20]
 800405e:	893b      	ldrh	r3, [r7, #8]
 8004060:	429a      	cmp	r2, r3
 8004062:	d3f0      	bcc.n	8004046 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004064:	f7ff fed0 	bl	8003e08 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004068:	68f8      	ldr	r0, [r7, #12]
 800406a:	f000 fb45 	bl	80046f8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d002      	beq.n	800407c <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	75fb      	strb	r3, [r7, #23]
 800407a:	e001      	b.n	8004080 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 800407c:	2300      	movs	r3, #0
 800407e:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2201      	movs	r2, #1
 8004084:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	715a      	strb	r2, [r3, #5]

    return status;
 800408c:	7dfb      	ldrb	r3, [r7, #23]
 800408e:	e000      	b.n	8004092 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8004090:	2302      	movs	r3, #2
  }
}
 8004092:	4618      	mov	r0, r3
 8004094:	3718      	adds	r7, #24
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}

0800409a <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 800409a:	b580      	push	{r7, lr}
 800409c:	b088      	sub	sp, #32
 800409e:	af00      	add	r7, sp, #0
 80040a0:	60f8      	str	r0, [r7, #12]
 80040a2:	607a      	str	r2, [r7, #4]
 80040a4:	461a      	mov	r2, r3
 80040a6:	460b      	mov	r3, r1
 80040a8:	817b      	strh	r3, [r7, #10]
 80040aa:	4613      	mov	r3, r2
 80040ac:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	799b      	ldrb	r3, [r3, #6]
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d14a      	bne.n	8004152 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	795b      	ldrb	r3, [r3, #5]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d101      	bne.n	80040c8 <HAL_SUBGHZ_ReadRegisters+0x2e>
 80040c4:	2302      	movs	r3, #2
 80040c6:	e045      	b.n	8004154 <HAL_SUBGHZ_ReadRegisters+0xba>
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2201      	movs	r2, #1
 80040cc:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80040ce:	68f8      	ldr	r0, [r7, #12]
 80040d0:	f000 faee 	bl	80046b0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80040d4:	f7ff fea8 	bl	8003e28 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 80040d8:	211d      	movs	r1, #29
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f000 fa3a 	bl	8004554 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80040e0:	897b      	ldrh	r3, [r7, #10]
 80040e2:	0a1b      	lsrs	r3, r3, #8
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	4619      	mov	r1, r3
 80040ea:	68f8      	ldr	r0, [r7, #12]
 80040ec:	f000 fa32 	bl	8004554 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80040f0:	897b      	ldrh	r3, [r7, #10]
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	4619      	mov	r1, r3
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	f000 fa2c 	bl	8004554 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 80040fc:	2100      	movs	r1, #0
 80040fe:	68f8      	ldr	r0, [r7, #12]
 8004100:	f000 fa28 	bl	8004554 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004104:	2300      	movs	r3, #0
 8004106:	82fb      	strh	r3, [r7, #22]
 8004108:	e009      	b.n	800411e <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800410a:	69b9      	ldr	r1, [r7, #24]
 800410c:	68f8      	ldr	r0, [r7, #12]
 800410e:	f000 fa77 	bl	8004600 <SUBGHZSPI_Receive>
      pData++;
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	3301      	adds	r3, #1
 8004116:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8004118:	8afb      	ldrh	r3, [r7, #22]
 800411a:	3301      	adds	r3, #1
 800411c:	82fb      	strh	r3, [r7, #22]
 800411e:	8afa      	ldrh	r2, [r7, #22]
 8004120:	893b      	ldrh	r3, [r7, #8]
 8004122:	429a      	cmp	r2, r3
 8004124:	d3f1      	bcc.n	800410a <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004126:	f7ff fe6f 	bl	8003e08 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800412a:	68f8      	ldr	r0, [r7, #12]
 800412c:	f000 fae4 	bl	80046f8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d002      	beq.n	800413e <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	77fb      	strb	r3, [r7, #31]
 800413c:	e001      	b.n	8004142 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 800413e:	2300      	movs	r3, #0
 8004140:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2201      	movs	r2, #1
 8004146:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2200      	movs	r2, #0
 800414c:	715a      	strb	r2, [r3, #5]

    return status;
 800414e:	7ffb      	ldrb	r3, [r7, #31]
 8004150:	e000      	b.n	8004154 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8004152:	2302      	movs	r3, #2
  }
}
 8004154:	4618      	mov	r0, r3
 8004156:	3720      	adds	r7, #32
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b086      	sub	sp, #24
 8004160:	af00      	add	r7, sp, #0
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	607a      	str	r2, [r7, #4]
 8004166:	461a      	mov	r2, r3
 8004168:	460b      	mov	r3, r1
 800416a:	72fb      	strb	r3, [r7, #11]
 800416c:	4613      	mov	r3, r2
 800416e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	799b      	ldrb	r3, [r3, #6]
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b01      	cmp	r3, #1
 8004178:	d14a      	bne.n	8004210 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	795b      	ldrb	r3, [r3, #5]
 800417e:	2b01      	cmp	r3, #1
 8004180:	d101      	bne.n	8004186 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8004182:	2302      	movs	r3, #2
 8004184:	e045      	b.n	8004212 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2201      	movs	r2, #1
 800418a:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800418c:	68f8      	ldr	r0, [r7, #12]
 800418e:	f000 fa8f 	bl	80046b0 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8004192:	7afb      	ldrb	r3, [r7, #11]
 8004194:	2b84      	cmp	r3, #132	; 0x84
 8004196:	d002      	beq.n	800419e <HAL_SUBGHZ_ExecSetCmd+0x42>
 8004198:	7afb      	ldrb	r3, [r7, #11]
 800419a:	2b94      	cmp	r3, #148	; 0x94
 800419c:	d103      	bne.n	80041a6 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2201      	movs	r2, #1
 80041a2:	711a      	strb	r2, [r3, #4]
 80041a4:	e002      	b.n	80041ac <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2200      	movs	r2, #0
 80041aa:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80041ac:	f7ff fe3c 	bl	8003e28 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80041b0:	7afb      	ldrb	r3, [r7, #11]
 80041b2:	4619      	mov	r1, r3
 80041b4:	68f8      	ldr	r0, [r7, #12]
 80041b6:	f000 f9cd 	bl	8004554 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80041ba:	2300      	movs	r3, #0
 80041bc:	82bb      	strh	r3, [r7, #20]
 80041be:	e00a      	b.n	80041d6 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80041c0:	8abb      	ldrh	r3, [r7, #20]
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	4413      	add	r3, r2
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	4619      	mov	r1, r3
 80041ca:	68f8      	ldr	r0, [r7, #12]
 80041cc:	f000 f9c2 	bl	8004554 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80041d0:	8abb      	ldrh	r3, [r7, #20]
 80041d2:	3301      	adds	r3, #1
 80041d4:	82bb      	strh	r3, [r7, #20]
 80041d6:	8aba      	ldrh	r2, [r7, #20]
 80041d8:	893b      	ldrh	r3, [r7, #8]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d3f0      	bcc.n	80041c0 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80041de:	f7ff fe13 	bl	8003e08 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 80041e2:	7afb      	ldrb	r3, [r7, #11]
 80041e4:	2b84      	cmp	r3, #132	; 0x84
 80041e6:	d002      	beq.n	80041ee <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 80041e8:	68f8      	ldr	r0, [r7, #12]
 80041ea:	f000 fa85 	bl	80046f8 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d002      	beq.n	80041fc <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	75fb      	strb	r3, [r7, #23]
 80041fa:	e001      	b.n	8004200 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 80041fc:	2300      	movs	r3, #0
 80041fe:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2201      	movs	r2, #1
 8004204:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	715a      	strb	r2, [r3, #5]

    return status;
 800420c:	7dfb      	ldrb	r3, [r7, #23]
 800420e:	e000      	b.n	8004212 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8004210:	2302      	movs	r3, #2
  }
}
 8004212:	4618      	mov	r0, r3
 8004214:	3718      	adds	r7, #24
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}

0800421a <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800421a:	b580      	push	{r7, lr}
 800421c:	b088      	sub	sp, #32
 800421e:	af00      	add	r7, sp, #0
 8004220:	60f8      	str	r0, [r7, #12]
 8004222:	607a      	str	r2, [r7, #4]
 8004224:	461a      	mov	r2, r3
 8004226:	460b      	mov	r3, r1
 8004228:	72fb      	strb	r3, [r7, #11]
 800422a:	4613      	mov	r3, r2
 800422c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	799b      	ldrb	r3, [r3, #6]
 8004236:	b2db      	uxtb	r3, r3
 8004238:	2b01      	cmp	r3, #1
 800423a:	d13d      	bne.n	80042b8 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	795b      	ldrb	r3, [r3, #5]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d101      	bne.n	8004248 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8004244:	2302      	movs	r3, #2
 8004246:	e038      	b.n	80042ba <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2201      	movs	r2, #1
 800424c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800424e:	68f8      	ldr	r0, [r7, #12]
 8004250:	f000 fa2e 	bl	80046b0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004254:	f7ff fde8 	bl	8003e28 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8004258:	7afb      	ldrb	r3, [r7, #11]
 800425a:	4619      	mov	r1, r3
 800425c:	68f8      	ldr	r0, [r7, #12]
 800425e:	f000 f979 	bl	8004554 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8004262:	2100      	movs	r1, #0
 8004264:	68f8      	ldr	r0, [r7, #12]
 8004266:	f000 f975 	bl	8004554 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800426a:	2300      	movs	r3, #0
 800426c:	82fb      	strh	r3, [r7, #22]
 800426e:	e009      	b.n	8004284 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004270:	69b9      	ldr	r1, [r7, #24]
 8004272:	68f8      	ldr	r0, [r7, #12]
 8004274:	f000 f9c4 	bl	8004600 <SUBGHZSPI_Receive>
      pData++;
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	3301      	adds	r3, #1
 800427c:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800427e:	8afb      	ldrh	r3, [r7, #22]
 8004280:	3301      	adds	r3, #1
 8004282:	82fb      	strh	r3, [r7, #22]
 8004284:	8afa      	ldrh	r2, [r7, #22]
 8004286:	893b      	ldrh	r3, [r7, #8]
 8004288:	429a      	cmp	r2, r3
 800428a:	d3f1      	bcc.n	8004270 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800428c:	f7ff fdbc 	bl	8003e08 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004290:	68f8      	ldr	r0, [r7, #12]
 8004292:	f000 fa31 	bl	80046f8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d002      	beq.n	80042a4 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	77fb      	strb	r3, [r7, #31]
 80042a2:	e001      	b.n	80042a8 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 80042a4:	2300      	movs	r3, #0
 80042a6:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2201      	movs	r2, #1
 80042ac:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	715a      	strb	r2, [r3, #5]

    return status;
 80042b4:	7ffb      	ldrb	r3, [r7, #31]
 80042b6:	e000      	b.n	80042ba <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80042b8:	2302      	movs	r3, #2
  }
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3720      	adds	r7, #32
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b086      	sub	sp, #24
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	60f8      	str	r0, [r7, #12]
 80042ca:	607a      	str	r2, [r7, #4]
 80042cc:	461a      	mov	r2, r3
 80042ce:	460b      	mov	r3, r1
 80042d0:	72fb      	strb	r3, [r7, #11]
 80042d2:	4613      	mov	r3, r2
 80042d4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	799b      	ldrb	r3, [r3, #6]
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d13e      	bne.n	800435e <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	795b      	ldrb	r3, [r3, #5]
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d101      	bne.n	80042ec <HAL_SUBGHZ_WriteBuffer+0x2a>
 80042e8:	2302      	movs	r3, #2
 80042ea:	e039      	b.n	8004360 <HAL_SUBGHZ_WriteBuffer+0x9e>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2201      	movs	r2, #1
 80042f0:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80042f2:	68f8      	ldr	r0, [r7, #12]
 80042f4:	f000 f9dc 	bl	80046b0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80042f8:	f7ff fd96 	bl	8003e28 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 80042fc:	210e      	movs	r1, #14
 80042fe:	68f8      	ldr	r0, [r7, #12]
 8004300:	f000 f928 	bl	8004554 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8004304:	7afb      	ldrb	r3, [r7, #11]
 8004306:	4619      	mov	r1, r3
 8004308:	68f8      	ldr	r0, [r7, #12]
 800430a:	f000 f923 	bl	8004554 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800430e:	2300      	movs	r3, #0
 8004310:	82bb      	strh	r3, [r7, #20]
 8004312:	e00a      	b.n	800432a <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8004314:	8abb      	ldrh	r3, [r7, #20]
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	4413      	add	r3, r2
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	4619      	mov	r1, r3
 800431e:	68f8      	ldr	r0, [r7, #12]
 8004320:	f000 f918 	bl	8004554 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004324:	8abb      	ldrh	r3, [r7, #20]
 8004326:	3301      	adds	r3, #1
 8004328:	82bb      	strh	r3, [r7, #20]
 800432a:	8aba      	ldrh	r2, [r7, #20]
 800432c:	893b      	ldrh	r3, [r7, #8]
 800432e:	429a      	cmp	r2, r3
 8004330:	d3f0      	bcc.n	8004314 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004332:	f7ff fd69 	bl	8003e08 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004336:	68f8      	ldr	r0, [r7, #12]
 8004338:	f000 f9de 	bl	80046f8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d002      	beq.n	800434a <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	75fb      	strb	r3, [r7, #23]
 8004348:	e001      	b.n	800434e <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 800434a:	2300      	movs	r3, #0
 800434c:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2201      	movs	r2, #1
 8004352:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	715a      	strb	r2, [r3, #5]

    return status;
 800435a:	7dfb      	ldrb	r3, [r7, #23]
 800435c:	e000      	b.n	8004360 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800435e:	2302      	movs	r3, #2
  }
}
 8004360:	4618      	mov	r0, r3
 8004362:	3718      	adds	r7, #24
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b088      	sub	sp, #32
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	607a      	str	r2, [r7, #4]
 8004372:	461a      	mov	r2, r3
 8004374:	460b      	mov	r3, r1
 8004376:	72fb      	strb	r3, [r7, #11]
 8004378:	4613      	mov	r3, r2
 800437a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	799b      	ldrb	r3, [r3, #6]
 8004384:	b2db      	uxtb	r3, r3
 8004386:	2b01      	cmp	r3, #1
 8004388:	d141      	bne.n	800440e <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	795b      	ldrb	r3, [r3, #5]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d101      	bne.n	8004396 <HAL_SUBGHZ_ReadBuffer+0x2e>
 8004392:	2302      	movs	r3, #2
 8004394:	e03c      	b.n	8004410 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2201      	movs	r2, #1
 800439a:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800439c:	68f8      	ldr	r0, [r7, #12]
 800439e:	f000 f987 	bl	80046b0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80043a2:	f7ff fd41 	bl	8003e28 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 80043a6:	211e      	movs	r1, #30
 80043a8:	68f8      	ldr	r0, [r7, #12]
 80043aa:	f000 f8d3 	bl	8004554 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80043ae:	7afb      	ldrb	r3, [r7, #11]
 80043b0:	4619      	mov	r1, r3
 80043b2:	68f8      	ldr	r0, [r7, #12]
 80043b4:	f000 f8ce 	bl	8004554 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80043b8:	2100      	movs	r1, #0
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f000 f8ca 	bl	8004554 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80043c0:	2300      	movs	r3, #0
 80043c2:	82fb      	strh	r3, [r7, #22]
 80043c4:	e009      	b.n	80043da <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80043c6:	69b9      	ldr	r1, [r7, #24]
 80043c8:	68f8      	ldr	r0, [r7, #12]
 80043ca:	f000 f919 	bl	8004600 <SUBGHZSPI_Receive>
      pData++;
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	3301      	adds	r3, #1
 80043d2:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80043d4:	8afb      	ldrh	r3, [r7, #22]
 80043d6:	3301      	adds	r3, #1
 80043d8:	82fb      	strh	r3, [r7, #22]
 80043da:	8afa      	ldrh	r2, [r7, #22]
 80043dc:	893b      	ldrh	r3, [r7, #8]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d3f1      	bcc.n	80043c6 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80043e2:	f7ff fd11 	bl	8003e08 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80043e6:	68f8      	ldr	r0, [r7, #12]
 80043e8:	f000 f986 	bl	80046f8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d002      	beq.n	80043fa <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	77fb      	strb	r3, [r7, #31]
 80043f8:	e001      	b.n	80043fe <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 80043fa:	2300      	movs	r3, #0
 80043fc:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2201      	movs	r2, #1
 8004402:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2200      	movs	r2, #0
 8004408:	715a      	strb	r2, [r3, #5]

    return status;
 800440a:	7ffb      	ldrb	r3, [r7, #31]
 800440c:	e000      	b.n	8004410 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800440e:	2302      	movs	r3, #2
  }
}
 8004410:	4618      	mov	r0, r3
 8004412:	3720      	adds	r7, #32
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8004420:	2300      	movs	r3, #0
 8004422:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8004424:	f107 020c 	add.w	r2, r7, #12
 8004428:	2302      	movs	r3, #2
 800442a:	2112      	movs	r1, #18
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f7ff fef4 	bl	800421a <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8004432:	7b3b      	ldrb	r3, [r7, #12]
 8004434:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8004436:	89fb      	ldrh	r3, [r7, #14]
 8004438:	021b      	lsls	r3, r3, #8
 800443a:	b21a      	sxth	r2, r3
 800443c:	7b7b      	ldrb	r3, [r7, #13]
 800443e:	b21b      	sxth	r3, r3
 8004440:	4313      	orrs	r3, r2
 8004442:	b21b      	sxth	r3, r3
 8004444:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8004446:	f107 020c 	add.w	r2, r7, #12
 800444a:	2302      	movs	r3, #2
 800444c:	2102      	movs	r1, #2
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f7ff fe84 	bl	800415c <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8004454:	89fb      	ldrh	r3, [r7, #14]
 8004456:	f003 0301 	and.w	r3, r3, #1
 800445a:	2b00      	cmp	r3, #0
 800445c:	d002      	beq.n	8004464 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f005 f9fe 	bl	8009860 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8004464:	89fb      	ldrh	r3, [r7, #14]
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b00      	cmp	r3, #0
 800446c:	d002      	beq.n	8004474 <HAL_SUBGHZ_IRQHandler+0x5c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f005 fa04 	bl	800987c <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8004474:	89fb      	ldrh	r3, [r7, #14]
 8004476:	f003 0304 	and.w	r3, r3, #4
 800447a:	2b00      	cmp	r3, #0
 800447c:	d002      	beq.n	8004484 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f005 fa54 	bl	800992c <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8004484:	89fb      	ldrh	r3, [r7, #14]
 8004486:	f003 0308 	and.w	r3, r3, #8
 800448a:	2b00      	cmp	r3, #0
 800448c:	d002      	beq.n	8004494 <HAL_SUBGHZ_IRQHandler+0x7c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f005 fa5a 	bl	8009948 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8004494:	89fb      	ldrh	r3, [r7, #14]
 8004496:	f003 0310 	and.w	r3, r3, #16
 800449a:	2b00      	cmp	r3, #0
 800449c:	d002      	beq.n	80044a4 <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f005 fa60 	bl	8009964 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 80044a4:	89fb      	ldrh	r3, [r7, #14]
 80044a6:	f003 0320 	and.w	r3, r3, #32
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d002      	beq.n	80044b4 <HAL_SUBGHZ_IRQHandler+0x9c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f005 fa2e 	bl	8009910 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 80044b4:	89fb      	ldrh	r3, [r7, #14]
 80044b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d002      	beq.n	80044c4 <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f005 f9ea 	bl	8009898 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 80044c4:	89fb      	ldrh	r3, [r7, #14]
 80044c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00d      	beq.n	80044ea <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 80044ce:	89fb      	ldrh	r3, [r7, #14]
 80044d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d004      	beq.n	80044e2 <HAL_SUBGHZ_IRQHandler+0xca>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 80044d8:	2101      	movs	r1, #1
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f005 f9ea 	bl	80098b4 <HAL_SUBGHZ_CADStatusCallback>
 80044e0:	e003      	b.n	80044ea <HAL_SUBGHZ_IRQHandler+0xd2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 80044e2:	2100      	movs	r1, #0
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f005 f9e5 	bl	80098b4 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 80044ea:	89fb      	ldrh	r3, [r7, #14]
 80044ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d002      	beq.n	80044fa <HAL_SUBGHZ_IRQHandler+0xe2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f005 f9fb 	bl	80098f0 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 80044fa:	89fb      	ldrh	r3, [r7, #14]
 80044fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d002      	beq.n	800450a <HAL_SUBGHZ_IRQHandler+0xf2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f005 fa3b 	bl	8009980 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 800450a:	bf00      	nop
 800450c:	3710      	adds	r7, #16
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
	...

08004514 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800451c:	4b0c      	ldr	r3, [pc, #48]	; (8004550 <SUBGHZSPI_Init+0x3c>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a0b      	ldr	r2, [pc, #44]	; (8004550 <SUBGHZSPI_Init+0x3c>)
 8004522:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004526:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8004528:	4a09      	ldr	r2, [pc, #36]	; (8004550 <SUBGHZSPI_Init+0x3c>)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8004530:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8004532:	4b07      	ldr	r3, [pc, #28]	; (8004550 <SUBGHZSPI_Init+0x3c>)
 8004534:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8004538:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800453a:	4b05      	ldr	r3, [pc, #20]	; (8004550 <SUBGHZSPI_Init+0x3c>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a04      	ldr	r2, [pc, #16]	; (8004550 <SUBGHZSPI_Init+0x3c>)
 8004540:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004544:	6013      	str	r3, [r2, #0]
}
 8004546:	bf00      	nop
 8004548:	370c      	adds	r7, #12
 800454a:	46bd      	mov	sp, r7
 800454c:	bc80      	pop	{r7}
 800454e:	4770      	bx	lr
 8004550:	58010000 	.word	0x58010000

08004554 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8004554:	b480      	push	{r7}
 8004556:	b087      	sub	sp, #28
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	460b      	mov	r3, r1
 800455e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004560:	2300      	movs	r3, #0
 8004562:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004564:	4b23      	ldr	r3, [pc, #140]	; (80045f4 <SUBGHZSPI_Transmit+0xa0>)
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	4613      	mov	r3, r2
 800456a:	00db      	lsls	r3, r3, #3
 800456c:	1a9b      	subs	r3, r3, r2
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	0cdb      	lsrs	r3, r3, #19
 8004572:	2264      	movs	r2, #100	; 0x64
 8004574:	fb02 f303 	mul.w	r3, r2, r3
 8004578:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d105      	bne.n	800458c <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	609a      	str	r2, [r3, #8]
      break;
 800458a:	e008      	b.n	800459e <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	3b01      	subs	r3, #1
 8004590:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004592:	4b19      	ldr	r3, [pc, #100]	; (80045f8 <SUBGHZSPI_Transmit+0xa4>)
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	f003 0302 	and.w	r3, r3, #2
 800459a:	2b02      	cmp	r3, #2
 800459c:	d1ed      	bne.n	800457a <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800459e:	4b17      	ldr	r3, [pc, #92]	; (80045fc <SUBGHZSPI_Transmit+0xa8>)
 80045a0:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	78fa      	ldrb	r2, [r7, #3]
 80045a6:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80045a8:	4b12      	ldr	r3, [pc, #72]	; (80045f4 <SUBGHZSPI_Transmit+0xa0>)
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	4613      	mov	r3, r2
 80045ae:	00db      	lsls	r3, r3, #3
 80045b0:	1a9b      	subs	r3, r3, r2
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	0cdb      	lsrs	r3, r3, #19
 80045b6:	2264      	movs	r2, #100	; 0x64
 80045b8:	fb02 f303 	mul.w	r3, r2, r3
 80045bc:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d105      	bne.n	80045d0 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	609a      	str	r2, [r3, #8]
      break;
 80045ce:	e008      	b.n	80045e2 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	3b01      	subs	r3, #1
 80045d4:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80045d6:	4b08      	ldr	r3, [pc, #32]	; (80045f8 <SUBGHZSPI_Transmit+0xa4>)
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d1ed      	bne.n	80045be <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 80045e2:	4b05      	ldr	r3, [pc, #20]	; (80045f8 <SUBGHZSPI_Transmit+0xa4>)
 80045e4:	68db      	ldr	r3, [r3, #12]

  return status;
 80045e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	371c      	adds	r7, #28
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bc80      	pop	{r7}
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	20000004 	.word	0x20000004
 80045f8:	58010000 	.word	0x58010000
 80045fc:	5801000c 	.word	0x5801000c

08004600 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8004600:	b480      	push	{r7}
 8004602:	b087      	sub	sp, #28
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800460a:	2300      	movs	r3, #0
 800460c:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800460e:	4b25      	ldr	r3, [pc, #148]	; (80046a4 <SUBGHZSPI_Receive+0xa4>)
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	4613      	mov	r3, r2
 8004614:	00db      	lsls	r3, r3, #3
 8004616:	1a9b      	subs	r3, r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	0cdb      	lsrs	r3, r3, #19
 800461c:	2264      	movs	r2, #100	; 0x64
 800461e:	fb02 f303 	mul.w	r3, r2, r3
 8004622:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d105      	bne.n	8004636 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2201      	movs	r2, #1
 8004632:	609a      	str	r2, [r3, #8]
      break;
 8004634:	e008      	b.n	8004648 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	3b01      	subs	r3, #1
 800463a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800463c:	4b1a      	ldr	r3, [pc, #104]	; (80046a8 <SUBGHZSPI_Receive+0xa8>)
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f003 0302 	and.w	r3, r3, #2
 8004644:	2b02      	cmp	r3, #2
 8004646:	d1ed      	bne.n	8004624 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8004648:	4b18      	ldr	r3, [pc, #96]	; (80046ac <SUBGHZSPI_Receive+0xac>)
 800464a:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	22ff      	movs	r2, #255	; 0xff
 8004650:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004652:	4b14      	ldr	r3, [pc, #80]	; (80046a4 <SUBGHZSPI_Receive+0xa4>)
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	4613      	mov	r3, r2
 8004658:	00db      	lsls	r3, r3, #3
 800465a:	1a9b      	subs	r3, r3, r2
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	0cdb      	lsrs	r3, r3, #19
 8004660:	2264      	movs	r2, #100	; 0x64
 8004662:	fb02 f303 	mul.w	r3, r2, r3
 8004666:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d105      	bne.n	800467a <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2201      	movs	r2, #1
 8004676:	609a      	str	r2, [r3, #8]
      break;
 8004678:	e008      	b.n	800468c <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	3b01      	subs	r3, #1
 800467e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004680:	4b09      	ldr	r3, [pc, #36]	; (80046a8 <SUBGHZSPI_Receive+0xa8>)
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f003 0301 	and.w	r3, r3, #1
 8004688:	2b01      	cmp	r3, #1
 800468a:	d1ed      	bne.n	8004668 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 800468c:	4b06      	ldr	r3, [pc, #24]	; (80046a8 <SUBGHZSPI_Receive+0xa8>)
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	b2da      	uxtb	r2, r3
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	701a      	strb	r2, [r3, #0]

  return status;
 8004696:	7dfb      	ldrb	r3, [r7, #23]
}
 8004698:	4618      	mov	r0, r3
 800469a:	371c      	adds	r7, #28
 800469c:	46bd      	mov	sp, r7
 800469e:	bc80      	pop	{r7}
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop
 80046a4:	20000004 	.word	0x20000004
 80046a8:	58010000 	.word	0x58010000
 80046ac:	5801000c 	.word	0x5801000c

080046b0 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	791b      	ldrb	r3, [r3, #4]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d111      	bne.n	80046e4 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 80046c0:	4b0c      	ldr	r3, [pc, #48]	; (80046f4 <SUBGHZ_CheckDeviceReady+0x44>)
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	4613      	mov	r3, r2
 80046c6:	005b      	lsls	r3, r3, #1
 80046c8:	4413      	add	r3, r2
 80046ca:	00db      	lsls	r3, r3, #3
 80046cc:	0c1b      	lsrs	r3, r3, #16
 80046ce:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80046d0:	f7ff fbaa 	bl	8003e28 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	3b01      	subs	r3, #1
 80046d8:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d1f9      	bne.n	80046d4 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80046e0:	f7ff fb92 	bl	8003e08 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f000 f807 	bl	80046f8 <SUBGHZ_WaitOnBusy>
 80046ea:	4603      	mov	r3, r0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3710      	adds	r7, #16
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	20000004 	.word	0x20000004

080046f8 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b086      	sub	sp, #24
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8004700:	2300      	movs	r3, #0
 8004702:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8004704:	4b12      	ldr	r3, [pc, #72]	; (8004750 <SUBGHZ_WaitOnBusy+0x58>)
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	4613      	mov	r3, r2
 800470a:	005b      	lsls	r3, r3, #1
 800470c:	4413      	add	r3, r2
 800470e:	00db      	lsls	r3, r3, #3
 8004710:	0d1b      	lsrs	r3, r3, #20
 8004712:	2264      	movs	r2, #100	; 0x64
 8004714:	fb02 f303 	mul.w	r3, r2, r3
 8004718:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 800471a:	f7ff fbb3 	bl	8003e84 <LL_PWR_IsActiveFlag_RFBUSYMS>
 800471e:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d105      	bne.n	8004732 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2202      	movs	r2, #2
 800472e:	609a      	str	r2, [r3, #8]
      break;
 8004730:	e009      	b.n	8004746 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	3b01      	subs	r3, #1
 8004736:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8004738:	f7ff fb92 	bl	8003e60 <LL_PWR_IsActiveFlag_RFBUSYS>
 800473c:	4602      	mov	r2, r0
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	4013      	ands	r3, r2
 8004742:	2b01      	cmp	r3, #1
 8004744:	d0e9      	beq.n	800471a <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8004746:	7dfb      	ldrb	r3, [r7, #23]
}
 8004748:	4618      	mov	r0, r3
 800474a:	3718      	adds	r7, #24
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}
 8004750:	20000004 	.word	0x20000004

08004754 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b082      	sub	sp, #8
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d101      	bne.n	8004766 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e049      	b.n	80047fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800476c:	b2db      	uxtb	r3, r3
 800476e:	2b00      	cmp	r3, #0
 8004770:	d106      	bne.n	8004780 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f7fc ff92 	bl	80016a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2202      	movs	r2, #2
 8004784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	3304      	adds	r3, #4
 8004790:	4619      	mov	r1, r3
 8004792:	4610      	mov	r0, r2
 8004794:	f000 fa90 	bl	8004cb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3708      	adds	r7, #8
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
	...

08004804 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004804:	b480      	push	{r7}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004812:	b2db      	uxtb	r3, r3
 8004814:	2b01      	cmp	r3, #1
 8004816:	d001      	beq.n	800481c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e02e      	b.n	800487a <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2202      	movs	r2, #2
 8004820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a16      	ldr	r2, [pc, #88]	; (8004884 <HAL_TIM_Base_Start+0x80>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d004      	beq.n	8004838 <HAL_TIM_Base_Start+0x34>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004836:	d115      	bne.n	8004864 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	689a      	ldr	r2, [r3, #8]
 800483e:	4b12      	ldr	r3, [pc, #72]	; (8004888 <HAL_TIM_Base_Start+0x84>)
 8004840:	4013      	ands	r3, r2
 8004842:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2b06      	cmp	r3, #6
 8004848:	d015      	beq.n	8004876 <HAL_TIM_Base_Start+0x72>
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004850:	d011      	beq.n	8004876 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f042 0201 	orr.w	r2, r2, #1
 8004860:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004862:	e008      	b.n	8004876 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f042 0201 	orr.w	r2, r2, #1
 8004872:	601a      	str	r2, [r3, #0]
 8004874:	e000      	b.n	8004878 <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004876:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3714      	adds	r7, #20
 800487e:	46bd      	mov	sp, r7
 8004880:	bc80      	pop	{r7}
 8004882:	4770      	bx	lr
 8004884:	40012c00 	.word	0x40012c00
 8004888:	00010007 	.word	0x00010007

0800488c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	f003 0302 	and.w	r3, r3, #2
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d122      	bne.n	80048e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	f003 0302 	and.w	r3, r3, #2
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d11b      	bne.n	80048e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f06f 0202 	mvn.w	r2, #2
 80048b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2201      	movs	r2, #1
 80048be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	699b      	ldr	r3, [r3, #24]
 80048c6:	f003 0303 	and.w	r3, r3, #3
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d003      	beq.n	80048d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 f9d6 	bl	8004c80 <HAL_TIM_IC_CaptureCallback>
 80048d4:	e005      	b.n	80048e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 f9c9 	bl	8004c6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f000 f9d8 	bl	8004c92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	f003 0304 	and.w	r3, r3, #4
 80048f2:	2b04      	cmp	r3, #4
 80048f4:	d122      	bne.n	800493c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	f003 0304 	and.w	r3, r3, #4
 8004900:	2b04      	cmp	r3, #4
 8004902:	d11b      	bne.n	800493c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f06f 0204 	mvn.w	r2, #4
 800490c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2202      	movs	r2, #2
 8004912:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800491e:	2b00      	cmp	r3, #0
 8004920:	d003      	beq.n	800492a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 f9ac 	bl	8004c80 <HAL_TIM_IC_CaptureCallback>
 8004928:	e005      	b.n	8004936 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 f99f 	bl	8004c6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 f9ae 	bl	8004c92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	f003 0308 	and.w	r3, r3, #8
 8004946:	2b08      	cmp	r3, #8
 8004948:	d122      	bne.n	8004990 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	f003 0308 	and.w	r3, r3, #8
 8004954:	2b08      	cmp	r3, #8
 8004956:	d11b      	bne.n	8004990 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f06f 0208 	mvn.w	r2, #8
 8004960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2204      	movs	r2, #4
 8004966:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	69db      	ldr	r3, [r3, #28]
 800496e:	f003 0303 	and.w	r3, r3, #3
 8004972:	2b00      	cmp	r3, #0
 8004974:	d003      	beq.n	800497e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 f982 	bl	8004c80 <HAL_TIM_IC_CaptureCallback>
 800497c:	e005      	b.n	800498a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 f975 	bl	8004c6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f000 f984 	bl	8004c92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	f003 0310 	and.w	r3, r3, #16
 800499a:	2b10      	cmp	r3, #16
 800499c:	d122      	bne.n	80049e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	f003 0310 	and.w	r3, r3, #16
 80049a8:	2b10      	cmp	r3, #16
 80049aa:	d11b      	bne.n	80049e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f06f 0210 	mvn.w	r2, #16
 80049b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2208      	movs	r2, #8
 80049ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	69db      	ldr	r3, [r3, #28]
 80049c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d003      	beq.n	80049d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 f958 	bl	8004c80 <HAL_TIM_IC_CaptureCallback>
 80049d0:	e005      	b.n	80049de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 f94b 	bl	8004c6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 f95a 	bl	8004c92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d10e      	bne.n	8004a10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	f003 0301 	and.w	r3, r3, #1
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d107      	bne.n	8004a10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f06f 0201 	mvn.w	r2, #1
 8004a08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 f926 	bl	8004c5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a1a:	2b80      	cmp	r3, #128	; 0x80
 8004a1c:	d10e      	bne.n	8004a3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a28:	2b80      	cmp	r3, #128	; 0x80
 8004a2a:	d107      	bne.n	8004a3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 fa9f 	bl	8004f7a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a4a:	d10e      	bne.n	8004a6a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a56:	2b80      	cmp	r3, #128	; 0x80
 8004a58:	d107      	bne.n	8004a6a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004a62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f000 fa91 	bl	8004f8c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	691b      	ldr	r3, [r3, #16]
 8004a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a74:	2b40      	cmp	r3, #64	; 0x40
 8004a76:	d10e      	bne.n	8004a96 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a82:	2b40      	cmp	r3, #64	; 0x40
 8004a84:	d107      	bne.n	8004a96 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f000 f907 	bl	8004ca4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	691b      	ldr	r3, [r3, #16]
 8004a9c:	f003 0320 	and.w	r3, r3, #32
 8004aa0:	2b20      	cmp	r3, #32
 8004aa2:	d10e      	bne.n	8004ac2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	f003 0320 	and.w	r3, r3, #32
 8004aae:	2b20      	cmp	r3, #32
 8004ab0:	d107      	bne.n	8004ac2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f06f 0220 	mvn.w	r2, #32
 8004aba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f000 fa53 	bl	8004f68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ac2:	bf00      	nop
 8004ac4:	3708      	adds	r7, #8
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}

08004aca <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004aca:	b580      	push	{r7, lr}
 8004acc:	b084      	sub	sp, #16
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
 8004ad2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d101      	bne.n	8004ae6 <HAL_TIM_ConfigClockSource+0x1c>
 8004ae2:	2302      	movs	r3, #2
 8004ae4:	e0b6      	b.n	8004c54 <HAL_TIM_ConfigClockSource+0x18a>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2202      	movs	r2, #2
 8004af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004b04:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004b08:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b10:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68ba      	ldr	r2, [r7, #8]
 8004b18:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b22:	d03e      	beq.n	8004ba2 <HAL_TIM_ConfigClockSource+0xd8>
 8004b24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b28:	f200 8087 	bhi.w	8004c3a <HAL_TIM_ConfigClockSource+0x170>
 8004b2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b30:	f000 8086 	beq.w	8004c40 <HAL_TIM_ConfigClockSource+0x176>
 8004b34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b38:	d87f      	bhi.n	8004c3a <HAL_TIM_ConfigClockSource+0x170>
 8004b3a:	2b70      	cmp	r3, #112	; 0x70
 8004b3c:	d01a      	beq.n	8004b74 <HAL_TIM_ConfigClockSource+0xaa>
 8004b3e:	2b70      	cmp	r3, #112	; 0x70
 8004b40:	d87b      	bhi.n	8004c3a <HAL_TIM_ConfigClockSource+0x170>
 8004b42:	2b60      	cmp	r3, #96	; 0x60
 8004b44:	d050      	beq.n	8004be8 <HAL_TIM_ConfigClockSource+0x11e>
 8004b46:	2b60      	cmp	r3, #96	; 0x60
 8004b48:	d877      	bhi.n	8004c3a <HAL_TIM_ConfigClockSource+0x170>
 8004b4a:	2b50      	cmp	r3, #80	; 0x50
 8004b4c:	d03c      	beq.n	8004bc8 <HAL_TIM_ConfigClockSource+0xfe>
 8004b4e:	2b50      	cmp	r3, #80	; 0x50
 8004b50:	d873      	bhi.n	8004c3a <HAL_TIM_ConfigClockSource+0x170>
 8004b52:	2b40      	cmp	r3, #64	; 0x40
 8004b54:	d058      	beq.n	8004c08 <HAL_TIM_ConfigClockSource+0x13e>
 8004b56:	2b40      	cmp	r3, #64	; 0x40
 8004b58:	d86f      	bhi.n	8004c3a <HAL_TIM_ConfigClockSource+0x170>
 8004b5a:	2b30      	cmp	r3, #48	; 0x30
 8004b5c:	d064      	beq.n	8004c28 <HAL_TIM_ConfigClockSource+0x15e>
 8004b5e:	2b30      	cmp	r3, #48	; 0x30
 8004b60:	d86b      	bhi.n	8004c3a <HAL_TIM_ConfigClockSource+0x170>
 8004b62:	2b20      	cmp	r3, #32
 8004b64:	d060      	beq.n	8004c28 <HAL_TIM_ConfigClockSource+0x15e>
 8004b66:	2b20      	cmp	r3, #32
 8004b68:	d867      	bhi.n	8004c3a <HAL_TIM_ConfigClockSource+0x170>
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d05c      	beq.n	8004c28 <HAL_TIM_ConfigClockSource+0x15e>
 8004b6e:	2b10      	cmp	r3, #16
 8004b70:	d05a      	beq.n	8004c28 <HAL_TIM_ConfigClockSource+0x15e>
 8004b72:	e062      	b.n	8004c3a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b84:	f000 f973 	bl	8004e6e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b96:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	68ba      	ldr	r2, [r7, #8]
 8004b9e:	609a      	str	r2, [r3, #8]
      break;
 8004ba0:	e04f      	b.n	8004c42 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004bb2:	f000 f95c 	bl	8004e6e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	689a      	ldr	r2, [r3, #8]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004bc4:	609a      	str	r2, [r3, #8]
      break;
 8004bc6:	e03c      	b.n	8004c42 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	f000 f8d1 	bl	8004d7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2150      	movs	r1, #80	; 0x50
 8004be0:	4618      	mov	r0, r3
 8004be2:	f000 f928 	bl	8004e36 <TIM_ITRx_SetConfig>
      break;
 8004be6:	e02c      	b.n	8004c42 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	f000 f8ef 	bl	8004dd8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2160      	movs	r1, #96	; 0x60
 8004c00:	4618      	mov	r0, r3
 8004c02:	f000 f918 	bl	8004e36 <TIM_ITRx_SetConfig>
      break;
 8004c06:	e01c      	b.n	8004c42 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c14:	461a      	mov	r2, r3
 8004c16:	f000 f8b1 	bl	8004d7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2140      	movs	r1, #64	; 0x40
 8004c20:	4618      	mov	r0, r3
 8004c22:	f000 f908 	bl	8004e36 <TIM_ITRx_SetConfig>
      break;
 8004c26:	e00c      	b.n	8004c42 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4619      	mov	r1, r3
 8004c32:	4610      	mov	r0, r2
 8004c34:	f000 f8ff 	bl	8004e36 <TIM_ITRx_SetConfig>
      break;
 8004c38:	e003      	b.n	8004c42 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	73fb      	strb	r3, [r7, #15]
      break;
 8004c3e:	e000      	b.n	8004c42 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004c40:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2201      	movs	r2, #1
 8004c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3710      	adds	r7, #16
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004c64:	bf00      	nop
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bc80      	pop	{r7}
 8004c6c:	4770      	bx	lr

08004c6e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c6e:	b480      	push	{r7}
 8004c70:	b083      	sub	sp, #12
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c76:	bf00      	nop
 8004c78:	370c      	adds	r7, #12
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bc80      	pop	{r7}
 8004c7e:	4770      	bx	lr

08004c80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c88:	bf00      	nop
 8004c8a:	370c      	adds	r7, #12
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bc80      	pop	{r7}
 8004c90:	4770      	bx	lr

08004c92 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c92:	b480      	push	{r7}
 8004c94:	b083      	sub	sp, #12
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c9a:	bf00      	nop
 8004c9c:	370c      	adds	r7, #12
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bc80      	pop	{r7}
 8004ca2:	4770      	bx	lr

08004ca4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004cac:	bf00      	nop
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bc80      	pop	{r7}
 8004cb4:	4770      	bx	lr
	...

08004cb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b085      	sub	sp, #20
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4a29      	ldr	r2, [pc, #164]	; (8004d70 <TIM_Base_SetConfig+0xb8>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d003      	beq.n	8004cd8 <TIM_Base_SetConfig+0x20>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cd6:	d108      	bne.n	8004cea <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	68fa      	ldr	r2, [r7, #12]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a20      	ldr	r2, [pc, #128]	; (8004d70 <TIM_Base_SetConfig+0xb8>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d00b      	beq.n	8004d0a <TIM_Base_SetConfig+0x52>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cf8:	d007      	beq.n	8004d0a <TIM_Base_SetConfig+0x52>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a1d      	ldr	r2, [pc, #116]	; (8004d74 <TIM_Base_SetConfig+0xbc>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d003      	beq.n	8004d0a <TIM_Base_SetConfig+0x52>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a1c      	ldr	r2, [pc, #112]	; (8004d78 <TIM_Base_SetConfig+0xc0>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d108      	bne.n	8004d1c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	695b      	ldr	r3, [r3, #20]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	689a      	ldr	r2, [r3, #8]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a0b      	ldr	r2, [pc, #44]	; (8004d70 <TIM_Base_SetConfig+0xb8>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d007      	beq.n	8004d58 <TIM_Base_SetConfig+0xa0>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a0a      	ldr	r2, [pc, #40]	; (8004d74 <TIM_Base_SetConfig+0xbc>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d003      	beq.n	8004d58 <TIM_Base_SetConfig+0xa0>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4a09      	ldr	r2, [pc, #36]	; (8004d78 <TIM_Base_SetConfig+0xc0>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d103      	bne.n	8004d60 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	691a      	ldr	r2, [r3, #16]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	615a      	str	r2, [r3, #20]
}
 8004d66:	bf00      	nop
 8004d68:	3714      	adds	r7, #20
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bc80      	pop	{r7}
 8004d6e:	4770      	bx	lr
 8004d70:	40012c00 	.word	0x40012c00
 8004d74:	40014400 	.word	0x40014400
 8004d78:	40014800 	.word	0x40014800

08004d7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b087      	sub	sp, #28
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	60b9      	str	r1, [r7, #8]
 8004d86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6a1b      	ldr	r3, [r3, #32]
 8004d8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6a1b      	ldr	r3, [r3, #32]
 8004d92:	f023 0201 	bic.w	r2, r3, #1
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	699b      	ldr	r3, [r3, #24]
 8004d9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004da6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	011b      	lsls	r3, r3, #4
 8004dac:	693a      	ldr	r2, [r7, #16]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	f023 030a 	bic.w	r3, r3, #10
 8004db8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004dba:	697a      	ldr	r2, [r7, #20]
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	693a      	ldr	r2, [r7, #16]
 8004dc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	697a      	ldr	r2, [r7, #20]
 8004dcc:	621a      	str	r2, [r3, #32]
}
 8004dce:	bf00      	nop
 8004dd0:	371c      	adds	r7, #28
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bc80      	pop	{r7}
 8004dd6:	4770      	bx	lr

08004dd8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b087      	sub	sp, #28
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6a1b      	ldr	r3, [r3, #32]
 8004de8:	f023 0210 	bic.w	r2, r3, #16
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	699b      	ldr	r3, [r3, #24]
 8004df4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6a1b      	ldr	r3, [r3, #32]
 8004dfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e02:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	031b      	lsls	r3, r3, #12
 8004e08:	697a      	ldr	r2, [r7, #20]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e14:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	011b      	lsls	r3, r3, #4
 8004e1a:	693a      	ldr	r2, [r7, #16]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	693a      	ldr	r2, [r7, #16]
 8004e2a:	621a      	str	r2, [r3, #32]
}
 8004e2c:	bf00      	nop
 8004e2e:	371c      	adds	r7, #28
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bc80      	pop	{r7}
 8004e34:	4770      	bx	lr

08004e36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e36:	b480      	push	{r7}
 8004e38:	b085      	sub	sp, #20
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
 8004e3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004e4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e52:	683a      	ldr	r2, [r7, #0]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	f043 0307 	orr.w	r3, r3, #7
 8004e5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	68fa      	ldr	r2, [r7, #12]
 8004e62:	609a      	str	r2, [r3, #8]
}
 8004e64:	bf00      	nop
 8004e66:	3714      	adds	r7, #20
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bc80      	pop	{r7}
 8004e6c:	4770      	bx	lr

08004e6e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e6e:	b480      	push	{r7}
 8004e70:	b087      	sub	sp, #28
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	60f8      	str	r0, [r7, #12]
 8004e76:	60b9      	str	r1, [r7, #8]
 8004e78:	607a      	str	r2, [r7, #4]
 8004e7a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e88:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	021a      	lsls	r2, r3, #8
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	431a      	orrs	r2, r3
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	697a      	ldr	r2, [r7, #20]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	697a      	ldr	r2, [r7, #20]
 8004ea0:	609a      	str	r2, [r3, #8]
}
 8004ea2:	bf00      	nop
 8004ea4:	371c      	adds	r7, #28
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bc80      	pop	{r7}
 8004eaa:	4770      	bx	lr

08004eac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b085      	sub	sp, #20
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d101      	bne.n	8004ec4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ec0:	2302      	movs	r3, #2
 8004ec2:	e04a      	b.n	8004f5a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2202      	movs	r2, #2
 8004ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a1e      	ldr	r2, [pc, #120]	; (8004f64 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d108      	bne.n	8004f00 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004ef4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	68fa      	ldr	r2, [r7, #12]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68fa      	ldr	r2, [r7, #12]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a11      	ldr	r2, [pc, #68]	; (8004f64 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d004      	beq.n	8004f2e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f2c:	d10c      	bne.n	8004f48 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	68ba      	ldr	r2, [r7, #8]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	68ba      	ldr	r2, [r7, #8]
 8004f46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3714      	adds	r7, #20
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bc80      	pop	{r7}
 8004f62:	4770      	bx	lr
 8004f64:	40012c00 	.word	0x40012c00

08004f68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bc80      	pop	{r7}
 8004f78:	4770      	bx	lr

08004f7a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f7a:	b480      	push	{r7}
 8004f7c:	b083      	sub	sp, #12
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f82:	bf00      	nop
 8004f84:	370c      	adds	r7, #12
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bc80      	pop	{r7}
 8004f8a:	4770      	bx	lr

08004f8c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004f94:	bf00      	nop
 8004f96:	370c      	adds	r7, #12
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bc80      	pop	{r7}
 8004f9c:	4770      	bx	lr

08004f9e <LL_RCC_GetUSARTClockSource>:
{
 8004f9e:	b480      	push	{r7}
 8004fa0:	b083      	sub	sp, #12
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8004fa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004faa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	401a      	ands	r2, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	041b      	lsls	r3, r3, #16
 8004fb6:	4313      	orrs	r3, r2
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bc80      	pop	{r7}
 8004fc0:	4770      	bx	lr

08004fc2 <LL_RCC_GetLPUARTClockSource>:
{
 8004fc2:	b480      	push	{r7}
 8004fc4:	b083      	sub	sp, #12
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004fca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fce:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4013      	ands	r3, r2
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	370c      	adds	r7, #12
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bc80      	pop	{r7}
 8004fde:	4770      	bx	lr

08004fe0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b082      	sub	sp, #8
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d101      	bne.n	8004ff2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e042      	b.n	8005078 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d106      	bne.n	800500a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f7fc fc65 	bl	80018d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2224      	movs	r2, #36	; 0x24
 800500e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f022 0201 	bic.w	r2, r2, #1
 8005020:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f000 fc48 	bl	80058b8 <UART_SetConfig>
 8005028:	4603      	mov	r3, r0
 800502a:	2b01      	cmp	r3, #1
 800502c:	d101      	bne.n	8005032 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e022      	b.n	8005078 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005036:	2b00      	cmp	r3, #0
 8005038:	d002      	beq.n	8005040 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 feb0 	bl	8005da0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	685a      	ldr	r2, [r3, #4]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800504e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	689a      	ldr	r2, [r3, #8]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800505e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f042 0201 	orr.w	r2, r2, #1
 800506e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 ff36 	bl	8005ee2 <UART_CheckIdleState>
 8005076:	4603      	mov	r3, r0
}
 8005078:	4618      	mov	r0, r3
 800507a:	3708      	adds	r7, #8
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b08a      	sub	sp, #40	; 0x28
 8005084:	af02      	add	r7, sp, #8
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	60b9      	str	r1, [r7, #8]
 800508a:	603b      	str	r3, [r7, #0]
 800508c:	4613      	mov	r3, r2
 800508e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005096:	2b20      	cmp	r3, #32
 8005098:	d173      	bne.n	8005182 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d002      	beq.n	80050a6 <HAL_UART_Transmit+0x26>
 80050a0:	88fb      	ldrh	r3, [r7, #6]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d101      	bne.n	80050aa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e06c      	b.n	8005184 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2221      	movs	r2, #33	; 0x21
 80050b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050ba:	f7fc f9c5 	bl	8001448 <HAL_GetTick>
 80050be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	88fa      	ldrh	r2, [r7, #6]
 80050c4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	88fa      	ldrh	r2, [r7, #6]
 80050cc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050d8:	d108      	bne.n	80050ec <HAL_UART_Transmit+0x6c>
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d104      	bne.n	80050ec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80050e2:	2300      	movs	r3, #0
 80050e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	61bb      	str	r3, [r7, #24]
 80050ea:	e003      	b.n	80050f4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050f0:	2300      	movs	r3, #0
 80050f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80050f4:	e02c      	b.n	8005150 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	9300      	str	r3, [sp, #0]
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	2200      	movs	r2, #0
 80050fe:	2180      	movs	r1, #128	; 0x80
 8005100:	68f8      	ldr	r0, [r7, #12]
 8005102:	f000 ff3c 	bl	8005f7e <UART_WaitOnFlagUntilTimeout>
 8005106:	4603      	mov	r3, r0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d001      	beq.n	8005110 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800510c:	2303      	movs	r3, #3
 800510e:	e039      	b.n	8005184 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d10b      	bne.n	800512e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	881b      	ldrh	r3, [r3, #0]
 800511a:	461a      	mov	r2, r3
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005124:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	3302      	adds	r3, #2
 800512a:	61bb      	str	r3, [r7, #24]
 800512c:	e007      	b.n	800513e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	781a      	ldrb	r2, [r3, #0]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	3301      	adds	r3, #1
 800513c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005144:	b29b      	uxth	r3, r3
 8005146:	3b01      	subs	r3, #1
 8005148:	b29a      	uxth	r2, r3
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005156:	b29b      	uxth	r3, r3
 8005158:	2b00      	cmp	r3, #0
 800515a:	d1cc      	bne.n	80050f6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	9300      	str	r3, [sp, #0]
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	2200      	movs	r2, #0
 8005164:	2140      	movs	r1, #64	; 0x40
 8005166:	68f8      	ldr	r0, [r7, #12]
 8005168:	f000 ff09 	bl	8005f7e <UART_WaitOnFlagUntilTimeout>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d001      	beq.n	8005176 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	e006      	b.n	8005184 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2220      	movs	r2, #32
 800517a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800517e:	2300      	movs	r3, #0
 8005180:	e000      	b.n	8005184 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8005182:	2302      	movs	r3, #2
  }
}
 8005184:	4618      	mov	r0, r3
 8005186:	3720      	adds	r7, #32
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b08a      	sub	sp, #40	; 0x28
 8005190:	af00      	add	r7, sp, #0
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	60b9      	str	r1, [r7, #8]
 8005196:	4613      	mov	r3, r2
 8005198:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051a0:	2b20      	cmp	r3, #32
 80051a2:	d137      	bne.n	8005214 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d002      	beq.n	80051b0 <HAL_UART_Receive_DMA+0x24>
 80051aa:	88fb      	ldrh	r3, [r7, #6]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d101      	bne.n	80051b4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e030      	b.n	8005216 <HAL_UART_Receive_DMA+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2200      	movs	r2, #0
 80051b8:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a18      	ldr	r2, [pc, #96]	; (8005220 <HAL_UART_Receive_DMA+0x94>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d01f      	beq.n	8005204 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d018      	beq.n	8005204 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	e853 3f00 	ldrex	r3, [r3]
 80051de:	613b      	str	r3, [r7, #16]
   return(result);
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80051e6:	627b      	str	r3, [r7, #36]	; 0x24
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	461a      	mov	r2, r3
 80051ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f0:	623b      	str	r3, [r7, #32]
 80051f2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f4:	69f9      	ldr	r1, [r7, #28]
 80051f6:	6a3a      	ldr	r2, [r7, #32]
 80051f8:	e841 2300 	strex	r3, r2, [r1]
 80051fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d1e6      	bne.n	80051d2 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005204:	88fb      	ldrh	r3, [r7, #6]
 8005206:	461a      	mov	r2, r3
 8005208:	68b9      	ldr	r1, [r7, #8]
 800520a:	68f8      	ldr	r0, [r7, #12]
 800520c:	f000 ff80 	bl	8006110 <UART_Start_Receive_DMA>
 8005210:	4603      	mov	r3, r0
 8005212:	e000      	b.n	8005216 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005214:	2302      	movs	r3, #2
  }
}
 8005216:	4618      	mov	r0, r3
 8005218:	3728      	adds	r7, #40	; 0x28
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	40008000 	.word	0x40008000

08005224 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b0ba      	sub	sp, #232	; 0xe8
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	69db      	ldr	r3, [r3, #28]
 8005232:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800524a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800524e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005252:	4013      	ands	r3, r2
 8005254:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005258:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800525c:	2b00      	cmp	r3, #0
 800525e:	d11b      	bne.n	8005298 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005264:	f003 0320 	and.w	r3, r3, #32
 8005268:	2b00      	cmp	r3, #0
 800526a:	d015      	beq.n	8005298 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800526c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005270:	f003 0320 	and.w	r3, r3, #32
 8005274:	2b00      	cmp	r3, #0
 8005276:	d105      	bne.n	8005284 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005278:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800527c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005280:	2b00      	cmp	r3, #0
 8005282:	d009      	beq.n	8005298 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005288:	2b00      	cmp	r3, #0
 800528a:	f000 82e3 	beq.w	8005854 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	4798      	blx	r3
      }
      return;
 8005296:	e2dd      	b.n	8005854 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005298:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800529c:	2b00      	cmp	r3, #0
 800529e:	f000 8123 	beq.w	80054e8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80052a2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80052a6:	4b8d      	ldr	r3, [pc, #564]	; (80054dc <HAL_UART_IRQHandler+0x2b8>)
 80052a8:	4013      	ands	r3, r2
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d106      	bne.n	80052bc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80052ae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80052b2:	4b8b      	ldr	r3, [pc, #556]	; (80054e0 <HAL_UART_IRQHandler+0x2bc>)
 80052b4:	4013      	ands	r3, r2
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	f000 8116 	beq.w	80054e8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80052bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052c0:	f003 0301 	and.w	r3, r3, #1
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d011      	beq.n	80052ec <HAL_UART_IRQHandler+0xc8>
 80052c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d00b      	beq.n	80052ec <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2201      	movs	r2, #1
 80052da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052e2:	f043 0201 	orr.w	r2, r3, #1
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80052ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052f0:	f003 0302 	and.w	r3, r3, #2
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d011      	beq.n	800531c <HAL_UART_IRQHandler+0xf8>
 80052f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052fc:	f003 0301 	and.w	r3, r3, #1
 8005300:	2b00      	cmp	r3, #0
 8005302:	d00b      	beq.n	800531c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2202      	movs	r2, #2
 800530a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005312:	f043 0204 	orr.w	r2, r3, #4
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800531c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005320:	f003 0304 	and.w	r3, r3, #4
 8005324:	2b00      	cmp	r3, #0
 8005326:	d011      	beq.n	800534c <HAL_UART_IRQHandler+0x128>
 8005328:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800532c:	f003 0301 	and.w	r3, r3, #1
 8005330:	2b00      	cmp	r3, #0
 8005332:	d00b      	beq.n	800534c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2204      	movs	r2, #4
 800533a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005342:	f043 0202 	orr.w	r2, r3, #2
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800534c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005350:	f003 0308 	and.w	r3, r3, #8
 8005354:	2b00      	cmp	r3, #0
 8005356:	d017      	beq.n	8005388 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800535c:	f003 0320 	and.w	r3, r3, #32
 8005360:	2b00      	cmp	r3, #0
 8005362:	d105      	bne.n	8005370 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005364:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005368:	4b5c      	ldr	r3, [pc, #368]	; (80054dc <HAL_UART_IRQHandler+0x2b8>)
 800536a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800536c:	2b00      	cmp	r3, #0
 800536e:	d00b      	beq.n	8005388 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2208      	movs	r2, #8
 8005376:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800537e:	f043 0208 	orr.w	r2, r3, #8
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005388:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800538c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005390:	2b00      	cmp	r3, #0
 8005392:	d012      	beq.n	80053ba <HAL_UART_IRQHandler+0x196>
 8005394:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005398:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800539c:	2b00      	cmp	r3, #0
 800539e:	d00c      	beq.n	80053ba <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053b0:	f043 0220 	orr.w	r2, r3, #32
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	f000 8249 	beq.w	8005858 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80053c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053ca:	f003 0320 	and.w	r3, r3, #32
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d013      	beq.n	80053fa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80053d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053d6:	f003 0320 	and.w	r3, r3, #32
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d105      	bne.n	80053ea <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80053de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d007      	beq.n	80053fa <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d003      	beq.n	80053fa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005400:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800540e:	2b40      	cmp	r3, #64	; 0x40
 8005410:	d005      	beq.n	800541e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005412:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005416:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800541a:	2b00      	cmp	r3, #0
 800541c:	d054      	beq.n	80054c8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 ff5c 	bl	80062dc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800542e:	2b40      	cmp	r3, #64	; 0x40
 8005430:	d146      	bne.n	80054c0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	3308      	adds	r3, #8
 8005438:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800543c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005440:	e853 3f00 	ldrex	r3, [r3]
 8005444:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005448:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800544c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005450:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	3308      	adds	r3, #8
 800545a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800545e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005462:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005466:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800546a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800546e:	e841 2300 	strex	r3, r2, [r1]
 8005472:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005476:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d1d9      	bne.n	8005432 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005484:	2b00      	cmp	r3, #0
 8005486:	d017      	beq.n	80054b8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800548e:	4a15      	ldr	r2, [pc, #84]	; (80054e4 <HAL_UART_IRQHandler+0x2c0>)
 8005490:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005498:	4618      	mov	r0, r3
 800549a:	f7fc fdfd 	bl	8002098 <HAL_DMA_Abort_IT>
 800549e:	4603      	mov	r3, r0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d019      	beq.n	80054d8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80054b2:	4610      	mov	r0, r2
 80054b4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054b6:	e00f      	b.n	80054d8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f000 f9e9 	bl	8005890 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054be:	e00b      	b.n	80054d8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 f9e5 	bl	8005890 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054c6:	e007      	b.n	80054d8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f000 f9e1 	bl	8005890 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80054d6:	e1bf      	b.n	8005858 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054d8:	bf00      	nop
    return;
 80054da:	e1bd      	b.n	8005858 <HAL_UART_IRQHandler+0x634>
 80054dc:	10000001 	.word	0x10000001
 80054e0:	04000120 	.word	0x04000120
 80054e4:	08006591 	.word	0x08006591

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	f040 8153 	bne.w	8005798 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80054f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054f6:	f003 0310 	and.w	r3, r3, #16
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	f000 814c 	beq.w	8005798 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005500:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005504:	f003 0310 	and.w	r3, r3, #16
 8005508:	2b00      	cmp	r3, #0
 800550a:	f000 8145 	beq.w	8005798 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	2210      	movs	r2, #16
 8005514:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005520:	2b40      	cmp	r3, #64	; 0x40
 8005522:	f040 80bb 	bne.w	800569c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005534:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005538:	2b00      	cmp	r3, #0
 800553a:	f000 818f 	beq.w	800585c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005544:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005548:	429a      	cmp	r2, r3
 800554a:	f080 8187 	bcs.w	800585c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005554:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0320 	and.w	r3, r3, #32
 8005566:	2b00      	cmp	r3, #0
 8005568:	f040 8087 	bne.w	800567a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005574:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005578:	e853 3f00 	ldrex	r3, [r3]
 800557c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005580:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005584:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005588:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	461a      	mov	r2, r3
 8005592:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005596:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800559a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800559e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80055a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80055a6:	e841 2300 	strex	r3, r2, [r1]
 80055aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80055ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d1da      	bne.n	800556c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	3308      	adds	r3, #8
 80055bc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055c0:	e853 3f00 	ldrex	r3, [r3]
 80055c4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80055c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055c8:	f023 0301 	bic.w	r3, r3, #1
 80055cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	3308      	adds	r3, #8
 80055d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80055da:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80055de:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80055e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80055e6:	e841 2300 	strex	r3, r2, [r1]
 80055ea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80055ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d1e1      	bne.n	80055b6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	3308      	adds	r3, #8
 80055f8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055fc:	e853 3f00 	ldrex	r3, [r3]
 8005600:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005602:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005604:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005608:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	3308      	adds	r3, #8
 8005612:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005616:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005618:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800561a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800561c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800561e:	e841 2300 	strex	r3, r2, [r1]
 8005622:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005624:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005626:	2b00      	cmp	r3, #0
 8005628:	d1e3      	bne.n	80055f2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2220      	movs	r2, #32
 800562e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800563e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005640:	e853 3f00 	ldrex	r3, [r3]
 8005644:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005646:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005648:	f023 0310 	bic.w	r3, r3, #16
 800564c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	461a      	mov	r2, r3
 8005656:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800565a:	65bb      	str	r3, [r7, #88]	; 0x58
 800565c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800565e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005660:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005662:	e841 2300 	strex	r3, r2, [r1]
 8005666:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005668:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800566a:	2b00      	cmp	r3, #0
 800566c:	d1e4      	bne.n	8005638 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005674:	4618      	mov	r0, r3
 8005676:	f7fc fcb1 	bl	8001fdc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2202      	movs	r2, #2
 800567e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800568c:	b29b      	uxth	r3, r3
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	b29b      	uxth	r3, r3
 8005692:	4619      	mov	r1, r3
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f000 f904 	bl	80058a2 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800569a:	e0df      	b.n	800585c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	f000 80d1 	beq.w	8005860 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80056be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	f000 80cc 	beq.w	8005860 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d0:	e853 3f00 	ldrex	r3, [r3]
 80056d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80056d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	461a      	mov	r2, r3
 80056e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80056ea:	647b      	str	r3, [r7, #68]	; 0x44
 80056ec:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80056f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80056f2:	e841 2300 	strex	r3, r2, [r1]
 80056f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80056f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d1e4      	bne.n	80056c8 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	3308      	adds	r3, #8
 8005704:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005708:	e853 3f00 	ldrex	r3, [r3]
 800570c:	623b      	str	r3, [r7, #32]
   return(result);
 800570e:	6a3b      	ldr	r3, [r7, #32]
 8005710:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005714:	f023 0301 	bic.w	r3, r3, #1
 8005718:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	3308      	adds	r3, #8
 8005722:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005726:	633a      	str	r2, [r7, #48]	; 0x30
 8005728:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800572a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800572c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800572e:	e841 2300 	strex	r3, r2, [r1]
 8005732:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005736:	2b00      	cmp	r3, #0
 8005738:	d1e1      	bne.n	80056fe <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2220      	movs	r2, #32
 800573e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	e853 3f00 	ldrex	r3, [r3]
 800575a:	60fb      	str	r3, [r7, #12]
   return(result);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f023 0310 	bic.w	r3, r3, #16
 8005762:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	461a      	mov	r2, r3
 800576c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005770:	61fb      	str	r3, [r7, #28]
 8005772:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005774:	69b9      	ldr	r1, [r7, #24]
 8005776:	69fa      	ldr	r2, [r7, #28]
 8005778:	e841 2300 	strex	r3, r2, [r1]
 800577c:	617b      	str	r3, [r7, #20]
   return(result);
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d1e4      	bne.n	800574e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2202      	movs	r2, #2
 8005788:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800578a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800578e:	4619      	mov	r1, r3
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f000 f886 	bl	80058a2 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005796:	e063      	b.n	8005860 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005798:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800579c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d00e      	beq.n	80057c2 <HAL_UART_IRQHandler+0x59e>
 80057a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d008      	beq.n	80057c2 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80057b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f000 ff29 	bl	8006612 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80057c0:	e051      	b.n	8005866 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80057c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d014      	beq.n	80057f8 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80057ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d105      	bne.n	80057e6 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80057da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d008      	beq.n	80057f8 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d03a      	beq.n	8005864 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	4798      	blx	r3
    }
    return;
 80057f6:	e035      	b.n	8005864 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80057f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005800:	2b00      	cmp	r3, #0
 8005802:	d009      	beq.n	8005818 <HAL_UART_IRQHandler+0x5f4>
 8005804:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800580c:	2b00      	cmp	r3, #0
 800580e:	d003      	beq.n	8005818 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f000 fed3 	bl	80065bc <UART_EndTransmit_IT>
    return;
 8005816:	e026      	b.n	8005866 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005818:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800581c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005820:	2b00      	cmp	r3, #0
 8005822:	d009      	beq.n	8005838 <HAL_UART_IRQHandler+0x614>
 8005824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005828:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800582c:	2b00      	cmp	r3, #0
 800582e:	d003      	beq.n	8005838 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 ff00 	bl	8006636 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005836:	e016      	b.n	8005866 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005838:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800583c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005840:	2b00      	cmp	r3, #0
 8005842:	d010      	beq.n	8005866 <HAL_UART_IRQHandler+0x642>
 8005844:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005848:	2b00      	cmp	r3, #0
 800584a:	da0c      	bge.n	8005866 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f000 fee9 	bl	8006624 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005852:	e008      	b.n	8005866 <HAL_UART_IRQHandler+0x642>
      return;
 8005854:	bf00      	nop
 8005856:	e006      	b.n	8005866 <HAL_UART_IRQHandler+0x642>
    return;
 8005858:	bf00      	nop
 800585a:	e004      	b.n	8005866 <HAL_UART_IRQHandler+0x642>
      return;
 800585c:	bf00      	nop
 800585e:	e002      	b.n	8005866 <HAL_UART_IRQHandler+0x642>
      return;
 8005860:	bf00      	nop
 8005862:	e000      	b.n	8005866 <HAL_UART_IRQHandler+0x642>
    return;
 8005864:	bf00      	nop
  }
}
 8005866:	37e8      	adds	r7, #232	; 0xe8
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005874:	bf00      	nop
 8005876:	370c      	adds	r7, #12
 8005878:	46bd      	mov	sp, r7
 800587a:	bc80      	pop	{r7}
 800587c:	4770      	bx	lr

0800587e <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800587e:	b480      	push	{r7}
 8005880:	b083      	sub	sp, #12
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005886:	bf00      	nop
 8005888:	370c      	adds	r7, #12
 800588a:	46bd      	mov	sp, r7
 800588c:	bc80      	pop	{r7}
 800588e:	4770      	bx	lr

08005890 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005898:	bf00      	nop
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	bc80      	pop	{r7}
 80058a0:	4770      	bx	lr

080058a2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80058a2:	b480      	push	{r7}
 80058a4:	b083      	sub	sp, #12
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	6078      	str	r0, [r7, #4]
 80058aa:	460b      	mov	r3, r1
 80058ac:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80058ae:	bf00      	nop
 80058b0:	370c      	adds	r7, #12
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bc80      	pop	{r7}
 80058b6:	4770      	bx	lr

080058b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058bc:	b08c      	sub	sp, #48	; 0x30
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80058c2:	2300      	movs	r3, #0
 80058c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	689a      	ldr	r2, [r3, #8]
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	691b      	ldr	r3, [r3, #16]
 80058d0:	431a      	orrs	r2, r3
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	695b      	ldr	r3, [r3, #20]
 80058d6:	431a      	orrs	r2, r3
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	69db      	ldr	r3, [r3, #28]
 80058dc:	4313      	orrs	r3, r2
 80058de:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	4b94      	ldr	r3, [pc, #592]	; (8005b38 <UART_SetConfig+0x280>)
 80058e8:	4013      	ands	r3, r2
 80058ea:	697a      	ldr	r2, [r7, #20]
 80058ec:	6812      	ldr	r2, [r2, #0]
 80058ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058f0:	430b      	orrs	r3, r1
 80058f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	68da      	ldr	r2, [r3, #12]
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	430a      	orrs	r2, r1
 8005908:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	699b      	ldr	r3, [r3, #24]
 800590e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a89      	ldr	r2, [pc, #548]	; (8005b3c <UART_SetConfig+0x284>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d004      	beq.n	8005924 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	6a1b      	ldr	r3, [r3, #32]
 800591e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005920:	4313      	orrs	r3, r2
 8005922:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800592e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005932:	697a      	ldr	r2, [r7, #20]
 8005934:	6812      	ldr	r2, [r2, #0]
 8005936:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005938:	430b      	orrs	r3, r1
 800593a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005942:	f023 010f 	bic.w	r1, r3, #15
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	430a      	orrs	r2, r1
 8005950:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a7a      	ldr	r2, [pc, #488]	; (8005b40 <UART_SetConfig+0x288>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d127      	bne.n	80059ac <UART_SetConfig+0xf4>
 800595c:	2003      	movs	r0, #3
 800595e:	f7ff fb1e 	bl	8004f9e <LL_RCC_GetUSARTClockSource>
 8005962:	4603      	mov	r3, r0
 8005964:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8005968:	2b03      	cmp	r3, #3
 800596a:	d81b      	bhi.n	80059a4 <UART_SetConfig+0xec>
 800596c:	a201      	add	r2, pc, #4	; (adr r2, 8005974 <UART_SetConfig+0xbc>)
 800596e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005972:	bf00      	nop
 8005974:	08005985 	.word	0x08005985
 8005978:	08005995 	.word	0x08005995
 800597c:	0800598d 	.word	0x0800598d
 8005980:	0800599d 	.word	0x0800599d
 8005984:	2301      	movs	r3, #1
 8005986:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800598a:	e080      	b.n	8005a8e <UART_SetConfig+0x1d6>
 800598c:	2302      	movs	r3, #2
 800598e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005992:	e07c      	b.n	8005a8e <UART_SetConfig+0x1d6>
 8005994:	2304      	movs	r3, #4
 8005996:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800599a:	e078      	b.n	8005a8e <UART_SetConfig+0x1d6>
 800599c:	2308      	movs	r3, #8
 800599e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059a2:	e074      	b.n	8005a8e <UART_SetConfig+0x1d6>
 80059a4:	2310      	movs	r3, #16
 80059a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059aa:	e070      	b.n	8005a8e <UART_SetConfig+0x1d6>
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a64      	ldr	r2, [pc, #400]	; (8005b44 <UART_SetConfig+0x28c>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d138      	bne.n	8005a28 <UART_SetConfig+0x170>
 80059b6:	200c      	movs	r0, #12
 80059b8:	f7ff faf1 	bl	8004f9e <LL_RCC_GetUSARTClockSource>
 80059bc:	4603      	mov	r3, r0
 80059be:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80059c2:	2b0c      	cmp	r3, #12
 80059c4:	d82c      	bhi.n	8005a20 <UART_SetConfig+0x168>
 80059c6:	a201      	add	r2, pc, #4	; (adr r2, 80059cc <UART_SetConfig+0x114>)
 80059c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059cc:	08005a01 	.word	0x08005a01
 80059d0:	08005a21 	.word	0x08005a21
 80059d4:	08005a21 	.word	0x08005a21
 80059d8:	08005a21 	.word	0x08005a21
 80059dc:	08005a11 	.word	0x08005a11
 80059e0:	08005a21 	.word	0x08005a21
 80059e4:	08005a21 	.word	0x08005a21
 80059e8:	08005a21 	.word	0x08005a21
 80059ec:	08005a09 	.word	0x08005a09
 80059f0:	08005a21 	.word	0x08005a21
 80059f4:	08005a21 	.word	0x08005a21
 80059f8:	08005a21 	.word	0x08005a21
 80059fc:	08005a19 	.word	0x08005a19
 8005a00:	2300      	movs	r3, #0
 8005a02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a06:	e042      	b.n	8005a8e <UART_SetConfig+0x1d6>
 8005a08:	2302      	movs	r3, #2
 8005a0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a0e:	e03e      	b.n	8005a8e <UART_SetConfig+0x1d6>
 8005a10:	2304      	movs	r3, #4
 8005a12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a16:	e03a      	b.n	8005a8e <UART_SetConfig+0x1d6>
 8005a18:	2308      	movs	r3, #8
 8005a1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a1e:	e036      	b.n	8005a8e <UART_SetConfig+0x1d6>
 8005a20:	2310      	movs	r3, #16
 8005a22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a26:	e032      	b.n	8005a8e <UART_SetConfig+0x1d6>
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a43      	ldr	r2, [pc, #268]	; (8005b3c <UART_SetConfig+0x284>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d12a      	bne.n	8005a88 <UART_SetConfig+0x1d0>
 8005a32:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8005a36:	f7ff fac4 	bl	8004fc2 <LL_RCC_GetLPUARTClockSource>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a40:	d01a      	beq.n	8005a78 <UART_SetConfig+0x1c0>
 8005a42:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a46:	d81b      	bhi.n	8005a80 <UART_SetConfig+0x1c8>
 8005a48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a4c:	d00c      	beq.n	8005a68 <UART_SetConfig+0x1b0>
 8005a4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a52:	d815      	bhi.n	8005a80 <UART_SetConfig+0x1c8>
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d003      	beq.n	8005a60 <UART_SetConfig+0x1a8>
 8005a58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a5c:	d008      	beq.n	8005a70 <UART_SetConfig+0x1b8>
 8005a5e:	e00f      	b.n	8005a80 <UART_SetConfig+0x1c8>
 8005a60:	2300      	movs	r3, #0
 8005a62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a66:	e012      	b.n	8005a8e <UART_SetConfig+0x1d6>
 8005a68:	2302      	movs	r3, #2
 8005a6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a6e:	e00e      	b.n	8005a8e <UART_SetConfig+0x1d6>
 8005a70:	2304      	movs	r3, #4
 8005a72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a76:	e00a      	b.n	8005a8e <UART_SetConfig+0x1d6>
 8005a78:	2308      	movs	r3, #8
 8005a7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a7e:	e006      	b.n	8005a8e <UART_SetConfig+0x1d6>
 8005a80:	2310      	movs	r3, #16
 8005a82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a86:	e002      	b.n	8005a8e <UART_SetConfig+0x1d6>
 8005a88:	2310      	movs	r3, #16
 8005a8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a2a      	ldr	r2, [pc, #168]	; (8005b3c <UART_SetConfig+0x284>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	f040 80a4 	bne.w	8005be2 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005a9a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005a9e:	2b08      	cmp	r3, #8
 8005aa0:	d823      	bhi.n	8005aea <UART_SetConfig+0x232>
 8005aa2:	a201      	add	r2, pc, #4	; (adr r2, 8005aa8 <UART_SetConfig+0x1f0>)
 8005aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa8:	08005acd 	.word	0x08005acd
 8005aac:	08005aeb 	.word	0x08005aeb
 8005ab0:	08005ad5 	.word	0x08005ad5
 8005ab4:	08005aeb 	.word	0x08005aeb
 8005ab8:	08005adb 	.word	0x08005adb
 8005abc:	08005aeb 	.word	0x08005aeb
 8005ac0:	08005aeb 	.word	0x08005aeb
 8005ac4:	08005aeb 	.word	0x08005aeb
 8005ac8:	08005ae3 	.word	0x08005ae3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005acc:	f7fd fea4 	bl	8003818 <HAL_RCC_GetPCLK1Freq>
 8005ad0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ad2:	e010      	b.n	8005af6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ad4:	4b1c      	ldr	r3, [pc, #112]	; (8005b48 <UART_SetConfig+0x290>)
 8005ad6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005ad8:	e00d      	b.n	8005af6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ada:	f7fd fde9 	bl	80036b0 <HAL_RCC_GetSysClockFreq>
 8005ade:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ae0:	e009      	b.n	8005af6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ae2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ae6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005ae8:	e005      	b.n	8005af6 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8005aea:	2300      	movs	r3, #0
 8005aec:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005af4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	f000 8137 	beq.w	8005d6c <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b02:	4a12      	ldr	r2, [pc, #72]	; (8005b4c <UART_SetConfig+0x294>)
 8005b04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b08:	461a      	mov	r2, r3
 8005b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b10:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	685a      	ldr	r2, [r3, #4]
 8005b16:	4613      	mov	r3, r2
 8005b18:	005b      	lsls	r3, r3, #1
 8005b1a:	4413      	add	r3, r2
 8005b1c:	69ba      	ldr	r2, [r7, #24]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d305      	bcc.n	8005b2e <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b28:	69ba      	ldr	r2, [r7, #24]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d910      	bls.n	8005b50 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005b34:	e11a      	b.n	8005d6c <UART_SetConfig+0x4b4>
 8005b36:	bf00      	nop
 8005b38:	cfff69f3 	.word	0xcfff69f3
 8005b3c:	40008000 	.word	0x40008000
 8005b40:	40013800 	.word	0x40013800
 8005b44:	40004400 	.word	0x40004400
 8005b48:	00f42400 	.word	0x00f42400
 8005b4c:	0800b238 	.word	0x0800b238
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b52:	2200      	movs	r2, #0
 8005b54:	60bb      	str	r3, [r7, #8]
 8005b56:	60fa      	str	r2, [r7, #12]
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5c:	4a8e      	ldr	r2, [pc, #568]	; (8005d98 <UART_SetConfig+0x4e0>)
 8005b5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	2200      	movs	r2, #0
 8005b66:	603b      	str	r3, [r7, #0]
 8005b68:	607a      	str	r2, [r7, #4]
 8005b6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b6e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005b72:	f7fa fb55 	bl	8000220 <__aeabi_uldivmod>
 8005b76:	4602      	mov	r2, r0
 8005b78:	460b      	mov	r3, r1
 8005b7a:	4610      	mov	r0, r2
 8005b7c:	4619      	mov	r1, r3
 8005b7e:	f04f 0200 	mov.w	r2, #0
 8005b82:	f04f 0300 	mov.w	r3, #0
 8005b86:	020b      	lsls	r3, r1, #8
 8005b88:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005b8c:	0202      	lsls	r2, r0, #8
 8005b8e:	6979      	ldr	r1, [r7, #20]
 8005b90:	6849      	ldr	r1, [r1, #4]
 8005b92:	0849      	lsrs	r1, r1, #1
 8005b94:	2000      	movs	r0, #0
 8005b96:	460c      	mov	r4, r1
 8005b98:	4605      	mov	r5, r0
 8005b9a:	eb12 0804 	adds.w	r8, r2, r4
 8005b9e:	eb43 0905 	adc.w	r9, r3, r5
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	469a      	mov	sl, r3
 8005baa:	4693      	mov	fp, r2
 8005bac:	4652      	mov	r2, sl
 8005bae:	465b      	mov	r3, fp
 8005bb0:	4640      	mov	r0, r8
 8005bb2:	4649      	mov	r1, r9
 8005bb4:	f7fa fb34 	bl	8000220 <__aeabi_uldivmod>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	460b      	mov	r3, r1
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005bc0:	6a3b      	ldr	r3, [r7, #32]
 8005bc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005bc6:	d308      	bcc.n	8005bda <UART_SetConfig+0x322>
 8005bc8:	6a3b      	ldr	r3, [r7, #32]
 8005bca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bce:	d204      	bcs.n	8005bda <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	6a3a      	ldr	r2, [r7, #32]
 8005bd6:	60da      	str	r2, [r3, #12]
 8005bd8:	e0c8      	b.n	8005d6c <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005be0:	e0c4      	b.n	8005d6c <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	69db      	ldr	r3, [r3, #28]
 8005be6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bea:	d167      	bne.n	8005cbc <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8005bec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005bf0:	2b08      	cmp	r3, #8
 8005bf2:	d828      	bhi.n	8005c46 <UART_SetConfig+0x38e>
 8005bf4:	a201      	add	r2, pc, #4	; (adr r2, 8005bfc <UART_SetConfig+0x344>)
 8005bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bfa:	bf00      	nop
 8005bfc:	08005c21 	.word	0x08005c21
 8005c00:	08005c29 	.word	0x08005c29
 8005c04:	08005c31 	.word	0x08005c31
 8005c08:	08005c47 	.word	0x08005c47
 8005c0c:	08005c37 	.word	0x08005c37
 8005c10:	08005c47 	.word	0x08005c47
 8005c14:	08005c47 	.word	0x08005c47
 8005c18:	08005c47 	.word	0x08005c47
 8005c1c:	08005c3f 	.word	0x08005c3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c20:	f7fd fdfa 	bl	8003818 <HAL_RCC_GetPCLK1Freq>
 8005c24:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c26:	e014      	b.n	8005c52 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c28:	f7fd fe08 	bl	800383c <HAL_RCC_GetPCLK2Freq>
 8005c2c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c2e:	e010      	b.n	8005c52 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c30:	4b5a      	ldr	r3, [pc, #360]	; (8005d9c <UART_SetConfig+0x4e4>)
 8005c32:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c34:	e00d      	b.n	8005c52 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c36:	f7fd fd3b 	bl	80036b0 <HAL_RCC_GetSysClockFreq>
 8005c3a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c3c:	e009      	b.n	8005c52 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c42:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c44:	e005      	b.n	8005c52 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8005c46:	2300      	movs	r3, #0
 8005c48:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005c50:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	f000 8089 	beq.w	8005d6c <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5e:	4a4e      	ldr	r2, [pc, #312]	; (8005d98 <UART_SetConfig+0x4e0>)
 8005c60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c64:	461a      	mov	r2, r3
 8005c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c68:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c6c:	005a      	lsls	r2, r3, #1
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	085b      	lsrs	r3, r3, #1
 8005c74:	441a      	add	r2, r3
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c7e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c80:	6a3b      	ldr	r3, [r7, #32]
 8005c82:	2b0f      	cmp	r3, #15
 8005c84:	d916      	bls.n	8005cb4 <UART_SetConfig+0x3fc>
 8005c86:	6a3b      	ldr	r3, [r7, #32]
 8005c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c8c:	d212      	bcs.n	8005cb4 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c8e:	6a3b      	ldr	r3, [r7, #32]
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	f023 030f 	bic.w	r3, r3, #15
 8005c96:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c98:	6a3b      	ldr	r3, [r7, #32]
 8005c9a:	085b      	lsrs	r3, r3, #1
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	f003 0307 	and.w	r3, r3, #7
 8005ca2:	b29a      	uxth	r2, r3
 8005ca4:	8bfb      	ldrh	r3, [r7, #30]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	8bfa      	ldrh	r2, [r7, #30]
 8005cb0:	60da      	str	r2, [r3, #12]
 8005cb2:	e05b      	b.n	8005d6c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005cba:	e057      	b.n	8005d6c <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005cbc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005cc0:	2b08      	cmp	r3, #8
 8005cc2:	d828      	bhi.n	8005d16 <UART_SetConfig+0x45e>
 8005cc4:	a201      	add	r2, pc, #4	; (adr r2, 8005ccc <UART_SetConfig+0x414>)
 8005cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cca:	bf00      	nop
 8005ccc:	08005cf1 	.word	0x08005cf1
 8005cd0:	08005cf9 	.word	0x08005cf9
 8005cd4:	08005d01 	.word	0x08005d01
 8005cd8:	08005d17 	.word	0x08005d17
 8005cdc:	08005d07 	.word	0x08005d07
 8005ce0:	08005d17 	.word	0x08005d17
 8005ce4:	08005d17 	.word	0x08005d17
 8005ce8:	08005d17 	.word	0x08005d17
 8005cec:	08005d0f 	.word	0x08005d0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cf0:	f7fd fd92 	bl	8003818 <HAL_RCC_GetPCLK1Freq>
 8005cf4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005cf6:	e014      	b.n	8005d22 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cf8:	f7fd fda0 	bl	800383c <HAL_RCC_GetPCLK2Freq>
 8005cfc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005cfe:	e010      	b.n	8005d22 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d00:	4b26      	ldr	r3, [pc, #152]	; (8005d9c <UART_SetConfig+0x4e4>)
 8005d02:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005d04:	e00d      	b.n	8005d22 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d06:	f7fd fcd3 	bl	80036b0 <HAL_RCC_GetSysClockFreq>
 8005d0a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d0c:	e009      	b.n	8005d22 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d12:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005d14:	e005      	b.n	8005d22 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8005d16:	2300      	movs	r3, #0
 8005d18:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005d20:	bf00      	nop
    }

    if (pclk != 0U)
 8005d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d021      	beq.n	8005d6c <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2c:	4a1a      	ldr	r2, [pc, #104]	; (8005d98 <UART_SetConfig+0x4e0>)
 8005d2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d32:	461a      	mov	r2, r3
 8005d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d36:	fbb3 f2f2 	udiv	r2, r3, r2
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	085b      	lsrs	r3, r3, #1
 8005d40:	441a      	add	r2, r3
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d4a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d4c:	6a3b      	ldr	r3, [r7, #32]
 8005d4e:	2b0f      	cmp	r3, #15
 8005d50:	d909      	bls.n	8005d66 <UART_SetConfig+0x4ae>
 8005d52:	6a3b      	ldr	r3, [r7, #32]
 8005d54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d58:	d205      	bcs.n	8005d66 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005d5a:	6a3b      	ldr	r3, [r7, #32]
 8005d5c:	b29a      	uxth	r2, r3
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	60da      	str	r2, [r3, #12]
 8005d64:	e002      	b.n	8005d6c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	2200      	movs	r2, #0
 8005d86:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005d88:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3730      	adds	r7, #48	; 0x30
 8005d90:	46bd      	mov	sp, r7
 8005d92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d96:	bf00      	nop
 8005d98:	0800b238 	.word	0x0800b238
 8005d9c:	00f42400 	.word	0x00f42400

08005da0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dac:	f003 0301 	and.w	r3, r3, #1
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d00a      	beq.n	8005dca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	430a      	orrs	r2, r1
 8005dc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dce:	f003 0302 	and.w	r3, r3, #2
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d00a      	beq.n	8005dec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	430a      	orrs	r2, r1
 8005dea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df0:	f003 0304 	and.w	r3, r3, #4
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d00a      	beq.n	8005e0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	430a      	orrs	r2, r1
 8005e0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e12:	f003 0308 	and.w	r3, r3, #8
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d00a      	beq.n	8005e30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	430a      	orrs	r2, r1
 8005e2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e34:	f003 0310 	and.w	r3, r3, #16
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d00a      	beq.n	8005e52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	430a      	orrs	r2, r1
 8005e50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e56:	f003 0320 	and.w	r3, r3, #32
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d00a      	beq.n	8005e74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	430a      	orrs	r2, r1
 8005e72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d01a      	beq.n	8005eb6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	430a      	orrs	r2, r1
 8005e94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e9e:	d10a      	bne.n	8005eb6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	430a      	orrs	r2, r1
 8005eb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d00a      	beq.n	8005ed8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	430a      	orrs	r2, r1
 8005ed6:	605a      	str	r2, [r3, #4]
  }
}
 8005ed8:	bf00      	nop
 8005eda:	370c      	adds	r7, #12
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bc80      	pop	{r7}
 8005ee0:	4770      	bx	lr

08005ee2 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ee2:	b580      	push	{r7, lr}
 8005ee4:	b086      	sub	sp, #24
 8005ee6:	af02      	add	r7, sp, #8
 8005ee8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ef2:	f7fb faa9 	bl	8001448 <HAL_GetTick>
 8005ef6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f003 0308 	and.w	r3, r3, #8
 8005f02:	2b08      	cmp	r3, #8
 8005f04:	d10e      	bne.n	8005f24 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f06:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f0a:	9300      	str	r3, [sp, #0]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f000 f832 	bl	8005f7e <UART_WaitOnFlagUntilTimeout>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d001      	beq.n	8005f24 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f20:	2303      	movs	r3, #3
 8005f22:	e028      	b.n	8005f76 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f003 0304 	and.w	r3, r3, #4
 8005f2e:	2b04      	cmp	r3, #4
 8005f30:	d10e      	bne.n	8005f50 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f32:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f36:	9300      	str	r3, [sp, #0]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f000 f81c 	bl	8005f7e <UART_WaitOnFlagUntilTimeout>
 8005f46:	4603      	mov	r3, r0
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d001      	beq.n	8005f50 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f4c:	2303      	movs	r3, #3
 8005f4e:	e012      	b.n	8005f76 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2220      	movs	r2, #32
 8005f54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2220      	movs	r2, #32
 8005f5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3710      	adds	r7, #16
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}

08005f7e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f7e:	b580      	push	{r7, lr}
 8005f80:	b09c      	sub	sp, #112	; 0x70
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	60f8      	str	r0, [r7, #12]
 8005f86:	60b9      	str	r1, [r7, #8]
 8005f88:	603b      	str	r3, [r7, #0]
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f8e:	e0a9      	b.n	80060e4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f96:	f000 80a5 	beq.w	80060e4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f9a:	f7fb fa55 	bl	8001448 <HAL_GetTick>
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	1ad3      	subs	r3, r2, r3
 8005fa4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d302      	bcc.n	8005fb0 <UART_WaitOnFlagUntilTimeout+0x32>
 8005faa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d140      	bne.n	8006032 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fb8:	e853 3f00 	ldrex	r3, [r3]
 8005fbc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005fbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fc0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005fc4:	667b      	str	r3, [r7, #100]	; 0x64
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	461a      	mov	r2, r3
 8005fcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005fce:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005fd0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005fd4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005fd6:	e841 2300 	strex	r3, r2, [r1]
 8005fda:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005fdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d1e6      	bne.n	8005fb0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	3308      	adds	r3, #8
 8005fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fec:	e853 3f00 	ldrex	r3, [r3]
 8005ff0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff4:	f023 0301 	bic.w	r3, r3, #1
 8005ff8:	663b      	str	r3, [r7, #96]	; 0x60
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	3308      	adds	r3, #8
 8006000:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006002:	64ba      	str	r2, [r7, #72]	; 0x48
 8006004:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006006:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006008:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800600a:	e841 2300 	strex	r3, r2, [r1]
 800600e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006010:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006012:	2b00      	cmp	r3, #0
 8006014:	d1e5      	bne.n	8005fe2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2220      	movs	r2, #32
 800601a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2220      	movs	r2, #32
 8006022:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2200      	movs	r2, #0
 800602a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 800602e:	2303      	movs	r3, #3
 8006030:	e069      	b.n	8006106 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 0304 	and.w	r3, r3, #4
 800603c:	2b00      	cmp	r3, #0
 800603e:	d051      	beq.n	80060e4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	69db      	ldr	r3, [r3, #28]
 8006046:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800604a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800604e:	d149      	bne.n	80060e4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006058:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006062:	e853 3f00 	ldrex	r3, [r3]
 8006066:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800606e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	461a      	mov	r2, r3
 8006076:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006078:	637b      	str	r3, [r7, #52]	; 0x34
 800607a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800607c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800607e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006080:	e841 2300 	strex	r3, r2, [r1]
 8006084:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006088:	2b00      	cmp	r3, #0
 800608a:	d1e6      	bne.n	800605a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	3308      	adds	r3, #8
 8006092:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	e853 3f00 	ldrex	r3, [r3]
 800609a:	613b      	str	r3, [r7, #16]
   return(result);
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	f023 0301 	bic.w	r3, r3, #1
 80060a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	3308      	adds	r3, #8
 80060aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80060ac:	623a      	str	r2, [r7, #32]
 80060ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b0:	69f9      	ldr	r1, [r7, #28]
 80060b2:	6a3a      	ldr	r2, [r7, #32]
 80060b4:	e841 2300 	strex	r3, r2, [r1]
 80060b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d1e5      	bne.n	800608c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2220      	movs	r2, #32
 80060c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2220      	movs	r2, #32
 80060cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2220      	movs	r2, #32
 80060d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2200      	movs	r2, #0
 80060dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80060e0:	2303      	movs	r3, #3
 80060e2:	e010      	b.n	8006106 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	69da      	ldr	r2, [r3, #28]
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	4013      	ands	r3, r2
 80060ee:	68ba      	ldr	r2, [r7, #8]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	bf0c      	ite	eq
 80060f4:	2301      	moveq	r3, #1
 80060f6:	2300      	movne	r3, #0
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	461a      	mov	r2, r3
 80060fc:	79fb      	ldrb	r3, [r7, #7]
 80060fe:	429a      	cmp	r2, r3
 8006100:	f43f af46 	beq.w	8005f90 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	3770      	adds	r7, #112	; 0x70
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
	...

08006110 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b096      	sub	sp, #88	; 0x58
 8006114:	af00      	add	r7, sp, #0
 8006116:	60f8      	str	r0, [r7, #12]
 8006118:	60b9      	str	r1, [r7, #8]
 800611a:	4613      	mov	r3, r2
 800611c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	68ba      	ldr	r2, [r7, #8]
 8006122:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	88fa      	ldrh	r2, [r7, #6]
 8006128:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2200      	movs	r2, #0
 8006130:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2222      	movs	r2, #34	; 0x22
 8006138:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006142:	2b00      	cmp	r3, #0
 8006144:	d02d      	beq.n	80061a2 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800614c:	4a40      	ldr	r2, [pc, #256]	; (8006250 <UART_Start_Receive_DMA+0x140>)
 800614e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006156:	4a3f      	ldr	r2, [pc, #252]	; (8006254 <UART_Start_Receive_DMA+0x144>)
 8006158:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006160:	4a3d      	ldr	r2, [pc, #244]	; (8006258 <UART_Start_Receive_DMA+0x148>)
 8006162:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800616a:	2200      	movs	r2, #0
 800616c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	3324      	adds	r3, #36	; 0x24
 800617a:	4619      	mov	r1, r3
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006180:	461a      	mov	r2, r3
 8006182:	88fb      	ldrh	r3, [r7, #6]
 8006184:	f7fb feac 	bl	8001ee0 <HAL_DMA_Start_IT>
 8006188:	4603      	mov	r3, r0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d009      	beq.n	80061a2 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2210      	movs	r2, #16
 8006192:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2220      	movs	r2, #32
 800619a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	e051      	b.n	8006246 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	691b      	ldr	r3, [r3, #16]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d018      	beq.n	80061dc <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061b2:	e853 3f00 	ldrex	r3, [r3]
 80061b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80061b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061be:	657b      	str	r3, [r7, #84]	; 0x54
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	461a      	mov	r2, r3
 80061c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80061ca:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061cc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80061ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061d0:	e841 2300 	strex	r3, r2, [r1]
 80061d4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80061d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d1e6      	bne.n	80061aa <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	3308      	adds	r3, #8
 80061e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e6:	e853 3f00 	ldrex	r3, [r3]
 80061ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80061ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ee:	f043 0301 	orr.w	r3, r3, #1
 80061f2:	653b      	str	r3, [r7, #80]	; 0x50
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	3308      	adds	r3, #8
 80061fa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80061fc:	637a      	str	r2, [r7, #52]	; 0x34
 80061fe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006200:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006202:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006204:	e841 2300 	strex	r3, r2, [r1]
 8006208:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800620a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800620c:	2b00      	cmp	r3, #0
 800620e:	d1e5      	bne.n	80061dc <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	3308      	adds	r3, #8
 8006216:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	e853 3f00 	ldrex	r3, [r3]
 800621e:	613b      	str	r3, [r7, #16]
   return(result);
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006226:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	3308      	adds	r3, #8
 800622e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006230:	623a      	str	r2, [r7, #32]
 8006232:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006234:	69f9      	ldr	r1, [r7, #28]
 8006236:	6a3a      	ldr	r2, [r7, #32]
 8006238:	e841 2300 	strex	r3, r2, [r1]
 800623c:	61bb      	str	r3, [r7, #24]
   return(result);
 800623e:	69bb      	ldr	r3, [r7, #24]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d1e5      	bne.n	8006210 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8006244:	2300      	movs	r3, #0
}
 8006246:	4618      	mov	r0, r3
 8006248:	3758      	adds	r7, #88	; 0x58
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop
 8006250:	080063a7 	.word	0x080063a7
 8006254:	080064d3 	.word	0x080064d3
 8006258:	08006511 	.word	0x08006511

0800625c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800625c:	b480      	push	{r7}
 800625e:	b08f      	sub	sp, #60	; 0x3c
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800626a:	6a3b      	ldr	r3, [r7, #32]
 800626c:	e853 3f00 	ldrex	r3, [r3]
 8006270:	61fb      	str	r3, [r7, #28]
   return(result);
 8006272:	69fb      	ldr	r3, [r7, #28]
 8006274:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006278:	637b      	str	r3, [r7, #52]	; 0x34
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	461a      	mov	r2, r3
 8006280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006282:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006284:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006286:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006288:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800628a:	e841 2300 	strex	r3, r2, [r1]
 800628e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006292:	2b00      	cmp	r3, #0
 8006294:	d1e6      	bne.n	8006264 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	3308      	adds	r3, #8
 800629c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	e853 3f00 	ldrex	r3, [r3]
 80062a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80062ac:	633b      	str	r3, [r7, #48]	; 0x30
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	3308      	adds	r3, #8
 80062b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062b6:	61ba      	str	r2, [r7, #24]
 80062b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ba:	6979      	ldr	r1, [r7, #20]
 80062bc:	69ba      	ldr	r2, [r7, #24]
 80062be:	e841 2300 	strex	r3, r2, [r1]
 80062c2:	613b      	str	r3, [r7, #16]
   return(result);
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d1e5      	bne.n	8006296 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2220      	movs	r2, #32
 80062ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 80062d2:	bf00      	nop
 80062d4:	373c      	adds	r7, #60	; 0x3c
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bc80      	pop	{r7}
 80062da:	4770      	bx	lr

080062dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062dc:	b480      	push	{r7}
 80062de:	b095      	sub	sp, #84	; 0x54
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062ec:	e853 3f00 	ldrex	r3, [r3]
 80062f0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80062f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	461a      	mov	r2, r3
 8006300:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006302:	643b      	str	r3, [r7, #64]	; 0x40
 8006304:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006306:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006308:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800630a:	e841 2300 	strex	r3, r2, [r1]
 800630e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006312:	2b00      	cmp	r3, #0
 8006314:	d1e6      	bne.n	80062e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	3308      	adds	r3, #8
 800631c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800631e:	6a3b      	ldr	r3, [r7, #32]
 8006320:	e853 3f00 	ldrex	r3, [r3]
 8006324:	61fb      	str	r3, [r7, #28]
   return(result);
 8006326:	69fb      	ldr	r3, [r7, #28]
 8006328:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800632c:	f023 0301 	bic.w	r3, r3, #1
 8006330:	64bb      	str	r3, [r7, #72]	; 0x48
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	3308      	adds	r3, #8
 8006338:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800633a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800633c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800633e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006340:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006342:	e841 2300 	strex	r3, r2, [r1]
 8006346:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634a:	2b00      	cmp	r3, #0
 800634c:	d1e3      	bne.n	8006316 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006352:	2b01      	cmp	r3, #1
 8006354:	d118      	bne.n	8006388 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	e853 3f00 	ldrex	r3, [r3]
 8006362:	60bb      	str	r3, [r7, #8]
   return(result);
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	f023 0310 	bic.w	r3, r3, #16
 800636a:	647b      	str	r3, [r7, #68]	; 0x44
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	461a      	mov	r2, r3
 8006372:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006374:	61bb      	str	r3, [r7, #24]
 8006376:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006378:	6979      	ldr	r1, [r7, #20]
 800637a:	69ba      	ldr	r2, [r7, #24]
 800637c:	e841 2300 	strex	r3, r2, [r1]
 8006380:	613b      	str	r3, [r7, #16]
   return(result);
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d1e6      	bne.n	8006356 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2220      	movs	r2, #32
 800638c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2200      	movs	r2, #0
 800639a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800639c:	bf00      	nop
 800639e:	3754      	adds	r7, #84	; 0x54
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bc80      	pop	{r7}
 80063a4:	4770      	bx	lr

080063a6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80063a6:	b580      	push	{r7, lr}
 80063a8:	b09c      	sub	sp, #112	; 0x70
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063b2:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 0320 	and.w	r3, r3, #32
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d171      	bne.n	80064a6 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80063c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063c4:	2200      	movs	r2, #0
 80063c6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063d2:	e853 3f00 	ldrex	r3, [r3]
 80063d6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80063d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063de:	66bb      	str	r3, [r7, #104]	; 0x68
 80063e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	461a      	mov	r2, r3
 80063e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80063e8:	65bb      	str	r3, [r7, #88]	; 0x58
 80063ea:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80063ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80063f0:	e841 2300 	strex	r3, r2, [r1]
 80063f4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80063f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d1e6      	bne.n	80063ca <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	3308      	adds	r3, #8
 8006402:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006406:	e853 3f00 	ldrex	r3, [r3]
 800640a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800640c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800640e:	f023 0301 	bic.w	r3, r3, #1
 8006412:	667b      	str	r3, [r7, #100]	; 0x64
 8006414:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	3308      	adds	r3, #8
 800641a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800641c:	647a      	str	r2, [r7, #68]	; 0x44
 800641e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006420:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006422:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006424:	e841 2300 	strex	r3, r2, [r1]
 8006428:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800642a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800642c:	2b00      	cmp	r3, #0
 800642e:	d1e5      	bne.n	80063fc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006430:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	3308      	adds	r3, #8
 8006436:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643a:	e853 3f00 	ldrex	r3, [r3]
 800643e:	623b      	str	r3, [r7, #32]
   return(result);
 8006440:	6a3b      	ldr	r3, [r7, #32]
 8006442:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006446:	663b      	str	r3, [r7, #96]	; 0x60
 8006448:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	3308      	adds	r3, #8
 800644e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006450:	633a      	str	r2, [r7, #48]	; 0x30
 8006452:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006454:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006456:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006458:	e841 2300 	strex	r3, r2, [r1]
 800645c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800645e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006460:	2b00      	cmp	r3, #0
 8006462:	d1e5      	bne.n	8006430 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006464:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006466:	2220      	movs	r2, #32
 8006468:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800646c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800646e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006470:	2b01      	cmp	r3, #1
 8006472:	d118      	bne.n	80064a6 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006474:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	e853 3f00 	ldrex	r3, [r3]
 8006480:	60fb      	str	r3, [r7, #12]
   return(result);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	f023 0310 	bic.w	r3, r3, #16
 8006488:	65fb      	str	r3, [r7, #92]	; 0x5c
 800648a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	461a      	mov	r2, r3
 8006490:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006492:	61fb      	str	r3, [r7, #28]
 8006494:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006496:	69b9      	ldr	r1, [r7, #24]
 8006498:	69fa      	ldr	r2, [r7, #28]
 800649a:	e841 2300 	strex	r3, r2, [r1]
 800649e:	617b      	str	r3, [r7, #20]
   return(result);
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d1e6      	bne.n	8006474 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064a8:	2200      	movs	r2, #0
 80064aa:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d107      	bne.n	80064c4 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80064b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064b6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80064ba:	4619      	mov	r1, r3
 80064bc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80064be:	f7ff f9f0 	bl	80058a2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80064c2:	e002      	b.n	80064ca <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80064c4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80064c6:	f7fa fd33 	bl	8000f30 <HAL_UART_RxCpltCallback>
}
 80064ca:	bf00      	nop
 80064cc:	3770      	adds	r7, #112	; 0x70
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}

080064d2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80064d2:	b580      	push	{r7, lr}
 80064d4:	b084      	sub	sp, #16
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064de:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2201      	movs	r2, #1
 80064e4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d109      	bne.n	8006502 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80064f4:	085b      	lsrs	r3, r3, #1
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	4619      	mov	r1, r3
 80064fa:	68f8      	ldr	r0, [r7, #12]
 80064fc:	f7ff f9d1 	bl	80058a2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006500:	e002      	b.n	8006508 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8006502:	68f8      	ldr	r0, [r7, #12]
 8006504:	f7ff f9bb 	bl	800587e <HAL_UART_RxHalfCpltCallback>
}
 8006508:	bf00      	nop
 800650a:	3710      	adds	r7, #16
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}

08006510 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b086      	sub	sp, #24
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800651c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006524:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800652c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006538:	2b80      	cmp	r3, #128	; 0x80
 800653a:	d109      	bne.n	8006550 <UART_DMAError+0x40>
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	2b21      	cmp	r3, #33	; 0x21
 8006540:	d106      	bne.n	8006550 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	2200      	movs	r2, #0
 8006546:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800654a:	6978      	ldr	r0, [r7, #20]
 800654c:	f7ff fe86 	bl	800625c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800655a:	2b40      	cmp	r3, #64	; 0x40
 800655c:	d109      	bne.n	8006572 <UART_DMAError+0x62>
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2b22      	cmp	r3, #34	; 0x22
 8006562:	d106      	bne.n	8006572 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	2200      	movs	r2, #0
 8006568:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800656c:	6978      	ldr	r0, [r7, #20]
 800656e:	f7ff feb5 	bl	80062dc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006578:	f043 0210 	orr.w	r2, r3, #16
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006582:	6978      	ldr	r0, [r7, #20]
 8006584:	f7ff f984 	bl	8005890 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006588:	bf00      	nop
 800658a:	3718      	adds	r7, #24
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b084      	sub	sp, #16
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800659c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2200      	movs	r2, #0
 80065a2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2200      	movs	r2, #0
 80065aa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80065ae:	68f8      	ldr	r0, [r7, #12]
 80065b0:	f7ff f96e 	bl	8005890 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065b4:	bf00      	nop
 80065b6:	3710      	adds	r7, #16
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b088      	sub	sp, #32
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	e853 3f00 	ldrex	r3, [r3]
 80065d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065d8:	61fb      	str	r3, [r7, #28]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	461a      	mov	r2, r3
 80065e0:	69fb      	ldr	r3, [r7, #28]
 80065e2:	61bb      	str	r3, [r7, #24]
 80065e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e6:	6979      	ldr	r1, [r7, #20]
 80065e8:	69ba      	ldr	r2, [r7, #24]
 80065ea:	e841 2300 	strex	r3, r2, [r1]
 80065ee:	613b      	str	r3, [r7, #16]
   return(result);
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d1e6      	bne.n	80065c4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2220      	movs	r2, #32
 80065fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f7ff f931 	bl	800586c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800660a:	bf00      	nop
 800660c:	3720      	adds	r7, #32
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}

08006612 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006612:	b480      	push	{r7}
 8006614:	b083      	sub	sp, #12
 8006616:	af00      	add	r7, sp, #0
 8006618:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800661a:	bf00      	nop
 800661c:	370c      	adds	r7, #12
 800661e:	46bd      	mov	sp, r7
 8006620:	bc80      	pop	{r7}
 8006622:	4770      	bx	lr

08006624 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800662c:	bf00      	nop
 800662e:	370c      	adds	r7, #12
 8006630:	46bd      	mov	sp, r7
 8006632:	bc80      	pop	{r7}
 8006634:	4770      	bx	lr

08006636 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006636:	b480      	push	{r7}
 8006638:	b083      	sub	sp, #12
 800663a:	af00      	add	r7, sp, #0
 800663c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800663e:	bf00      	nop
 8006640:	370c      	adds	r7, #12
 8006642:	46bd      	mov	sp, r7
 8006644:	bc80      	pop	{r7}
 8006646:	4770      	bx	lr

08006648 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006648:	b480      	push	{r7}
 800664a:	b085      	sub	sp, #20
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006656:	2b01      	cmp	r3, #1
 8006658:	d101      	bne.n	800665e <HAL_UARTEx_DisableFifoMode+0x16>
 800665a:	2302      	movs	r3, #2
 800665c:	e027      	b.n	80066ae <HAL_UARTEx_DisableFifoMode+0x66>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2201      	movs	r2, #1
 8006662:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2224      	movs	r2, #36	; 0x24
 800666a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f022 0201 	bic.w	r2, r2, #1
 8006684:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800668c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	68fa      	ldr	r2, [r7, #12]
 800669a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2220      	movs	r2, #32
 80066a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2200      	movs	r2, #0
 80066a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80066ac:	2300      	movs	r3, #0
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3714      	adds	r7, #20
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bc80      	pop	{r7}
 80066b6:	4770      	bx	lr

080066b8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b084      	sub	sp, #16
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d101      	bne.n	80066d0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80066cc:	2302      	movs	r3, #2
 80066ce:	e02d      	b.n	800672c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2201      	movs	r2, #1
 80066d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2224      	movs	r2, #36	; 0x24
 80066dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f022 0201 	bic.w	r2, r2, #1
 80066f6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	683a      	ldr	r2, [r7, #0]
 8006708:	430a      	orrs	r2, r1
 800670a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f000 f84f 	bl	80067b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	68fa      	ldr	r2, [r7, #12]
 8006718:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2220      	movs	r2, #32
 800671e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800672a:	2300      	movs	r3, #0
}
 800672c:	4618      	mov	r0, r3
 800672e:	3710      	adds	r7, #16
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}

08006734 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b084      	sub	sp, #16
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006744:	2b01      	cmp	r3, #1
 8006746:	d101      	bne.n	800674c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006748:	2302      	movs	r3, #2
 800674a:	e02d      	b.n	80067a8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2201      	movs	r2, #1
 8006750:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2224      	movs	r2, #36	; 0x24
 8006758:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f022 0201 	bic.w	r2, r2, #1
 8006772:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	683a      	ldr	r2, [r7, #0]
 8006784:	430a      	orrs	r2, r1
 8006786:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f000 f811 	bl	80067b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	68fa      	ldr	r2, [r7, #12]
 8006794:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2220      	movs	r2, #32
 800679a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80067a6:	2300      	movs	r3, #0
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3710      	adds	r7, #16
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b085      	sub	sp, #20
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d108      	bne.n	80067d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2201      	movs	r2, #1
 80067c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2201      	movs	r2, #1
 80067cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80067d0:	e031      	b.n	8006836 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80067d2:	2308      	movs	r3, #8
 80067d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80067d6:	2308      	movs	r3, #8
 80067d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	0e5b      	lsrs	r3, r3, #25
 80067e2:	b2db      	uxtb	r3, r3
 80067e4:	f003 0307 	and.w	r3, r3, #7
 80067e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	0f5b      	lsrs	r3, r3, #29
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	f003 0307 	and.w	r3, r3, #7
 80067f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80067fa:	7bbb      	ldrb	r3, [r7, #14]
 80067fc:	7b3a      	ldrb	r2, [r7, #12]
 80067fe:	4910      	ldr	r1, [pc, #64]	; (8006840 <UARTEx_SetNbDataToProcess+0x90>)
 8006800:	5c8a      	ldrb	r2, [r1, r2]
 8006802:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006806:	7b3a      	ldrb	r2, [r7, #12]
 8006808:	490e      	ldr	r1, [pc, #56]	; (8006844 <UARTEx_SetNbDataToProcess+0x94>)
 800680a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800680c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006810:	b29a      	uxth	r2, r3
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006818:	7bfb      	ldrb	r3, [r7, #15]
 800681a:	7b7a      	ldrb	r2, [r7, #13]
 800681c:	4908      	ldr	r1, [pc, #32]	; (8006840 <UARTEx_SetNbDataToProcess+0x90>)
 800681e:	5c8a      	ldrb	r2, [r1, r2]
 8006820:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006824:	7b7a      	ldrb	r2, [r7, #13]
 8006826:	4907      	ldr	r1, [pc, #28]	; (8006844 <UARTEx_SetNbDataToProcess+0x94>)
 8006828:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800682a:	fb93 f3f2 	sdiv	r3, r3, r2
 800682e:	b29a      	uxth	r2, r3
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006836:	bf00      	nop
 8006838:	3714      	adds	r7, #20
 800683a:	46bd      	mov	sp, r7
 800683c:	bc80      	pop	{r7}
 800683e:	4770      	bx	lr
 8006840:	0800b250 	.word	0x0800b250
 8006844:	0800b258 	.word	0x0800b258

08006848 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af02      	add	r7, sp, #8
 800684e:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8006850:	4a24      	ldr	r2, [pc, #144]	; (80068e4 <RadioInit+0x9c>)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8006856:	4b24      	ldr	r3, [pc, #144]	; (80068e8 <RadioInit+0xa0>)
 8006858:	2200      	movs	r2, #0
 800685a:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 800685c:	4b22      	ldr	r3, [pc, #136]	; (80068e8 <RadioInit+0xa0>)
 800685e:	2200      	movs	r2, #0
 8006860:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8006862:	4b21      	ldr	r3, [pc, #132]	; (80068e8 <RadioInit+0xa0>)
 8006864:	2200      	movs	r2, #0
 8006866:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8006868:	4b1f      	ldr	r3, [pc, #124]	; (80068e8 <RadioInit+0xa0>)
 800686a:	2200      	movs	r2, #0
 800686c:	659a      	str	r2, [r3, #88]	; 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 800686e:	481f      	ldr	r0, [pc, #124]	; (80068ec <RadioInit+0xa4>)
 8006870:	f001 ff88 	bl	8008784 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8006874:	4b1c      	ldr	r3, [pc, #112]	; (80068e8 <RadioInit+0xa0>)
 8006876:	2200      	movs	r2, #0
 8006878:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 800687a:	4b1b      	ldr	r3, [pc, #108]	; (80068e8 <RadioInit+0xa0>)
 800687c:	2200      	movs	r2, #0
 800687e:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8006880:	f002 fa1c 	bl	8008cbc <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8006884:	2100      	movs	r1, #0
 8006886:	2000      	movs	r0, #0
 8006888:	f002 fde8 	bl	800945c <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 800688c:	2204      	movs	r2, #4
 800688e:	2100      	movs	r1, #0
 8006890:	2001      	movs	r0, #1
 8006892:	f002 fba5 	bl	8008fe0 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8006896:	2300      	movs	r3, #0
 8006898:	2200      	movs	r2, #0
 800689a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800689e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80068a2:	f002 fad5 	bl	8008e50 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 80068a6:	f000 fe91 	bl	80075cc <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 80068aa:	2300      	movs	r3, #0
 80068ac:	9300      	str	r3, [sp, #0]
 80068ae:	4b10      	ldr	r3, [pc, #64]	; (80068f0 <RadioInit+0xa8>)
 80068b0:	2200      	movs	r2, #0
 80068b2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80068b6:	480f      	ldr	r0, [pc, #60]	; (80068f4 <RadioInit+0xac>)
 80068b8:	f003 fb32 	bl	8009f20 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 80068bc:	2300      	movs	r3, #0
 80068be:	9300      	str	r3, [sp, #0]
 80068c0:	4b0d      	ldr	r3, [pc, #52]	; (80068f8 <RadioInit+0xb0>)
 80068c2:	2200      	movs	r2, #0
 80068c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80068c8:	480c      	ldr	r0, [pc, #48]	; (80068fc <RadioInit+0xb4>)
 80068ca:	f003 fb29 	bl	8009f20 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 80068ce:	4809      	ldr	r0, [pc, #36]	; (80068f4 <RadioInit+0xac>)
 80068d0:	f003 fbca 	bl	800a068 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 80068d4:	4809      	ldr	r0, [pc, #36]	; (80068fc <RadioInit+0xb4>)
 80068d6:	f003 fbc7 	bl	800a068 <UTIL_TIMER_Stop>
}
 80068da:	bf00      	nop
 80068dc:	3708      	adds	r7, #8
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop
 80068e4:	200004b8 	.word	0x200004b8
 80068e8:	200004bc 	.word	0x200004bc
 80068ec:	080079c5 	.word	0x080079c5
 80068f0:	0800794d 	.word	0x0800794d
 80068f4:	20000518 	.word	0x20000518
 80068f8:	08007961 	.word	0x08007961
 80068fc:	20000530 	.word	0x20000530

08006900 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8006900:	b580      	push	{r7, lr}
 8006902:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8006904:	f001 ff86 	bl	8008814 <SUBGRF_GetOperatingMode>
 8006908:	4603      	mov	r3, r0
 800690a:	2b07      	cmp	r3, #7
 800690c:	d00a      	beq.n	8006924 <RadioGetStatus+0x24>
 800690e:	2b07      	cmp	r3, #7
 8006910:	dc0a      	bgt.n	8006928 <RadioGetStatus+0x28>
 8006912:	2b04      	cmp	r3, #4
 8006914:	d002      	beq.n	800691c <RadioGetStatus+0x1c>
 8006916:	2b05      	cmp	r3, #5
 8006918:	d002      	beq.n	8006920 <RadioGetStatus+0x20>
 800691a:	e005      	b.n	8006928 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 800691c:	2302      	movs	r3, #2
 800691e:	e004      	b.n	800692a <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8006920:	2301      	movs	r3, #1
 8006922:	e002      	b.n	800692a <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8006924:	2303      	movs	r3, #3
 8006926:	e000      	b.n	800692a <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8006928:	2300      	movs	r3, #0
    }
}
 800692a:	4618      	mov	r0, r3
 800692c:	bd80      	pop	{r7, pc}
	...

08006930 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
 8006936:	4603      	mov	r3, r0
 8006938:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 800693a:	4a2a      	ldr	r2, [pc, #168]	; (80069e4 <RadioSetModem+0xb4>)
 800693c:	79fb      	ldrb	r3, [r7, #7]
 800693e:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8006940:	79fb      	ldrb	r3, [r7, #7]
 8006942:	4618      	mov	r0, r3
 8006944:	f003 f95d 	bl	8009c02 <RFW_SetRadioModem>
    switch( modem )
 8006948:	79fb      	ldrb	r3, [r7, #7]
 800694a:	2b05      	cmp	r3, #5
 800694c:	d80e      	bhi.n	800696c <RadioSetModem+0x3c>
 800694e:	a201      	add	r2, pc, #4	; (adr r2, 8006954 <RadioSetModem+0x24>)
 8006950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006954:	0800697b 	.word	0x0800697b
 8006958:	08006989 	.word	0x08006989
 800695c:	0800696d 	.word	0x0800696d
 8006960:	080069af 	.word	0x080069af
 8006964:	080069bd 	.word	0x080069bd
 8006968:	080069cb 	.word	0x080069cb
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 800696c:	2003      	movs	r0, #3
 800696e:	f002 fb11 	bl	8008f94 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8006972:	4b1c      	ldr	r3, [pc, #112]	; (80069e4 <RadioSetModem+0xb4>)
 8006974:	2200      	movs	r2, #0
 8006976:	735a      	strb	r2, [r3, #13]
        break;
 8006978:	e02f      	b.n	80069da <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800697a:	2000      	movs	r0, #0
 800697c:	f002 fb0a 	bl	8008f94 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8006980:	4b18      	ldr	r3, [pc, #96]	; (80069e4 <RadioSetModem+0xb4>)
 8006982:	2200      	movs	r2, #0
 8006984:	735a      	strb	r2, [r3, #13]
        break;
 8006986:	e028      	b.n	80069da <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8006988:	2001      	movs	r0, #1
 800698a:	f002 fb03 	bl	8008f94 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 800698e:	4b15      	ldr	r3, [pc, #84]	; (80069e4 <RadioSetModem+0xb4>)
 8006990:	7b5a      	ldrb	r2, [r3, #13]
 8006992:	4b14      	ldr	r3, [pc, #80]	; (80069e4 <RadioSetModem+0xb4>)
 8006994:	7b1b      	ldrb	r3, [r3, #12]
 8006996:	429a      	cmp	r2, r3
 8006998:	d01e      	beq.n	80069d8 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 800699a:	4b12      	ldr	r3, [pc, #72]	; (80069e4 <RadioSetModem+0xb4>)
 800699c:	7b1a      	ldrb	r2, [r3, #12]
 800699e:	4b11      	ldr	r3, [pc, #68]	; (80069e4 <RadioSetModem+0xb4>)
 80069a0:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 80069a2:	4b10      	ldr	r3, [pc, #64]	; (80069e4 <RadioSetModem+0xb4>)
 80069a4:	7b5b      	ldrb	r3, [r3, #13]
 80069a6:	4618      	mov	r0, r3
 80069a8:	f000 ff9a 	bl	80078e0 <RadioSetPublicNetwork>
        }
        break;
 80069ac:	e014      	b.n	80069d8 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80069ae:	2002      	movs	r0, #2
 80069b0:	f002 faf0 	bl	8008f94 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80069b4:	4b0b      	ldr	r3, [pc, #44]	; (80069e4 <RadioSetModem+0xb4>)
 80069b6:	2200      	movs	r2, #0
 80069b8:	735a      	strb	r2, [r3, #13]
        break;
 80069ba:	e00e      	b.n	80069da <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80069bc:	2002      	movs	r0, #2
 80069be:	f002 fae9 	bl	8008f94 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80069c2:	4b08      	ldr	r3, [pc, #32]	; (80069e4 <RadioSetModem+0xb4>)
 80069c4:	2200      	movs	r2, #0
 80069c6:	735a      	strb	r2, [r3, #13]
        break;
 80069c8:	e007      	b.n	80069da <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80069ca:	2000      	movs	r0, #0
 80069cc:	f002 fae2 	bl	8008f94 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80069d0:	4b04      	ldr	r3, [pc, #16]	; (80069e4 <RadioSetModem+0xb4>)
 80069d2:	2200      	movs	r2, #0
 80069d4:	735a      	strb	r2, [r3, #13]
        break;
 80069d6:	e000      	b.n	80069da <RadioSetModem+0xaa>
        break;
 80069d8:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 80069da:	bf00      	nop
 80069dc:	3708      	adds	r7, #8
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	200004bc 	.word	0x200004bc

080069e8 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b082      	sub	sp, #8
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f002 fa89 	bl	8008f08 <SUBGRF_SetRfFrequency>
}
 80069f6:	bf00      	nop
 80069f8:	3708      	adds	r7, #8
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}

080069fe <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 80069fe:	b580      	push	{r7, lr}
 8006a00:	b090      	sub	sp, #64	; 0x40
 8006a02:	af0a      	add	r7, sp, #40	; 0x28
 8006a04:	60f8      	str	r0, [r7, #12]
 8006a06:	60b9      	str	r1, [r7, #8]
 8006a08:	603b      	str	r3, [r7, #0]
 8006a0a:	4613      	mov	r3, r2
 8006a0c:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8006a12:	2300      	movs	r3, #0
 8006a14:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8006a16:	2300      	movs	r3, #0
 8006a18:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 8006a1a:	f000 fdea 	bl	80075f2 <RadioStandby>

    RadioSetModem( MODEM_FSK );
 8006a1e:	2000      	movs	r0, #0
 8006a20:	f7ff ff86 	bl	8006930 <RadioSetModem>

    RadioSetChannel( freq );
 8006a24:	68f8      	ldr	r0, [r7, #12]
 8006a26:	f7ff ffdf 	bl	80069e8 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	9309      	str	r3, [sp, #36]	; 0x24
 8006a2e:	2300      	movs	r3, #0
 8006a30:	9308      	str	r3, [sp, #32]
 8006a32:	2300      	movs	r3, #0
 8006a34:	9307      	str	r3, [sp, #28]
 8006a36:	2300      	movs	r3, #0
 8006a38:	9306      	str	r3, [sp, #24]
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	9305      	str	r3, [sp, #20]
 8006a3e:	2300      	movs	r3, #0
 8006a40:	9304      	str	r3, [sp, #16]
 8006a42:	2300      	movs	r3, #0
 8006a44:	9303      	str	r3, [sp, #12]
 8006a46:	2300      	movs	r3, #0
 8006a48:	9302      	str	r3, [sp, #8]
 8006a4a:	2303      	movs	r3, #3
 8006a4c:	9301      	str	r3, [sp, #4]
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	9300      	str	r3, [sp, #0]
 8006a52:	2300      	movs	r3, #0
 8006a54:	f44f 7216 	mov.w	r2, #600	; 0x258
 8006a58:	68b9      	ldr	r1, [r7, #8]
 8006a5a:	2000      	movs	r0, #0
 8006a5c:	f000 f83c 	bl	8006ad8 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8006a60:	2000      	movs	r0, #0
 8006a62:	f000 fdcd 	bl	8007600 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8006a66:	f000 ff69 	bl	800793c <RadioGetWakeupTime>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f7fa fcff 	bl	8001470 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8006a72:	f003 fb93 	bl	800a19c <UTIL_TIMER_GetCurrentTime>
 8006a76:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8006a78:	e00d      	b.n	8006a96 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8006a7a:	2000      	movs	r0, #0
 8006a7c:	f000 feae 	bl	80077dc <RadioRssi>
 8006a80:	4603      	mov	r3, r0
 8006a82:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8006a84:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8006a88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	dd02      	ble.n	8006a96 <RadioIsChannelFree+0x98>
        {
            status = false;
 8006a90:	2300      	movs	r3, #0
 8006a92:	75fb      	strb	r3, [r7, #23]
            break;
 8006a94:	e006      	b.n	8006aa4 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8006a96:	6938      	ldr	r0, [r7, #16]
 8006a98:	f003 fb92 	bl	800a1c0 <UTIL_TIMER_GetElapsedTime>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d8ea      	bhi.n	8006a7a <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 8006aa4:	f000 fda5 	bl	80075f2 <RadioStandby>

    return status;
 8006aa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3718      	adds	r7, #24
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}

08006ab2 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8006ab2:	b580      	push	{r7, lr}
 8006ab4:	b082      	sub	sp, #8
 8006ab6:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8006abc:	2300      	movs	r3, #0
 8006abe:	2200      	movs	r2, #0
 8006ac0:	2100      	movs	r1, #0
 8006ac2:	2000      	movs	r0, #0
 8006ac4:	f002 f9c4 	bl	8008e50 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8006ac8:	f001 ff75 	bl	80089b6 <SUBGRF_GetRandom>
 8006acc:	6078      	str	r0, [r7, #4]

    return rnd;
 8006ace:	687b      	ldr	r3, [r7, #4]
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3708      	adds	r7, #8
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b08a      	sub	sp, #40	; 0x28
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	60b9      	str	r1, [r7, #8]
 8006ae0:	607a      	str	r2, [r7, #4]
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	73fb      	strb	r3, [r7, #15]
 8006ae8:	4613      	mov	r3, r2
 8006aea:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8006aec:	4ab9      	ldr	r2, [pc, #740]	; (8006dd4 <RadioSetRxConfig+0x2fc>)
 8006aee:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8006af2:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 8006af4:	f003 f843 	bl	8009b7e <RFW_DeInit>
    if( rxContinuous == true )
 8006af8:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d001      	beq.n	8006b04 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8006b00:	2300      	movs	r3, #0
 8006b02:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 8006b04:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d004      	beq.n	8006b16 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8006b0c:	4ab2      	ldr	r2, [pc, #712]	; (8006dd8 <RadioSetRxConfig+0x300>)
 8006b0e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8006b12:	7013      	strb	r3, [r2, #0]
 8006b14:	e002      	b.n	8006b1c <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8006b16:	4bb0      	ldr	r3, [pc, #704]	; (8006dd8 <RadioSetRxConfig+0x300>)
 8006b18:	22ff      	movs	r2, #255	; 0xff
 8006b1a:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8006b1c:	7bfb      	ldrb	r3, [r7, #15]
 8006b1e:	2b05      	cmp	r3, #5
 8006b20:	d009      	beq.n	8006b36 <RadioSetRxConfig+0x5e>
 8006b22:	2b05      	cmp	r3, #5
 8006b24:	f300 81d7 	bgt.w	8006ed6 <RadioSetRxConfig+0x3fe>
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	f000 80bf 	beq.w	8006cac <RadioSetRxConfig+0x1d4>
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	f000 8124 	beq.w	8006d7c <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8006b34:	e1cf      	b.n	8006ed6 <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8006b36:	2001      	movs	r0, #1
 8006b38:	f002 f882 	bl	8008c40 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8006b3c:	4ba5      	ldr	r3, [pc, #660]	; (8006dd4 <RadioSetRxConfig+0x2fc>)
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8006b44:	4aa3      	ldr	r2, [pc, #652]	; (8006dd4 <RadioSetRxConfig+0x2fc>)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8006b4a:	4ba2      	ldr	r3, [pc, #648]	; (8006dd4 <RadioSetRxConfig+0x2fc>)
 8006b4c:	2209      	movs	r2, #9
 8006b4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8006b52:	4ba0      	ldr	r3, [pc, #640]	; (8006dd4 <RadioSetRxConfig+0x2fc>)
 8006b54:	f44f 7248 	mov.w	r2, #800	; 0x320
 8006b58:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8006b5a:	68b8      	ldr	r0, [r7, #8]
 8006b5c:	f002 ff42 	bl	80099e4 <SUBGRF_GetFskBandwidthRegValue>
 8006b60:	4603      	mov	r3, r0
 8006b62:	461a      	mov	r2, r3
 8006b64:	4b9b      	ldr	r3, [pc, #620]	; (8006dd4 <RadioSetRxConfig+0x2fc>)
 8006b66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8006b6a:	4b9a      	ldr	r3, [pc, #616]	; (8006dd4 <RadioSetRxConfig+0x2fc>)
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8006b70:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006b72:	00db      	lsls	r3, r3, #3
 8006b74:	b29a      	uxth	r2, r3
 8006b76:	4b97      	ldr	r3, [pc, #604]	; (8006dd4 <RadioSetRxConfig+0x2fc>)
 8006b78:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8006b7a:	4b96      	ldr	r3, [pc, #600]	; (8006dd4 <RadioSetRxConfig+0x2fc>)
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8006b80:	4b94      	ldr	r3, [pc, #592]	; (8006dd4 <RadioSetRxConfig+0x2fc>)
 8006b82:	2210      	movs	r2, #16
 8006b84:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8006b86:	4b93      	ldr	r3, [pc, #588]	; (8006dd4 <RadioSetRxConfig+0x2fc>)
 8006b88:	2200      	movs	r2, #0
 8006b8a:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8006b8c:	4b91      	ldr	r3, [pc, #580]	; (8006dd4 <RadioSetRxConfig+0x2fc>)
 8006b8e:	2200      	movs	r2, #0
 8006b90:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8006b92:	4b91      	ldr	r3, [pc, #580]	; (8006dd8 <RadioSetRxConfig+0x300>)
 8006b94:	781a      	ldrb	r2, [r3, #0]
 8006b96:	4b8f      	ldr	r3, [pc, #572]	; (8006dd4 <RadioSetRxConfig+0x2fc>)
 8006b98:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8006b9a:	4b8e      	ldr	r3, [pc, #568]	; (8006dd4 <RadioSetRxConfig+0x2fc>)
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8006ba0:	4b8c      	ldr	r3, [pc, #560]	; (8006dd4 <RadioSetRxConfig+0x2fc>)
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8006ba6:	2005      	movs	r0, #5
 8006ba8:	f7ff fec2 	bl	8006930 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006bac:	488b      	ldr	r0, [pc, #556]	; (8006ddc <RadioSetRxConfig+0x304>)
 8006bae:	f002 fae5 	bl	800917c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006bb2:	488b      	ldr	r0, [pc, #556]	; (8006de0 <RadioSetRxConfig+0x308>)
 8006bb4:	f002 fbb4 	bl	8009320 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8006bb8:	4a8a      	ldr	r2, [pc, #552]	; (8006de4 <RadioSetRxConfig+0x30c>)
 8006bba:	f107 031c 	add.w	r3, r7, #28
 8006bbe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006bc2:	e883 0003 	stmia.w	r3, {r0, r1}
 8006bc6:	f107 031c 	add.w	r3, r7, #28
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f001 fe71 	bl	80088b2 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8006bd0:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006bd4:	f001 febc 	bl	8008950 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8006bd8:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8006bdc:	f000 fe1d 	bl	800781a <RadioRead>
 8006be0:	4603      	mov	r3, r0
 8006be2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 8006be6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006bea:	f023 0310 	bic.w	r3, r3, #16
 8006bee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 8006bf2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006bf6:	4619      	mov	r1, r3
 8006bf8:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8006bfc:	f000 fdfb 	bl	80077f6 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8006c00:	2104      	movs	r1, #4
 8006c02:	f640 00b9 	movw	r0, #2233	; 0x8b9
 8006c06:	f000 fdf6 	bl	80077f6 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 8006c0a:	f640 009b 	movw	r0, #2203	; 0x89b
 8006c0e:	f000 fe04 	bl	800781a <RadioRead>
 8006c12:	4603      	mov	r3, r0
 8006c14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8006c18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c1c:	f023 031c 	bic.w	r3, r3, #28
 8006c20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8006c24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c28:	f043 0308 	orr.w	r3, r3, #8
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	4619      	mov	r1, r3
 8006c30:	f640 009b 	movw	r0, #2203	; 0x89b
 8006c34:	f000 fddf 	bl	80077f6 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8006c38:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8006c3c:	f000 fded 	bl	800781a <RadioRead>
 8006c40:	4603      	mov	r3, r0
 8006c42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8006c46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c4a:	f023 0318 	bic.w	r3, r3, #24
 8006c4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 8006c52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c56:	f043 0318 	orr.w	r3, r3, #24
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	4619      	mov	r1, r3
 8006c5e:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8006c62:	f000 fdc8 	bl	80077f6 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 8006c66:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8006c6a:	f000 fdd6 	bl	800781a <RadioRead>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8006c74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8006c80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c84:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	4619      	mov	r1, r3
 8006c8c:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8006c90:	f000 fdb1 	bl	80077f6 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8006c94:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006c96:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8006c9a:	fb02 f303 	mul.w	r3, r2, r3
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ca6:	4a4b      	ldr	r2, [pc, #300]	; (8006dd4 <RadioSetRxConfig+0x2fc>)
 8006ca8:	6093      	str	r3, [r2, #8]
            break;
 8006caa:	e115      	b.n	8006ed8 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8006cac:	2000      	movs	r0, #0
 8006cae:	f001 ffc7 	bl	8008c40 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8006cb2:	4b48      	ldr	r3, [pc, #288]	; (8006dd4 <RadioSetRxConfig+0x2fc>)
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8006cba:	4a46      	ldr	r2, [pc, #280]	; (8006dd4 <RadioSetRxConfig+0x2fc>)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8006cc0:	4b44      	ldr	r3, [pc, #272]	; (8006dd4 <RadioSetRxConfig+0x2fc>)
 8006cc2:	220b      	movs	r2, #11
 8006cc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8006cc8:	68b8      	ldr	r0, [r7, #8]
 8006cca:	f002 fe8b 	bl	80099e4 <SUBGRF_GetFskBandwidthRegValue>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	4b40      	ldr	r3, [pc, #256]	; (8006dd4 <RadioSetRxConfig+0x2fc>)
 8006cd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8006cd8:	4b3e      	ldr	r3, [pc, #248]	; (8006dd4 <RadioSetRxConfig+0x2fc>)
 8006cda:	2200      	movs	r2, #0
 8006cdc:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8006cde:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006ce0:	00db      	lsls	r3, r3, #3
 8006ce2:	b29a      	uxth	r2, r3
 8006ce4:	4b3b      	ldr	r3, [pc, #236]	; (8006dd4 <RadioSetRxConfig+0x2fc>)
 8006ce6:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8006ce8:	4b3a      	ldr	r3, [pc, #232]	; (8006dd4 <RadioSetRxConfig+0x2fc>)
 8006cea:	2204      	movs	r2, #4
 8006cec:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8006cee:	4b39      	ldr	r3, [pc, #228]	; (8006dd4 <RadioSetRxConfig+0x2fc>)
 8006cf0:	2218      	movs	r2, #24
 8006cf2:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8006cf4:	4b37      	ldr	r3, [pc, #220]	; (8006dd4 <RadioSetRxConfig+0x2fc>)
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8006cfa:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8006cfe:	f083 0301 	eor.w	r3, r3, #1
 8006d02:	b2db      	uxtb	r3, r3
 8006d04:	461a      	mov	r2, r3
 8006d06:	4b33      	ldr	r3, [pc, #204]	; (8006dd4 <RadioSetRxConfig+0x2fc>)
 8006d08:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8006d0a:	4b33      	ldr	r3, [pc, #204]	; (8006dd8 <RadioSetRxConfig+0x300>)
 8006d0c:	781a      	ldrb	r2, [r3, #0]
 8006d0e:	4b31      	ldr	r3, [pc, #196]	; (8006dd4 <RadioSetRxConfig+0x2fc>)
 8006d10:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8006d12:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d003      	beq.n	8006d22 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8006d1a:	4b2e      	ldr	r3, [pc, #184]	; (8006dd4 <RadioSetRxConfig+0x2fc>)
 8006d1c:	22f2      	movs	r2, #242	; 0xf2
 8006d1e:	75da      	strb	r2, [r3, #23]
 8006d20:	e002      	b.n	8006d28 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8006d22:	4b2c      	ldr	r3, [pc, #176]	; (8006dd4 <RadioSetRxConfig+0x2fc>)
 8006d24:	2201      	movs	r2, #1
 8006d26:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8006d28:	4b2a      	ldr	r3, [pc, #168]	; (8006dd4 <RadioSetRxConfig+0x2fc>)
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8006d2e:	f000 fc60 	bl	80075f2 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8006d32:	2000      	movs	r0, #0
 8006d34:	f7ff fdfc 	bl	8006930 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006d38:	4828      	ldr	r0, [pc, #160]	; (8006ddc <RadioSetRxConfig+0x304>)
 8006d3a:	f002 fa1f 	bl	800917c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006d3e:	4828      	ldr	r0, [pc, #160]	; (8006de0 <RadioSetRxConfig+0x308>)
 8006d40:	f002 faee 	bl	8009320 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8006d44:	4a28      	ldr	r2, [pc, #160]	; (8006de8 <RadioSetRxConfig+0x310>)
 8006d46:	f107 0314 	add.w	r3, r7, #20
 8006d4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006d4e:	e883 0003 	stmia.w	r3, {r0, r1}
 8006d52:	f107 0314 	add.w	r3, r7, #20
 8006d56:	4618      	mov	r0, r3
 8006d58:	f001 fdab 	bl	80088b2 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8006d5c:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006d60:	f001 fdf6 	bl	8008950 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8006d64:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006d66:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8006d6a:	fb02 f303 	mul.w	r3, r2, r3
 8006d6e:	461a      	mov	r2, r3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d76:	4a17      	ldr	r2, [pc, #92]	; (8006dd4 <RadioSetRxConfig+0x2fc>)
 8006d78:	6093      	str	r3, [r2, #8]
            break;
 8006d7a:	e0ad      	b.n	8006ed8 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8006d7c:	2000      	movs	r0, #0
 8006d7e:	f001 ff5f 	bl	8008c40 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8006d82:	4b14      	ldr	r3, [pc, #80]	; (8006dd4 <RadioSetRxConfig+0x2fc>)
 8006d84:	2201      	movs	r2, #1
 8006d86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	b2da      	uxtb	r2, r3
 8006d8e:	4b11      	ldr	r3, [pc, #68]	; (8006dd4 <RadioSetRxConfig+0x2fc>)
 8006d90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8006d94:	4a15      	ldr	r2, [pc, #84]	; (8006dec <RadioSetRxConfig+0x314>)
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	4413      	add	r3, r2
 8006d9a:	781a      	ldrb	r2, [r3, #0]
 8006d9c:	4b0d      	ldr	r3, [pc, #52]	; (8006dd4 <RadioSetRxConfig+0x2fc>)
 8006d9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8006da2:	4a0c      	ldr	r2, [pc, #48]	; (8006dd4 <RadioSetRxConfig+0x2fc>)
 8006da4:	7bbb      	ldrb	r3, [r7, #14]
 8006da6:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d105      	bne.n	8006dbc <RadioSetRxConfig+0x2e4>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2b0b      	cmp	r3, #11
 8006db4:	d008      	beq.n	8006dc8 <RadioSetRxConfig+0x2f0>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2b0c      	cmp	r3, #12
 8006dba:	d005      	beq.n	8006dc8 <RadioSetRxConfig+0x2f0>
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d116      	bne.n	8006df0 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2b0c      	cmp	r3, #12
 8006dc6:	d113      	bne.n	8006df0 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8006dc8:	4b02      	ldr	r3, [pc, #8]	; (8006dd4 <RadioSetRxConfig+0x2fc>)
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8006dd0:	e012      	b.n	8006df8 <RadioSetRxConfig+0x320>
 8006dd2:	bf00      	nop
 8006dd4:	200004bc 	.word	0x200004bc
 8006dd8:	2000000d 	.word	0x2000000d
 8006ddc:	200004f4 	.word	0x200004f4
 8006de0:	200004ca 	.word	0x200004ca
 8006de4:	0800b148 	.word	0x0800b148
 8006de8:	0800b150 	.word	0x0800b150
 8006dec:	0800b2ec 	.word	0x0800b2ec
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8006df0:	4b3b      	ldr	r3, [pc, #236]	; (8006ee0 <RadioSetRxConfig+0x408>)
 8006df2:	2200      	movs	r2, #0
 8006df4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8006df8:	4b39      	ldr	r3, [pc, #228]	; (8006ee0 <RadioSetRxConfig+0x408>)
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8006dfe:	4b38      	ldr	r3, [pc, #224]	; (8006ee0 <RadioSetRxConfig+0x408>)
 8006e00:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006e04:	2b05      	cmp	r3, #5
 8006e06:	d004      	beq.n	8006e12 <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8006e08:	4b35      	ldr	r3, [pc, #212]	; (8006ee0 <RadioSetRxConfig+0x408>)
 8006e0a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8006e0e:	2b06      	cmp	r3, #6
 8006e10:	d10a      	bne.n	8006e28 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 8006e12:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006e14:	2b0b      	cmp	r3, #11
 8006e16:	d803      	bhi.n	8006e20 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8006e18:	4b31      	ldr	r3, [pc, #196]	; (8006ee0 <RadioSetRxConfig+0x408>)
 8006e1a:	220c      	movs	r2, #12
 8006e1c:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8006e1e:	e006      	b.n	8006e2e <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8006e20:	4a2f      	ldr	r2, [pc, #188]	; (8006ee0 <RadioSetRxConfig+0x408>)
 8006e22:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006e24:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8006e26:	e002      	b.n	8006e2e <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8006e28:	4a2d      	ldr	r2, [pc, #180]	; (8006ee0 <RadioSetRxConfig+0x408>)
 8006e2a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006e2c:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8006e2e:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8006e32:	4b2b      	ldr	r3, [pc, #172]	; (8006ee0 <RadioSetRxConfig+0x408>)
 8006e34:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8006e36:	4b2b      	ldr	r3, [pc, #172]	; (8006ee4 <RadioSetRxConfig+0x40c>)
 8006e38:	781a      	ldrb	r2, [r3, #0]
 8006e3a:	4b29      	ldr	r3, [pc, #164]	; (8006ee0 <RadioSetRxConfig+0x408>)
 8006e3c:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8006e3e:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8006e42:	4b27      	ldr	r3, [pc, #156]	; (8006ee0 <RadioSetRxConfig+0x408>)
 8006e44:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8006e48:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8006e4c:	4b24      	ldr	r3, [pc, #144]	; (8006ee0 <RadioSetRxConfig+0x408>)
 8006e4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8006e52:	f000 fbce 	bl	80075f2 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8006e56:	2001      	movs	r0, #1
 8006e58:	f7ff fd6a 	bl	8006930 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006e5c:	4822      	ldr	r0, [pc, #136]	; (8006ee8 <RadioSetRxConfig+0x410>)
 8006e5e:	f002 f98d 	bl	800917c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006e62:	4822      	ldr	r0, [pc, #136]	; (8006eec <RadioSetRxConfig+0x414>)
 8006e64:	f002 fa5c 	bl	8009320 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8006e68:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f001 fef6 	bl	8008c5e <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 8006e72:	f640 00a3 	movw	r0, #2211	; 0x8a3
 8006e76:	f002 fbaf 	bl	80095d8 <SUBGRF_ReadRegister>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	f003 0301 	and.w	r3, r3, #1
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	4619      	mov	r1, r3
 8006e84:	f640 00a3 	movw	r0, #2211	; 0x8a3
 8006e88:	f002 fb92 	bl	80095b0 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8006e8c:	4b14      	ldr	r3, [pc, #80]	; (8006ee0 <RadioSetRxConfig+0x408>)
 8006e8e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006e92:	2b01      	cmp	r3, #1
 8006e94:	d10d      	bne.n	8006eb2 <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8006e96:	f240 7036 	movw	r0, #1846	; 0x736
 8006e9a:	f002 fb9d 	bl	80095d8 <SUBGRF_ReadRegister>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	f023 0304 	bic.w	r3, r3, #4
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	f240 7036 	movw	r0, #1846	; 0x736
 8006eac:	f002 fb80 	bl	80095b0 <SUBGRF_WriteRegister>
 8006eb0:	e00c      	b.n	8006ecc <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8006eb2:	f240 7036 	movw	r0, #1846	; 0x736
 8006eb6:	f002 fb8f 	bl	80095d8 <SUBGRF_ReadRegister>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	f043 0304 	orr.w	r3, r3, #4
 8006ec0:	b2db      	uxtb	r3, r3
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	f240 7036 	movw	r0, #1846	; 0x736
 8006ec8:	f002 fb72 	bl	80095b0 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8006ecc:	4b04      	ldr	r3, [pc, #16]	; (8006ee0 <RadioSetRxConfig+0x408>)
 8006ece:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006ed2:	609a      	str	r2, [r3, #8]
            break;
 8006ed4:	e000      	b.n	8006ed8 <RadioSetRxConfig+0x400>
            break;
 8006ed6:	bf00      	nop
    }
}
 8006ed8:	bf00      	nop
 8006eda:	3728      	adds	r7, #40	; 0x28
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	200004bc 	.word	0x200004bc
 8006ee4:	2000000d 	.word	0x2000000d
 8006ee8:	200004f4 	.word	0x200004f4
 8006eec:	200004ca 	.word	0x200004ca

08006ef0 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b086      	sub	sp, #24
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	60ba      	str	r2, [r7, #8]
 8006ef8:	607b      	str	r3, [r7, #4]
 8006efa:	4603      	mov	r3, r0
 8006efc:	73fb      	strb	r3, [r7, #15]
 8006efe:	460b      	mov	r3, r1
 8006f00:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 8006f02:	f002 fe3c 	bl	8009b7e <RFW_DeInit>
    switch( modem )
 8006f06:	7bfb      	ldrb	r3, [r7, #15]
 8006f08:	2b04      	cmp	r3, #4
 8006f0a:	f000 80c7 	beq.w	800709c <RadioSetTxConfig+0x1ac>
 8006f0e:	2b04      	cmp	r3, #4
 8006f10:	f300 80d6 	bgt.w	80070c0 <RadioSetTxConfig+0x1d0>
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d002      	beq.n	8006f1e <RadioSetTxConfig+0x2e>
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d059      	beq.n	8006fd0 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8006f1c:	e0d0      	b.n	80070c0 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8006f1e:	4b77      	ldr	r3, [pc, #476]	; (80070fc <RadioSetTxConfig+0x20c>)
 8006f20:	2200      	movs	r2, #0
 8006f22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8006f26:	4a75      	ldr	r2, [pc, #468]	; (80070fc <RadioSetTxConfig+0x20c>)
 8006f28:	6a3b      	ldr	r3, [r7, #32]
 8006f2a:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8006f2c:	4b73      	ldr	r3, [pc, #460]	; (80070fc <RadioSetTxConfig+0x20c>)
 8006f2e:	220b      	movs	r2, #11
 8006f30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f002 fd55 	bl	80099e4 <SUBGRF_GetFskBandwidthRegValue>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	4b6f      	ldr	r3, [pc, #444]	; (80070fc <RadioSetTxConfig+0x20c>)
 8006f40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8006f44:	4a6d      	ldr	r2, [pc, #436]	; (80070fc <RadioSetTxConfig+0x20c>)
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8006f4a:	4b6c      	ldr	r3, [pc, #432]	; (80070fc <RadioSetTxConfig+0x20c>)
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8006f50:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006f52:	00db      	lsls	r3, r3, #3
 8006f54:	b29a      	uxth	r2, r3
 8006f56:	4b69      	ldr	r3, [pc, #420]	; (80070fc <RadioSetTxConfig+0x20c>)
 8006f58:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8006f5a:	4b68      	ldr	r3, [pc, #416]	; (80070fc <RadioSetTxConfig+0x20c>)
 8006f5c:	2204      	movs	r2, #4
 8006f5e:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8006f60:	4b66      	ldr	r3, [pc, #408]	; (80070fc <RadioSetTxConfig+0x20c>)
 8006f62:	2218      	movs	r2, #24
 8006f64:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8006f66:	4b65      	ldr	r3, [pc, #404]	; (80070fc <RadioSetTxConfig+0x20c>)
 8006f68:	2200      	movs	r2, #0
 8006f6a:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8006f6c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006f70:	f083 0301 	eor.w	r3, r3, #1
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	461a      	mov	r2, r3
 8006f78:	4b60      	ldr	r3, [pc, #384]	; (80070fc <RadioSetTxConfig+0x20c>)
 8006f7a:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8006f7c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d003      	beq.n	8006f8c <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8006f84:	4b5d      	ldr	r3, [pc, #372]	; (80070fc <RadioSetTxConfig+0x20c>)
 8006f86:	22f2      	movs	r2, #242	; 0xf2
 8006f88:	75da      	strb	r2, [r3, #23]
 8006f8a:	e002      	b.n	8006f92 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8006f8c:	4b5b      	ldr	r3, [pc, #364]	; (80070fc <RadioSetTxConfig+0x20c>)
 8006f8e:	2201      	movs	r2, #1
 8006f90:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8006f92:	4b5a      	ldr	r3, [pc, #360]	; (80070fc <RadioSetTxConfig+0x20c>)
 8006f94:	2201      	movs	r2, #1
 8006f96:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8006f98:	f000 fb2b 	bl	80075f2 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8006f9c:	2000      	movs	r0, #0
 8006f9e:	f7ff fcc7 	bl	8006930 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006fa2:	4857      	ldr	r0, [pc, #348]	; (8007100 <RadioSetTxConfig+0x210>)
 8006fa4:	f002 f8ea 	bl	800917c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006fa8:	4856      	ldr	r0, [pc, #344]	; (8007104 <RadioSetTxConfig+0x214>)
 8006faa:	f002 f9b9 	bl	8009320 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8006fae:	4a56      	ldr	r2, [pc, #344]	; (8007108 <RadioSetTxConfig+0x218>)
 8006fb0:	f107 0310 	add.w	r3, r7, #16
 8006fb4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006fb8:	e883 0003 	stmia.w	r3, {r0, r1}
 8006fbc:	f107 0310 	add.w	r3, r7, #16
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f001 fc76 	bl	80088b2 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8006fc6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006fca:	f001 fcc1 	bl	8008950 <SUBGRF_SetWhiteningSeed>
            break;
 8006fce:	e078      	b.n	80070c2 <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8006fd0:	4b4a      	ldr	r3, [pc, #296]	; (80070fc <RadioSetTxConfig+0x20c>)
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8006fd8:	6a3b      	ldr	r3, [r7, #32]
 8006fda:	b2da      	uxtb	r2, r3
 8006fdc:	4b47      	ldr	r3, [pc, #284]	; (80070fc <RadioSetTxConfig+0x20c>)
 8006fde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8006fe2:	4a4a      	ldr	r2, [pc, #296]	; (800710c <RadioSetTxConfig+0x21c>)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	4413      	add	r3, r2
 8006fe8:	781a      	ldrb	r2, [r3, #0]
 8006fea:	4b44      	ldr	r3, [pc, #272]	; (80070fc <RadioSetTxConfig+0x20c>)
 8006fec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8006ff0:	4a42      	ldr	r2, [pc, #264]	; (80070fc <RadioSetTxConfig+0x20c>)
 8006ff2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006ff6:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d105      	bne.n	800700c <RadioSetTxConfig+0x11c>
 8007000:	6a3b      	ldr	r3, [r7, #32]
 8007002:	2b0b      	cmp	r3, #11
 8007004:	d008      	beq.n	8007018 <RadioSetTxConfig+0x128>
 8007006:	6a3b      	ldr	r3, [r7, #32]
 8007008:	2b0c      	cmp	r3, #12
 800700a:	d005      	beq.n	8007018 <RadioSetTxConfig+0x128>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2b01      	cmp	r3, #1
 8007010:	d107      	bne.n	8007022 <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8007012:	6a3b      	ldr	r3, [r7, #32]
 8007014:	2b0c      	cmp	r3, #12
 8007016:	d104      	bne.n	8007022 <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8007018:	4b38      	ldr	r3, [pc, #224]	; (80070fc <RadioSetTxConfig+0x20c>)
 800701a:	2201      	movs	r2, #1
 800701c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8007020:	e003      	b.n	800702a <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8007022:	4b36      	ldr	r3, [pc, #216]	; (80070fc <RadioSetTxConfig+0x20c>)
 8007024:	2200      	movs	r2, #0
 8007026:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800702a:	4b34      	ldr	r3, [pc, #208]	; (80070fc <RadioSetTxConfig+0x20c>)
 800702c:	2201      	movs	r2, #1
 800702e:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8007030:	4b32      	ldr	r3, [pc, #200]	; (80070fc <RadioSetTxConfig+0x20c>)
 8007032:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007036:	2b05      	cmp	r3, #5
 8007038:	d004      	beq.n	8007044 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 800703a:	4b30      	ldr	r3, [pc, #192]	; (80070fc <RadioSetTxConfig+0x20c>)
 800703c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8007040:	2b06      	cmp	r3, #6
 8007042:	d10a      	bne.n	800705a <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 8007044:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007046:	2b0b      	cmp	r3, #11
 8007048:	d803      	bhi.n	8007052 <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800704a:	4b2c      	ldr	r3, [pc, #176]	; (80070fc <RadioSetTxConfig+0x20c>)
 800704c:	220c      	movs	r2, #12
 800704e:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8007050:	e006      	b.n	8007060 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8007052:	4a2a      	ldr	r2, [pc, #168]	; (80070fc <RadioSetTxConfig+0x20c>)
 8007054:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007056:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8007058:	e002      	b.n	8007060 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800705a:	4a28      	ldr	r2, [pc, #160]	; (80070fc <RadioSetTxConfig+0x20c>)
 800705c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800705e:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8007060:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8007064:	4b25      	ldr	r3, [pc, #148]	; (80070fc <RadioSetTxConfig+0x20c>)
 8007066:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8007068:	4b29      	ldr	r3, [pc, #164]	; (8007110 <RadioSetTxConfig+0x220>)
 800706a:	781a      	ldrb	r2, [r3, #0]
 800706c:	4b23      	ldr	r3, [pc, #140]	; (80070fc <RadioSetTxConfig+0x20c>)
 800706e:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8007070:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8007074:	4b21      	ldr	r3, [pc, #132]	; (80070fc <RadioSetTxConfig+0x20c>)
 8007076:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800707a:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 800707e:	4b1f      	ldr	r3, [pc, #124]	; (80070fc <RadioSetTxConfig+0x20c>)
 8007080:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8007084:	f000 fab5 	bl	80075f2 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8007088:	2001      	movs	r0, #1
 800708a:	f7ff fc51 	bl	8006930 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800708e:	481c      	ldr	r0, [pc, #112]	; (8007100 <RadioSetTxConfig+0x210>)
 8007090:	f002 f874 	bl	800917c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007094:	481b      	ldr	r0, [pc, #108]	; (8007104 <RadioSetTxConfig+0x214>)
 8007096:	f002 f943 	bl	8009320 <SUBGRF_SetPacketParams>
            break;
 800709a:	e012      	b.n	80070c2 <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 800709c:	2004      	movs	r0, #4
 800709e:	f7ff fc47 	bl	8006930 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 80070a2:	4b16      	ldr	r3, [pc, #88]	; (80070fc <RadioSetTxConfig+0x20c>)
 80070a4:	2202      	movs	r2, #2
 80070a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 80070aa:	4a14      	ldr	r2, [pc, #80]	; (80070fc <RadioSetTxConfig+0x20c>)
 80070ac:	6a3b      	ldr	r3, [r7, #32]
 80070ae:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 80070b0:	4b12      	ldr	r3, [pc, #72]	; (80070fc <RadioSetTxConfig+0x20c>)
 80070b2:	2216      	movs	r2, #22
 80070b4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80070b8:	4811      	ldr	r0, [pc, #68]	; (8007100 <RadioSetTxConfig+0x210>)
 80070ba:	f002 f85f 	bl	800917c <SUBGRF_SetModulationParams>
            break;
 80070be:	e000      	b.n	80070c2 <RadioSetTxConfig+0x1d2>
            break;
 80070c0:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80070c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80070c6:	4618      	mov	r0, r3
 80070c8:	f002 fb8e 	bl	80097e8 <SUBGRF_SetRfTxPower>
 80070cc:	4603      	mov	r3, r0
 80070ce:	461a      	mov	r2, r3
 80070d0:	4b0a      	ldr	r3, [pc, #40]	; (80070fc <RadioSetTxConfig+0x20c>)
 80070d2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80070d6:	210e      	movs	r1, #14
 80070d8:	f640 101f 	movw	r0, #2335	; 0x91f
 80070dc:	f002 fa68 	bl	80095b0 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 80070e0:	4b06      	ldr	r3, [pc, #24]	; (80070fc <RadioSetTxConfig+0x20c>)
 80070e2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80070e6:	4618      	mov	r0, r3
 80070e8:	f002 fd5d 	bl	8009ba6 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 80070ec:	4a03      	ldr	r2, [pc, #12]	; (80070fc <RadioSetTxConfig+0x20c>)
 80070ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070f0:	6053      	str	r3, [r2, #4]
}
 80070f2:	bf00      	nop
 80070f4:	3718      	adds	r7, #24
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop
 80070fc:	200004bc 	.word	0x200004bc
 8007100:	200004f4 	.word	0x200004f4
 8007104:	200004ca 	.word	0x200004ca
 8007108:	0800b150 	.word	0x0800b150
 800710c:	0800b2ec 	.word	0x0800b2ec
 8007110:	2000000d 	.word	0x2000000d

08007114 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8007114:	b480      	push	{r7}
 8007116:	b083      	sub	sp, #12
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
    return true;
 800711c:	2301      	movs	r3, #1
}
 800711e:	4618      	mov	r0, r3
 8007120:	370c      	adds	r7, #12
 8007122:	46bd      	mov	sp, r7
 8007124:	bc80      	pop	{r7}
 8007126:	4770      	bx	lr

08007128 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8007128:	b480      	push	{r7}
 800712a:	b085      	sub	sp, #20
 800712c:	af00      	add	r7, sp, #0
 800712e:	4603      	mov	r3, r0
 8007130:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8007132:	2300      	movs	r3, #0
 8007134:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8007136:	79fb      	ldrb	r3, [r7, #7]
 8007138:	2b0a      	cmp	r3, #10
 800713a:	d83e      	bhi.n	80071ba <RadioGetLoRaBandwidthInHz+0x92>
 800713c:	a201      	add	r2, pc, #4	; (adr r2, 8007144 <RadioGetLoRaBandwidthInHz+0x1c>)
 800713e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007142:	bf00      	nop
 8007144:	08007171 	.word	0x08007171
 8007148:	08007181 	.word	0x08007181
 800714c:	08007191 	.word	0x08007191
 8007150:	080071a1 	.word	0x080071a1
 8007154:	080071a9 	.word	0x080071a9
 8007158:	080071af 	.word	0x080071af
 800715c:	080071b5 	.word	0x080071b5
 8007160:	080071bb 	.word	0x080071bb
 8007164:	08007179 	.word	0x08007179
 8007168:	08007189 	.word	0x08007189
 800716c:	08007199 	.word	0x08007199
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8007170:	f641 6384 	movw	r3, #7812	; 0x1e84
 8007174:	60fb      	str	r3, [r7, #12]
        break;
 8007176:	e020      	b.n	80071ba <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8007178:	f642 03b1 	movw	r3, #10417	; 0x28b1
 800717c:	60fb      	str	r3, [r7, #12]
        break;
 800717e:	e01c      	b.n	80071ba <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8007180:	f643 5309 	movw	r3, #15625	; 0x3d09
 8007184:	60fb      	str	r3, [r7, #12]
        break;
 8007186:	e018      	b.n	80071ba <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8007188:	f245 1361 	movw	r3, #20833	; 0x5161
 800718c:	60fb      	str	r3, [r7, #12]
        break;
 800718e:	e014      	b.n	80071ba <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8007190:	f647 2312 	movw	r3, #31250	; 0x7a12
 8007194:	60fb      	str	r3, [r7, #12]
        break;
 8007196:	e010      	b.n	80071ba <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8007198:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 800719c:	60fb      	str	r3, [r7, #12]
        break;
 800719e:	e00c      	b.n	80071ba <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 80071a0:	f24f 4324 	movw	r3, #62500	; 0xf424
 80071a4:	60fb      	str	r3, [r7, #12]
        break;
 80071a6:	e008      	b.n	80071ba <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 80071a8:	4b07      	ldr	r3, [pc, #28]	; (80071c8 <RadioGetLoRaBandwidthInHz+0xa0>)
 80071aa:	60fb      	str	r3, [r7, #12]
        break;
 80071ac:	e005      	b.n	80071ba <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 80071ae:	4b07      	ldr	r3, [pc, #28]	; (80071cc <RadioGetLoRaBandwidthInHz+0xa4>)
 80071b0:	60fb      	str	r3, [r7, #12]
        break;
 80071b2:	e002      	b.n	80071ba <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 80071b4:	4b06      	ldr	r3, [pc, #24]	; (80071d0 <RadioGetLoRaBandwidthInHz+0xa8>)
 80071b6:	60fb      	str	r3, [r7, #12]
        break;
 80071b8:	bf00      	nop
    }

    return bandwidthInHz;
 80071ba:	68fb      	ldr	r3, [r7, #12]
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3714      	adds	r7, #20
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bc80      	pop	{r7}
 80071c4:	4770      	bx	lr
 80071c6:	bf00      	nop
 80071c8:	0001e848 	.word	0x0001e848
 80071cc:	0003d090 	.word	0x0003d090
 80071d0:	0007a120 	.word	0x0007a120

080071d4 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80071d4:	b480      	push	{r7}
 80071d6:	b083      	sub	sp, #12
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	4608      	mov	r0, r1
 80071de:	4611      	mov	r1, r2
 80071e0:	461a      	mov	r2, r3
 80071e2:	4603      	mov	r3, r0
 80071e4:	70fb      	strb	r3, [r7, #3]
 80071e6:	460b      	mov	r3, r1
 80071e8:	803b      	strh	r3, [r7, #0]
 80071ea:	4613      	mov	r3, r2
 80071ec:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 80071ee:	883b      	ldrh	r3, [r7, #0]
 80071f0:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80071f2:	78ba      	ldrb	r2, [r7, #2]
 80071f4:	f082 0201 	eor.w	r2, r2, #1
 80071f8:	b2d2      	uxtb	r2, r2
 80071fa:	2a00      	cmp	r2, #0
 80071fc:	d001      	beq.n	8007202 <RadioGetGfskTimeOnAirNumerator+0x2e>
 80071fe:	2208      	movs	r2, #8
 8007200:	e000      	b.n	8007204 <RadioGetGfskTimeOnAirNumerator+0x30>
 8007202:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8007204:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8007206:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 800720a:	7c3b      	ldrb	r3, [r7, #16]
 800720c:	7d39      	ldrb	r1, [r7, #20]
 800720e:	2900      	cmp	r1, #0
 8007210:	d001      	beq.n	8007216 <RadioGetGfskTimeOnAirNumerator+0x42>
 8007212:	2102      	movs	r1, #2
 8007214:	e000      	b.n	8007218 <RadioGetGfskTimeOnAirNumerator+0x44>
 8007216:	2100      	movs	r1, #0
 8007218:	440b      	add	r3, r1
 800721a:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800721c:	4413      	add	r3, r2
}
 800721e:	4618      	mov	r0, r3
 8007220:	370c      	adds	r7, #12
 8007222:	46bd      	mov	sp, r7
 8007224:	bc80      	pop	{r7}
 8007226:	4770      	bx	lr

08007228 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8007228:	b480      	push	{r7}
 800722a:	b08b      	sub	sp, #44	; 0x2c
 800722c:	af00      	add	r7, sp, #0
 800722e:	60f8      	str	r0, [r7, #12]
 8007230:	60b9      	str	r1, [r7, #8]
 8007232:	4611      	mov	r1, r2
 8007234:	461a      	mov	r2, r3
 8007236:	460b      	mov	r3, r1
 8007238:	71fb      	strb	r3, [r7, #7]
 800723a:	4613      	mov	r3, r2
 800723c:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 800723e:	79fb      	ldrb	r3, [r7, #7]
 8007240:	3304      	adds	r3, #4
 8007242:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8007244:	2300      	movs	r3, #0
 8007246:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	2b05      	cmp	r3, #5
 800724e:	d002      	beq.n	8007256 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	2b06      	cmp	r3, #6
 8007254:	d104      	bne.n	8007260 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8007256:	88bb      	ldrh	r3, [r7, #4]
 8007258:	2b0b      	cmp	r3, #11
 800725a:	d801      	bhi.n	8007260 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 800725c:	230c      	movs	r3, #12
 800725e:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d105      	bne.n	8007272 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	2b0b      	cmp	r3, #11
 800726a:	d008      	beq.n	800727e <RadioGetLoRaTimeOnAirNumerator+0x56>
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	2b0c      	cmp	r3, #12
 8007270:	d005      	beq.n	800727e <RadioGetLoRaTimeOnAirNumerator+0x56>
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2b01      	cmp	r3, #1
 8007276:	d105      	bne.n	8007284 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	2b0c      	cmp	r3, #12
 800727c:	d102      	bne.n	8007284 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 800727e:	2301      	movs	r3, #1
 8007280:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8007284:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8007288:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 800728a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800728e:	2a00      	cmp	r2, #0
 8007290:	d001      	beq.n	8007296 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8007292:	2210      	movs	r2, #16
 8007294:	e000      	b.n	8007298 <RadioGetLoRaTimeOnAirNumerator+0x70>
 8007296:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8007298:	4413      	add	r3, r2
 800729a:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 80072a0:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 80072a2:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80072a6:	2a00      	cmp	r2, #0
 80072a8:	d001      	beq.n	80072ae <RadioGetLoRaTimeOnAirNumerator+0x86>
 80072aa:	2200      	movs	r2, #0
 80072ac:	e000      	b.n	80072b0 <RadioGetLoRaTimeOnAirNumerator+0x88>
 80072ae:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 80072b0:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80072b2:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	2b06      	cmp	r3, #6
 80072b8:	d803      	bhi.n	80072c2 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	009b      	lsls	r3, r3, #2
 80072be:	623b      	str	r3, [r7, #32]
 80072c0:	e00e      	b.n	80072e0 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 80072c2:	69fb      	ldr	r3, [r7, #28]
 80072c4:	3308      	adds	r3, #8
 80072c6:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 80072c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d004      	beq.n	80072da <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	3b02      	subs	r3, #2
 80072d4:	009b      	lsls	r3, r3, #2
 80072d6:	623b      	str	r3, [r7, #32]
 80072d8:	e002      	b.n	80072e0 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	009b      	lsls	r3, r3, #2
 80072de:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 80072e0:	69fb      	ldr	r3, [r7, #28]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	da01      	bge.n	80072ea <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 80072e6:	2300      	movs	r3, #0
 80072e8:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 80072ea:	69fa      	ldr	r2, [r7, #28]
 80072ec:	6a3b      	ldr	r3, [r7, #32]
 80072ee:	4413      	add	r3, r2
 80072f0:	1e5a      	subs	r2, r3, #1
 80072f2:	6a3b      	ldr	r3, [r7, #32]
 80072f4:	fb92 f3f3 	sdiv	r3, r2, r3
 80072f8:	697a      	ldr	r2, [r7, #20]
 80072fa:	fb03 f202 	mul.w	r2, r3, r2
 80072fe:	88bb      	ldrh	r3, [r7, #4]
 8007300:	4413      	add	r3, r2
    int32_t intermediate =
 8007302:	330c      	adds	r3, #12
 8007304:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	2b06      	cmp	r3, #6
 800730a:	d802      	bhi.n	8007312 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 800730c:	69bb      	ldr	r3, [r7, #24]
 800730e:	3302      	adds	r3, #2
 8007310:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8007312:	69bb      	ldr	r3, [r7, #24]
 8007314:	009b      	lsls	r3, r3, #2
 8007316:	1c5a      	adds	r2, r3, #1
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	3b02      	subs	r3, #2
 800731c:	fa02 f303 	lsl.w	r3, r2, r3
}
 8007320:	4618      	mov	r0, r3
 8007322:	372c      	adds	r7, #44	; 0x2c
 8007324:	46bd      	mov	sp, r7
 8007326:	bc80      	pop	{r7}
 8007328:	4770      	bx	lr
	...

0800732c <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b08a      	sub	sp, #40	; 0x28
 8007330:	af04      	add	r7, sp, #16
 8007332:	60b9      	str	r1, [r7, #8]
 8007334:	607a      	str	r2, [r7, #4]
 8007336:	461a      	mov	r2, r3
 8007338:	4603      	mov	r3, r0
 800733a:	73fb      	strb	r3, [r7, #15]
 800733c:	4613      	mov	r3, r2
 800733e:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8007340:	2300      	movs	r3, #0
 8007342:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8007344:	2301      	movs	r3, #1
 8007346:	613b      	str	r3, [r7, #16]

    switch( modem )
 8007348:	7bfb      	ldrb	r3, [r7, #15]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d002      	beq.n	8007354 <RadioTimeOnAir+0x28>
 800734e:	2b01      	cmp	r3, #1
 8007350:	d017      	beq.n	8007382 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8007352:	e035      	b.n	80073c0 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8007354:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8007358:	8c3a      	ldrh	r2, [r7, #32]
 800735a:	7bb9      	ldrb	r1, [r7, #14]
 800735c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007360:	9301      	str	r3, [sp, #4]
 8007362:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007366:	9300      	str	r3, [sp, #0]
 8007368:	4603      	mov	r3, r0
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f7ff ff32 	bl	80071d4 <RadioGetGfskTimeOnAirNumerator>
 8007370:	4603      	mov	r3, r0
 8007372:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007376:	fb02 f303 	mul.w	r3, r2, r3
 800737a:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	613b      	str	r3, [r7, #16]
        break;
 8007380:	e01e      	b.n	80073c0 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8007382:	8c39      	ldrh	r1, [r7, #32]
 8007384:	7bba      	ldrb	r2, [r7, #14]
 8007386:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800738a:	9302      	str	r3, [sp, #8]
 800738c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007390:	9301      	str	r3, [sp, #4]
 8007392:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007396:	9300      	str	r3, [sp, #0]
 8007398:	460b      	mov	r3, r1
 800739a:	6879      	ldr	r1, [r7, #4]
 800739c:	68b8      	ldr	r0, [r7, #8]
 800739e:	f7ff ff43 	bl	8007228 <RadioGetLoRaTimeOnAirNumerator>
 80073a2:	4603      	mov	r3, r0
 80073a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80073a8:	fb02 f303 	mul.w	r3, r2, r3
 80073ac:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 80073ae:	4a0a      	ldr	r2, [pc, #40]	; (80073d8 <RadioTimeOnAir+0xac>)
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	4413      	add	r3, r2
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	4618      	mov	r0, r3
 80073b8:	f7ff feb6 	bl	8007128 <RadioGetLoRaBandwidthInHz>
 80073bc:	6138      	str	r0, [r7, #16]
        break;
 80073be:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 80073c0:	697a      	ldr	r2, [r7, #20]
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	4413      	add	r3, r2
 80073c6:	1e5a      	subs	r2, r3, #1
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3718      	adds	r7, #24
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	bf00      	nop
 80073d8:	0800b2ec 	.word	0x0800b2ec

080073dc <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b084      	sub	sp, #16
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	460b      	mov	r3, r1
 80073e6:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 80073e8:	2300      	movs	r3, #0
 80073ea:	2200      	movs	r2, #0
 80073ec:	f240 2101 	movw	r1, #513	; 0x201
 80073f0:	f240 2001 	movw	r0, #513	; 0x201
 80073f4:	f001 fd2c 	bl	8008e50 <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80073f8:	4b70      	ldr	r3, [pc, #448]	; (80075bc <RadioSend+0x1e0>)
 80073fa:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80073fe:	2101      	movs	r1, #1
 8007400:	4618      	mov	r0, r3
 8007402:	f002 f9c9 	bl	8009798 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8007406:	4b6d      	ldr	r3, [pc, #436]	; (80075bc <RadioSend+0x1e0>)
 8007408:	781b      	ldrb	r3, [r3, #0]
 800740a:	2b01      	cmp	r3, #1
 800740c:	d112      	bne.n	8007434 <RadioSend+0x58>
 800740e:	4b6b      	ldr	r3, [pc, #428]	; (80075bc <RadioSend+0x1e0>)
 8007410:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007414:	2b06      	cmp	r3, #6
 8007416:	d10d      	bne.n	8007434 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8007418:	f640 0089 	movw	r0, #2185	; 0x889
 800741c:	f002 f8dc 	bl	80095d8 <SUBGRF_ReadRegister>
 8007420:	4603      	mov	r3, r0
 8007422:	f023 0304 	bic.w	r3, r3, #4
 8007426:	b2db      	uxtb	r3, r3
 8007428:	4619      	mov	r1, r3
 800742a:	f640 0089 	movw	r0, #2185	; 0x889
 800742e:	f002 f8bf 	bl	80095b0 <SUBGRF_WriteRegister>
 8007432:	e00c      	b.n	800744e <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8007434:	f640 0089 	movw	r0, #2185	; 0x889
 8007438:	f002 f8ce 	bl	80095d8 <SUBGRF_ReadRegister>
 800743c:	4603      	mov	r3, r0
 800743e:	f043 0304 	orr.w	r3, r3, #4
 8007442:	b2db      	uxtb	r3, r3
 8007444:	4619      	mov	r1, r3
 8007446:	f640 0089 	movw	r0, #2185	; 0x889
 800744a:	f002 f8b1 	bl	80095b0 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 800744e:	4b5b      	ldr	r3, [pc, #364]	; (80075bc <RadioSend+0x1e0>)
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	2b04      	cmp	r3, #4
 8007454:	f200 80a2 	bhi.w	800759c <RadioSend+0x1c0>
 8007458:	a201      	add	r2, pc, #4	; (adr r2, 8007460 <RadioSend+0x84>)
 800745a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800745e:	bf00      	nop
 8007460:	0800748f 	.word	0x0800748f
 8007464:	08007475 	.word	0x08007475
 8007468:	0800748f 	.word	0x0800748f
 800746c:	080074e5 	.word	0x080074e5
 8007470:	08007505 	.word	0x08007505
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8007474:	4a51      	ldr	r2, [pc, #324]	; (80075bc <RadioSend+0x1e0>)
 8007476:	78fb      	ldrb	r3, [r7, #3]
 8007478:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800747a:	4851      	ldr	r0, [pc, #324]	; (80075c0 <RadioSend+0x1e4>)
 800747c:	f001 ff50 	bl	8009320 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8007480:	78fb      	ldrb	r3, [r7, #3]
 8007482:	2200      	movs	r2, #0
 8007484:	4619      	mov	r1, r3
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f001 fa00 	bl	800888c <SUBGRF_SendPayload>
            break;
 800748c:	e087      	b.n	800759e <RadioSend+0x1c2>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 800748e:	f002 fb7c 	bl	8009b8a <RFW_Is_Init>
 8007492:	4603      	mov	r3, r0
 8007494:	2b01      	cmp	r3, #1
 8007496:	d118      	bne.n	80074ca <RadioSend+0xee>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8007498:	f107 020d 	add.w	r2, r7, #13
 800749c:	78fb      	ldrb	r3, [r7, #3]
 800749e:	4619      	mov	r1, r3
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f002 fb8a 	bl	8009bba <RFW_TransmitInit>
 80074a6:	4603      	mov	r3, r0
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d10c      	bne.n	80074c6 <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 80074ac:	7b7a      	ldrb	r2, [r7, #13]
 80074ae:	4b43      	ldr	r3, [pc, #268]	; (80075bc <RadioSend+0x1e0>)
 80074b0:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80074b2:	4843      	ldr	r0, [pc, #268]	; (80075c0 <RadioSend+0x1e4>)
 80074b4:	f001 ff34 	bl	8009320 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 80074b8:	7b7b      	ldrb	r3, [r7, #13]
 80074ba:	2200      	movs	r2, #0
 80074bc:	4619      	mov	r1, r3
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f001 f9e4 	bl	800888c <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 80074c4:	e06b      	b.n	800759e <RadioSend+0x1c2>
                    return RADIO_STATUS_ERROR;
 80074c6:	2303      	movs	r3, #3
 80074c8:	e073      	b.n	80075b2 <RadioSend+0x1d6>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 80074ca:	4a3c      	ldr	r2, [pc, #240]	; (80075bc <RadioSend+0x1e0>)
 80074cc:	78fb      	ldrb	r3, [r7, #3]
 80074ce:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80074d0:	483b      	ldr	r0, [pc, #236]	; (80075c0 <RadioSend+0x1e4>)
 80074d2:	f001 ff25 	bl	8009320 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 80074d6:	78fb      	ldrb	r3, [r7, #3]
 80074d8:	2200      	movs	r2, #0
 80074da:	4619      	mov	r1, r3
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f001 f9d5 	bl	800888c <SUBGRF_SendPayload>
            break;
 80074e2:	e05c      	b.n	800759e <RadioSend+0x1c2>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80074e4:	4b35      	ldr	r3, [pc, #212]	; (80075bc <RadioSend+0x1e0>)
 80074e6:	2202      	movs	r2, #2
 80074e8:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 80074ea:	4a34      	ldr	r2, [pc, #208]	; (80075bc <RadioSend+0x1e0>)
 80074ec:	78fb      	ldrb	r3, [r7, #3]
 80074ee:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80074f0:	4833      	ldr	r0, [pc, #204]	; (80075c0 <RadioSend+0x1e4>)
 80074f2:	f001 ff15 	bl	8009320 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80074f6:	78fb      	ldrb	r3, [r7, #3]
 80074f8:	2200      	movs	r2, #0
 80074fa:	4619      	mov	r1, r3
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f001 f9c5 	bl	800888c <SUBGRF_SendPayload>
            break;
 8007502:	e04c      	b.n	800759e <RadioSend+0x1c2>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8007504:	78fb      	ldrb	r3, [r7, #3]
 8007506:	461a      	mov	r2, r3
 8007508:	6879      	ldr	r1, [r7, #4]
 800750a:	482e      	ldr	r0, [pc, #184]	; (80075c4 <RadioSend+0x1e8>)
 800750c:	f000 fc98 	bl	8007e40 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8007510:	4b2a      	ldr	r3, [pc, #168]	; (80075bc <RadioSend+0x1e0>)
 8007512:	2202      	movs	r2, #2
 8007514:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8007516:	78fb      	ldrb	r3, [r7, #3]
 8007518:	3301      	adds	r3, #1
 800751a:	b2da      	uxtb	r2, r3
 800751c:	4b27      	ldr	r3, [pc, #156]	; (80075bc <RadioSend+0x1e0>)
 800751e:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007520:	4827      	ldr	r0, [pc, #156]	; (80075c0 <RadioSend+0x1e4>)
 8007522:	f001 fefd 	bl	8009320 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8007526:	2100      	movs	r1, #0
 8007528:	20f1      	movs	r0, #241	; 0xf1
 800752a:	f000 f964 	bl	80077f6 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 800752e:	2100      	movs	r1, #0
 8007530:	20f0      	movs	r0, #240	; 0xf0
 8007532:	f000 f960 	bl	80077f6 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8007536:	4b21      	ldr	r3, [pc, #132]	; (80075bc <RadioSend+0x1e0>)
 8007538:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800753a:	2b64      	cmp	r3, #100	; 0x64
 800753c:	d108      	bne.n	8007550 <RadioSend+0x174>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 800753e:	2170      	movs	r1, #112	; 0x70
 8007540:	20f3      	movs	r0, #243	; 0xf3
 8007542:	f000 f958 	bl	80077f6 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 8007546:	211d      	movs	r1, #29
 8007548:	20f2      	movs	r0, #242	; 0xf2
 800754a:	f000 f954 	bl	80077f6 <RadioWrite>
 800754e:	e007      	b.n	8007560 <RadioSend+0x184>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8007550:	21e1      	movs	r1, #225	; 0xe1
 8007552:	20f3      	movs	r0, #243	; 0xf3
 8007554:	f000 f94f 	bl	80077f6 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8007558:	2104      	movs	r1, #4
 800755a:	20f2      	movs	r0, #242	; 0xf2
 800755c:	f000 f94b 	bl	80077f6 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8007560:	78fb      	ldrb	r3, [r7, #3]
 8007562:	b29b      	uxth	r3, r3
 8007564:	00db      	lsls	r3, r3, #3
 8007566:	b29b      	uxth	r3, r3
 8007568:	3302      	adds	r3, #2
 800756a:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 800756c:	89fb      	ldrh	r3, [r7, #14]
 800756e:	0a1b      	lsrs	r3, r3, #8
 8007570:	b29b      	uxth	r3, r3
 8007572:	b2db      	uxtb	r3, r3
 8007574:	4619      	mov	r1, r3
 8007576:	20f4      	movs	r0, #244	; 0xf4
 8007578:	f000 f93d 	bl	80077f6 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 800757c:	89fb      	ldrh	r3, [r7, #14]
 800757e:	b2db      	uxtb	r3, r3
 8007580:	4619      	mov	r1, r3
 8007582:	20f5      	movs	r0, #245	; 0xf5
 8007584:	f000 f937 	bl	80077f6 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 8007588:	78fb      	ldrb	r3, [r7, #3]
 800758a:	3301      	adds	r3, #1
 800758c:	b2db      	uxtb	r3, r3
 800758e:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8007592:	4619      	mov	r1, r3
 8007594:	480b      	ldr	r0, [pc, #44]	; (80075c4 <RadioSend+0x1e8>)
 8007596:	f001 f979 	bl	800888c <SUBGRF_SendPayload>
            break;
 800759a:	e000      	b.n	800759e <RadioSend+0x1c2>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 800759c:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 800759e:	4b07      	ldr	r3, [pc, #28]	; (80075bc <RadioSend+0x1e0>)
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	4619      	mov	r1, r3
 80075a4:	4808      	ldr	r0, [pc, #32]	; (80075c8 <RadioSend+0x1ec>)
 80075a6:	f002 fdcf 	bl	800a148 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 80075aa:	4807      	ldr	r0, [pc, #28]	; (80075c8 <RadioSend+0x1ec>)
 80075ac:	f002 fcee 	bl	8009f8c <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 80075b0:	2300      	movs	r3, #0
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3710      	adds	r7, #16
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}
 80075ba:	bf00      	nop
 80075bc:	200004bc 	.word	0x200004bc
 80075c0:	200004ca 	.word	0x200004ca
 80075c4:	200003b8 	.word	0x200003b8
 80075c8:	20000518 	.word	0x20000518

080075cc <RadioSleep>:

static void RadioSleep( void )
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 80075d2:	2300      	movs	r3, #0
 80075d4:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 80075d6:	793b      	ldrb	r3, [r7, #4]
 80075d8:	f043 0304 	orr.w	r3, r3, #4
 80075dc:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 80075de:	7938      	ldrb	r0, [r7, #4]
 80075e0:	f001 fa30 	bl	8008a44 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 80075e4:	2002      	movs	r0, #2
 80075e6:	f7f9 ff43 	bl	8001470 <HAL_Delay>
}
 80075ea:	bf00      	nop
 80075ec:	3708      	adds	r7, #8
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}

080075f2 <RadioStandby>:

static void RadioStandby( void )
{
 80075f2:	b580      	push	{r7, lr}
 80075f4:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 80075f6:	2000      	movs	r0, #0
 80075f8:	f001 fa56 	bl	8008aa8 <SUBGRF_SetStandby>
}
 80075fc:	bf00      	nop
 80075fe:	bd80      	pop	{r7, pc}

08007600 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b082      	sub	sp, #8
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 8007608:	f002 fabf 	bl	8009b8a <RFW_Is_Init>
 800760c:	4603      	mov	r3, r0
 800760e:	2b01      	cmp	r3, #1
 8007610:	d102      	bne.n	8007618 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 8007612:	f002 fae2 	bl	8009bda <RFW_ReceiveInit>
 8007616:	e007      	b.n	8007628 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8007618:	2300      	movs	r3, #0
 800761a:	2200      	movs	r2, #0
 800761c:	f240 2162 	movw	r1, #610	; 0x262
 8007620:	f240 2062 	movw	r0, #610	; 0x262
 8007624:	f001 fc14 	bl	8008e50 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d006      	beq.n	800763c <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 800762e:	6879      	ldr	r1, [r7, #4]
 8007630:	4811      	ldr	r0, [pc, #68]	; (8007678 <RadioRx+0x78>)
 8007632:	f002 fd89 	bl	800a148 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8007636:	4810      	ldr	r0, [pc, #64]	; (8007678 <RadioRx+0x78>)
 8007638:	f002 fca8 	bl	8009f8c <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800763c:	4b0f      	ldr	r3, [pc, #60]	; (800767c <RadioRx+0x7c>)
 800763e:	2200      	movs	r2, #0
 8007640:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8007642:	4b0e      	ldr	r3, [pc, #56]	; (800767c <RadioRx+0x7c>)
 8007644:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007648:	2100      	movs	r1, #0
 800764a:	4618      	mov	r0, r3
 800764c:	f002 f8a4 	bl	8009798 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8007650:	4b0a      	ldr	r3, [pc, #40]	; (800767c <RadioRx+0x7c>)
 8007652:	785b      	ldrb	r3, [r3, #1]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d004      	beq.n	8007662 <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8007658:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800765c:	f001 fa60 	bl	8008b20 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8007660:	e005      	b.n	800766e <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8007662:	4b06      	ldr	r3, [pc, #24]	; (800767c <RadioRx+0x7c>)
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	019b      	lsls	r3, r3, #6
 8007668:	4618      	mov	r0, r3
 800766a:	f001 fa59 	bl	8008b20 <SUBGRF_SetRx>
}
 800766e:	bf00      	nop
 8007670:	3708      	adds	r7, #8
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}
 8007676:	bf00      	nop
 8007678:	20000530 	.word	0x20000530
 800767c:	200004bc 	.word	0x200004bc

08007680 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b082      	sub	sp, #8
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 8007688:	f002 fa7f 	bl	8009b8a <RFW_Is_Init>
 800768c:	4603      	mov	r3, r0
 800768e:	2b01      	cmp	r3, #1
 8007690:	d102      	bne.n	8007698 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 8007692:	f002 faa2 	bl	8009bda <RFW_ReceiveInit>
 8007696:	e007      	b.n	80076a8 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8007698:	2300      	movs	r3, #0
 800769a:	2200      	movs	r2, #0
 800769c:	f240 2162 	movw	r1, #610	; 0x262
 80076a0:	f240 2062 	movw	r0, #610	; 0x262
 80076a4:	f001 fbd4 	bl	8008e50 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d006      	beq.n	80076bc <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 80076ae:	6879      	ldr	r1, [r7, #4]
 80076b0:	4811      	ldr	r0, [pc, #68]	; (80076f8 <RadioRxBoosted+0x78>)
 80076b2:	f002 fd49 	bl	800a148 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80076b6:	4810      	ldr	r0, [pc, #64]	; (80076f8 <RadioRxBoosted+0x78>)
 80076b8:	f002 fc68 	bl	8009f8c <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80076bc:	4b0f      	ldr	r3, [pc, #60]	; (80076fc <RadioRxBoosted+0x7c>)
 80076be:	2200      	movs	r2, #0
 80076c0:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80076c2:	4b0e      	ldr	r3, [pc, #56]	; (80076fc <RadioRxBoosted+0x7c>)
 80076c4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80076c8:	2100      	movs	r1, #0
 80076ca:	4618      	mov	r0, r3
 80076cc:	f002 f864 	bl	8009798 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 80076d0:	4b0a      	ldr	r3, [pc, #40]	; (80076fc <RadioRxBoosted+0x7c>)
 80076d2:	785b      	ldrb	r3, [r3, #1]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d004      	beq.n	80076e2 <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 80076d8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80076dc:	f001 fa40 	bl	8008b60 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 80076e0:	e005      	b.n	80076ee <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 80076e2:	4b06      	ldr	r3, [pc, #24]	; (80076fc <RadioRxBoosted+0x7c>)
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	019b      	lsls	r3, r3, #6
 80076e8:	4618      	mov	r0, r3
 80076ea:	f001 fa39 	bl	8008b60 <SUBGRF_SetRxBoosted>
}
 80076ee:	bf00      	nop
 80076f0:	3708      	adds	r7, #8
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
 80076f6:	bf00      	nop
 80076f8:	20000530 	.word	0x20000530
 80076fc:	200004bc 	.word	0x200004bc

08007700 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b082      	sub	sp, #8
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	005a      	lsls	r2, r3, #1
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	4413      	add	r3, r2
 8007712:	4a0c      	ldr	r2, [pc, #48]	; (8007744 <RadioSetRxDutyCycle+0x44>)
 8007714:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8007716:	2300      	movs	r3, #0
 8007718:	2200      	movs	r2, #0
 800771a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800771e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8007722:	f001 fb95 	bl	8008e50 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8007726:	4b07      	ldr	r3, [pc, #28]	; (8007744 <RadioSetRxDutyCycle+0x44>)
 8007728:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800772c:	2100      	movs	r1, #0
 800772e:	4618      	mov	r0, r3
 8007730:	f002 f832 	bl	8009798 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8007734:	6839      	ldr	r1, [r7, #0]
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f001 fa36 	bl	8008ba8 <SUBGRF_SetRxDutyCycle>
}
 800773c:	bf00      	nop
 800773e:	3708      	adds	r7, #8
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}
 8007744:	200004bc 	.word	0x200004bc

08007748 <RadioStartCad>:

static void RadioStartCad( void )
{
 8007748:	b580      	push	{r7, lr}
 800774a:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800774c:	4b09      	ldr	r3, [pc, #36]	; (8007774 <RadioStartCad+0x2c>)
 800774e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007752:	2100      	movs	r1, #0
 8007754:	4618      	mov	r0, r3
 8007756:	f002 f81f 	bl	8009798 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 800775a:	2300      	movs	r3, #0
 800775c:	2200      	movs	r2, #0
 800775e:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8007762:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8007766:	f001 fb73 	bl	8008e50 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 800776a:	f001 fa49 	bl	8008c00 <SUBGRF_SetCad>
}
 800776e:	bf00      	nop
 8007770:	bd80      	pop	{r7, pc}
 8007772:	bf00      	nop
 8007774:	200004bc 	.word	0x200004bc

08007778 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b084      	sub	sp, #16
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
 8007780:	460b      	mov	r3, r1
 8007782:	70fb      	strb	r3, [r7, #3]
 8007784:	4613      	mov	r3, r2
 8007786:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 8007788:	883b      	ldrh	r3, [r7, #0]
 800778a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800778e:	fb02 f303 	mul.w	r3, r2, r3
 8007792:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f001 fbb7 	bl	8008f08 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 800779a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800779e:	4618      	mov	r0, r3
 80077a0:	f002 f822 	bl	80097e8 <SUBGRF_SetRfTxPower>
 80077a4:	4603      	mov	r3, r0
 80077a6:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80077a8:	210e      	movs	r1, #14
 80077aa:	f640 101f 	movw	r0, #2335	; 0x91f
 80077ae:	f001 feff 	bl	80095b0 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 80077b2:	7afb      	ldrb	r3, [r7, #11]
 80077b4:	2101      	movs	r1, #1
 80077b6:	4618      	mov	r0, r3
 80077b8:	f001 ffee 	bl	8009798 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 80077bc:	f001 fa2e 	bl	8008c1c <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 80077c0:	68f9      	ldr	r1, [r7, #12]
 80077c2:	4805      	ldr	r0, [pc, #20]	; (80077d8 <RadioSetTxContinuousWave+0x60>)
 80077c4:	f002 fcc0 	bl	800a148 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 80077c8:	4803      	ldr	r0, [pc, #12]	; (80077d8 <RadioSetTxContinuousWave+0x60>)
 80077ca:	f002 fbdf 	bl	8009f8c <UTIL_TIMER_Start>
}
 80077ce:	bf00      	nop
 80077d0:	3710      	adds	r7, #16
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}
 80077d6:	bf00      	nop
 80077d8:	20000518 	.word	0x20000518

080077dc <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b082      	sub	sp, #8
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	4603      	mov	r3, r0
 80077e4:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 80077e6:	f001 fe50 	bl	800948a <SUBGRF_GetRssiInst>
 80077ea:	4603      	mov	r3, r0
 80077ec:	b21b      	sxth	r3, r3
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3708      	adds	r7, #8
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}

080077f6 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 80077f6:	b580      	push	{r7, lr}
 80077f8:	b082      	sub	sp, #8
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	4603      	mov	r3, r0
 80077fe:	460a      	mov	r2, r1
 8007800:	80fb      	strh	r3, [r7, #6]
 8007802:	4613      	mov	r3, r2
 8007804:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 8007806:	797a      	ldrb	r2, [r7, #5]
 8007808:	88fb      	ldrh	r3, [r7, #6]
 800780a:	4611      	mov	r1, r2
 800780c:	4618      	mov	r0, r3
 800780e:	f001 fecf 	bl	80095b0 <SUBGRF_WriteRegister>
}
 8007812:	bf00      	nop
 8007814:	3708      	adds	r7, #8
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}

0800781a <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 800781a:	b580      	push	{r7, lr}
 800781c:	b082      	sub	sp, #8
 800781e:	af00      	add	r7, sp, #0
 8007820:	4603      	mov	r3, r0
 8007822:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 8007824:	88fb      	ldrh	r3, [r7, #6]
 8007826:	4618      	mov	r0, r3
 8007828:	f001 fed6 	bl	80095d8 <SUBGRF_ReadRegister>
 800782c:	4603      	mov	r3, r0
}
 800782e:	4618      	mov	r0, r3
 8007830:	3708      	adds	r7, #8
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}

08007836 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8007836:	b580      	push	{r7, lr}
 8007838:	b082      	sub	sp, #8
 800783a:	af00      	add	r7, sp, #0
 800783c:	4603      	mov	r3, r0
 800783e:	6039      	str	r1, [r7, #0]
 8007840:	80fb      	strh	r3, [r7, #6]
 8007842:	4613      	mov	r3, r2
 8007844:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8007846:	797b      	ldrb	r3, [r7, #5]
 8007848:	b29a      	uxth	r2, r3
 800784a:	88fb      	ldrh	r3, [r7, #6]
 800784c:	6839      	ldr	r1, [r7, #0]
 800784e:	4618      	mov	r0, r3
 8007850:	f001 fed6 	bl	8009600 <SUBGRF_WriteRegisters>
}
 8007854:	bf00      	nop
 8007856:	3708      	adds	r7, #8
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}

0800785c <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b082      	sub	sp, #8
 8007860:	af00      	add	r7, sp, #0
 8007862:	4603      	mov	r3, r0
 8007864:	6039      	str	r1, [r7, #0]
 8007866:	80fb      	strh	r3, [r7, #6]
 8007868:	4613      	mov	r3, r2
 800786a:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 800786c:	797b      	ldrb	r3, [r7, #5]
 800786e:	b29a      	uxth	r2, r3
 8007870:	88fb      	ldrh	r3, [r7, #6]
 8007872:	6839      	ldr	r1, [r7, #0]
 8007874:	4618      	mov	r0, r3
 8007876:	f001 fee5 	bl	8009644 <SUBGRF_ReadRegisters>
}
 800787a:	bf00      	nop
 800787c:	3708      	adds	r7, #8
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}
	...

08007884 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b082      	sub	sp, #8
 8007888:	af00      	add	r7, sp, #0
 800788a:	4603      	mov	r3, r0
 800788c:	460a      	mov	r2, r1
 800788e:	71fb      	strb	r3, [r7, #7]
 8007890:	4613      	mov	r3, r2
 8007892:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8007894:	79fb      	ldrb	r3, [r7, #7]
 8007896:	2b01      	cmp	r3, #1
 8007898:	d10a      	bne.n	80078b0 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 800789a:	4a0e      	ldr	r2, [pc, #56]	; (80078d4 <RadioSetMaxPayloadLength+0x50>)
 800789c:	79bb      	ldrb	r3, [r7, #6]
 800789e:	7013      	strb	r3, [r2, #0]
 80078a0:	4b0c      	ldr	r3, [pc, #48]	; (80078d4 <RadioSetMaxPayloadLength+0x50>)
 80078a2:	781a      	ldrb	r2, [r3, #0]
 80078a4:	4b0c      	ldr	r3, [pc, #48]	; (80078d8 <RadioSetMaxPayloadLength+0x54>)
 80078a6:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80078a8:	480c      	ldr	r0, [pc, #48]	; (80078dc <RadioSetMaxPayloadLength+0x58>)
 80078aa:	f001 fd39 	bl	8009320 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 80078ae:	e00d      	b.n	80078cc <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 80078b0:	4b09      	ldr	r3, [pc, #36]	; (80078d8 <RadioSetMaxPayloadLength+0x54>)
 80078b2:	7d5b      	ldrb	r3, [r3, #21]
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d109      	bne.n	80078cc <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 80078b8:	4a06      	ldr	r2, [pc, #24]	; (80078d4 <RadioSetMaxPayloadLength+0x50>)
 80078ba:	79bb      	ldrb	r3, [r7, #6]
 80078bc:	7013      	strb	r3, [r2, #0]
 80078be:	4b05      	ldr	r3, [pc, #20]	; (80078d4 <RadioSetMaxPayloadLength+0x50>)
 80078c0:	781a      	ldrb	r2, [r3, #0]
 80078c2:	4b05      	ldr	r3, [pc, #20]	; (80078d8 <RadioSetMaxPayloadLength+0x54>)
 80078c4:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80078c6:	4805      	ldr	r0, [pc, #20]	; (80078dc <RadioSetMaxPayloadLength+0x58>)
 80078c8:	f001 fd2a 	bl	8009320 <SUBGRF_SetPacketParams>
}
 80078cc:	bf00      	nop
 80078ce:	3708      	adds	r7, #8
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	2000000d 	.word	0x2000000d
 80078d8:	200004bc 	.word	0x200004bc
 80078dc:	200004ca 	.word	0x200004ca

080078e0 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b082      	sub	sp, #8
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	4603      	mov	r3, r0
 80078e8:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 80078ea:	4a13      	ldr	r2, [pc, #76]	; (8007938 <RadioSetPublicNetwork+0x58>)
 80078ec:	79fb      	ldrb	r3, [r7, #7]
 80078ee:	7313      	strb	r3, [r2, #12]
 80078f0:	4b11      	ldr	r3, [pc, #68]	; (8007938 <RadioSetPublicNetwork+0x58>)
 80078f2:	7b1a      	ldrb	r2, [r3, #12]
 80078f4:	4b10      	ldr	r3, [pc, #64]	; (8007938 <RadioSetPublicNetwork+0x58>)
 80078f6:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 80078f8:	2001      	movs	r0, #1
 80078fa:	f7ff f819 	bl	8006930 <RadioSetModem>
    if( enable == true )
 80078fe:	79fb      	ldrb	r3, [r7, #7]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d00a      	beq.n	800791a <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8007904:	2134      	movs	r1, #52	; 0x34
 8007906:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 800790a:	f001 fe51 	bl	80095b0 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 800790e:	2144      	movs	r1, #68	; 0x44
 8007910:	f240 7041 	movw	r0, #1857	; 0x741
 8007914:	f001 fe4c 	bl	80095b0 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8007918:	e009      	b.n	800792e <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 800791a:	2114      	movs	r1, #20
 800791c:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8007920:	f001 fe46 	bl	80095b0 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8007924:	2124      	movs	r1, #36	; 0x24
 8007926:	f240 7041 	movw	r0, #1857	; 0x741
 800792a:	f001 fe41 	bl	80095b0 <SUBGRF_WriteRegister>
}
 800792e:	bf00      	nop
 8007930:	3708      	adds	r7, #8
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}
 8007936:	bf00      	nop
 8007938:	200004bc 	.word	0x200004bc

0800793c <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 800793c:	b580      	push	{r7, lr}
 800793e:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8007940:	f001 ff86 	bl	8009850 <SUBGRF_GetRadioWakeUpTime>
 8007944:	4603      	mov	r3, r0
 8007946:	3303      	adds	r3, #3
}
 8007948:	4618      	mov	r0, r3
 800794a:	bd80      	pop	{r7, pc}

0800794c <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b082      	sub	sp, #8
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8007954:	f000 f80e 	bl	8007974 <RadioOnTxTimeoutProcess>
}
 8007958:	bf00      	nop
 800795a:	3708      	adds	r7, #8
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}

08007960 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b082      	sub	sp, #8
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8007968:	f000 f818 	bl	800799c <RadioOnRxTimeoutProcess>
}
 800796c:	bf00      	nop
 800796e:	3708      	adds	r7, #8
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}

08007974 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8007974:	b580      	push	{r7, lr}
 8007976:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8007978:	4b07      	ldr	r3, [pc, #28]	; (8007998 <RadioOnTxTimeoutProcess+0x24>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d008      	beq.n	8007992 <RadioOnTxTimeoutProcess+0x1e>
 8007980:	4b05      	ldr	r3, [pc, #20]	; (8007998 <RadioOnTxTimeoutProcess+0x24>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d003      	beq.n	8007992 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 800798a:	4b03      	ldr	r3, [pc, #12]	; (8007998 <RadioOnTxTimeoutProcess+0x24>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	4798      	blx	r3
    }
}
 8007992:	bf00      	nop
 8007994:	bd80      	pop	{r7, pc}
 8007996:	bf00      	nop
 8007998:	200004b8 	.word	0x200004b8

0800799c <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 800799c:	b580      	push	{r7, lr}
 800799e:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80079a0:	4b07      	ldr	r3, [pc, #28]	; (80079c0 <RadioOnRxTimeoutProcess+0x24>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d008      	beq.n	80079ba <RadioOnRxTimeoutProcess+0x1e>
 80079a8:	4b05      	ldr	r3, [pc, #20]	; (80079c0 <RadioOnRxTimeoutProcess+0x24>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	68db      	ldr	r3, [r3, #12]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d003      	beq.n	80079ba <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 80079b2:	4b03      	ldr	r3, [pc, #12]	; (80079c0 <RadioOnRxTimeoutProcess+0x24>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	68db      	ldr	r3, [r3, #12]
 80079b8:	4798      	blx	r3
    }
}
 80079ba:	bf00      	nop
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	bf00      	nop
 80079c0:	200004b8 	.word	0x200004b8

080079c4 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b082      	sub	sp, #8
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	4603      	mov	r3, r0
 80079cc:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 80079ce:	4a05      	ldr	r2, [pc, #20]	; (80079e4 <RadioOnDioIrq+0x20>)
 80079d0:	88fb      	ldrh	r3, [r7, #6]
 80079d2:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 80079d6:	f000 f807 	bl	80079e8 <RadioIrqProcess>
}
 80079da:	bf00      	nop
 80079dc:	3708      	adds	r7, #8
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}
 80079e2:	bf00      	nop
 80079e4:	200004bc 	.word	0x200004bc

080079e8 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 80079e8:	b5b0      	push	{r4, r5, r7, lr}
 80079ea:	b082      	sub	sp, #8
 80079ec:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 80079ee:	2300      	movs	r3, #0
 80079f0:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 80079f2:	2300      	movs	r3, #0
 80079f4:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 80079f6:	4ba5      	ldr	r3, [pc, #660]	; (8007c8c <RadioIrqProcess+0x2a4>)
 80079f8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80079fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a00:	f000 810d 	beq.w	8007c1e <RadioIrqProcess+0x236>
 8007a04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a08:	f300 81c0 	bgt.w	8007d8c <RadioIrqProcess+0x3a4>
 8007a0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a10:	f000 80f1 	beq.w	8007bf6 <RadioIrqProcess+0x20e>
 8007a14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a18:	f300 81b8 	bgt.w	8007d8c <RadioIrqProcess+0x3a4>
 8007a1c:	2b80      	cmp	r3, #128	; 0x80
 8007a1e:	f000 80d6 	beq.w	8007bce <RadioIrqProcess+0x1e6>
 8007a22:	2b80      	cmp	r3, #128	; 0x80
 8007a24:	f300 81b2 	bgt.w	8007d8c <RadioIrqProcess+0x3a4>
 8007a28:	2b20      	cmp	r3, #32
 8007a2a:	dc49      	bgt.n	8007ac0 <RadioIrqProcess+0xd8>
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	f340 81ad 	ble.w	8007d8c <RadioIrqProcess+0x3a4>
 8007a32:	3b01      	subs	r3, #1
 8007a34:	2b1f      	cmp	r3, #31
 8007a36:	f200 81a9 	bhi.w	8007d8c <RadioIrqProcess+0x3a4>
 8007a3a:	a201      	add	r2, pc, #4	; (adr r2, 8007a40 <RadioIrqProcess+0x58>)
 8007a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a40:	08007ac9 	.word	0x08007ac9
 8007a44:	08007b03 	.word	0x08007b03
 8007a48:	08007d8d 	.word	0x08007d8d
 8007a4c:	08007ca9 	.word	0x08007ca9
 8007a50:	08007d8d 	.word	0x08007d8d
 8007a54:	08007d8d 	.word	0x08007d8d
 8007a58:	08007d8d 	.word	0x08007d8d
 8007a5c:	08007d17 	.word	0x08007d17
 8007a60:	08007d8d 	.word	0x08007d8d
 8007a64:	08007d8d 	.word	0x08007d8d
 8007a68:	08007d8d 	.word	0x08007d8d
 8007a6c:	08007d8d 	.word	0x08007d8d
 8007a70:	08007d8d 	.word	0x08007d8d
 8007a74:	08007d8d 	.word	0x08007d8d
 8007a78:	08007d8d 	.word	0x08007d8d
 8007a7c:	08007d8d 	.word	0x08007d8d
 8007a80:	08007d8d 	.word	0x08007d8d
 8007a84:	08007d8d 	.word	0x08007d8d
 8007a88:	08007d8d 	.word	0x08007d8d
 8007a8c:	08007d8d 	.word	0x08007d8d
 8007a90:	08007d8d 	.word	0x08007d8d
 8007a94:	08007d8d 	.word	0x08007d8d
 8007a98:	08007d8d 	.word	0x08007d8d
 8007a9c:	08007d8d 	.word	0x08007d8d
 8007aa0:	08007d8d 	.word	0x08007d8d
 8007aa4:	08007d8d 	.word	0x08007d8d
 8007aa8:	08007d8d 	.word	0x08007d8d
 8007aac:	08007d8d 	.word	0x08007d8d
 8007ab0:	08007d8d 	.word	0x08007d8d
 8007ab4:	08007d8d 	.word	0x08007d8d
 8007ab8:	08007d8d 	.word	0x08007d8d
 8007abc:	08007d27 	.word	0x08007d27
 8007ac0:	2b40      	cmp	r3, #64	; 0x40
 8007ac2:	f000 814b 	beq.w	8007d5c <RadioIrqProcess+0x374>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 8007ac6:	e161      	b.n	8007d8c <RadioIrqProcess+0x3a4>
        TimerStop( &TxTimeoutTimer );
 8007ac8:	4871      	ldr	r0, [pc, #452]	; (8007c90 <RadioIrqProcess+0x2a8>)
 8007aca:	f002 facd 	bl	800a068 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8007ace:	2000      	movs	r0, #0
 8007ad0:	f000 ffea 	bl	8008aa8 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8007ad4:	f002 f860 	bl	8009b98 <RFW_Is_LongPacketModeEnabled>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	d101      	bne.n	8007ae2 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 8007ade:	f002 f884 	bl	8009bea <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8007ae2:	4b6c      	ldr	r3, [pc, #432]	; (8007c94 <RadioIrqProcess+0x2ac>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	f000 8152 	beq.w	8007d90 <RadioIrqProcess+0x3a8>
 8007aec:	4b69      	ldr	r3, [pc, #420]	; (8007c94 <RadioIrqProcess+0x2ac>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	f000 814c 	beq.w	8007d90 <RadioIrqProcess+0x3a8>
            RadioEvents->TxDone( );
 8007af8:	4b66      	ldr	r3, [pc, #408]	; (8007c94 <RadioIrqProcess+0x2ac>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4798      	blx	r3
        break;
 8007b00:	e146      	b.n	8007d90 <RadioIrqProcess+0x3a8>
        TimerStop( &RxTimeoutTimer );
 8007b02:	4865      	ldr	r0, [pc, #404]	; (8007c98 <RadioIrqProcess+0x2b0>)
 8007b04:	f002 fab0 	bl	800a068 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8007b08:	4b60      	ldr	r3, [pc, #384]	; (8007c8c <RadioIrqProcess+0x2a4>)
 8007b0a:	785b      	ldrb	r3, [r3, #1]
 8007b0c:	f083 0301 	eor.w	r3, r3, #1
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d014      	beq.n	8007b40 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 8007b16:	2000      	movs	r0, #0
 8007b18:	f000 ffc6 	bl	8008aa8 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8007b1c:	2100      	movs	r1, #0
 8007b1e:	f640 1002 	movw	r0, #2306	; 0x902
 8007b22:	f001 fd45 	bl	80095b0 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8007b26:	f640 1044 	movw	r0, #2372	; 0x944
 8007b2a:	f001 fd55 	bl	80095d8 <SUBGRF_ReadRegister>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	f043 0302 	orr.w	r3, r3, #2
 8007b34:	b2db      	uxtb	r3, r3
 8007b36:	4619      	mov	r1, r3
 8007b38:	f640 1044 	movw	r0, #2372	; 0x944
 8007b3c:	f001 fd38 	bl	80095b0 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8007b40:	1dfb      	adds	r3, r7, #7
 8007b42:	22ff      	movs	r2, #255	; 0xff
 8007b44:	4619      	mov	r1, r3
 8007b46:	4855      	ldr	r0, [pc, #340]	; (8007c9c <RadioIrqProcess+0x2b4>)
 8007b48:	f000 fe7e 	bl	8008848 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8007b4c:	4854      	ldr	r0, [pc, #336]	; (8007ca0 <RadioIrqProcess+0x2b8>)
 8007b4e:	f001 fcdd 	bl	800950c <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8007b52:	4b50      	ldr	r3, [pc, #320]	; (8007c94 <RadioIrqProcess+0x2ac>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	f000 811c 	beq.w	8007d94 <RadioIrqProcess+0x3ac>
 8007b5c:	4b4d      	ldr	r3, [pc, #308]	; (8007c94 <RadioIrqProcess+0x2ac>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	689b      	ldr	r3, [r3, #8]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	f000 8116 	beq.w	8007d94 <RadioIrqProcess+0x3ac>
            switch( SubgRf.PacketStatus.packetType )
 8007b68:	4b48      	ldr	r3, [pc, #288]	; (8007c8c <RadioIrqProcess+0x2a4>)
 8007b6a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007b6e:	2b01      	cmp	r3, #1
 8007b70:	d10e      	bne.n	8007b90 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 8007b72:	4b48      	ldr	r3, [pc, #288]	; (8007c94 <RadioIrqProcess+0x2ac>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	689c      	ldr	r4, [r3, #8]
 8007b78:	79fb      	ldrb	r3, [r7, #7]
 8007b7a:	b299      	uxth	r1, r3
 8007b7c:	4b43      	ldr	r3, [pc, #268]	; (8007c8c <RadioIrqProcess+0x2a4>)
 8007b7e:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 8007b82:	b21a      	sxth	r2, r3
 8007b84:	4b41      	ldr	r3, [pc, #260]	; (8007c8c <RadioIrqProcess+0x2a4>)
 8007b86:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 8007b8a:	4844      	ldr	r0, [pc, #272]	; (8007c9c <RadioIrqProcess+0x2b4>)
 8007b8c:	47a0      	blx	r4
                break;
 8007b8e:	e01d      	b.n	8007bcc <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8007b90:	4b3e      	ldr	r3, [pc, #248]	; (8007c8c <RadioIrqProcess+0x2a4>)
 8007b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b94:	463a      	mov	r2, r7
 8007b96:	4611      	mov	r1, r2
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f001 ff4b 	bl	8009a34 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 8007b9e:	4b3d      	ldr	r3, [pc, #244]	; (8007c94 <RadioIrqProcess+0x2ac>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	689c      	ldr	r4, [r3, #8]
 8007ba4:	79fb      	ldrb	r3, [r7, #7]
 8007ba6:	b299      	uxth	r1, r3
 8007ba8:	4b38      	ldr	r3, [pc, #224]	; (8007c8c <RadioIrqProcess+0x2a4>)
 8007baa:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 8007bae:	b218      	sxth	r0, r3
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007bb6:	4a3b      	ldr	r2, [pc, #236]	; (8007ca4 <RadioIrqProcess+0x2bc>)
 8007bb8:	fb82 5203 	smull	r5, r2, r2, r3
 8007bbc:	1192      	asrs	r2, r2, #6
 8007bbe:	17db      	asrs	r3, r3, #31
 8007bc0:	1ad3      	subs	r3, r2, r3
 8007bc2:	b25b      	sxtb	r3, r3
 8007bc4:	4602      	mov	r2, r0
 8007bc6:	4835      	ldr	r0, [pc, #212]	; (8007c9c <RadioIrqProcess+0x2b4>)
 8007bc8:	47a0      	blx	r4
                break;
 8007bca:	bf00      	nop
        break;
 8007bcc:	e0e2      	b.n	8007d94 <RadioIrqProcess+0x3ac>
        SUBGRF_SetStandby( STDBY_RC );
 8007bce:	2000      	movs	r0, #0
 8007bd0:	f000 ff6a 	bl	8008aa8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8007bd4:	4b2f      	ldr	r3, [pc, #188]	; (8007c94 <RadioIrqProcess+0x2ac>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	f000 80dd 	beq.w	8007d98 <RadioIrqProcess+0x3b0>
 8007bde:	4b2d      	ldr	r3, [pc, #180]	; (8007c94 <RadioIrqProcess+0x2ac>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	699b      	ldr	r3, [r3, #24]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	f000 80d7 	beq.w	8007d98 <RadioIrqProcess+0x3b0>
            RadioEvents->CadDone( false );
 8007bea:	4b2a      	ldr	r3, [pc, #168]	; (8007c94 <RadioIrqProcess+0x2ac>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	699b      	ldr	r3, [r3, #24]
 8007bf0:	2000      	movs	r0, #0
 8007bf2:	4798      	blx	r3
        break;
 8007bf4:	e0d0      	b.n	8007d98 <RadioIrqProcess+0x3b0>
        SUBGRF_SetStandby( STDBY_RC );
 8007bf6:	2000      	movs	r0, #0
 8007bf8:	f000 ff56 	bl	8008aa8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8007bfc:	4b25      	ldr	r3, [pc, #148]	; (8007c94 <RadioIrqProcess+0x2ac>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	f000 80cb 	beq.w	8007d9c <RadioIrqProcess+0x3b4>
 8007c06:	4b23      	ldr	r3, [pc, #140]	; (8007c94 <RadioIrqProcess+0x2ac>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	699b      	ldr	r3, [r3, #24]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	f000 80c5 	beq.w	8007d9c <RadioIrqProcess+0x3b4>
            RadioEvents->CadDone( true );
 8007c12:	4b20      	ldr	r3, [pc, #128]	; (8007c94 <RadioIrqProcess+0x2ac>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	699b      	ldr	r3, [r3, #24]
 8007c18:	2001      	movs	r0, #1
 8007c1a:	4798      	blx	r3
        break;
 8007c1c:	e0be      	b.n	8007d9c <RadioIrqProcess+0x3b4>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8007c1e:	f000 fdf9 	bl	8008814 <SUBGRF_GetOperatingMode>
 8007c22:	4603      	mov	r3, r0
 8007c24:	2b04      	cmp	r3, #4
 8007c26:	d115      	bne.n	8007c54 <RadioIrqProcess+0x26c>
            TimerStop( &TxTimeoutTimer );
 8007c28:	4819      	ldr	r0, [pc, #100]	; (8007c90 <RadioIrqProcess+0x2a8>)
 8007c2a:	f002 fa1d 	bl	800a068 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8007c2e:	2000      	movs	r0, #0
 8007c30:	f000 ff3a 	bl	8008aa8 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8007c34:	4b17      	ldr	r3, [pc, #92]	; (8007c94 <RadioIrqProcess+0x2ac>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	f000 80b1 	beq.w	8007da0 <RadioIrqProcess+0x3b8>
 8007c3e:	4b15      	ldr	r3, [pc, #84]	; (8007c94 <RadioIrqProcess+0x2ac>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	f000 80ab 	beq.w	8007da0 <RadioIrqProcess+0x3b8>
                RadioEvents->TxTimeout( );
 8007c4a:	4b12      	ldr	r3, [pc, #72]	; (8007c94 <RadioIrqProcess+0x2ac>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	4798      	blx	r3
        break;
 8007c52:	e0a5      	b.n	8007da0 <RadioIrqProcess+0x3b8>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8007c54:	f000 fdde 	bl	8008814 <SUBGRF_GetOperatingMode>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	2b05      	cmp	r3, #5
 8007c5c:	f040 80a0 	bne.w	8007da0 <RadioIrqProcess+0x3b8>
            TimerStop( &RxTimeoutTimer );
 8007c60:	480d      	ldr	r0, [pc, #52]	; (8007c98 <RadioIrqProcess+0x2b0>)
 8007c62:	f002 fa01 	bl	800a068 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8007c66:	2000      	movs	r0, #0
 8007c68:	f000 ff1e 	bl	8008aa8 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8007c6c:	4b09      	ldr	r3, [pc, #36]	; (8007c94 <RadioIrqProcess+0x2ac>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	f000 8095 	beq.w	8007da0 <RadioIrqProcess+0x3b8>
 8007c76:	4b07      	ldr	r3, [pc, #28]	; (8007c94 <RadioIrqProcess+0x2ac>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	68db      	ldr	r3, [r3, #12]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	f000 808f 	beq.w	8007da0 <RadioIrqProcess+0x3b8>
                RadioEvents->RxTimeout( );
 8007c82:	4b04      	ldr	r3, [pc, #16]	; (8007c94 <RadioIrqProcess+0x2ac>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	68db      	ldr	r3, [r3, #12]
 8007c88:	4798      	blx	r3
        break;
 8007c8a:	e089      	b.n	8007da0 <RadioIrqProcess+0x3b8>
 8007c8c:	200004bc 	.word	0x200004bc
 8007c90:	20000518 	.word	0x20000518
 8007c94:	200004b8 	.word	0x200004b8
 8007c98:	20000530 	.word	0x20000530
 8007c9c:	200003b8 	.word	0x200003b8
 8007ca0:	200004e0 	.word	0x200004e0
 8007ca4:	10624dd3 	.word	0x10624dd3
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8007ca8:	4b44      	ldr	r3, [pc, #272]	; (8007dbc <RadioIrqProcess+0x3d4>)
 8007caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d079      	beq.n	8007da4 <RadioIrqProcess+0x3bc>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 8007cb0:	4a43      	ldr	r2, [pc, #268]	; (8007dc0 <RadioIrqProcess+0x3d8>)
 8007cb2:	4b42      	ldr	r3, [pc, #264]	; (8007dbc <RadioIrqProcess+0x3d4>)
 8007cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cb6:	0c1b      	lsrs	r3, r3, #16
 8007cb8:	b2db      	uxtb	r3, r3
 8007cba:	4619      	mov	r1, r3
 8007cbc:	f640 1003 	movw	r0, #2307	; 0x903
 8007cc0:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 8007cc2:	4a3f      	ldr	r2, [pc, #252]	; (8007dc0 <RadioIrqProcess+0x3d8>)
 8007cc4:	4b3d      	ldr	r3, [pc, #244]	; (8007dbc <RadioIrqProcess+0x3d4>)
 8007cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cc8:	0a1b      	lsrs	r3, r3, #8
 8007cca:	b2db      	uxtb	r3, r3
 8007ccc:	4619      	mov	r1, r3
 8007cce:	f640 1004 	movw	r0, #2308	; 0x904
 8007cd2:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 8007cd4:	4a3a      	ldr	r2, [pc, #232]	; (8007dc0 <RadioIrqProcess+0x3d8>)
 8007cd6:	4b39      	ldr	r3, [pc, #228]	; (8007dbc <RadioIrqProcess+0x3d4>)
 8007cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cda:	b2db      	uxtb	r3, r3
 8007cdc:	4619      	mov	r1, r3
 8007cde:	f640 1005 	movw	r0, #2309	; 0x905
 8007ce2:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 8007ce4:	4c36      	ldr	r4, [pc, #216]	; (8007dc0 <RadioIrqProcess+0x3d8>)
 8007ce6:	4b37      	ldr	r3, [pc, #220]	; (8007dc4 <RadioIrqProcess+0x3dc>)
 8007ce8:	f640 1002 	movw	r0, #2306	; 0x902
 8007cec:	4798      	blx	r3
 8007cee:	4603      	mov	r3, r0
 8007cf0:	f043 0301 	orr.w	r3, r3, #1
 8007cf4:	b2db      	uxtb	r3, r3
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	f640 1002 	movw	r0, #2306	; 0x902
 8007cfc:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 8007cfe:	4b2f      	ldr	r3, [pc, #188]	; (8007dbc <RadioIrqProcess+0x3d4>)
 8007d00:	2200      	movs	r2, #0
 8007d02:	659a      	str	r2, [r3, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8007d04:	2300      	movs	r3, #0
 8007d06:	2200      	movs	r2, #0
 8007d08:	f240 2162 	movw	r1, #610	; 0x262
 8007d0c:	f240 2062 	movw	r0, #610	; 0x262
 8007d10:	f001 f89e 	bl	8008e50 <SUBGRF_SetDioIrqParams>
        break;
 8007d14:	e046      	b.n	8007da4 <RadioIrqProcess+0x3bc>
        if( 1UL == RFW_Is_Init( ) )
 8007d16:	f001 ff38 	bl	8009b8a <RFW_Is_Init>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d143      	bne.n	8007da8 <RadioIrqProcess+0x3c0>
            RFW_ReceivePayload( );
 8007d20:	f001 ff69 	bl	8009bf6 <RFW_ReceivePayload>
        break;
 8007d24:	e040      	b.n	8007da8 <RadioIrqProcess+0x3c0>
        TimerStop( &RxTimeoutTimer );
 8007d26:	4828      	ldr	r0, [pc, #160]	; (8007dc8 <RadioIrqProcess+0x3e0>)
 8007d28:	f002 f99e 	bl	800a068 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8007d2c:	4b23      	ldr	r3, [pc, #140]	; (8007dbc <RadioIrqProcess+0x3d4>)
 8007d2e:	785b      	ldrb	r3, [r3, #1]
 8007d30:	f083 0301 	eor.w	r3, r3, #1
 8007d34:	b2db      	uxtb	r3, r3
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d002      	beq.n	8007d40 <RadioIrqProcess+0x358>
            SUBGRF_SetStandby( STDBY_RC );
 8007d3a:	2000      	movs	r0, #0
 8007d3c:	f000 feb4 	bl	8008aa8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8007d40:	4b22      	ldr	r3, [pc, #136]	; (8007dcc <RadioIrqProcess+0x3e4>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d031      	beq.n	8007dac <RadioIrqProcess+0x3c4>
 8007d48:	4b20      	ldr	r3, [pc, #128]	; (8007dcc <RadioIrqProcess+0x3e4>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	68db      	ldr	r3, [r3, #12]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d02c      	beq.n	8007dac <RadioIrqProcess+0x3c4>
            RadioEvents->RxTimeout( );
 8007d52:	4b1e      	ldr	r3, [pc, #120]	; (8007dcc <RadioIrqProcess+0x3e4>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	68db      	ldr	r3, [r3, #12]
 8007d58:	4798      	blx	r3
        break;
 8007d5a:	e027      	b.n	8007dac <RadioIrqProcess+0x3c4>
        if( SubgRf.RxContinuous == false )
 8007d5c:	4b17      	ldr	r3, [pc, #92]	; (8007dbc <RadioIrqProcess+0x3d4>)
 8007d5e:	785b      	ldrb	r3, [r3, #1]
 8007d60:	f083 0301 	eor.w	r3, r3, #1
 8007d64:	b2db      	uxtb	r3, r3
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d002      	beq.n	8007d70 <RadioIrqProcess+0x388>
            SUBGRF_SetStandby( STDBY_RC );
 8007d6a:	2000      	movs	r0, #0
 8007d6c:	f000 fe9c 	bl	8008aa8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8007d70:	4b16      	ldr	r3, [pc, #88]	; (8007dcc <RadioIrqProcess+0x3e4>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d01b      	beq.n	8007db0 <RadioIrqProcess+0x3c8>
 8007d78:	4b14      	ldr	r3, [pc, #80]	; (8007dcc <RadioIrqProcess+0x3e4>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	691b      	ldr	r3, [r3, #16]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d016      	beq.n	8007db0 <RadioIrqProcess+0x3c8>
            RadioEvents->RxError( );
 8007d82:	4b12      	ldr	r3, [pc, #72]	; (8007dcc <RadioIrqProcess+0x3e4>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	691b      	ldr	r3, [r3, #16]
 8007d88:	4798      	blx	r3
        break;
 8007d8a:	e011      	b.n	8007db0 <RadioIrqProcess+0x3c8>
        break;
 8007d8c:	bf00      	nop
 8007d8e:	e010      	b.n	8007db2 <RadioIrqProcess+0x3ca>
        break;
 8007d90:	bf00      	nop
 8007d92:	e00e      	b.n	8007db2 <RadioIrqProcess+0x3ca>
        break;
 8007d94:	bf00      	nop
 8007d96:	e00c      	b.n	8007db2 <RadioIrqProcess+0x3ca>
        break;
 8007d98:	bf00      	nop
 8007d9a:	e00a      	b.n	8007db2 <RadioIrqProcess+0x3ca>
        break;
 8007d9c:	bf00      	nop
 8007d9e:	e008      	b.n	8007db2 <RadioIrqProcess+0x3ca>
        break;
 8007da0:	bf00      	nop
 8007da2:	e006      	b.n	8007db2 <RadioIrqProcess+0x3ca>
        break;
 8007da4:	bf00      	nop
 8007da6:	e004      	b.n	8007db2 <RadioIrqProcess+0x3ca>
        break;
 8007da8:	bf00      	nop
 8007daa:	e002      	b.n	8007db2 <RadioIrqProcess+0x3ca>
        break;
 8007dac:	bf00      	nop
 8007dae:	e000      	b.n	8007db2 <RadioIrqProcess+0x3ca>
        break;
 8007db0:	bf00      	nop
    }
}
 8007db2:	bf00      	nop
 8007db4:	3708      	adds	r7, #8
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bdb0      	pop	{r4, r5, r7, pc}
 8007dba:	bf00      	nop
 8007dbc:	200004bc 	.word	0x200004bc
 8007dc0:	080077f7 	.word	0x080077f7
 8007dc4:	0800781b 	.word	0x0800781b
 8007dc8:	20000530 	.word	0x20000530
 8007dcc:	200004b8 	.word	0x200004b8

08007dd0 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8007dd4:	4b09      	ldr	r3, [pc, #36]	; (8007dfc <RadioTxPrbs+0x2c>)
 8007dd6:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007dda:	2101      	movs	r1, #1
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f001 fcdb 	bl	8009798 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 8007de2:	4b07      	ldr	r3, [pc, #28]	; (8007e00 <RadioTxPrbs+0x30>)
 8007de4:	212d      	movs	r1, #45	; 0x2d
 8007de6:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8007dea:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8007dec:	f000 ff1f 	bl	8008c2e <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8007df0:	4804      	ldr	r0, [pc, #16]	; (8007e04 <RadioTxPrbs+0x34>)
 8007df2:	f000 fe75 	bl	8008ae0 <SUBGRF_SetTx>
}
 8007df6:	bf00      	nop
 8007df8:	bd80      	pop	{r7, pc}
 8007dfa:	bf00      	nop
 8007dfc:	200004bc 	.word	0x200004bc
 8007e00:	080077f7 	.word	0x080077f7
 8007e04:	000fffff 	.word	0x000fffff

08007e08 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b084      	sub	sp, #16
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	4603      	mov	r3, r0
 8007e10:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8007e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e16:	4618      	mov	r0, r3
 8007e18:	f001 fce6 	bl	80097e8 <SUBGRF_SetRfTxPower>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8007e20:	210e      	movs	r1, #14
 8007e22:	f640 101f 	movw	r0, #2335	; 0x91f
 8007e26:	f001 fbc3 	bl	80095b0 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8007e2a:	7bfb      	ldrb	r3, [r7, #15]
 8007e2c:	2101      	movs	r1, #1
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f001 fcb2 	bl	8009798 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8007e34:	f000 fef2 	bl	8008c1c <SUBGRF_SetTxContinuousWave>
}
 8007e38:	bf00      	nop
 8007e3a:	3710      	adds	r7, #16
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 8007e40:	b480      	push	{r7}
 8007e42:	b089      	sub	sp, #36	; 0x24
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	60f8      	str	r0, [r7, #12]
 8007e48:	60b9      	str	r1, [r7, #8]
 8007e4a:	4613      	mov	r3, r2
 8007e4c:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 8007e52:	2300      	movs	r3, #0
 8007e54:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 8007e56:	2300      	movs	r3, #0
 8007e58:	61bb      	str	r3, [r7, #24]
 8007e5a:	e011      	b.n	8007e80 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8007e5c:	69bb      	ldr	r3, [r7, #24]
 8007e5e:	68ba      	ldr	r2, [r7, #8]
 8007e60:	4413      	add	r3, r2
 8007e62:	781a      	ldrb	r2, [r3, #0]
 8007e64:	69bb      	ldr	r3, [r7, #24]
 8007e66:	68b9      	ldr	r1, [r7, #8]
 8007e68:	440b      	add	r3, r1
 8007e6a:	43d2      	mvns	r2, r2
 8007e6c:	b2d2      	uxtb	r2, r2
 8007e6e:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 8007e70:	69bb      	ldr	r3, [r7, #24]
 8007e72:	68fa      	ldr	r2, [r7, #12]
 8007e74:	4413      	add	r3, r2
 8007e76:	2200      	movs	r2, #0
 8007e78:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 8007e7a:	69bb      	ldr	r3, [r7, #24]
 8007e7c:	3301      	adds	r3, #1
 8007e7e:	61bb      	str	r3, [r7, #24]
 8007e80:	79fb      	ldrb	r3, [r7, #7]
 8007e82:	69ba      	ldr	r2, [r7, #24]
 8007e84:	429a      	cmp	r2, r3
 8007e86:	dbe9      	blt.n	8007e5c <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 8007e88:	2300      	movs	r3, #0
 8007e8a:	61bb      	str	r3, [r7, #24]
 8007e8c:	e049      	b.n	8007f22 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 8007e8e:	69bb      	ldr	r3, [r7, #24]
 8007e90:	425a      	negs	r2, r3
 8007e92:	f003 0307 	and.w	r3, r3, #7
 8007e96:	f002 0207 	and.w	r2, r2, #7
 8007e9a:	bf58      	it	pl
 8007e9c:	4253      	negpl	r3, r2
 8007e9e:	b2db      	uxtb	r3, r3
 8007ea0:	f1c3 0307 	rsb	r3, r3, #7
 8007ea4:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 8007ea6:	69bb      	ldr	r3, [r7, #24]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	da00      	bge.n	8007eae <payload_integration+0x6e>
 8007eac:	3307      	adds	r3, #7
 8007eae:	10db      	asrs	r3, r3, #3
 8007eb0:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8007eb2:	69bb      	ldr	r3, [r7, #24]
 8007eb4:	3301      	adds	r3, #1
 8007eb6:	425a      	negs	r2, r3
 8007eb8:	f003 0307 	and.w	r3, r3, #7
 8007ebc:	f002 0207 	and.w	r2, r2, #7
 8007ec0:	bf58      	it	pl
 8007ec2:	4253      	negpl	r3, r2
 8007ec4:	b2db      	uxtb	r3, r3
 8007ec6:	f1c3 0307 	rsb	r3, r3, #7
 8007eca:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 8007ecc:	69bb      	ldr	r3, [r7, #24]
 8007ece:	3301      	adds	r3, #1
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	da00      	bge.n	8007ed6 <payload_integration+0x96>
 8007ed4:	3307      	adds	r3, #7
 8007ed6:	10db      	asrs	r3, r3, #3
 8007ed8:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8007eda:	7dbb      	ldrb	r3, [r7, #22]
 8007edc:	68ba      	ldr	r2, [r7, #8]
 8007ede:	4413      	add	r3, r2
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	461a      	mov	r2, r3
 8007ee4:	7dfb      	ldrb	r3, [r7, #23]
 8007ee6:	fa42 f303 	asr.w	r3, r2, r3
 8007eea:	b2db      	uxtb	r3, r3
 8007eec:	f003 0301 	and.w	r3, r3, #1
 8007ef0:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8007ef2:	7ffa      	ldrb	r2, [r7, #31]
 8007ef4:	7cfb      	ldrb	r3, [r7, #19]
 8007ef6:	4053      	eors	r3, r2
 8007ef8:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8007efa:	7d3b      	ldrb	r3, [r7, #20]
 8007efc:	68fa      	ldr	r2, [r7, #12]
 8007efe:	4413      	add	r3, r2
 8007f00:	781b      	ldrb	r3, [r3, #0]
 8007f02:	b25a      	sxtb	r2, r3
 8007f04:	7ff9      	ldrb	r1, [r7, #31]
 8007f06:	7d7b      	ldrb	r3, [r7, #21]
 8007f08:	fa01 f303 	lsl.w	r3, r1, r3
 8007f0c:	b25b      	sxtb	r3, r3
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	b259      	sxtb	r1, r3
 8007f12:	7d3b      	ldrb	r3, [r7, #20]
 8007f14:	68fa      	ldr	r2, [r7, #12]
 8007f16:	4413      	add	r3, r2
 8007f18:	b2ca      	uxtb	r2, r1
 8007f1a:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 8007f1c:	69bb      	ldr	r3, [r7, #24]
 8007f1e:	3301      	adds	r3, #1
 8007f20:	61bb      	str	r3, [r7, #24]
 8007f22:	79fb      	ldrb	r3, [r7, #7]
 8007f24:	00db      	lsls	r3, r3, #3
 8007f26:	69ba      	ldr	r2, [r7, #24]
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	dbb0      	blt.n	8007e8e <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8007f2c:	7ffb      	ldrb	r3, [r7, #31]
 8007f2e:	01db      	lsls	r3, r3, #7
 8007f30:	b25a      	sxtb	r2, r3
 8007f32:	7ffb      	ldrb	r3, [r7, #31]
 8007f34:	019b      	lsls	r3, r3, #6
 8007f36:	b25b      	sxtb	r3, r3
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	b25b      	sxtb	r3, r3
 8007f3c:	7ffa      	ldrb	r2, [r7, #31]
 8007f3e:	2a00      	cmp	r2, #0
 8007f40:	d101      	bne.n	8007f46 <payload_integration+0x106>
 8007f42:	2220      	movs	r2, #32
 8007f44:	e000      	b.n	8007f48 <payload_integration+0x108>
 8007f46:	2200      	movs	r2, #0
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	b259      	sxtb	r1, r3
 8007f4c:	79fb      	ldrb	r3, [r7, #7]
 8007f4e:	68fa      	ldr	r2, [r7, #12]
 8007f50:	4413      	add	r3, r2
 8007f52:	b2ca      	uxtb	r2, r1
 8007f54:	701a      	strb	r2, [r3, #0]
}
 8007f56:	bf00      	nop
 8007f58:	3724      	adds	r7, #36	; 0x24
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bc80      	pop	{r7}
 8007f5e:	4770      	bx	lr

08007f60 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b08c      	sub	sp, #48	; 0x30
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	60b9      	str	r1, [r7, #8]
 8007f68:	607a      	str	r2, [r7, #4]
 8007f6a:	603b      	str	r3, [r7, #0]
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 8007f70:	2300      	movs	r3, #0
 8007f72:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 8007f74:	2300      	movs	r3, #0
 8007f76:	623b      	str	r3, [r7, #32]
 8007f78:	2300      	movs	r3, #0
 8007f7a:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8007f7c:	f001 fdff 	bl	8009b7e <RFW_DeInit>

    if( rxContinuous != 0 )
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d001      	beq.n	8007f8a <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 8007f86:	2300      	movs	r3, #0
 8007f88:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	bf14      	ite	ne
 8007f90:	2301      	movne	r3, #1
 8007f92:	2300      	moveq	r3, #0
 8007f94:	b2da      	uxtb	r2, r3
 8007f96:	4ba3      	ldr	r3, [pc, #652]	; (8008224 <RadioSetRxGenericConfig+0x2c4>)
 8007f98:	705a      	strb	r2, [r3, #1]

    switch( modem )
 8007f9a:	7bfb      	ldrb	r3, [r7, #15]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d003      	beq.n	8007fa8 <RadioSetRxGenericConfig+0x48>
 8007fa0:	2b01      	cmp	r3, #1
 8007fa2:	f000 80dc 	beq.w	800815e <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 8007fa6:	e194      	b.n	80082d2 <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	689b      	ldr	r3, [r3, #8]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d003      	beq.n	8007fb8 <RadioSetRxGenericConfig+0x58>
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	68db      	ldr	r3, [r3, #12]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d102      	bne.n	8007fbe <RadioSetRxGenericConfig+0x5e>
            return -1;
 8007fb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007fbc:	e18a      	b.n	80082d4 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	7f9b      	ldrb	r3, [r3, #30]
 8007fc2:	2b08      	cmp	r3, #8
 8007fc4:	d902      	bls.n	8007fcc <RadioSetRxGenericConfig+0x6c>
            return -1;
 8007fc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007fca:	e183      	b.n	80082d4 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	6919      	ldr	r1, [r3, #16]
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	7f9b      	ldrb	r3, [r3, #30]
 8007fd4:	b29a      	uxth	r2, r3
 8007fd6:	f107 0320 	add.w	r3, r7, #32
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f001 ff66 	bl	8009eac <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	bf14      	ite	ne
 8007fe8:	2301      	movne	r3, #1
 8007fea:	2300      	moveq	r3, #0
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f000 fe26 	bl	8008c40 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8007ff4:	4b8b      	ldr	r3, [pc, #556]	; (8008224 <RadioSetRxGenericConfig+0x2c4>)
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	689b      	ldr	r3, [r3, #8]
 8008000:	4a88      	ldr	r2, [pc, #544]	; (8008224 <RadioSetRxGenericConfig+0x2c4>)
 8008002:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	f893 2020 	ldrb.w	r2, [r3, #32]
 800800a:	4b86      	ldr	r3, [pc, #536]	; (8008224 <RadioSetRxGenericConfig+0x2c4>)
 800800c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	4618      	mov	r0, r3
 8008016:	f001 fce5 	bl	80099e4 <SUBGRF_GetFskBandwidthRegValue>
 800801a:	4603      	mov	r3, r0
 800801c:	461a      	mov	r2, r3
 800801e:	4b81      	ldr	r3, [pc, #516]	; (8008224 <RadioSetRxGenericConfig+0x2c4>)
 8008020:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8008024:	4b7f      	ldr	r3, [pc, #508]	; (8008224 <RadioSetRxGenericConfig+0x2c4>)
 8008026:	2200      	movs	r2, #0
 8008028:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	68db      	ldr	r3, [r3, #12]
 800802e:	b29b      	uxth	r3, r3
 8008030:	00db      	lsls	r3, r3, #3
 8008032:	b29a      	uxth	r2, r3
 8008034:	4b7b      	ldr	r3, [pc, #492]	; (8008224 <RadioSetRxGenericConfig+0x2c4>)
 8008036:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	7fda      	ldrb	r2, [r3, #31]
 800803c:	4b79      	ldr	r3, [pc, #484]	; (8008224 <RadioSetRxGenericConfig+0x2c4>)
 800803e:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	7f9b      	ldrb	r3, [r3, #30]
 8008044:	00db      	lsls	r3, r3, #3
 8008046:	b2da      	uxtb	r2, r3
 8008048:	4b76      	ldr	r3, [pc, #472]	; (8008224 <RadioSetRxGenericConfig+0x2c4>)
 800804a:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8008052:	4b74      	ldr	r3, [pc, #464]	; (8008224 <RadioSetRxGenericConfig+0x2c4>)
 8008054:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800805c:	2b00      	cmp	r3, #0
 800805e:	d105      	bne.n	800806c <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	695b      	ldr	r3, [r3, #20]
 8008064:	b2da      	uxtb	r2, r3
 8008066:	4b6f      	ldr	r3, [pc, #444]	; (8008224 <RadioSetRxGenericConfig+0x2c4>)
 8008068:	759a      	strb	r2, [r3, #22]
 800806a:	e00b      	b.n	8008084 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8008072:	2b02      	cmp	r3, #2
 8008074:	d103      	bne.n	800807e <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8008076:	4b6b      	ldr	r3, [pc, #428]	; (8008224 <RadioSetRxGenericConfig+0x2c4>)
 8008078:	22ff      	movs	r2, #255	; 0xff
 800807a:	759a      	strb	r2, [r3, #22]
 800807c:	e002      	b.n	8008084 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800807e:	4b69      	ldr	r3, [pc, #420]	; (8008224 <RadioSetRxGenericConfig+0x2c4>)
 8008080:	22ff      	movs	r2, #255	; 0xff
 8008082:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800808a:	2b02      	cmp	r3, #2
 800808c:	d004      	beq.n	8008098 <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8008094:	2b02      	cmp	r3, #2
 8008096:	d12d      	bne.n	80080f4 <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800809e:	2bf1      	cmp	r3, #241	; 0xf1
 80080a0:	d00c      	beq.n	80080bc <RadioSetRxGenericConfig+0x15c>
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80080a8:	2bf2      	cmp	r3, #242	; 0xf2
 80080aa:	d007      	beq.n	80080bc <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80080b2:	2b01      	cmp	r3, #1
 80080b4:	d002      	beq.n	80080bc <RadioSetRxGenericConfig+0x15c>
                return -1;
 80080b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80080ba:	e10b      	b.n	80082d4 <RadioSetRxGenericConfig+0x374>
            ConfigGeneric.rtx = CONFIG_RX;
 80080bc:	2300      	movs	r3, #0
 80080be:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 80080c4:	4b58      	ldr	r3, [pc, #352]	; (8008228 <RadioSetRxGenericConfig+0x2c8>)
 80080c6:	6819      	ldr	r1, [r3, #0]
 80080c8:	f107 0314 	add.w	r3, r7, #20
 80080cc:	4a57      	ldr	r2, [pc, #348]	; (800822c <RadioSetRxGenericConfig+0x2cc>)
 80080ce:	4618      	mov	r0, r3
 80080d0:	f001 fd48 	bl	8009b64 <RFW_Init>
 80080d4:	4603      	mov	r3, r0
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d002      	beq.n	80080e0 <RadioSetRxGenericConfig+0x180>
                return -1;
 80080da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80080de:	e0f9      	b.n	80082d4 <RadioSetRxGenericConfig+0x374>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80080e0:	4b50      	ldr	r3, [pc, #320]	; (8008224 <RadioSetRxGenericConfig+0x2c4>)
 80080e2:	2200      	movs	r2, #0
 80080e4:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 80080e6:	4b4f      	ldr	r3, [pc, #316]	; (8008224 <RadioSetRxGenericConfig+0x2c4>)
 80080e8:	2201      	movs	r2, #1
 80080ea:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80080ec:	4b4d      	ldr	r3, [pc, #308]	; (8008224 <RadioSetRxGenericConfig+0x2c4>)
 80080ee:	2200      	movs	r2, #0
 80080f0:	755a      	strb	r2, [r3, #21]
        {
 80080f2:	e00e      	b.n	8008112 <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 80080fa:	4b4a      	ldr	r3, [pc, #296]	; (8008224 <RadioSetRxGenericConfig+0x2c4>)
 80080fc:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8008104:	4b47      	ldr	r3, [pc, #284]	; (8008224 <RadioSetRxGenericConfig+0x2c4>)
 8008106:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800810e:	4b45      	ldr	r3, [pc, #276]	; (8008224 <RadioSetRxGenericConfig+0x2c4>)
 8008110:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8008112:	f7ff fa6e 	bl	80075f2 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8008116:	2000      	movs	r0, #0
 8008118:	f7fe fc0a 	bl	8006930 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800811c:	4844      	ldr	r0, [pc, #272]	; (8008230 <RadioSetRxGenericConfig+0x2d0>)
 800811e:	f001 f82d 	bl	800917c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008122:	4844      	ldr	r0, [pc, #272]	; (8008234 <RadioSetRxGenericConfig+0x2d4>)
 8008124:	f001 f8fc 	bl	8009320 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8008128:	f107 0320 	add.w	r3, r7, #32
 800812c:	4618      	mov	r0, r3
 800812e:	f000 fbc0 	bl	80088b2 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	8b9b      	ldrh	r3, [r3, #28]
 8008136:	4618      	mov	r0, r3
 8008138:	f000 fc0a 	bl	8008950 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	8b1b      	ldrh	r3, [r3, #24]
 8008140:	4618      	mov	r0, r3
 8008142:	f000 fbe5 	bl	8008910 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800814c:	fb03 f202 	mul.w	r2, r3, r2
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	689b      	ldr	r3, [r3, #8]
 8008154:	fbb2 f3f3 	udiv	r3, r2, r3
 8008158:	4a32      	ldr	r2, [pc, #200]	; (8008224 <RadioSetRxGenericConfig+0x2c4>)
 800815a:	6093      	str	r3, [r2, #8]
        break;
 800815c:	e0b9      	b.n	80082d2 <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8008162:	2b00      	cmp	r3, #0
 8008164:	d102      	bne.n	800816c <RadioSetRxGenericConfig+0x20c>
            return -1;
 8008166:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800816a:	e0b3      	b.n	80082d4 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008172:	2b01      	cmp	r3, #1
 8008174:	d104      	bne.n	8008180 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	695b      	ldr	r3, [r3, #20]
 800817a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800817e:	e002      	b.n	8008186 <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 8008180:	23ff      	movs	r3, #255	; 0xff
 8008182:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800818a:	2b00      	cmp	r3, #0
 800818c:	bf14      	ite	ne
 800818e:	2301      	movne	r3, #1
 8008190:	2300      	moveq	r3, #0
 8008192:	b2db      	uxtb	r3, r3
 8008194:	4618      	mov	r0, r3
 8008196:	f000 fd53 	bl	8008c40 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	b2db      	uxtb	r3, r3
 800819e:	4618      	mov	r0, r3
 80081a0:	f000 fd5d 	bl	8008c5e <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80081a4:	4b1f      	ldr	r3, [pc, #124]	; (8008224 <RadioSetRxGenericConfig+0x2c4>)
 80081a6:	2201      	movs	r2, #1
 80081a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80081b2:	4b1c      	ldr	r3, [pc, #112]	; (8008224 <RadioSetRxGenericConfig+0x2c4>)
 80081b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80081be:	4b19      	ldr	r3, [pc, #100]	; (8008224 <RadioSetRxGenericConfig+0x2c4>)
 80081c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80081ca:	4b16      	ldr	r3, [pc, #88]	; (8008224 <RadioSetRxGenericConfig+0x2c4>)
 80081cc:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80081d6:	2b02      	cmp	r3, #2
 80081d8:	d010      	beq.n	80081fc <RadioSetRxGenericConfig+0x29c>
 80081da:	2b02      	cmp	r3, #2
 80081dc:	dc2c      	bgt.n	8008238 <RadioSetRxGenericConfig+0x2d8>
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d002      	beq.n	80081e8 <RadioSetRxGenericConfig+0x288>
 80081e2:	2b01      	cmp	r3, #1
 80081e4:	d005      	beq.n	80081f2 <RadioSetRxGenericConfig+0x292>
            break;
 80081e6:	e027      	b.n	8008238 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80081e8:	4b0e      	ldr	r3, [pc, #56]	; (8008224 <RadioSetRxGenericConfig+0x2c4>)
 80081ea:	2200      	movs	r2, #0
 80081ec:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80081f0:	e023      	b.n	800823a <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80081f2:	4b0c      	ldr	r3, [pc, #48]	; (8008224 <RadioSetRxGenericConfig+0x2c4>)
 80081f4:	2201      	movs	r2, #1
 80081f6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80081fa:	e01e      	b.n	800823a <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008202:	2b0b      	cmp	r3, #11
 8008204:	d004      	beq.n	8008210 <RadioSetRxGenericConfig+0x2b0>
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800820c:	2b0c      	cmp	r3, #12
 800820e:	d104      	bne.n	800821a <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8008210:	4b04      	ldr	r3, [pc, #16]	; (8008224 <RadioSetRxGenericConfig+0x2c4>)
 8008212:	2201      	movs	r2, #1
 8008214:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008218:	e00f      	b.n	800823a <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800821a:	4b02      	ldr	r3, [pc, #8]	; (8008224 <RadioSetRxGenericConfig+0x2c4>)
 800821c:	2200      	movs	r2, #0
 800821e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008222:	e00a      	b.n	800823a <RadioSetRxGenericConfig+0x2da>
 8008224:	200004bc 	.word	0x200004bc
 8008228:	200004b8 	.word	0x200004b8
 800822c:	20000530 	.word	0x20000530
 8008230:	200004f4 	.word	0x200004f4
 8008234:	200004ca 	.word	0x200004ca
            break;
 8008238:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800823a:	4b28      	ldr	r3, [pc, #160]	; (80082dc <RadioSetRxGenericConfig+0x37c>)
 800823c:	2201      	movs	r2, #1
 800823e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8008244:	4b25      	ldr	r3, [pc, #148]	; (80082dc <RadioSetRxGenericConfig+0x37c>)
 8008246:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 800824e:	4b23      	ldr	r3, [pc, #140]	; (80082dc <RadioSetRxGenericConfig+0x37c>)
 8008250:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8008252:	4a22      	ldr	r2, [pc, #136]	; (80082dc <RadioSetRxGenericConfig+0x37c>)
 8008254:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008258:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8008260:	4b1e      	ldr	r3, [pc, #120]	; (80082dc <RadioSetRxGenericConfig+0x37c>)
 8008262:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 800826c:	4b1b      	ldr	r3, [pc, #108]	; (80082dc <RadioSetRxGenericConfig+0x37c>)
 800826e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 8008272:	f7ff f9be 	bl	80075f2 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8008276:	2001      	movs	r0, #1
 8008278:	f7fe fb5a 	bl	8006930 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800827c:	4818      	ldr	r0, [pc, #96]	; (80082e0 <RadioSetRxGenericConfig+0x380>)
 800827e:	f000 ff7d 	bl	800917c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008282:	4818      	ldr	r0, [pc, #96]	; (80082e4 <RadioSetRxGenericConfig+0x384>)
 8008284:	f001 f84c 	bl	8009320 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8008288:	4b14      	ldr	r3, [pc, #80]	; (80082dc <RadioSetRxGenericConfig+0x37c>)
 800828a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800828e:	2b01      	cmp	r3, #1
 8008290:	d10d      	bne.n	80082ae <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8008292:	f240 7036 	movw	r0, #1846	; 0x736
 8008296:	f001 f99f 	bl	80095d8 <SUBGRF_ReadRegister>
 800829a:	4603      	mov	r3, r0
 800829c:	f023 0304 	bic.w	r3, r3, #4
 80082a0:	b2db      	uxtb	r3, r3
 80082a2:	4619      	mov	r1, r3
 80082a4:	f240 7036 	movw	r0, #1846	; 0x736
 80082a8:	f001 f982 	bl	80095b0 <SUBGRF_WriteRegister>
 80082ac:	e00c      	b.n	80082c8 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 80082ae:	f240 7036 	movw	r0, #1846	; 0x736
 80082b2:	f001 f991 	bl	80095d8 <SUBGRF_ReadRegister>
 80082b6:	4603      	mov	r3, r0
 80082b8:	f043 0304 	orr.w	r3, r3, #4
 80082bc:	b2db      	uxtb	r3, r3
 80082be:	4619      	mov	r1, r3
 80082c0:	f240 7036 	movw	r0, #1846	; 0x736
 80082c4:	f001 f974 	bl	80095b0 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 80082c8:	4b04      	ldr	r3, [pc, #16]	; (80082dc <RadioSetRxGenericConfig+0x37c>)
 80082ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80082ce:	609a      	str	r2, [r3, #8]
        break;
 80082d0:	bf00      	nop
    }
    return status;
 80082d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3730      	adds	r7, #48	; 0x30
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}
 80082dc:	200004bc 	.word	0x200004bc
 80082e0:	200004f4 	.word	0x200004f4
 80082e4:	200004ca 	.word	0x200004ca

080082e8 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b08e      	sub	sp, #56	; 0x38
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	60b9      	str	r1, [r7, #8]
 80082f0:	607b      	str	r3, [r7, #4]
 80082f2:	4603      	mov	r3, r0
 80082f4:	73fb      	strb	r3, [r7, #15]
 80082f6:	4613      	mov	r3, r2
 80082f8:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 80082fa:	2300      	movs	r3, #0
 80082fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082fe:	2300      	movs	r3, #0
 8008300:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8008302:	f001 fc3c 	bl	8009b7e <RFW_DeInit>
    switch( modem )
 8008306:	7bfb      	ldrb	r3, [r7, #15]
 8008308:	2b03      	cmp	r3, #3
 800830a:	f200 8204 	bhi.w	8008716 <RadioSetTxGenericConfig+0x42e>
 800830e:	a201      	add	r2, pc, #4	; (adr r2, 8008314 <RadioSetTxGenericConfig+0x2c>)
 8008310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008314:	08008499 	.word	0x08008499
 8008318:	080085e1 	.word	0x080085e1
 800831c:	080086d9 	.word	0x080086d9
 8008320:	08008325 	.word	0x08008325
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	7c9b      	ldrb	r3, [r3, #18]
 8008328:	2b08      	cmp	r3, #8
 800832a:	d902      	bls.n	8008332 <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 800832c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008330:	e206      	b.n	8008740 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	6899      	ldr	r1, [r3, #8]
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	7c9b      	ldrb	r3, [r3, #18]
 800833a:	b29a      	uxth	r2, r3
 800833c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008340:	4618      	mov	r0, r3
 8008342:	f001 fdb3 	bl	8009eac <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d102      	bne.n	8008354 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 800834e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008352:	e1f5      	b.n	8008740 <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f242 7210 	movw	r2, #10000	; 0x2710
 800835c:	4293      	cmp	r3, r2
 800835e:	d813      	bhi.n	8008388 <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 8008360:	2302      	movs	r3, #2
 8008362:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 8008366:	4b99      	ldr	r3, [pc, #612]	; (80085cc <RadioSetTxGenericConfig+0x2e4>)
 8008368:	2203      	movs	r2, #3
 800836a:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 800836c:	4b97      	ldr	r3, [pc, #604]	; (80085cc <RadioSetTxGenericConfig+0x2e4>)
 800836e:	2203      	movs	r2, #3
 8008370:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4a94      	ldr	r2, [pc, #592]	; (80085cc <RadioSetTxGenericConfig+0x2e4>)
 800837a:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	7cda      	ldrb	r2, [r3, #19]
 8008380:	4b92      	ldr	r3, [pc, #584]	; (80085cc <RadioSetTxGenericConfig+0x2e4>)
 8008382:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008386:	e017      	b.n	80083b8 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 8008388:	2300      	movs	r3, #0
 800838a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800838e:	4b8f      	ldr	r3, [pc, #572]	; (80085cc <RadioSetTxGenericConfig+0x2e4>)
 8008390:	2200      	movs	r2, #0
 8008392:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8008394:	4b8d      	ldr	r3, [pc, #564]	; (80085cc <RadioSetTxGenericConfig+0x2e4>)
 8008396:	2200      	movs	r2, #0
 8008398:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4a8a      	ldr	r2, [pc, #552]	; (80085cc <RadioSetTxGenericConfig+0x2e4>)
 80083a2:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	7cda      	ldrb	r2, [r3, #19]
 80083a8:	4b88      	ldr	r3, [pc, #544]	; (80085cc <RadioSetTxGenericConfig+0x2e4>)
 80083aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	089b      	lsrs	r3, r3, #2
 80083b4:	4a85      	ldr	r2, [pc, #532]	; (80085cc <RadioSetTxGenericConfig+0x2e4>)
 80083b6:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	b29b      	uxth	r3, r3
 80083be:	00db      	lsls	r3, r3, #3
 80083c0:	b29a      	uxth	r2, r3
 80083c2:	4b82      	ldr	r3, [pc, #520]	; (80085cc <RadioSetTxGenericConfig+0x2e4>)
 80083c4:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 80083c6:	4b81      	ldr	r3, [pc, #516]	; (80085cc <RadioSetTxGenericConfig+0x2e4>)
 80083c8:	2204      	movs	r2, #4
 80083ca:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	7c9b      	ldrb	r3, [r3, #18]
 80083d0:	00db      	lsls	r3, r3, #3
 80083d2:	b2da      	uxtb	r2, r3
 80083d4:	4b7d      	ldr	r3, [pc, #500]	; (80085cc <RadioSetTxGenericConfig+0x2e4>)
 80083d6:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 80083d8:	4b7c      	ldr	r3, [pc, #496]	; (80085cc <RadioSetTxGenericConfig+0x2e4>)
 80083da:	2200      	movs	r2, #0
 80083dc:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	7d9b      	ldrb	r3, [r3, #22]
 80083e2:	2b02      	cmp	r3, #2
 80083e4:	d003      	beq.n	80083ee <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	7d1b      	ldrb	r3, [r3, #20]
 80083ea:	2b02      	cmp	r3, #2
 80083ec:	d12b      	bne.n	8008446 <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	7d5b      	ldrb	r3, [r3, #21]
 80083f2:	2bf1      	cmp	r3, #241	; 0xf1
 80083f4:	d00a      	beq.n	800840c <RadioSetTxGenericConfig+0x124>
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	7d5b      	ldrb	r3, [r3, #21]
 80083fa:	2bf2      	cmp	r3, #242	; 0xf2
 80083fc:	d006      	beq.n	800840c <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	7d5b      	ldrb	r3, [r3, #21]
 8008402:	2b01      	cmp	r3, #1
 8008404:	d002      	beq.n	800840c <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 8008406:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800840a:	e199      	b.n	8008740 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 8008410:	2301      	movs	r3, #1
 8008412:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8008416:	4b6e      	ldr	r3, [pc, #440]	; (80085d0 <RadioSetTxGenericConfig+0x2e8>)
 8008418:	6819      	ldr	r1, [r3, #0]
 800841a:	f107 0320 	add.w	r3, r7, #32
 800841e:	4a6d      	ldr	r2, [pc, #436]	; (80085d4 <RadioSetTxGenericConfig+0x2ec>)
 8008420:	4618      	mov	r0, r3
 8008422:	f001 fb9f 	bl	8009b64 <RFW_Init>
 8008426:	4603      	mov	r3, r0
 8008428:	2b00      	cmp	r3, #0
 800842a:	d002      	beq.n	8008432 <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 800842c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008430:	e186      	b.n	8008740 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8008432:	4b66      	ldr	r3, [pc, #408]	; (80085cc <RadioSetTxGenericConfig+0x2e4>)
 8008434:	2200      	movs	r2, #0
 8008436:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8008438:	4b64      	ldr	r3, [pc, #400]	; (80085cc <RadioSetTxGenericConfig+0x2e4>)
 800843a:	2201      	movs	r2, #1
 800843c:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800843e:	4b63      	ldr	r3, [pc, #396]	; (80085cc <RadioSetTxGenericConfig+0x2e4>)
 8008440:	2200      	movs	r2, #0
 8008442:	755a      	strb	r2, [r3, #21]
        {
 8008444:	e00b      	b.n	800845e <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	7d5a      	ldrb	r2, [r3, #21]
 800844a:	4b60      	ldr	r3, [pc, #384]	; (80085cc <RadioSetTxGenericConfig+0x2e4>)
 800844c:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	7d9a      	ldrb	r2, [r3, #22]
 8008452:	4b5e      	ldr	r3, [pc, #376]	; (80085cc <RadioSetTxGenericConfig+0x2e4>)
 8008454:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	7d1a      	ldrb	r2, [r3, #20]
 800845a:	4b5c      	ldr	r3, [pc, #368]	; (80085cc <RadioSetTxGenericConfig+0x2e4>)
 800845c:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 800845e:	f7ff f8c8 	bl	80075f2 <RadioStandby>
        RadioSetModem( radio_modem );
 8008462:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008466:	4618      	mov	r0, r3
 8008468:	f7fe fa62 	bl	8006930 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800846c:	485a      	ldr	r0, [pc, #360]	; (80085d8 <RadioSetTxGenericConfig+0x2f0>)
 800846e:	f000 fe85 	bl	800917c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008472:	485a      	ldr	r0, [pc, #360]	; (80085dc <RadioSetTxGenericConfig+0x2f4>)
 8008474:	f000 ff54 	bl	8009320 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8008478:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800847c:	4618      	mov	r0, r3
 800847e:	f000 fa18 	bl	80088b2 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	8a1b      	ldrh	r3, [r3, #16]
 8008486:	4618      	mov	r0, r3
 8008488:	f000 fa62 	bl	8008950 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	899b      	ldrh	r3, [r3, #12]
 8008490:	4618      	mov	r0, r3
 8008492:	f000 fa3d 	bl	8008910 <SUBGRF_SetCrcPolynomial>
        break;
 8008496:	e13f      	b.n	8008718 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d102      	bne.n	80084a6 <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 80084a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80084a4:	e14c      	b.n	8008740 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	7c9b      	ldrb	r3, [r3, #18]
 80084aa:	2b08      	cmp	r3, #8
 80084ac:	d902      	bls.n	80084b4 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 80084ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80084b2:	e145      	b.n	8008740 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	6899      	ldr	r1, [r3, #8]
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	7c9b      	ldrb	r3, [r3, #18]
 80084bc:	b29a      	uxth	r2, r3
 80084be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80084c2:	4618      	mov	r0, r3
 80084c4:	f001 fcf2 	bl	8009eac <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80084c8:	4b40      	ldr	r3, [pc, #256]	; (80085cc <RadioSetTxGenericConfig+0x2e4>)
 80084ca:	2200      	movs	r2, #0
 80084cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a3d      	ldr	r2, [pc, #244]	; (80085cc <RadioSetTxGenericConfig+0x2e4>)
 80084d6:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	7cda      	ldrb	r2, [r3, #19]
 80084dc:	4b3b      	ldr	r3, [pc, #236]	; (80085cc <RadioSetTxGenericConfig+0x2e4>)
 80084de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	699b      	ldr	r3, [r3, #24]
 80084e6:	4a39      	ldr	r2, [pc, #228]	; (80085cc <RadioSetTxGenericConfig+0x2e4>)
 80084e8:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80084ea:	4b38      	ldr	r3, [pc, #224]	; (80085cc <RadioSetTxGenericConfig+0x2e4>)
 80084ec:	2200      	movs	r2, #0
 80084ee:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	00db      	lsls	r3, r3, #3
 80084f8:	b29a      	uxth	r2, r3
 80084fa:	4b34      	ldr	r3, [pc, #208]	; (80085cc <RadioSetTxGenericConfig+0x2e4>)
 80084fc:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 80084fe:	4b33      	ldr	r3, [pc, #204]	; (80085cc <RadioSetTxGenericConfig+0x2e4>)
 8008500:	2204      	movs	r2, #4
 8008502:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	7c9b      	ldrb	r3, [r3, #18]
 8008508:	00db      	lsls	r3, r3, #3
 800850a:	b2da      	uxtb	r2, r3
 800850c:	4b2f      	ldr	r3, [pc, #188]	; (80085cc <RadioSetTxGenericConfig+0x2e4>)
 800850e:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8008510:	4b2e      	ldr	r3, [pc, #184]	; (80085cc <RadioSetTxGenericConfig+0x2e4>)
 8008512:	2200      	movs	r2, #0
 8008514:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	7d9b      	ldrb	r3, [r3, #22]
 800851a:	2b02      	cmp	r3, #2
 800851c:	d003      	beq.n	8008526 <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	7d1b      	ldrb	r3, [r3, #20]
 8008522:	2b02      	cmp	r3, #2
 8008524:	d12a      	bne.n	800857c <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	7d5b      	ldrb	r3, [r3, #21]
 800852a:	2bf1      	cmp	r3, #241	; 0xf1
 800852c:	d00a      	beq.n	8008544 <RadioSetTxGenericConfig+0x25c>
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	7d5b      	ldrb	r3, [r3, #21]
 8008532:	2bf2      	cmp	r3, #242	; 0xf2
 8008534:	d006      	beq.n	8008544 <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	7d5b      	ldrb	r3, [r3, #21]
 800853a:	2b01      	cmp	r3, #1
 800853c:	d002      	beq.n	8008544 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 800853e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008542:	e0fd      	b.n	8008740 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 8008544:	2301      	movs	r3, #1
 8008546:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800854c:	4b20      	ldr	r3, [pc, #128]	; (80085d0 <RadioSetTxGenericConfig+0x2e8>)
 800854e:	6819      	ldr	r1, [r3, #0]
 8008550:	f107 0314 	add.w	r3, r7, #20
 8008554:	4a1f      	ldr	r2, [pc, #124]	; (80085d4 <RadioSetTxGenericConfig+0x2ec>)
 8008556:	4618      	mov	r0, r3
 8008558:	f001 fb04 	bl	8009b64 <RFW_Init>
 800855c:	4603      	mov	r3, r0
 800855e:	2b00      	cmp	r3, #0
 8008560:	d002      	beq.n	8008568 <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 8008562:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008566:	e0eb      	b.n	8008740 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8008568:	4b18      	ldr	r3, [pc, #96]	; (80085cc <RadioSetTxGenericConfig+0x2e4>)
 800856a:	2200      	movs	r2, #0
 800856c:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800856e:	4b17      	ldr	r3, [pc, #92]	; (80085cc <RadioSetTxGenericConfig+0x2e4>)
 8008570:	2201      	movs	r2, #1
 8008572:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8008574:	4b15      	ldr	r3, [pc, #84]	; (80085cc <RadioSetTxGenericConfig+0x2e4>)
 8008576:	2200      	movs	r2, #0
 8008578:	755a      	strb	r2, [r3, #21]
        {
 800857a:	e00b      	b.n	8008594 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	7d5a      	ldrb	r2, [r3, #21]
 8008580:	4b12      	ldr	r3, [pc, #72]	; (80085cc <RadioSetTxGenericConfig+0x2e4>)
 8008582:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	7d9a      	ldrb	r2, [r3, #22]
 8008588:	4b10      	ldr	r3, [pc, #64]	; (80085cc <RadioSetTxGenericConfig+0x2e4>)
 800858a:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	7d1a      	ldrb	r2, [r3, #20]
 8008590:	4b0e      	ldr	r3, [pc, #56]	; (80085cc <RadioSetTxGenericConfig+0x2e4>)
 8008592:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8008594:	f7ff f82d 	bl	80075f2 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8008598:	2000      	movs	r0, #0
 800859a:	f7fe f9c9 	bl	8006930 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800859e:	480e      	ldr	r0, [pc, #56]	; (80085d8 <RadioSetTxGenericConfig+0x2f0>)
 80085a0:	f000 fdec 	bl	800917c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80085a4:	480d      	ldr	r0, [pc, #52]	; (80085dc <RadioSetTxGenericConfig+0x2f4>)
 80085a6:	f000 febb 	bl	8009320 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 80085aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80085ae:	4618      	mov	r0, r3
 80085b0:	f000 f97f 	bl	80088b2 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	8a1b      	ldrh	r3, [r3, #16]
 80085b8:	4618      	mov	r0, r3
 80085ba:	f000 f9c9 	bl	8008950 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	899b      	ldrh	r3, [r3, #12]
 80085c2:	4618      	mov	r0, r3
 80085c4:	f000 f9a4 	bl	8008910 <SUBGRF_SetCrcPolynomial>
        break;
 80085c8:	e0a6      	b.n	8008718 <RadioSetTxGenericConfig+0x430>
 80085ca:	bf00      	nop
 80085cc:	200004bc 	.word	0x200004bc
 80085d0:	200004b8 	.word	0x200004b8
 80085d4:	20000518 	.word	0x20000518
 80085d8:	200004f4 	.word	0x200004f4
 80085dc:	200004ca 	.word	0x200004ca
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80085e0:	4b59      	ldr	r3, [pc, #356]	; (8008748 <RadioSetTxGenericConfig+0x460>)
 80085e2:	2201      	movs	r2, #1
 80085e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	781a      	ldrb	r2, [r3, #0]
 80085ec:	4b56      	ldr	r3, [pc, #344]	; (8008748 <RadioSetTxGenericConfig+0x460>)
 80085ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	785a      	ldrb	r2, [r3, #1]
 80085f6:	4b54      	ldr	r3, [pc, #336]	; (8008748 <RadioSetTxGenericConfig+0x460>)
 80085f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	789a      	ldrb	r2, [r3, #2]
 8008600:	4b51      	ldr	r3, [pc, #324]	; (8008748 <RadioSetTxGenericConfig+0x460>)
 8008602:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	78db      	ldrb	r3, [r3, #3]
 800860a:	2b02      	cmp	r3, #2
 800860c:	d010      	beq.n	8008630 <RadioSetTxGenericConfig+0x348>
 800860e:	2b02      	cmp	r3, #2
 8008610:	dc20      	bgt.n	8008654 <RadioSetTxGenericConfig+0x36c>
 8008612:	2b00      	cmp	r3, #0
 8008614:	d002      	beq.n	800861c <RadioSetTxGenericConfig+0x334>
 8008616:	2b01      	cmp	r3, #1
 8008618:	d005      	beq.n	8008626 <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 800861a:	e01b      	b.n	8008654 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800861c:	4b4a      	ldr	r3, [pc, #296]	; (8008748 <RadioSetTxGenericConfig+0x460>)
 800861e:	2200      	movs	r2, #0
 8008620:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008624:	e017      	b.n	8008656 <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8008626:	4b48      	ldr	r3, [pc, #288]	; (8008748 <RadioSetTxGenericConfig+0x460>)
 8008628:	2201      	movs	r2, #1
 800862a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800862e:	e012      	b.n	8008656 <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	781b      	ldrb	r3, [r3, #0]
 8008634:	2b0b      	cmp	r3, #11
 8008636:	d003      	beq.n	8008640 <RadioSetTxGenericConfig+0x358>
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	781b      	ldrb	r3, [r3, #0]
 800863c:	2b0c      	cmp	r3, #12
 800863e:	d104      	bne.n	800864a <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8008640:	4b41      	ldr	r3, [pc, #260]	; (8008748 <RadioSetTxGenericConfig+0x460>)
 8008642:	2201      	movs	r2, #1
 8008644:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008648:	e005      	b.n	8008656 <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800864a:	4b3f      	ldr	r3, [pc, #252]	; (8008748 <RadioSetTxGenericConfig+0x460>)
 800864c:	2200      	movs	r2, #0
 800864e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008652:	e000      	b.n	8008656 <RadioSetTxGenericConfig+0x36e>
            break;
 8008654:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8008656:	4b3c      	ldr	r3, [pc, #240]	; (8008748 <RadioSetTxGenericConfig+0x460>)
 8008658:	2201      	movs	r2, #1
 800865a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	889a      	ldrh	r2, [r3, #4]
 8008660:	4b39      	ldr	r3, [pc, #228]	; (8008748 <RadioSetTxGenericConfig+0x460>)
 8008662:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	799a      	ldrb	r2, [r3, #6]
 8008668:	4b37      	ldr	r3, [pc, #220]	; (8008748 <RadioSetTxGenericConfig+0x460>)
 800866a:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	79da      	ldrb	r2, [r3, #7]
 8008670:	4b35      	ldr	r3, [pc, #212]	; (8008748 <RadioSetTxGenericConfig+0x460>)
 8008672:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	7a1a      	ldrb	r2, [r3, #8]
 800867a:	4b33      	ldr	r3, [pc, #204]	; (8008748 <RadioSetTxGenericConfig+0x460>)
 800867c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 8008680:	f7fe ffb7 	bl	80075f2 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8008684:	2001      	movs	r0, #1
 8008686:	f7fe f953 	bl	8006930 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800868a:	4830      	ldr	r0, [pc, #192]	; (800874c <RadioSetTxGenericConfig+0x464>)
 800868c:	f000 fd76 	bl	800917c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008690:	482f      	ldr	r0, [pc, #188]	; (8008750 <RadioSetTxGenericConfig+0x468>)
 8008692:	f000 fe45 	bl	8009320 <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 8008696:	4b2c      	ldr	r3, [pc, #176]	; (8008748 <RadioSetTxGenericConfig+0x460>)
 8008698:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800869c:	2b06      	cmp	r3, #6
 800869e:	d10d      	bne.n	80086bc <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 80086a0:	f640 0089 	movw	r0, #2185	; 0x889
 80086a4:	f000 ff98 	bl	80095d8 <SUBGRF_ReadRegister>
 80086a8:	4603      	mov	r3, r0
 80086aa:	f023 0304 	bic.w	r3, r3, #4
 80086ae:	b2db      	uxtb	r3, r3
 80086b0:	4619      	mov	r1, r3
 80086b2:	f640 0089 	movw	r0, #2185	; 0x889
 80086b6:	f000 ff7b 	bl	80095b0 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 80086ba:	e02d      	b.n	8008718 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 80086bc:	f640 0089 	movw	r0, #2185	; 0x889
 80086c0:	f000 ff8a 	bl	80095d8 <SUBGRF_ReadRegister>
 80086c4:	4603      	mov	r3, r0
 80086c6:	f043 0304 	orr.w	r3, r3, #4
 80086ca:	b2db      	uxtb	r3, r3
 80086cc:	4619      	mov	r1, r3
 80086ce:	f640 0089 	movw	r0, #2185	; 0x889
 80086d2:	f000 ff6d 	bl	80095b0 <SUBGRF_WriteRegister>
        break;
 80086d6:	e01f      	b.n	8008718 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d004      	beq.n	80086ea <RadioSetTxGenericConfig+0x402>
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80086e8:	d902      	bls.n	80086f0 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 80086ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80086ee:	e027      	b.n	8008740 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 80086f0:	2003      	movs	r0, #3
 80086f2:	f7fe f91d 	bl	8006930 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 80086f6:	4b14      	ldr	r3, [pc, #80]	; (8008748 <RadioSetTxGenericConfig+0x460>)
 80086f8:	2202      	movs	r2, #2
 80086fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4a11      	ldr	r2, [pc, #68]	; (8008748 <RadioSetTxGenericConfig+0x460>)
 8008704:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8008706:	4b10      	ldr	r3, [pc, #64]	; (8008748 <RadioSetTxGenericConfig+0x460>)
 8008708:	2216      	movs	r2, #22
 800870a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800870e:	480f      	ldr	r0, [pc, #60]	; (800874c <RadioSetTxGenericConfig+0x464>)
 8008710:	f000 fd34 	bl	800917c <SUBGRF_SetModulationParams>
        break;
 8008714:	e000      	b.n	8008718 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 8008716:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8008718:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800871c:	4618      	mov	r0, r3
 800871e:	f001 f863 	bl	80097e8 <SUBGRF_SetRfTxPower>
 8008722:	4603      	mov	r3, r0
 8008724:	461a      	mov	r2, r3
 8008726:	4b08      	ldr	r3, [pc, #32]	; (8008748 <RadioSetTxGenericConfig+0x460>)
 8008728:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 800872c:	4b06      	ldr	r3, [pc, #24]	; (8008748 <RadioSetTxGenericConfig+0x460>)
 800872e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008732:	4618      	mov	r0, r3
 8008734:	f001 fa37 	bl	8009ba6 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8008738:	4a03      	ldr	r2, [pc, #12]	; (8008748 <RadioSetTxGenericConfig+0x460>)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6053      	str	r3, [r2, #4]
    return 0;
 800873e:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8008740:	4618      	mov	r0, r3
 8008742:	3738      	adds	r7, #56	; 0x38
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}
 8008748:	200004bc 	.word	0x200004bc
 800874c:	200004f4 	.word	0x200004f4
 8008750:	200004ca 	.word	0x200004ca

08008754 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 8008754:	b480      	push	{r7}
 8008756:	b085      	sub	sp, #20
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 800875c:	2301      	movs	r3, #1
 800875e:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 8008760:	7bfb      	ldrb	r3, [r7, #15]
}
 8008762:	4618      	mov	r0, r3
 8008764:	3714      	adds	r7, #20
 8008766:	46bd      	mov	sp, r7
 8008768:	bc80      	pop	{r7}
 800876a:	4770      	bx	lr

0800876c <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 800876c:	b480      	push	{r7}
 800876e:	b083      	sub	sp, #12
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
 8008774:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 8008776:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 8008778:	4618      	mov	r0, r3
 800877a:	370c      	adds	r7, #12
 800877c:	46bd      	mov	sp, r7
 800877e:	bc80      	pop	{r7}
 8008780:	4770      	bx	lr
	...

08008784 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b084      	sub	sp, #16
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d002      	beq.n	8008798 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8008792:	4a1d      	ldr	r2, [pc, #116]	; (8008808 <SUBGRF_Init+0x84>)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8008798:	f7f8 fe2a 	bl	80013f0 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800879c:	2002      	movs	r0, #2
 800879e:	f001 f8ff 	bl	80099a0 <Radio_SMPS_Set>

    ImageCalibrated = false;
 80087a2:	4b1a      	ldr	r3, [pc, #104]	; (800880c <SUBGRF_Init+0x88>)
 80087a4:	2200      	movs	r2, #0
 80087a6:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 80087a8:	2000      	movs	r0, #0
 80087aa:	f000 f97d 	bl	8008aa8 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 80087ae:	f001 fb52 	bl	8009e56 <RBI_IsTCXO>
 80087b2:	4603      	mov	r3, r0
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	d10e      	bne.n	80087d6 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 80087b8:	2140      	movs	r1, #64	; 0x40
 80087ba:	2001      	movs	r0, #1
 80087bc:	f000 fb82 	bl	8008ec4 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 80087c0:	2100      	movs	r1, #0
 80087c2:	f640 1011 	movw	r0, #2321	; 0x911
 80087c6:	f000 fef3 	bl	80095b0 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 80087ca:	237f      	movs	r3, #127	; 0x7f
 80087cc:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 80087ce:	7b38      	ldrb	r0, [r7, #12]
 80087d0:	f000 fa8b 	bl	8008cea <SUBGRF_Calibrate>
 80087d4:	e009      	b.n	80087ea <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80087d6:	2120      	movs	r1, #32
 80087d8:	f640 1011 	movw	r0, #2321	; 0x911
 80087dc:	f000 fee8 	bl	80095b0 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80087e0:	2120      	movs	r1, #32
 80087e2:	f640 1012 	movw	r0, #2322	; 0x912
 80087e6:	f000 fee3 	bl	80095b0 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80087ea:	210e      	movs	r1, #14
 80087ec:	f640 101f 	movw	r0, #2335	; 0x91f
 80087f0:	f000 fede 	bl	80095b0 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 80087f4:	f001 fa86 	bl	8009d04 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 80087f8:	4b05      	ldr	r3, [pc, #20]	; (8008810 <SUBGRF_Init+0x8c>)
 80087fa:	2201      	movs	r2, #1
 80087fc:	701a      	strb	r2, [r3, #0]
}
 80087fe:	bf00      	nop
 8008800:	3710      	adds	r7, #16
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}
 8008806:	bf00      	nop
 8008808:	20000554 	.word	0x20000554
 800880c:	20000550 	.word	0x20000550
 8008810:	20000548 	.word	0x20000548

08008814 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8008814:	b480      	push	{r7}
 8008816:	af00      	add	r7, sp, #0
    return OperatingMode;
 8008818:	4b02      	ldr	r3, [pc, #8]	; (8008824 <SUBGRF_GetOperatingMode+0x10>)
 800881a:	781b      	ldrb	r3, [r3, #0]
}
 800881c:	4618      	mov	r0, r3
 800881e:	46bd      	mov	sp, r7
 8008820:	bc80      	pop	{r7}
 8008822:	4770      	bx	lr
 8008824:	20000548 	.word	0x20000548

08008828 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b082      	sub	sp, #8
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	460b      	mov	r3, r1
 8008832:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8008834:	78fb      	ldrb	r3, [r7, #3]
 8008836:	461a      	mov	r2, r3
 8008838:	6879      	ldr	r1, [r7, #4]
 800883a:	2000      	movs	r0, #0
 800883c:	f000 ff24 	bl	8009688 <SUBGRF_WriteBuffer>
}
 8008840:	bf00      	nop
 8008842:	3708      	adds	r7, #8
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}

08008848 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b086      	sub	sp, #24
 800884c:	af00      	add	r7, sp, #0
 800884e:	60f8      	str	r0, [r7, #12]
 8008850:	60b9      	str	r1, [r7, #8]
 8008852:	4613      	mov	r3, r2
 8008854:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8008856:	2300      	movs	r3, #0
 8008858:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 800885a:	f107 0317 	add.w	r3, r7, #23
 800885e:	4619      	mov	r1, r3
 8008860:	68b8      	ldr	r0, [r7, #8]
 8008862:	f000 fe27 	bl	80094b4 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	781b      	ldrb	r3, [r3, #0]
 800886a:	79fa      	ldrb	r2, [r7, #7]
 800886c:	429a      	cmp	r2, r3
 800886e:	d201      	bcs.n	8008874 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8008870:	2301      	movs	r3, #1
 8008872:	e007      	b.n	8008884 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8008874:	7df8      	ldrb	r0, [r7, #23]
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	781b      	ldrb	r3, [r3, #0]
 800887a:	461a      	mov	r2, r3
 800887c:	68f9      	ldr	r1, [r7, #12]
 800887e:	f000 ff25 	bl	80096cc <SUBGRF_ReadBuffer>

    return 0;
 8008882:	2300      	movs	r3, #0
}
 8008884:	4618      	mov	r0, r3
 8008886:	3718      	adds	r7, #24
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}

0800888c <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b084      	sub	sp, #16
 8008890:	af00      	add	r7, sp, #0
 8008892:	60f8      	str	r0, [r7, #12]
 8008894:	460b      	mov	r3, r1
 8008896:	607a      	str	r2, [r7, #4]
 8008898:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 800889a:	7afb      	ldrb	r3, [r7, #11]
 800889c:	4619      	mov	r1, r3
 800889e:	68f8      	ldr	r0, [r7, #12]
 80088a0:	f7ff ffc2 	bl	8008828 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f000 f91b 	bl	8008ae0 <SUBGRF_SetTx>
}
 80088aa:	bf00      	nop
 80088ac:	3710      	adds	r7, #16
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}

080088b2 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 80088b2:	b580      	push	{r7, lr}
 80088b4:	b082      	sub	sp, #8
 80088b6:	af00      	add	r7, sp, #0
 80088b8:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 80088ba:	2208      	movs	r2, #8
 80088bc:	6879      	ldr	r1, [r7, #4]
 80088be:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 80088c2:	f000 fe9d 	bl	8009600 <SUBGRF_WriteRegisters>
    return 0;
 80088c6:	2300      	movs	r3, #0
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	3708      	adds	r7, #8
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}

080088d0 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b084      	sub	sp, #16
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	4603      	mov	r3, r0
 80088d8:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 80088da:	88fb      	ldrh	r3, [r7, #6]
 80088dc:	0a1b      	lsrs	r3, r3, #8
 80088de:	b29b      	uxth	r3, r3
 80088e0:	b2db      	uxtb	r3, r3
 80088e2:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 80088e4:	88fb      	ldrh	r3, [r7, #6]
 80088e6:	b2db      	uxtb	r3, r3
 80088e8:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 80088ea:	f000 fb6f 	bl	8008fcc <SUBGRF_GetPacketType>
 80088ee:	4603      	mov	r3, r0
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d108      	bne.n	8008906 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 80088f4:	f107 030c 	add.w	r3, r7, #12
 80088f8:	2202      	movs	r2, #2
 80088fa:	4619      	mov	r1, r3
 80088fc:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8008900:	f000 fe7e 	bl	8009600 <SUBGRF_WriteRegisters>
            break;
 8008904:	e000      	b.n	8008908 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8008906:	bf00      	nop
    }
}
 8008908:	bf00      	nop
 800890a:	3710      	adds	r7, #16
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}

08008910 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b084      	sub	sp, #16
 8008914:	af00      	add	r7, sp, #0
 8008916:	4603      	mov	r3, r0
 8008918:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 800891a:	88fb      	ldrh	r3, [r7, #6]
 800891c:	0a1b      	lsrs	r3, r3, #8
 800891e:	b29b      	uxth	r3, r3
 8008920:	b2db      	uxtb	r3, r3
 8008922:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8008924:	88fb      	ldrh	r3, [r7, #6]
 8008926:	b2db      	uxtb	r3, r3
 8008928:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800892a:	f000 fb4f 	bl	8008fcc <SUBGRF_GetPacketType>
 800892e:	4603      	mov	r3, r0
 8008930:	2b00      	cmp	r3, #0
 8008932:	d108      	bne.n	8008946 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8008934:	f107 030c 	add.w	r3, r7, #12
 8008938:	2202      	movs	r2, #2
 800893a:	4619      	mov	r1, r3
 800893c:	f240 60be 	movw	r0, #1726	; 0x6be
 8008940:	f000 fe5e 	bl	8009600 <SUBGRF_WriteRegisters>
            break;
 8008944:	e000      	b.n	8008948 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8008946:	bf00      	nop
    }
}
 8008948:	bf00      	nop
 800894a:	3710      	adds	r7, #16
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b084      	sub	sp, #16
 8008954:	af00      	add	r7, sp, #0
 8008956:	4603      	mov	r3, r0
 8008958:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 800895a:	2300      	movs	r3, #0
 800895c:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 800895e:	f000 fb35 	bl	8008fcc <SUBGRF_GetPacketType>
 8008962:	4603      	mov	r3, r0
 8008964:	2b00      	cmp	r3, #0
 8008966:	d121      	bne.n	80089ac <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8008968:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800896c:	f000 fe34 	bl	80095d8 <SUBGRF_ReadRegister>
 8008970:	4603      	mov	r3, r0
 8008972:	f023 0301 	bic.w	r3, r3, #1
 8008976:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8008978:	88fb      	ldrh	r3, [r7, #6]
 800897a:	0a1b      	lsrs	r3, r3, #8
 800897c:	b29b      	uxth	r3, r3
 800897e:	b25b      	sxtb	r3, r3
 8008980:	f003 0301 	and.w	r3, r3, #1
 8008984:	b25a      	sxtb	r2, r3
 8008986:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800898a:	4313      	orrs	r3, r2
 800898c:	b25b      	sxtb	r3, r3
 800898e:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8008990:	7bfb      	ldrb	r3, [r7, #15]
 8008992:	4619      	mov	r1, r3
 8008994:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8008998:	f000 fe0a 	bl	80095b0 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 800899c:	88fb      	ldrh	r3, [r7, #6]
 800899e:	b2db      	uxtb	r3, r3
 80089a0:	4619      	mov	r1, r3
 80089a2:	f240 60b9 	movw	r0, #1721	; 0x6b9
 80089a6:	f000 fe03 	bl	80095b0 <SUBGRF_WriteRegister>
            break;
 80089aa:	e000      	b.n	80089ae <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 80089ac:	bf00      	nop
    }
}
 80089ae:	bf00      	nop
 80089b0:	3710      	adds	r7, #16
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}

080089b6 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 80089b6:	b580      	push	{r7, lr}
 80089b8:	b082      	sub	sp, #8
 80089ba:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 80089bc:	2300      	movs	r3, #0
 80089be:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 80089c0:	2300      	movs	r3, #0
 80089c2:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 80089c4:	2300      	movs	r3, #0
 80089c6:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 80089c8:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80089cc:	f000 fe04 	bl	80095d8 <SUBGRF_ReadRegister>
 80089d0:	4603      	mov	r3, r0
 80089d2:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 80089d4:	79fb      	ldrb	r3, [r7, #7]
 80089d6:	f023 0301 	bic.w	r3, r3, #1
 80089da:	b2db      	uxtb	r3, r3
 80089dc:	4619      	mov	r1, r3
 80089de:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80089e2:	f000 fde5 	bl	80095b0 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 80089e6:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80089ea:	f000 fdf5 	bl	80095d8 <SUBGRF_ReadRegister>
 80089ee:	4603      	mov	r3, r0
 80089f0:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 80089f2:	79bb      	ldrb	r3, [r7, #6]
 80089f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089f8:	b2db      	uxtb	r3, r3
 80089fa:	4619      	mov	r1, r3
 80089fc:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8008a00:	f000 fdd6 	bl	80095b0 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8008a04:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8008a08:	f000 f88a 	bl	8008b20 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8008a0c:	463b      	mov	r3, r7
 8008a0e:	2204      	movs	r2, #4
 8008a10:	4619      	mov	r1, r3
 8008a12:	f640 0019 	movw	r0, #2073	; 0x819
 8008a16:	f000 fe15 	bl	8009644 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 8008a1a:	2000      	movs	r0, #0
 8008a1c:	f000 f844 	bl	8008aa8 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8008a20:	79fb      	ldrb	r3, [r7, #7]
 8008a22:	4619      	mov	r1, r3
 8008a24:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8008a28:	f000 fdc2 	bl	80095b0 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8008a2c:	79bb      	ldrb	r3, [r7, #6]
 8008a2e:	4619      	mov	r1, r3
 8008a30:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8008a34:	f000 fdbc 	bl	80095b0 <SUBGRF_WriteRegister>

    return number;
 8008a38:	683b      	ldr	r3, [r7, #0]
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3708      	adds	r7, #8
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}
	...

08008a44 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b084      	sub	sp, #16
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8008a4c:	2000      	movs	r0, #0
 8008a4e:	f001 f999 	bl	8009d84 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8008a52:	2002      	movs	r0, #2
 8008a54:	f000 ffa4 	bl	80099a0 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8008a58:	793b      	ldrb	r3, [r7, #4]
 8008a5a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008a5e:	b2db      	uxtb	r3, r3
 8008a60:	009b      	lsls	r3, r3, #2
 8008a62:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8008a64:	793b      	ldrb	r3, [r7, #4]
 8008a66:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008a6a:	b2db      	uxtb	r3, r3
 8008a6c:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8008a6e:	b25b      	sxtb	r3, r3
 8008a70:	4313      	orrs	r3, r2
 8008a72:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8008a74:	793b      	ldrb	r3, [r7, #4]
 8008a76:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008a7a:	b2db      	uxtb	r3, r3
 8008a7c:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	b25b      	sxtb	r3, r3
 8008a82:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8008a84:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8008a86:	f107 030f 	add.w	r3, r7, #15
 8008a8a:	2201      	movs	r2, #1
 8008a8c:	4619      	mov	r1, r3
 8008a8e:	2084      	movs	r0, #132	; 0x84
 8008a90:	f000 fe3e 	bl	8009710 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8008a94:	4b03      	ldr	r3, [pc, #12]	; (8008aa4 <SUBGRF_SetSleep+0x60>)
 8008a96:	2200      	movs	r2, #0
 8008a98:	701a      	strb	r2, [r3, #0]
}
 8008a9a:	bf00      	nop
 8008a9c:	3710      	adds	r7, #16
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}
 8008aa2:	bf00      	nop
 8008aa4:	20000548 	.word	0x20000548

08008aa8 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b082      	sub	sp, #8
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	4603      	mov	r3, r0
 8008ab0:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8008ab2:	1dfb      	adds	r3, r7, #7
 8008ab4:	2201      	movs	r2, #1
 8008ab6:	4619      	mov	r1, r3
 8008ab8:	2080      	movs	r0, #128	; 0x80
 8008aba:	f000 fe29 	bl	8009710 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8008abe:	79fb      	ldrb	r3, [r7, #7]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d103      	bne.n	8008acc <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8008ac4:	4b05      	ldr	r3, [pc, #20]	; (8008adc <SUBGRF_SetStandby+0x34>)
 8008ac6:	2201      	movs	r2, #1
 8008ac8:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8008aca:	e002      	b.n	8008ad2 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8008acc:	4b03      	ldr	r3, [pc, #12]	; (8008adc <SUBGRF_SetStandby+0x34>)
 8008ace:	2202      	movs	r2, #2
 8008ad0:	701a      	strb	r2, [r3, #0]
}
 8008ad2:	bf00      	nop
 8008ad4:	3708      	adds	r7, #8
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}
 8008ada:	bf00      	nop
 8008adc:	20000548 	.word	0x20000548

08008ae0 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b084      	sub	sp, #16
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8008ae8:	4b0c      	ldr	r3, [pc, #48]	; (8008b1c <SUBGRF_SetTx+0x3c>)
 8008aea:	2204      	movs	r2, #4
 8008aec:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	0c1b      	lsrs	r3, r3, #16
 8008af2:	b2db      	uxtb	r3, r3
 8008af4:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	0a1b      	lsrs	r3, r3, #8
 8008afa:	b2db      	uxtb	r3, r3
 8008afc:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	b2db      	uxtb	r3, r3
 8008b02:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8008b04:	f107 030c 	add.w	r3, r7, #12
 8008b08:	2203      	movs	r2, #3
 8008b0a:	4619      	mov	r1, r3
 8008b0c:	2083      	movs	r0, #131	; 0x83
 8008b0e:	f000 fdff 	bl	8009710 <SUBGRF_WriteCommand>
}
 8008b12:	bf00      	nop
 8008b14:	3710      	adds	r7, #16
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}
 8008b1a:	bf00      	nop
 8008b1c:	20000548 	.word	0x20000548

08008b20 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b084      	sub	sp, #16
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8008b28:	4b0c      	ldr	r3, [pc, #48]	; (8008b5c <SUBGRF_SetRx+0x3c>)
 8008b2a:	2205      	movs	r2, #5
 8008b2c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	0c1b      	lsrs	r3, r3, #16
 8008b32:	b2db      	uxtb	r3, r3
 8008b34:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	0a1b      	lsrs	r3, r3, #8
 8008b3a:	b2db      	uxtb	r3, r3
 8008b3c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	b2db      	uxtb	r3, r3
 8008b42:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8008b44:	f107 030c 	add.w	r3, r7, #12
 8008b48:	2203      	movs	r2, #3
 8008b4a:	4619      	mov	r1, r3
 8008b4c:	2082      	movs	r0, #130	; 0x82
 8008b4e:	f000 fddf 	bl	8009710 <SUBGRF_WriteCommand>
}
 8008b52:	bf00      	nop
 8008b54:	3710      	adds	r7, #16
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}
 8008b5a:	bf00      	nop
 8008b5c:	20000548 	.word	0x20000548

08008b60 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b084      	sub	sp, #16
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8008b68:	4b0e      	ldr	r3, [pc, #56]	; (8008ba4 <SUBGRF_SetRxBoosted+0x44>)
 8008b6a:	2205      	movs	r2, #5
 8008b6c:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8008b6e:	2197      	movs	r1, #151	; 0x97
 8008b70:	f640 00ac 	movw	r0, #2220	; 0x8ac
 8008b74:	f000 fd1c 	bl	80095b0 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	0c1b      	lsrs	r3, r3, #16
 8008b7c:	b2db      	uxtb	r3, r3
 8008b7e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	0a1b      	lsrs	r3, r3, #8
 8008b84:	b2db      	uxtb	r3, r3
 8008b86:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	b2db      	uxtb	r3, r3
 8008b8c:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8008b8e:	f107 030c 	add.w	r3, r7, #12
 8008b92:	2203      	movs	r2, #3
 8008b94:	4619      	mov	r1, r3
 8008b96:	2082      	movs	r0, #130	; 0x82
 8008b98:	f000 fdba 	bl	8009710 <SUBGRF_WriteCommand>
}
 8008b9c:	bf00      	nop
 8008b9e:	3710      	adds	r7, #16
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}
 8008ba4:	20000548 	.word	0x20000548

08008ba8 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b084      	sub	sp, #16
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	0c1b      	lsrs	r3, r3, #16
 8008bb6:	b2db      	uxtb	r3, r3
 8008bb8:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	0a1b      	lsrs	r3, r3, #8
 8008bbe:	b2db      	uxtb	r3, r3
 8008bc0:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	b2db      	uxtb	r3, r3
 8008bc6:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	0c1b      	lsrs	r3, r3, #16
 8008bcc:	b2db      	uxtb	r3, r3
 8008bce:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	0a1b      	lsrs	r3, r3, #8
 8008bd4:	b2db      	uxtb	r3, r3
 8008bd6:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	b2db      	uxtb	r3, r3
 8008bdc:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8008bde:	f107 0308 	add.w	r3, r7, #8
 8008be2:	2206      	movs	r2, #6
 8008be4:	4619      	mov	r1, r3
 8008be6:	2094      	movs	r0, #148	; 0x94
 8008be8:	f000 fd92 	bl	8009710 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8008bec:	4b03      	ldr	r3, [pc, #12]	; (8008bfc <SUBGRF_SetRxDutyCycle+0x54>)
 8008bee:	2206      	movs	r2, #6
 8008bf0:	701a      	strb	r2, [r3, #0]
}
 8008bf2:	bf00      	nop
 8008bf4:	3710      	adds	r7, #16
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}
 8008bfa:	bf00      	nop
 8008bfc:	20000548 	.word	0x20000548

08008c00 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8008c04:	2200      	movs	r2, #0
 8008c06:	2100      	movs	r1, #0
 8008c08:	20c5      	movs	r0, #197	; 0xc5
 8008c0a:	f000 fd81 	bl	8009710 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8008c0e:	4b02      	ldr	r3, [pc, #8]	; (8008c18 <SUBGRF_SetCad+0x18>)
 8008c10:	2207      	movs	r2, #7
 8008c12:	701a      	strb	r2, [r3, #0]
}
 8008c14:	bf00      	nop
 8008c16:	bd80      	pop	{r7, pc}
 8008c18:	20000548 	.word	0x20000548

08008c1c <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8008c20:	2200      	movs	r2, #0
 8008c22:	2100      	movs	r1, #0
 8008c24:	20d1      	movs	r0, #209	; 0xd1
 8008c26:	f000 fd73 	bl	8009710 <SUBGRF_WriteCommand>
}
 8008c2a:	bf00      	nop
 8008c2c:	bd80      	pop	{r7, pc}

08008c2e <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 8008c2e:	b580      	push	{r7, lr}
 8008c30:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8008c32:	2200      	movs	r2, #0
 8008c34:	2100      	movs	r1, #0
 8008c36:	20d2      	movs	r0, #210	; 0xd2
 8008c38:	f000 fd6a 	bl	8009710 <SUBGRF_WriteCommand>
}
 8008c3c:	bf00      	nop
 8008c3e:	bd80      	pop	{r7, pc}

08008c40 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b082      	sub	sp, #8
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	4603      	mov	r3, r0
 8008c48:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8008c4a:	1dfb      	adds	r3, r7, #7
 8008c4c:	2201      	movs	r2, #1
 8008c4e:	4619      	mov	r1, r3
 8008c50:	209f      	movs	r0, #159	; 0x9f
 8008c52:	f000 fd5d 	bl	8009710 <SUBGRF_WriteCommand>
}
 8008c56:	bf00      	nop
 8008c58:	3708      	adds	r7, #8
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}

08008c5e <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 8008c5e:	b580      	push	{r7, lr}
 8008c60:	b084      	sub	sp, #16
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	4603      	mov	r3, r0
 8008c66:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8008c68:	1dfb      	adds	r3, r7, #7
 8008c6a:	2201      	movs	r2, #1
 8008c6c:	4619      	mov	r1, r3
 8008c6e:	20a0      	movs	r0, #160	; 0xa0
 8008c70:	f000 fd4e 	bl	8009710 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 8008c74:	79fb      	ldrb	r3, [r7, #7]
 8008c76:	2b3f      	cmp	r3, #63	; 0x3f
 8008c78:	d91c      	bls.n	8008cb4 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 8008c7a:	79fb      	ldrb	r3, [r7, #7]
 8008c7c:	085b      	lsrs	r3, r3, #1
 8008c7e:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 8008c80:	2300      	movs	r3, #0
 8008c82:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 8008c84:	2300      	movs	r3, #0
 8008c86:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 8008c88:	e005      	b.n	8008c96 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 8008c8a:	7bfb      	ldrb	r3, [r7, #15]
 8008c8c:	089b      	lsrs	r3, r3, #2
 8008c8e:	73fb      	strb	r3, [r7, #15]
            exp++;
 8008c90:	7bbb      	ldrb	r3, [r7, #14]
 8008c92:	3301      	adds	r3, #1
 8008c94:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 8008c96:	7bfb      	ldrb	r3, [r7, #15]
 8008c98:	2b1f      	cmp	r3, #31
 8008c9a:	d8f6      	bhi.n	8008c8a <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 8008c9c:	7bfb      	ldrb	r3, [r7, #15]
 8008c9e:	00db      	lsls	r3, r3, #3
 8008ca0:	b2da      	uxtb	r2, r3
 8008ca2:	7bbb      	ldrb	r3, [r7, #14]
 8008ca4:	4413      	add	r3, r2
 8008ca6:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8008ca8:	7b7b      	ldrb	r3, [r7, #13]
 8008caa:	4619      	mov	r1, r3
 8008cac:	f240 7006 	movw	r0, #1798	; 0x706
 8008cb0:	f000 fc7e 	bl	80095b0 <SUBGRF_WriteRegister>
    }
}
 8008cb4:	bf00      	nop
 8008cb6:	3710      	adds	r7, #16
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}

08008cbc <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b082      	sub	sp, #8
 8008cc0:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8008cc2:	f001 f8d3 	bl	8009e6c <RBI_IsDCDC>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	2b01      	cmp	r3, #1
 8008cca:	d102      	bne.n	8008cd2 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 8008ccc:	2301      	movs	r3, #1
 8008cce:	71fb      	strb	r3, [r7, #7]
 8008cd0:	e001      	b.n	8008cd6 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8008cd6:	1dfb      	adds	r3, r7, #7
 8008cd8:	2201      	movs	r2, #1
 8008cda:	4619      	mov	r1, r3
 8008cdc:	2096      	movs	r0, #150	; 0x96
 8008cde:	f000 fd17 	bl	8009710 <SUBGRF_WriteCommand>
}
 8008ce2:	bf00      	nop
 8008ce4:	3708      	adds	r7, #8
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}

08008cea <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 8008cea:	b580      	push	{r7, lr}
 8008cec:	b084      	sub	sp, #16
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8008cf2:	793b      	ldrb	r3, [r7, #4]
 8008cf4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8008cf8:	b2db      	uxtb	r3, r3
 8008cfa:	019b      	lsls	r3, r3, #6
 8008cfc:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8008cfe:	793b      	ldrb	r3, [r7, #4]
 8008d00:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8008d04:	b2db      	uxtb	r3, r3
 8008d06:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8008d08:	b25b      	sxtb	r3, r3
 8008d0a:	4313      	orrs	r3, r2
 8008d0c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8008d0e:	793b      	ldrb	r3, [r7, #4]
 8008d10:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8008d14:	b2db      	uxtb	r3, r3
 8008d16:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8008d18:	b25b      	sxtb	r3, r3
 8008d1a:	4313      	orrs	r3, r2
 8008d1c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8008d1e:	793b      	ldrb	r3, [r7, #4]
 8008d20:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008d24:	b2db      	uxtb	r3, r3
 8008d26:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8008d28:	b25b      	sxtb	r3, r3
 8008d2a:	4313      	orrs	r3, r2
 8008d2c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8008d2e:	793b      	ldrb	r3, [r7, #4]
 8008d30:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008d34:	b2db      	uxtb	r3, r3
 8008d36:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8008d38:	b25b      	sxtb	r3, r3
 8008d3a:	4313      	orrs	r3, r2
 8008d3c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8008d3e:	793b      	ldrb	r3, [r7, #4]
 8008d40:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008d44:	b2db      	uxtb	r3, r3
 8008d46:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8008d48:	b25b      	sxtb	r3, r3
 8008d4a:	4313      	orrs	r3, r2
 8008d4c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8008d4e:	793b      	ldrb	r3, [r7, #4]
 8008d50:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008d54:	b2db      	uxtb	r3, r3
 8008d56:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8008d58:	4313      	orrs	r3, r2
 8008d5a:	b25b      	sxtb	r3, r3
 8008d5c:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8008d5e:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8008d60:	f107 030f 	add.w	r3, r7, #15
 8008d64:	2201      	movs	r2, #1
 8008d66:	4619      	mov	r1, r3
 8008d68:	2089      	movs	r0, #137	; 0x89
 8008d6a:	f000 fcd1 	bl	8009710 <SUBGRF_WriteCommand>
}
 8008d6e:	bf00      	nop
 8008d70:	3710      	adds	r7, #16
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}
	...

08008d78 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b084      	sub	sp, #16
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	4a1d      	ldr	r2, [pc, #116]	; (8008df8 <SUBGRF_CalibrateImage+0x80>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d904      	bls.n	8008d92 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8008d88:	23e1      	movs	r3, #225	; 0xe1
 8008d8a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8008d8c:	23e9      	movs	r3, #233	; 0xe9
 8008d8e:	737b      	strb	r3, [r7, #13]
 8008d90:	e027      	b.n	8008de2 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	4a19      	ldr	r2, [pc, #100]	; (8008dfc <SUBGRF_CalibrateImage+0x84>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d904      	bls.n	8008da4 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 8008d9a:	23d7      	movs	r3, #215	; 0xd7
 8008d9c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 8008d9e:	23db      	movs	r3, #219	; 0xdb
 8008da0:	737b      	strb	r3, [r7, #13]
 8008da2:	e01e      	b.n	8008de2 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	4a16      	ldr	r2, [pc, #88]	; (8008e00 <SUBGRF_CalibrateImage+0x88>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d904      	bls.n	8008db6 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 8008dac:	23c1      	movs	r3, #193	; 0xc1
 8008dae:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8008db0:	23c5      	movs	r3, #197	; 0xc5
 8008db2:	737b      	strb	r3, [r7, #13]
 8008db4:	e015      	b.n	8008de2 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	4a12      	ldr	r2, [pc, #72]	; (8008e04 <SUBGRF_CalibrateImage+0x8c>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d904      	bls.n	8008dc8 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 8008dbe:	2375      	movs	r3, #117	; 0x75
 8008dc0:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 8008dc2:	2381      	movs	r3, #129	; 0x81
 8008dc4:	737b      	strb	r3, [r7, #13]
 8008dc6:	e00c      	b.n	8008de2 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	4a0f      	ldr	r2, [pc, #60]	; (8008e08 <SUBGRF_CalibrateImage+0x90>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d904      	bls.n	8008dda <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 8008dd0:	236b      	movs	r3, #107	; 0x6b
 8008dd2:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 8008dd4:	236f      	movs	r3, #111	; 0x6f
 8008dd6:	737b      	strb	r3, [r7, #13]
 8008dd8:	e003      	b.n	8008de2 <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 8008dda:	2329      	movs	r3, #41	; 0x29
 8008ddc:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 8008dde:	232b      	movs	r3, #43	; 0x2b
 8008de0:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8008de2:	f107 030c 	add.w	r3, r7, #12
 8008de6:	2202      	movs	r2, #2
 8008de8:	4619      	mov	r1, r3
 8008dea:	2098      	movs	r0, #152	; 0x98
 8008dec:	f000 fc90 	bl	8009710 <SUBGRF_WriteCommand>
}
 8008df0:	bf00      	nop
 8008df2:	3710      	adds	r7, #16
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}
 8008df8:	35a4e900 	.word	0x35a4e900
 8008dfc:	32a9f880 	.word	0x32a9f880
 8008e00:	2de54480 	.word	0x2de54480
 8008e04:	1b6b0b00 	.word	0x1b6b0b00
 8008e08:	1954fc40 	.word	0x1954fc40

08008e0c <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 8008e0c:	b590      	push	{r4, r7, lr}
 8008e0e:	b085      	sub	sp, #20
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	4604      	mov	r4, r0
 8008e14:	4608      	mov	r0, r1
 8008e16:	4611      	mov	r1, r2
 8008e18:	461a      	mov	r2, r3
 8008e1a:	4623      	mov	r3, r4
 8008e1c:	71fb      	strb	r3, [r7, #7]
 8008e1e:	4603      	mov	r3, r0
 8008e20:	71bb      	strb	r3, [r7, #6]
 8008e22:	460b      	mov	r3, r1
 8008e24:	717b      	strb	r3, [r7, #5]
 8008e26:	4613      	mov	r3, r2
 8008e28:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 8008e2a:	79fb      	ldrb	r3, [r7, #7]
 8008e2c:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 8008e2e:	79bb      	ldrb	r3, [r7, #6]
 8008e30:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8008e32:	797b      	ldrb	r3, [r7, #5]
 8008e34:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 8008e36:	793b      	ldrb	r3, [r7, #4]
 8008e38:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8008e3a:	f107 030c 	add.w	r3, r7, #12
 8008e3e:	2204      	movs	r2, #4
 8008e40:	4619      	mov	r1, r3
 8008e42:	2095      	movs	r0, #149	; 0x95
 8008e44:	f000 fc64 	bl	8009710 <SUBGRF_WriteCommand>
}
 8008e48:	bf00      	nop
 8008e4a:	3714      	adds	r7, #20
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd90      	pop	{r4, r7, pc}

08008e50 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8008e50:	b590      	push	{r4, r7, lr}
 8008e52:	b085      	sub	sp, #20
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	4604      	mov	r4, r0
 8008e58:	4608      	mov	r0, r1
 8008e5a:	4611      	mov	r1, r2
 8008e5c:	461a      	mov	r2, r3
 8008e5e:	4623      	mov	r3, r4
 8008e60:	80fb      	strh	r3, [r7, #6]
 8008e62:	4603      	mov	r3, r0
 8008e64:	80bb      	strh	r3, [r7, #4]
 8008e66:	460b      	mov	r3, r1
 8008e68:	807b      	strh	r3, [r7, #2]
 8008e6a:	4613      	mov	r3, r2
 8008e6c:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8008e6e:	88fb      	ldrh	r3, [r7, #6]
 8008e70:	0a1b      	lsrs	r3, r3, #8
 8008e72:	b29b      	uxth	r3, r3
 8008e74:	b2db      	uxtb	r3, r3
 8008e76:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8008e78:	88fb      	ldrh	r3, [r7, #6]
 8008e7a:	b2db      	uxtb	r3, r3
 8008e7c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8008e7e:	88bb      	ldrh	r3, [r7, #4]
 8008e80:	0a1b      	lsrs	r3, r3, #8
 8008e82:	b29b      	uxth	r3, r3
 8008e84:	b2db      	uxtb	r3, r3
 8008e86:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8008e88:	88bb      	ldrh	r3, [r7, #4]
 8008e8a:	b2db      	uxtb	r3, r3
 8008e8c:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8008e8e:	887b      	ldrh	r3, [r7, #2]
 8008e90:	0a1b      	lsrs	r3, r3, #8
 8008e92:	b29b      	uxth	r3, r3
 8008e94:	b2db      	uxtb	r3, r3
 8008e96:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8008e98:	887b      	ldrh	r3, [r7, #2]
 8008e9a:	b2db      	uxtb	r3, r3
 8008e9c:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8008e9e:	883b      	ldrh	r3, [r7, #0]
 8008ea0:	0a1b      	lsrs	r3, r3, #8
 8008ea2:	b29b      	uxth	r3, r3
 8008ea4:	b2db      	uxtb	r3, r3
 8008ea6:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8008ea8:	883b      	ldrh	r3, [r7, #0]
 8008eaa:	b2db      	uxtb	r3, r3
 8008eac:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8008eae:	f107 0308 	add.w	r3, r7, #8
 8008eb2:	2208      	movs	r2, #8
 8008eb4:	4619      	mov	r1, r3
 8008eb6:	2008      	movs	r0, #8
 8008eb8:	f000 fc2a 	bl	8009710 <SUBGRF_WriteCommand>
}
 8008ebc:	bf00      	nop
 8008ebe:	3714      	adds	r7, #20
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd90      	pop	{r4, r7, pc}

08008ec4 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b084      	sub	sp, #16
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	4603      	mov	r3, r0
 8008ecc:	6039      	str	r1, [r7, #0]
 8008ece:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 8008ed0:	79fb      	ldrb	r3, [r7, #7]
 8008ed2:	f003 0307 	and.w	r3, r3, #7
 8008ed6:	b2db      	uxtb	r3, r3
 8008ed8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	0c1b      	lsrs	r3, r3, #16
 8008ede:	b2db      	uxtb	r3, r3
 8008ee0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	0a1b      	lsrs	r3, r3, #8
 8008ee6:	b2db      	uxtb	r3, r3
 8008ee8:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	b2db      	uxtb	r3, r3
 8008eee:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8008ef0:	f107 030c 	add.w	r3, r7, #12
 8008ef4:	2204      	movs	r2, #4
 8008ef6:	4619      	mov	r1, r3
 8008ef8:	2097      	movs	r0, #151	; 0x97
 8008efa:	f000 fc09 	bl	8009710 <SUBGRF_WriteCommand>
}
 8008efe:	bf00      	nop
 8008f00:	3710      	adds	r7, #16
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}
	...

08008f08 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 8008f08:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008f0c:	b084      	sub	sp, #16
 8008f0e:	af00      	add	r7, sp, #0
 8008f10:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 8008f12:	2300      	movs	r3, #0
 8008f14:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 8008f16:	4b1d      	ldr	r3, [pc, #116]	; (8008f8c <SUBGRF_SetRfFrequency+0x84>)
 8008f18:	781b      	ldrb	r3, [r3, #0]
 8008f1a:	f083 0301 	eor.w	r3, r3, #1
 8008f1e:	b2db      	uxtb	r3, r3
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d005      	beq.n	8008f30 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f7ff ff27 	bl	8008d78 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8008f2a:	4b18      	ldr	r3, [pc, #96]	; (8008f8c <SUBGRF_SetRfFrequency+0x84>)
 8008f2c:	2201      	movs	r2, #1
 8008f2e:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2200      	movs	r2, #0
 8008f34:	461c      	mov	r4, r3
 8008f36:	4615      	mov	r5, r2
 8008f38:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8008f3c:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8008f40:	4a13      	ldr	r2, [pc, #76]	; (8008f90 <SUBGRF_SetRfFrequency+0x88>)
 8008f42:	f04f 0300 	mov.w	r3, #0
 8008f46:	4640      	mov	r0, r8
 8008f48:	4649      	mov	r1, r9
 8008f4a:	f7f7 f969 	bl	8000220 <__aeabi_uldivmod>
 8008f4e:	4602      	mov	r2, r0
 8008f50:	460b      	mov	r3, r1
 8008f52:	4613      	mov	r3, r2
 8008f54:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	0e1b      	lsrs	r3, r3, #24
 8008f5a:	b2db      	uxtb	r3, r3
 8008f5c:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	0c1b      	lsrs	r3, r3, #16
 8008f62:	b2db      	uxtb	r3, r3
 8008f64:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	0a1b      	lsrs	r3, r3, #8
 8008f6a:	b2db      	uxtb	r3, r3
 8008f6c:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	b2db      	uxtb	r3, r3
 8008f72:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8008f74:	f107 0308 	add.w	r3, r7, #8
 8008f78:	2204      	movs	r2, #4
 8008f7a:	4619      	mov	r1, r3
 8008f7c:	2086      	movs	r0, #134	; 0x86
 8008f7e:	f000 fbc7 	bl	8009710 <SUBGRF_WriteCommand>
}
 8008f82:	bf00      	nop
 8008f84:	3710      	adds	r7, #16
 8008f86:	46bd      	mov	sp, r7
 8008f88:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008f8c:	20000550 	.word	0x20000550
 8008f90:	01e84800 	.word	0x01e84800

08008f94 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b082      	sub	sp, #8
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 8008f9e:	79fa      	ldrb	r2, [r7, #7]
 8008fa0:	4b09      	ldr	r3, [pc, #36]	; (8008fc8 <SUBGRF_SetPacketType+0x34>)
 8008fa2:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8008fa4:	79fb      	ldrb	r3, [r7, #7]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d104      	bne.n	8008fb4 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8008faa:	2100      	movs	r1, #0
 8008fac:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8008fb0:	f000 fafe 	bl	80095b0 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8008fb4:	1dfb      	adds	r3, r7, #7
 8008fb6:	2201      	movs	r2, #1
 8008fb8:	4619      	mov	r1, r3
 8008fba:	208a      	movs	r0, #138	; 0x8a
 8008fbc:	f000 fba8 	bl	8009710 <SUBGRF_WriteCommand>
}
 8008fc0:	bf00      	nop
 8008fc2:	3708      	adds	r7, #8
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}
 8008fc8:	20000549 	.word	0x20000549

08008fcc <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 8008fcc:	b480      	push	{r7}
 8008fce:	af00      	add	r7, sp, #0
    return PacketType;
 8008fd0:	4b02      	ldr	r3, [pc, #8]	; (8008fdc <SUBGRF_GetPacketType+0x10>)
 8008fd2:	781b      	ldrb	r3, [r3, #0]
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bc80      	pop	{r7}
 8008fda:	4770      	bx	lr
 8008fdc:	20000549 	.word	0x20000549

08008fe0 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b084      	sub	sp, #16
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	71fb      	strb	r3, [r7, #7]
 8008fea:	460b      	mov	r3, r1
 8008fec:	71bb      	strb	r3, [r7, #6]
 8008fee:	4613      	mov	r3, r2
 8008ff0:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 8008ff2:	79fb      	ldrb	r3, [r7, #7]
 8008ff4:	2b01      	cmp	r3, #1
 8008ff6:	d149      	bne.n	800908c <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 8008ff8:	2000      	movs	r0, #0
 8008ffa:	f000 ff42 	bl	8009e82 <RBI_GetRFOMaxPowerConfig>
 8008ffe:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 8009000:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8009004:	68fa      	ldr	r2, [r7, #12]
 8009006:	429a      	cmp	r2, r3
 8009008:	da01      	bge.n	800900e <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	2b0e      	cmp	r3, #14
 8009012:	d10e      	bne.n	8009032 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8009014:	2301      	movs	r3, #1
 8009016:	2201      	movs	r2, #1
 8009018:	2100      	movs	r1, #0
 800901a:	2004      	movs	r0, #4
 800901c:	f7ff fef6 	bl	8008e0c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8009020:	79ba      	ldrb	r2, [r7, #6]
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	b2db      	uxtb	r3, r3
 8009026:	1ad3      	subs	r3, r2, r3
 8009028:	b2db      	uxtb	r3, r3
 800902a:	330e      	adds	r3, #14
 800902c:	b2db      	uxtb	r3, r3
 800902e:	71bb      	strb	r3, [r7, #6]
 8009030:	e01f      	b.n	8009072 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	2b0a      	cmp	r3, #10
 8009036:	d10e      	bne.n	8009056 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8009038:	2301      	movs	r3, #1
 800903a:	2201      	movs	r2, #1
 800903c:	2100      	movs	r1, #0
 800903e:	2001      	movs	r0, #1
 8009040:	f7ff fee4 	bl	8008e0c <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 8009044:	79ba      	ldrb	r2, [r7, #6]
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	b2db      	uxtb	r3, r3
 800904a:	1ad3      	subs	r3, r2, r3
 800904c:	b2db      	uxtb	r3, r3
 800904e:	330d      	adds	r3, #13
 8009050:	b2db      	uxtb	r3, r3
 8009052:	71bb      	strb	r3, [r7, #6]
 8009054:	e00d      	b.n	8009072 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 8009056:	2301      	movs	r3, #1
 8009058:	2201      	movs	r2, #1
 800905a:	2100      	movs	r1, #0
 800905c:	2007      	movs	r0, #7
 800905e:	f7ff fed5 	bl	8008e0c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8009062:	79ba      	ldrb	r2, [r7, #6]
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	b2db      	uxtb	r3, r3
 8009068:	1ad3      	subs	r3, r2, r3
 800906a:	b2db      	uxtb	r3, r3
 800906c:	330e      	adds	r3, #14
 800906e:	b2db      	uxtb	r3, r3
 8009070:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 8009072:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8009076:	f113 0f11 	cmn.w	r3, #17
 800907a:	da01      	bge.n	8009080 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 800907c:	23ef      	movs	r3, #239	; 0xef
 800907e:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8009080:	2118      	movs	r1, #24
 8009082:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8009086:	f000 fa93 	bl	80095b0 <SUBGRF_WriteRegister>
 800908a:	e067      	b.n	800915c <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 800908c:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8009090:	f000 faa2 	bl	80095d8 <SUBGRF_ReadRegister>
 8009094:	4603      	mov	r3, r0
 8009096:	f043 031e 	orr.w	r3, r3, #30
 800909a:	b2db      	uxtb	r3, r3
 800909c:	4619      	mov	r1, r3
 800909e:	f640 00d8 	movw	r0, #2264	; 0x8d8
 80090a2:	f000 fa85 	bl	80095b0 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 80090a6:	2001      	movs	r0, #1
 80090a8:	f000 feeb 	bl	8009e82 <RBI_GetRFOMaxPowerConfig>
 80090ac:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 80090ae:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80090b2:	68fa      	ldr	r2, [r7, #12]
 80090b4:	429a      	cmp	r2, r3
 80090b6:	da01      	bge.n	80090bc <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	2b14      	cmp	r3, #20
 80090c0:	d10e      	bne.n	80090e0 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 80090c2:	2301      	movs	r3, #1
 80090c4:	2200      	movs	r2, #0
 80090c6:	2105      	movs	r1, #5
 80090c8:	2003      	movs	r0, #3
 80090ca:	f7ff fe9f 	bl	8008e0c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80090ce:	79ba      	ldrb	r2, [r7, #6]
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	b2db      	uxtb	r3, r3
 80090d4:	1ad3      	subs	r3, r2, r3
 80090d6:	b2db      	uxtb	r3, r3
 80090d8:	3316      	adds	r3, #22
 80090da:	b2db      	uxtb	r3, r3
 80090dc:	71bb      	strb	r3, [r7, #6]
 80090de:	e031      	b.n	8009144 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	2b11      	cmp	r3, #17
 80090e4:	d10e      	bne.n	8009104 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 80090e6:	2301      	movs	r3, #1
 80090e8:	2200      	movs	r2, #0
 80090ea:	2103      	movs	r1, #3
 80090ec:	2002      	movs	r0, #2
 80090ee:	f7ff fe8d 	bl	8008e0c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80090f2:	79ba      	ldrb	r2, [r7, #6]
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	b2db      	uxtb	r3, r3
 80090f8:	1ad3      	subs	r3, r2, r3
 80090fa:	b2db      	uxtb	r3, r3
 80090fc:	3316      	adds	r3, #22
 80090fe:	b2db      	uxtb	r3, r3
 8009100:	71bb      	strb	r3, [r7, #6]
 8009102:	e01f      	b.n	8009144 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	2b0e      	cmp	r3, #14
 8009108:	d10e      	bne.n	8009128 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 800910a:	2301      	movs	r3, #1
 800910c:	2200      	movs	r2, #0
 800910e:	2102      	movs	r1, #2
 8009110:	2002      	movs	r0, #2
 8009112:	f7ff fe7b 	bl	8008e0c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8009116:	79ba      	ldrb	r2, [r7, #6]
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	b2db      	uxtb	r3, r3
 800911c:	1ad3      	subs	r3, r2, r3
 800911e:	b2db      	uxtb	r3, r3
 8009120:	330e      	adds	r3, #14
 8009122:	b2db      	uxtb	r3, r3
 8009124:	71bb      	strb	r3, [r7, #6]
 8009126:	e00d      	b.n	8009144 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8009128:	2301      	movs	r3, #1
 800912a:	2200      	movs	r2, #0
 800912c:	2107      	movs	r1, #7
 800912e:	2004      	movs	r0, #4
 8009130:	f7ff fe6c 	bl	8008e0c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8009134:	79ba      	ldrb	r2, [r7, #6]
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	b2db      	uxtb	r3, r3
 800913a:	1ad3      	subs	r3, r2, r3
 800913c:	b2db      	uxtb	r3, r3
 800913e:	3316      	adds	r3, #22
 8009140:	b2db      	uxtb	r3, r3
 8009142:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 8009144:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8009148:	f113 0f09 	cmn.w	r3, #9
 800914c:	da01      	bge.n	8009152 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 800914e:	23f7      	movs	r3, #247	; 0xf7
 8009150:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 8009152:	2138      	movs	r1, #56	; 0x38
 8009154:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8009158:	f000 fa2a 	bl	80095b0 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 800915c:	79bb      	ldrb	r3, [r7, #6]
 800915e:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 8009160:	797b      	ldrb	r3, [r7, #5]
 8009162:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8009164:	f107 0308 	add.w	r3, r7, #8
 8009168:	2202      	movs	r2, #2
 800916a:	4619      	mov	r1, r3
 800916c:	208e      	movs	r0, #142	; 0x8e
 800916e:	f000 facf 	bl	8009710 <SUBGRF_WriteCommand>
}
 8009172:	bf00      	nop
 8009174:	3710      	adds	r7, #16
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}
	...

0800917c <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 800917c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009180:	b086      	sub	sp, #24
 8009182:	af00      	add	r7, sp, #0
 8009184:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8009186:	2300      	movs	r3, #0
 8009188:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800918a:	4a61      	ldr	r2, [pc, #388]	; (8009310 <SUBGRF_SetModulationParams+0x194>)
 800918c:	f107 0308 	add.w	r3, r7, #8
 8009190:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009194:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	781a      	ldrb	r2, [r3, #0]
 800919c:	4b5d      	ldr	r3, [pc, #372]	; (8009314 <SUBGRF_SetModulationParams+0x198>)
 800919e:	781b      	ldrb	r3, [r3, #0]
 80091a0:	429a      	cmp	r2, r3
 80091a2:	d004      	beq.n	80091ae <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	781b      	ldrb	r3, [r3, #0]
 80091a8:	4618      	mov	r0, r3
 80091aa:	f7ff fef3 	bl	8008f94 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	781b      	ldrb	r3, [r3, #0]
 80091b2:	2b03      	cmp	r3, #3
 80091b4:	f200 80a5 	bhi.w	8009302 <SUBGRF_SetModulationParams+0x186>
 80091b8:	a201      	add	r2, pc, #4	; (adr r2, 80091c0 <SUBGRF_SetModulationParams+0x44>)
 80091ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091be:	bf00      	nop
 80091c0:	080091d1 	.word	0x080091d1
 80091c4:	08009291 	.word	0x08009291
 80091c8:	08009253 	.word	0x08009253
 80091cc:	080092bf 	.word	0x080092bf
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 80091d0:	2308      	movs	r3, #8
 80091d2:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	685b      	ldr	r3, [r3, #4]
 80091d8:	4a4f      	ldr	r2, [pc, #316]	; (8009318 <SUBGRF_SetModulationParams+0x19c>)
 80091da:	fbb2 f3f3 	udiv	r3, r2, r3
 80091de:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80091e0:	697b      	ldr	r3, [r7, #20]
 80091e2:	0c1b      	lsrs	r3, r3, #16
 80091e4:	b2db      	uxtb	r3, r3
 80091e6:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80091e8:	697b      	ldr	r3, [r7, #20]
 80091ea:	0a1b      	lsrs	r3, r3, #8
 80091ec:	b2db      	uxtb	r3, r3
 80091ee:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	b2db      	uxtb	r3, r3
 80091f4:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	7b1b      	ldrb	r3, [r3, #12]
 80091fa:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	7b5b      	ldrb	r3, [r3, #13]
 8009200:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	689b      	ldr	r3, [r3, #8]
 8009206:	2200      	movs	r2, #0
 8009208:	461c      	mov	r4, r3
 800920a:	4615      	mov	r5, r2
 800920c:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8009210:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8009214:	4a41      	ldr	r2, [pc, #260]	; (800931c <SUBGRF_SetModulationParams+0x1a0>)
 8009216:	f04f 0300 	mov.w	r3, #0
 800921a:	4640      	mov	r0, r8
 800921c:	4649      	mov	r1, r9
 800921e:	f7f6 ffff 	bl	8000220 <__aeabi_uldivmod>
 8009222:	4602      	mov	r2, r0
 8009224:	460b      	mov	r3, r1
 8009226:	4613      	mov	r3, r2
 8009228:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	0c1b      	lsrs	r3, r3, #16
 800922e:	b2db      	uxtb	r3, r3
 8009230:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	0a1b      	lsrs	r3, r3, #8
 8009236:	b2db      	uxtb	r3, r3
 8009238:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	b2db      	uxtb	r3, r3
 800923e:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8009240:	7cfb      	ldrb	r3, [r7, #19]
 8009242:	b29a      	uxth	r2, r3
 8009244:	f107 0308 	add.w	r3, r7, #8
 8009248:	4619      	mov	r1, r3
 800924a:	208b      	movs	r0, #139	; 0x8b
 800924c:	f000 fa60 	bl	8009710 <SUBGRF_WriteCommand>
        break;
 8009250:	e058      	b.n	8009304 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 8009252:	2304      	movs	r3, #4
 8009254:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	691b      	ldr	r3, [r3, #16]
 800925a:	4a2f      	ldr	r2, [pc, #188]	; (8009318 <SUBGRF_SetModulationParams+0x19c>)
 800925c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009260:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	0c1b      	lsrs	r3, r3, #16
 8009266:	b2db      	uxtb	r3, r3
 8009268:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800926a:	697b      	ldr	r3, [r7, #20]
 800926c:	0a1b      	lsrs	r3, r3, #8
 800926e:	b2db      	uxtb	r3, r3
 8009270:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	b2db      	uxtb	r3, r3
 8009276:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	7d1b      	ldrb	r3, [r3, #20]
 800927c:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800927e:	7cfb      	ldrb	r3, [r7, #19]
 8009280:	b29a      	uxth	r2, r3
 8009282:	f107 0308 	add.w	r3, r7, #8
 8009286:	4619      	mov	r1, r3
 8009288:	208b      	movs	r0, #139	; 0x8b
 800928a:	f000 fa41 	bl	8009710 <SUBGRF_WriteCommand>
        break;
 800928e:	e039      	b.n	8009304 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 8009290:	2304      	movs	r3, #4
 8009292:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	7e1b      	ldrb	r3, [r3, #24]
 8009298:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	7e5b      	ldrb	r3, [r3, #25]
 800929e:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	7e9b      	ldrb	r3, [r3, #26]
 80092a4:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	7edb      	ldrb	r3, [r3, #27]
 80092aa:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80092ac:	7cfb      	ldrb	r3, [r7, #19]
 80092ae:	b29a      	uxth	r2, r3
 80092b0:	f107 0308 	add.w	r3, r7, #8
 80092b4:	4619      	mov	r1, r3
 80092b6:	208b      	movs	r0, #139	; 0x8b
 80092b8:	f000 fa2a 	bl	8009710 <SUBGRF_WriteCommand>

        break;
 80092bc:	e022      	b.n	8009304 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 80092be:	2305      	movs	r3, #5
 80092c0:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	685b      	ldr	r3, [r3, #4]
 80092c6:	4a14      	ldr	r2, [pc, #80]	; (8009318 <SUBGRF_SetModulationParams+0x19c>)
 80092c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80092cc:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	0c1b      	lsrs	r3, r3, #16
 80092d2:	b2db      	uxtb	r3, r3
 80092d4:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	0a1b      	lsrs	r3, r3, #8
 80092da:	b2db      	uxtb	r3, r3
 80092dc:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	b2db      	uxtb	r3, r3
 80092e2:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	7b1b      	ldrb	r3, [r3, #12]
 80092e8:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	7b5b      	ldrb	r3, [r3, #13]
 80092ee:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80092f0:	7cfb      	ldrb	r3, [r7, #19]
 80092f2:	b29a      	uxth	r2, r3
 80092f4:	f107 0308 	add.w	r3, r7, #8
 80092f8:	4619      	mov	r1, r3
 80092fa:	208b      	movs	r0, #139	; 0x8b
 80092fc:	f000 fa08 	bl	8009710 <SUBGRF_WriteCommand>
        break;
 8009300:	e000      	b.n	8009304 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 8009302:	bf00      	nop
    }
}
 8009304:	bf00      	nop
 8009306:	3718      	adds	r7, #24
 8009308:	46bd      	mov	sp, r7
 800930a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800930e:	bf00      	nop
 8009310:	0800b158 	.word	0x0800b158
 8009314:	20000549 	.word	0x20000549
 8009318:	3d090000 	.word	0x3d090000
 800931c:	01e84800 	.word	0x01e84800

08009320 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b086      	sub	sp, #24
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8009328:	2300      	movs	r3, #0
 800932a:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800932c:	4a48      	ldr	r2, [pc, #288]	; (8009450 <SUBGRF_SetPacketParams+0x130>)
 800932e:	f107 030c 	add.w	r3, r7, #12
 8009332:	ca07      	ldmia	r2, {r0, r1, r2}
 8009334:	c303      	stmia	r3!, {r0, r1}
 8009336:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	781a      	ldrb	r2, [r3, #0]
 800933c:	4b45      	ldr	r3, [pc, #276]	; (8009454 <SUBGRF_SetPacketParams+0x134>)
 800933e:	781b      	ldrb	r3, [r3, #0]
 8009340:	429a      	cmp	r2, r3
 8009342:	d004      	beq.n	800934e <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	781b      	ldrb	r3, [r3, #0]
 8009348:	4618      	mov	r0, r3
 800934a:	f7ff fe23 	bl	8008f94 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	781b      	ldrb	r3, [r3, #0]
 8009352:	2b03      	cmp	r3, #3
 8009354:	d878      	bhi.n	8009448 <SUBGRF_SetPacketParams+0x128>
 8009356:	a201      	add	r2, pc, #4	; (adr r2, 800935c <SUBGRF_SetPacketParams+0x3c>)
 8009358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800935c:	0800936d 	.word	0x0800936d
 8009360:	080093fd 	.word	0x080093fd
 8009364:	080093f1 	.word	0x080093f1
 8009368:	0800936d 	.word	0x0800936d
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	7a5b      	ldrb	r3, [r3, #9]
 8009370:	2bf1      	cmp	r3, #241	; 0xf1
 8009372:	d10a      	bne.n	800938a <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8009374:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8009378:	f7ff faaa 	bl	80088d0 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 800937c:	f248 0005 	movw	r0, #32773	; 0x8005
 8009380:	f7ff fac6 	bl	8008910 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8009384:	2302      	movs	r3, #2
 8009386:	75bb      	strb	r3, [r7, #22]
 8009388:	e011      	b.n	80093ae <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	7a5b      	ldrb	r3, [r3, #9]
 800938e:	2bf2      	cmp	r3, #242	; 0xf2
 8009390:	d10a      	bne.n	80093a8 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8009392:	f641 500f 	movw	r0, #7439	; 0x1d0f
 8009396:	f7ff fa9b 	bl	80088d0 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 800939a:	f241 0021 	movw	r0, #4129	; 0x1021
 800939e:	f7ff fab7 	bl	8008910 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 80093a2:	2306      	movs	r3, #6
 80093a4:	75bb      	strb	r3, [r7, #22]
 80093a6:	e002      	b.n	80093ae <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	7a5b      	ldrb	r3, [r3, #9]
 80093ac:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 80093ae:	2309      	movs	r3, #9
 80093b0:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	885b      	ldrh	r3, [r3, #2]
 80093b6:	0a1b      	lsrs	r3, r3, #8
 80093b8:	b29b      	uxth	r3, r3
 80093ba:	b2db      	uxtb	r3, r3
 80093bc:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	885b      	ldrh	r3, [r3, #2]
 80093c2:	b2db      	uxtb	r3, r3
 80093c4:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	791b      	ldrb	r3, [r3, #4]
 80093ca:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	795b      	ldrb	r3, [r3, #5]
 80093d0:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	799b      	ldrb	r3, [r3, #6]
 80093d6:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	79db      	ldrb	r3, [r3, #7]
 80093dc:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	7a1b      	ldrb	r3, [r3, #8]
 80093e2:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 80093e4:	7dbb      	ldrb	r3, [r7, #22]
 80093e6:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	7a9b      	ldrb	r3, [r3, #10]
 80093ec:	753b      	strb	r3, [r7, #20]
        break;
 80093ee:	e022      	b.n	8009436 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 80093f0:	2301      	movs	r3, #1
 80093f2:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	7b1b      	ldrb	r3, [r3, #12]
 80093f8:	733b      	strb	r3, [r7, #12]
        break;
 80093fa:	e01c      	b.n	8009436 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 80093fc:	2306      	movs	r3, #6
 80093fe:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	89db      	ldrh	r3, [r3, #14]
 8009404:	0a1b      	lsrs	r3, r3, #8
 8009406:	b29b      	uxth	r3, r3
 8009408:	b2db      	uxtb	r3, r3
 800940a:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	89db      	ldrh	r3, [r3, #14]
 8009410:	b2db      	uxtb	r3, r3
 8009412:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	7c1a      	ldrb	r2, [r3, #16]
 8009418:	4b0f      	ldr	r3, [pc, #60]	; (8009458 <SUBGRF_SetPacketParams+0x138>)
 800941a:	4611      	mov	r1, r2
 800941c:	7019      	strb	r1, [r3, #0]
 800941e:	4613      	mov	r3, r2
 8009420:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	7c5b      	ldrb	r3, [r3, #17]
 8009426:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	7c9b      	ldrb	r3, [r3, #18]
 800942c:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	7cdb      	ldrb	r3, [r3, #19]
 8009432:	747b      	strb	r3, [r7, #17]
        break;
 8009434:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8009436:	7dfb      	ldrb	r3, [r7, #23]
 8009438:	b29a      	uxth	r2, r3
 800943a:	f107 030c 	add.w	r3, r7, #12
 800943e:	4619      	mov	r1, r3
 8009440:	208c      	movs	r0, #140	; 0x8c
 8009442:	f000 f965 	bl	8009710 <SUBGRF_WriteCommand>
 8009446:	e000      	b.n	800944a <SUBGRF_SetPacketParams+0x12a>
        return;
 8009448:	bf00      	nop
}
 800944a:	3718      	adds	r7, #24
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}
 8009450:	0800b160 	.word	0x0800b160
 8009454:	20000549 	.word	0x20000549
 8009458:	2000054a 	.word	0x2000054a

0800945c <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b084      	sub	sp, #16
 8009460:	af00      	add	r7, sp, #0
 8009462:	4603      	mov	r3, r0
 8009464:	460a      	mov	r2, r1
 8009466:	71fb      	strb	r3, [r7, #7]
 8009468:	4613      	mov	r3, r2
 800946a:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 800946c:	79fb      	ldrb	r3, [r7, #7]
 800946e:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8009470:	79bb      	ldrb	r3, [r7, #6]
 8009472:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8009474:	f107 030c 	add.w	r3, r7, #12
 8009478:	2202      	movs	r2, #2
 800947a:	4619      	mov	r1, r3
 800947c:	208f      	movs	r0, #143	; 0x8f
 800947e:	f000 f947 	bl	8009710 <SUBGRF_WriteCommand>
}
 8009482:	bf00      	nop
 8009484:	3710      	adds	r7, #16
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}

0800948a <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 800948a:	b580      	push	{r7, lr}
 800948c:	b082      	sub	sp, #8
 800948e:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 8009490:	2300      	movs	r3, #0
 8009492:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8009494:	1d3b      	adds	r3, r7, #4
 8009496:	2201      	movs	r2, #1
 8009498:	4619      	mov	r1, r3
 800949a:	2015      	movs	r0, #21
 800949c:	f000 f95a 	bl	8009754 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 80094a0:	793b      	ldrb	r3, [r7, #4]
 80094a2:	425b      	negs	r3, r3
 80094a4:	105b      	asrs	r3, r3, #1
 80094a6:	71fb      	strb	r3, [r7, #7]
    return rssi;
 80094a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	3708      	adds	r7, #8
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}

080094b4 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b084      	sub	sp, #16
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
 80094bc:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 80094be:	f107 030c 	add.w	r3, r7, #12
 80094c2:	2202      	movs	r2, #2
 80094c4:	4619      	mov	r1, r3
 80094c6:	2013      	movs	r0, #19
 80094c8:	f000 f944 	bl	8009754 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 80094cc:	f7ff fd7e 	bl	8008fcc <SUBGRF_GetPacketType>
 80094d0:	4603      	mov	r3, r0
 80094d2:	2b01      	cmp	r3, #1
 80094d4:	d10d      	bne.n	80094f2 <SUBGRF_GetRxBufferStatus+0x3e>
 80094d6:	4b0c      	ldr	r3, [pc, #48]	; (8009508 <SUBGRF_GetRxBufferStatus+0x54>)
 80094d8:	781b      	ldrb	r3, [r3, #0]
 80094da:	b2db      	uxtb	r3, r3
 80094dc:	2b01      	cmp	r3, #1
 80094de:	d108      	bne.n	80094f2 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 80094e0:	f240 7002 	movw	r0, #1794	; 0x702
 80094e4:	f000 f878 	bl	80095d8 <SUBGRF_ReadRegister>
 80094e8:	4603      	mov	r3, r0
 80094ea:	461a      	mov	r2, r3
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	701a      	strb	r2, [r3, #0]
 80094f0:	e002      	b.n	80094f8 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 80094f2:	7b3a      	ldrb	r2, [r7, #12]
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 80094f8:	7b7a      	ldrb	r2, [r7, #13]
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	701a      	strb	r2, [r3, #0]
}
 80094fe:	bf00      	nop
 8009500:	3710      	adds	r7, #16
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}
 8009506:	bf00      	nop
 8009508:	2000054a 	.word	0x2000054a

0800950c <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b084      	sub	sp, #16
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8009514:	f107 030c 	add.w	r3, r7, #12
 8009518:	2203      	movs	r2, #3
 800951a:	4619      	mov	r1, r3
 800951c:	2014      	movs	r0, #20
 800951e:	f000 f919 	bl	8009754 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 8009522:	f7ff fd53 	bl	8008fcc <SUBGRF_GetPacketType>
 8009526:	4603      	mov	r3, r0
 8009528:	461a      	mov	r2, r3
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	781b      	ldrb	r3, [r3, #0]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d002      	beq.n	800953c <SUBGRF_GetPacketStatus+0x30>
 8009536:	2b01      	cmp	r3, #1
 8009538:	d013      	beq.n	8009562 <SUBGRF_GetPacketStatus+0x56>
 800953a:	e02a      	b.n	8009592 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 800953c:	7b3a      	ldrb	r2, [r7, #12]
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8009542:	7b7b      	ldrb	r3, [r7, #13]
 8009544:	425b      	negs	r3, r3
 8009546:	105b      	asrs	r3, r3, #1
 8009548:	b25a      	sxtb	r2, r3
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800954e:	7bbb      	ldrb	r3, [r7, #14]
 8009550:	425b      	negs	r3, r3
 8009552:	105b      	asrs	r3, r3, #1
 8009554:	b25a      	sxtb	r2, r3
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2200      	movs	r2, #0
 800955e:	609a      	str	r2, [r3, #8]
            break;
 8009560:	e020      	b.n	80095a4 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8009562:	7b3b      	ldrb	r3, [r7, #12]
 8009564:	425b      	negs	r3, r3
 8009566:	105b      	asrs	r3, r3, #1
 8009568:	b25a      	sxtb	r2, r3
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800956e:	7b7b      	ldrb	r3, [r7, #13]
 8009570:	b25b      	sxtb	r3, r3
 8009572:	3302      	adds	r3, #2
 8009574:	109b      	asrs	r3, r3, #2
 8009576:	b25a      	sxtb	r2, r3
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800957c:	7bbb      	ldrb	r3, [r7, #14]
 800957e:	425b      	negs	r3, r3
 8009580:	105b      	asrs	r3, r3, #1
 8009582:	b25a      	sxtb	r2, r3
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8009588:	4b08      	ldr	r3, [pc, #32]	; (80095ac <SUBGRF_GetPacketStatus+0xa0>)
 800958a:	681a      	ldr	r2, [r3, #0]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	611a      	str	r2, [r3, #16]
            break;
 8009590:	e008      	b.n	80095a4 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8009592:	2214      	movs	r2, #20
 8009594:	2100      	movs	r1, #0
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f000 fca7 	bl	8009eea <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	220f      	movs	r2, #15
 80095a0:	701a      	strb	r2, [r3, #0]
            break;
 80095a2:	bf00      	nop
    }
}
 80095a4:	bf00      	nop
 80095a6:	3710      	adds	r7, #16
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}
 80095ac:	2000054c 	.word	0x2000054c

080095b0 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b082      	sub	sp, #8
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	4603      	mov	r3, r0
 80095b8:	460a      	mov	r2, r1
 80095ba:	80fb      	strh	r3, [r7, #6]
 80095bc:	4613      	mov	r3, r2
 80095be:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 80095c0:	1d7a      	adds	r2, r7, #5
 80095c2:	88f9      	ldrh	r1, [r7, #6]
 80095c4:	2301      	movs	r3, #1
 80095c6:	4803      	ldr	r0, [pc, #12]	; (80095d4 <SUBGRF_WriteRegister+0x24>)
 80095c8:	f7fa fd08 	bl	8003fdc <HAL_SUBGHZ_WriteRegisters>
}
 80095cc:	bf00      	nop
 80095ce:	3708      	adds	r7, #8
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}
 80095d4:	200001b0 	.word	0x200001b0

080095d8 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b084      	sub	sp, #16
 80095dc:	af00      	add	r7, sp, #0
 80095de:	4603      	mov	r3, r0
 80095e0:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 80095e2:	f107 020f 	add.w	r2, r7, #15
 80095e6:	88f9      	ldrh	r1, [r7, #6]
 80095e8:	2301      	movs	r3, #1
 80095ea:	4804      	ldr	r0, [pc, #16]	; (80095fc <SUBGRF_ReadRegister+0x24>)
 80095ec:	f7fa fd55 	bl	800409a <HAL_SUBGHZ_ReadRegisters>
    return data;
 80095f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3710      	adds	r7, #16
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}
 80095fa:	bf00      	nop
 80095fc:	200001b0 	.word	0x200001b0

08009600 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b086      	sub	sp, #24
 8009604:	af00      	add	r7, sp, #0
 8009606:	4603      	mov	r3, r0
 8009608:	6039      	str	r1, [r7, #0]
 800960a:	80fb      	strh	r3, [r7, #6]
 800960c:	4613      	mov	r3, r2
 800960e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009610:	f3ef 8310 	mrs	r3, PRIMASK
 8009614:	60fb      	str	r3, [r7, #12]
  return(result);
 8009616:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8009618:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800961a:	b672      	cpsid	i
}
 800961c:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800961e:	88bb      	ldrh	r3, [r7, #4]
 8009620:	88f9      	ldrh	r1, [r7, #6]
 8009622:	683a      	ldr	r2, [r7, #0]
 8009624:	4806      	ldr	r0, [pc, #24]	; (8009640 <SUBGRF_WriteRegisters+0x40>)
 8009626:	f7fa fcd9 	bl	8003fdc <HAL_SUBGHZ_WriteRegisters>
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800962e:	693b      	ldr	r3, [r7, #16]
 8009630:	f383 8810 	msr	PRIMASK, r3
}
 8009634:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8009636:	bf00      	nop
 8009638:	3718      	adds	r7, #24
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}
 800963e:	bf00      	nop
 8009640:	200001b0 	.word	0x200001b0

08009644 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b086      	sub	sp, #24
 8009648:	af00      	add	r7, sp, #0
 800964a:	4603      	mov	r3, r0
 800964c:	6039      	str	r1, [r7, #0]
 800964e:	80fb      	strh	r3, [r7, #6]
 8009650:	4613      	mov	r3, r2
 8009652:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009654:	f3ef 8310 	mrs	r3, PRIMASK
 8009658:	60fb      	str	r3, [r7, #12]
  return(result);
 800965a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800965c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800965e:	b672      	cpsid	i
}
 8009660:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8009662:	88bb      	ldrh	r3, [r7, #4]
 8009664:	88f9      	ldrh	r1, [r7, #6]
 8009666:	683a      	ldr	r2, [r7, #0]
 8009668:	4806      	ldr	r0, [pc, #24]	; (8009684 <SUBGRF_ReadRegisters+0x40>)
 800966a:	f7fa fd16 	bl	800409a <HAL_SUBGHZ_ReadRegisters>
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	f383 8810 	msr	PRIMASK, r3
}
 8009678:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800967a:	bf00      	nop
 800967c:	3718      	adds	r7, #24
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}
 8009682:	bf00      	nop
 8009684:	200001b0 	.word	0x200001b0

08009688 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b086      	sub	sp, #24
 800968c:	af00      	add	r7, sp, #0
 800968e:	4603      	mov	r3, r0
 8009690:	6039      	str	r1, [r7, #0]
 8009692:	71fb      	strb	r3, [r7, #7]
 8009694:	4613      	mov	r3, r2
 8009696:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009698:	f3ef 8310 	mrs	r3, PRIMASK
 800969c:	60fb      	str	r3, [r7, #12]
  return(result);
 800969e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80096a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80096a2:	b672      	cpsid	i
}
 80096a4:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 80096a6:	79bb      	ldrb	r3, [r7, #6]
 80096a8:	b29b      	uxth	r3, r3
 80096aa:	79f9      	ldrb	r1, [r7, #7]
 80096ac:	683a      	ldr	r2, [r7, #0]
 80096ae:	4806      	ldr	r0, [pc, #24]	; (80096c8 <SUBGRF_WriteBuffer+0x40>)
 80096b0:	f7fa fe07 	bl	80042c2 <HAL_SUBGHZ_WriteBuffer>
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096b8:	693b      	ldr	r3, [r7, #16]
 80096ba:	f383 8810 	msr	PRIMASK, r3
}
 80096be:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80096c0:	bf00      	nop
 80096c2:	3718      	adds	r7, #24
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}
 80096c8:	200001b0 	.word	0x200001b0

080096cc <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b086      	sub	sp, #24
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	4603      	mov	r3, r0
 80096d4:	6039      	str	r1, [r7, #0]
 80096d6:	71fb      	strb	r3, [r7, #7]
 80096d8:	4613      	mov	r3, r2
 80096da:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80096dc:	f3ef 8310 	mrs	r3, PRIMASK
 80096e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80096e2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80096e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80096e6:	b672      	cpsid	i
}
 80096e8:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 80096ea:	79bb      	ldrb	r3, [r7, #6]
 80096ec:	b29b      	uxth	r3, r3
 80096ee:	79f9      	ldrb	r1, [r7, #7]
 80096f0:	683a      	ldr	r2, [r7, #0]
 80096f2:	4806      	ldr	r0, [pc, #24]	; (800970c <SUBGRF_ReadBuffer+0x40>)
 80096f4:	f7fa fe38 	bl	8004368 <HAL_SUBGHZ_ReadBuffer>
 80096f8:	697b      	ldr	r3, [r7, #20]
 80096fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096fc:	693b      	ldr	r3, [r7, #16]
 80096fe:	f383 8810 	msr	PRIMASK, r3
}
 8009702:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8009704:	bf00      	nop
 8009706:	3718      	adds	r7, #24
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}
 800970c:	200001b0 	.word	0x200001b0

08009710 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b086      	sub	sp, #24
 8009714:	af00      	add	r7, sp, #0
 8009716:	4603      	mov	r3, r0
 8009718:	6039      	str	r1, [r7, #0]
 800971a:	71fb      	strb	r3, [r7, #7]
 800971c:	4613      	mov	r3, r2
 800971e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009720:	f3ef 8310 	mrs	r3, PRIMASK
 8009724:	60fb      	str	r3, [r7, #12]
  return(result);
 8009726:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8009728:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800972a:	b672      	cpsid	i
}
 800972c:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800972e:	88bb      	ldrh	r3, [r7, #4]
 8009730:	79f9      	ldrb	r1, [r7, #7]
 8009732:	683a      	ldr	r2, [r7, #0]
 8009734:	4806      	ldr	r0, [pc, #24]	; (8009750 <SUBGRF_WriteCommand+0x40>)
 8009736:	f7fa fd11 	bl	800415c <HAL_SUBGHZ_ExecSetCmd>
 800973a:	697b      	ldr	r3, [r7, #20]
 800973c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	f383 8810 	msr	PRIMASK, r3
}
 8009744:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8009746:	bf00      	nop
 8009748:	3718      	adds	r7, #24
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}
 800974e:	bf00      	nop
 8009750:	200001b0 	.word	0x200001b0

08009754 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b086      	sub	sp, #24
 8009758:	af00      	add	r7, sp, #0
 800975a:	4603      	mov	r3, r0
 800975c:	6039      	str	r1, [r7, #0]
 800975e:	71fb      	strb	r3, [r7, #7]
 8009760:	4613      	mov	r3, r2
 8009762:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009764:	f3ef 8310 	mrs	r3, PRIMASK
 8009768:	60fb      	str	r3, [r7, #12]
  return(result);
 800976a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800976c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800976e:	b672      	cpsid	i
}
 8009770:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8009772:	88bb      	ldrh	r3, [r7, #4]
 8009774:	79f9      	ldrb	r1, [r7, #7]
 8009776:	683a      	ldr	r2, [r7, #0]
 8009778:	4806      	ldr	r0, [pc, #24]	; (8009794 <SUBGRF_ReadCommand+0x40>)
 800977a:	f7fa fd4e 	bl	800421a <HAL_SUBGHZ_ExecGetCmd>
 800977e:	697b      	ldr	r3, [r7, #20]
 8009780:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009782:	693b      	ldr	r3, [r7, #16]
 8009784:	f383 8810 	msr	PRIMASK, r3
}
 8009788:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800978a:	bf00      	nop
 800978c:	3718      	adds	r7, #24
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}
 8009792:	bf00      	nop
 8009794:	200001b0 	.word	0x200001b0

08009798 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b084      	sub	sp, #16
 800979c:	af00      	add	r7, sp, #0
 800979e:	4603      	mov	r3, r0
 80097a0:	460a      	mov	r2, r1
 80097a2:	71fb      	strb	r3, [r7, #7]
 80097a4:	4613      	mov	r3, r2
 80097a6:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 80097a8:	2301      	movs	r3, #1
 80097aa:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 80097ac:	79bb      	ldrb	r3, [r7, #6]
 80097ae:	2b01      	cmp	r3, #1
 80097b0:	d10d      	bne.n	80097ce <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 80097b2:	79fb      	ldrb	r3, [r7, #7]
 80097b4:	2b01      	cmp	r3, #1
 80097b6:	d104      	bne.n	80097c2 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 80097b8:	2302      	movs	r3, #2
 80097ba:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 80097bc:	2004      	movs	r0, #4
 80097be:	f000 f8ef 	bl	80099a0 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 80097c2:	79fb      	ldrb	r3, [r7, #7]
 80097c4:	2b02      	cmp	r3, #2
 80097c6:	d107      	bne.n	80097d8 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 80097c8:	2303      	movs	r3, #3
 80097ca:	73fb      	strb	r3, [r7, #15]
 80097cc:	e004      	b.n	80097d8 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 80097ce:	79bb      	ldrb	r3, [r7, #6]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d101      	bne.n	80097d8 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 80097d4:	2301      	movs	r3, #1
 80097d6:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 80097d8:	7bfb      	ldrb	r3, [r7, #15]
 80097da:	4618      	mov	r0, r3
 80097dc:	f000 fad2 	bl	8009d84 <RBI_ConfigRFSwitch>
}
 80097e0:	bf00      	nop
 80097e2:	3710      	adds	r7, #16
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}

080097e8 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b084      	sub	sp, #16
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	4603      	mov	r3, r0
 80097f0:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 80097f2:	2301      	movs	r3, #1
 80097f4:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 80097f6:	f000 fb23 	bl	8009e40 <RBI_GetTxConfig>
 80097fa:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	2b02      	cmp	r3, #2
 8009800:	d016      	beq.n	8009830 <SUBGRF_SetRfTxPower+0x48>
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	2b02      	cmp	r3, #2
 8009806:	dc16      	bgt.n	8009836 <SUBGRF_SetRfTxPower+0x4e>
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d003      	beq.n	8009816 <SUBGRF_SetRfTxPower+0x2e>
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	2b01      	cmp	r3, #1
 8009812:	d00a      	beq.n	800982a <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 8009814:	e00f      	b.n	8009836 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 8009816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800981a:	2b0f      	cmp	r3, #15
 800981c:	dd02      	ble.n	8009824 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 800981e:	2302      	movs	r3, #2
 8009820:	73fb      	strb	r3, [r7, #15]
            break;
 8009822:	e009      	b.n	8009838 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 8009824:	2301      	movs	r3, #1
 8009826:	73fb      	strb	r3, [r7, #15]
            break;
 8009828:	e006      	b.n	8009838 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 800982a:	2301      	movs	r3, #1
 800982c:	73fb      	strb	r3, [r7, #15]
            break;
 800982e:	e003      	b.n	8009838 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 8009830:	2302      	movs	r3, #2
 8009832:	73fb      	strb	r3, [r7, #15]
            break;
 8009834:	e000      	b.n	8009838 <SUBGRF_SetRfTxPower+0x50>
            break;
 8009836:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8009838:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800983c:	7bfb      	ldrb	r3, [r7, #15]
 800983e:	2202      	movs	r2, #2
 8009840:	4618      	mov	r0, r3
 8009842:	f7ff fbcd 	bl	8008fe0 <SUBGRF_SetTxParams>

    return paSelect;
 8009846:	7bfb      	ldrb	r3, [r7, #15]
}
 8009848:	4618      	mov	r0, r3
 800984a:	3710      	adds	r7, #16
 800984c:	46bd      	mov	sp, r7
 800984e:	bd80      	pop	{r7, pc}

08009850 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 8009850:	b480      	push	{r7}
 8009852:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 8009854:	2301      	movs	r3, #1
}
 8009856:	4618      	mov	r0, r3
 8009858:	46bd      	mov	sp, r7
 800985a:	bc80      	pop	{r7}
 800985c:	4770      	bx	lr
	...

08009860 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b082      	sub	sp, #8
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8009868:	4b03      	ldr	r3, [pc, #12]	; (8009878 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	2001      	movs	r0, #1
 800986e:	4798      	blx	r3
}
 8009870:	bf00      	nop
 8009872:	3708      	adds	r7, #8
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}
 8009878:	20000554 	.word	0x20000554

0800987c <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b082      	sub	sp, #8
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8009884:	4b03      	ldr	r3, [pc, #12]	; (8009894 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	2002      	movs	r0, #2
 800988a:	4798      	blx	r3
}
 800988c:	bf00      	nop
 800988e:	3708      	adds	r7, #8
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}
 8009894:	20000554 	.word	0x20000554

08009898 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b082      	sub	sp, #8
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 80098a0:	4b03      	ldr	r3, [pc, #12]	; (80098b0 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	2040      	movs	r0, #64	; 0x40
 80098a6:	4798      	blx	r3
}
 80098a8:	bf00      	nop
 80098aa:	3708      	adds	r7, #8
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}
 80098b0:	20000554 	.word	0x20000554

080098b4 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b082      	sub	sp, #8
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
 80098bc:	460b      	mov	r3, r1
 80098be:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 80098c0:	78fb      	ldrb	r3, [r7, #3]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d002      	beq.n	80098cc <HAL_SUBGHZ_CADStatusCallback+0x18>
 80098c6:	2b01      	cmp	r3, #1
 80098c8:	d005      	beq.n	80098d6 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 80098ca:	e00a      	b.n	80098e2 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 80098cc:	4b07      	ldr	r3, [pc, #28]	; (80098ec <HAL_SUBGHZ_CADStatusCallback+0x38>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	2080      	movs	r0, #128	; 0x80
 80098d2:	4798      	blx	r3
            break;
 80098d4:	e005      	b.n	80098e2 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 80098d6:	4b05      	ldr	r3, [pc, #20]	; (80098ec <HAL_SUBGHZ_CADStatusCallback+0x38>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f44f 7080 	mov.w	r0, #256	; 0x100
 80098de:	4798      	blx	r3
            break;
 80098e0:	bf00      	nop
    }
}
 80098e2:	bf00      	nop
 80098e4:	3708      	adds	r7, #8
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bd80      	pop	{r7, pc}
 80098ea:	bf00      	nop
 80098ec:	20000554 	.word	0x20000554

080098f0 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b082      	sub	sp, #8
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 80098f8:	4b04      	ldr	r3, [pc, #16]	; (800990c <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009900:	4798      	blx	r3
}
 8009902:	bf00      	nop
 8009904:	3708      	adds	r7, #8
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}
 800990a:	bf00      	nop
 800990c:	20000554 	.word	0x20000554

08009910 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b082      	sub	sp, #8
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8009918:	4b03      	ldr	r3, [pc, #12]	; (8009928 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	2020      	movs	r0, #32
 800991e:	4798      	blx	r3
}
 8009920:	bf00      	nop
 8009922:	3708      	adds	r7, #8
 8009924:	46bd      	mov	sp, r7
 8009926:	bd80      	pop	{r7, pc}
 8009928:	20000554 	.word	0x20000554

0800992c <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b082      	sub	sp, #8
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8009934:	4b03      	ldr	r3, [pc, #12]	; (8009944 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	2004      	movs	r0, #4
 800993a:	4798      	blx	r3
}
 800993c:	bf00      	nop
 800993e:	3708      	adds	r7, #8
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}
 8009944:	20000554 	.word	0x20000554

08009948 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b082      	sub	sp, #8
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8009950:	4b03      	ldr	r3, [pc, #12]	; (8009960 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	2008      	movs	r0, #8
 8009956:	4798      	blx	r3
}
 8009958:	bf00      	nop
 800995a:	3708      	adds	r7, #8
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}
 8009960:	20000554 	.word	0x20000554

08009964 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b082      	sub	sp, #8
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 800996c:	4b03      	ldr	r3, [pc, #12]	; (800997c <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	2010      	movs	r0, #16
 8009972:	4798      	blx	r3
}
 8009974:	bf00      	nop
 8009976:	3708      	adds	r7, #8
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}
 800997c:	20000554 	.word	0x20000554

08009980 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b082      	sub	sp, #8
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 8009988:	4b04      	ldr	r3, [pc, #16]	; (800999c <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8009990:	4798      	blx	r3
}
 8009992:	bf00      	nop
 8009994:	3708      	adds	r7, #8
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}
 800999a:	bf00      	nop
 800999c:	20000554 	.word	0x20000554

080099a0 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b084      	sub	sp, #16
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	4603      	mov	r3, r0
 80099a8:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 80099aa:	f000 fa5f 	bl	8009e6c <RBI_IsDCDC>
 80099ae:	4603      	mov	r3, r0
 80099b0:	2b01      	cmp	r3, #1
 80099b2:	d112      	bne.n	80099da <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 80099b4:	f640 1023 	movw	r0, #2339	; 0x923
 80099b8:	f7ff fe0e 	bl	80095d8 <SUBGRF_ReadRegister>
 80099bc:	4603      	mov	r3, r0
 80099be:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 80099c0:	7bfb      	ldrb	r3, [r7, #15]
 80099c2:	f023 0306 	bic.w	r3, r3, #6
 80099c6:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 80099c8:	7bfa      	ldrb	r2, [r7, #15]
 80099ca:	79fb      	ldrb	r3, [r7, #7]
 80099cc:	4313      	orrs	r3, r2
 80099ce:	b2db      	uxtb	r3, r3
 80099d0:	4619      	mov	r1, r3
 80099d2:	f640 1023 	movw	r0, #2339	; 0x923
 80099d6:	f7ff fdeb 	bl	80095b0 <SUBGRF_WriteRegister>
  }
}
 80099da:	bf00      	nop
 80099dc:	3710      	adds	r7, #16
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}
	...

080099e4 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 80099e4:	b480      	push	{r7}
 80099e6:	b085      	sub	sp, #20
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d101      	bne.n	80099f6 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 80099f2:	231f      	movs	r3, #31
 80099f4:	e016      	b.n	8009a24 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 80099f6:	2300      	movs	r3, #0
 80099f8:	73fb      	strb	r3, [r7, #15]
 80099fa:	e00f      	b.n	8009a1c <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 80099fc:	7bfb      	ldrb	r3, [r7, #15]
 80099fe:	4a0c      	ldr	r2, [pc, #48]	; (8009a30 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8009a00:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009a04:	687a      	ldr	r2, [r7, #4]
 8009a06:	429a      	cmp	r2, r3
 8009a08:	d205      	bcs.n	8009a16 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 8009a0a:	7bfb      	ldrb	r3, [r7, #15]
 8009a0c:	4a08      	ldr	r2, [pc, #32]	; (8009a30 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8009a0e:	00db      	lsls	r3, r3, #3
 8009a10:	4413      	add	r3, r2
 8009a12:	791b      	ldrb	r3, [r3, #4]
 8009a14:	e006      	b.n	8009a24 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8009a16:	7bfb      	ldrb	r3, [r7, #15]
 8009a18:	3301      	adds	r3, #1
 8009a1a:	73fb      	strb	r3, [r7, #15]
 8009a1c:	7bfb      	ldrb	r3, [r7, #15]
 8009a1e:	2b15      	cmp	r3, #21
 8009a20:	d9ec      	bls.n	80099fc <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 8009a22:	e7fe      	b.n	8009a22 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	3714      	adds	r7, #20
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bc80      	pop	{r7}
 8009a2c:	4770      	bx	lr
 8009a2e:	bf00      	nop
 8009a30:	0800b2f0 	.word	0x0800b2f0

08009a34 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b08a      	sub	sp, #40	; 0x28
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
 8009a3c:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 8009a3e:	4b35      	ldr	r3, [pc, #212]	; (8009b14 <SUBGRF_GetCFO+0xe0>)
 8009a40:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 8009a42:	f640 0007 	movw	r0, #2055	; 0x807
 8009a46:	f7ff fdc7 	bl	80095d8 <SUBGRF_ReadRegister>
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 8009a4e:	7ffb      	ldrb	r3, [r7, #31]
 8009a50:	08db      	lsrs	r3, r3, #3
 8009a52:	b2db      	uxtb	r3, r3
 8009a54:	f003 0303 	and.w	r3, r3, #3
 8009a58:	3328      	adds	r3, #40	; 0x28
 8009a5a:	443b      	add	r3, r7
 8009a5c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8009a60:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 8009a62:	7ffb      	ldrb	r3, [r7, #31]
 8009a64:	f003 0307 	and.w	r3, r3, #7
 8009a68:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 8009a6a:	7fba      	ldrb	r2, [r7, #30]
 8009a6c:	7f7b      	ldrb	r3, [r7, #29]
 8009a6e:	3301      	adds	r3, #1
 8009a70:	fa02 f303 	lsl.w	r3, r2, r3
 8009a74:	461a      	mov	r2, r3
 8009a76:	4b28      	ldr	r3, [pc, #160]	; (8009b18 <SUBGRF_GetCFO+0xe4>)
 8009a78:	fbb3 f3f2 	udiv	r3, r3, r2
 8009a7c:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 8009a7e:	69ba      	ldr	r2, [r7, #24]
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a86:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 8009a88:	2301      	movs	r3, #1
 8009a8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8009a8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a92:	697a      	ldr	r2, [r7, #20]
 8009a94:	fb02 f303 	mul.w	r3, r2, r3
 8009a98:	2b07      	cmp	r3, #7
 8009a9a:	d802      	bhi.n	8009aa2 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 8009a9c:	2302      	movs	r3, #2
 8009a9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 8009aa2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009aa6:	697a      	ldr	r2, [r7, #20]
 8009aa8:	fb02 f303 	mul.w	r3, r2, r3
 8009aac:	2b03      	cmp	r3, #3
 8009aae:	d802      	bhi.n	8009ab6 <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 8009ab0:	2304      	movs	r3, #4
 8009ab2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8009ab6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009aba:	69bb      	ldr	r3, [r7, #24]
 8009abc:	fb02 f303 	mul.w	r3, r2, r3
 8009ac0:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 8009ac2:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 8009ac6:	f7ff fd87 	bl	80095d8 <SUBGRF_ReadRegister>
 8009aca:	4603      	mov	r3, r0
 8009acc:	021b      	lsls	r3, r3, #8
 8009ace:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009ad2:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 8009ad4:	f240 60b1 	movw	r0, #1713	; 0x6b1
 8009ad8:	f7ff fd7e 	bl	80095d8 <SUBGRF_ReadRegister>
 8009adc:	4603      	mov	r3, r0
 8009ade:	461a      	mov	r2, r3
 8009ae0:	6a3b      	ldr	r3, [r7, #32]
 8009ae2:	4313      	orrs	r3, r2
 8009ae4:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8009ae6:	6a3b      	ldr	r3, [r7, #32]
 8009ae8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d005      	beq.n	8009afc <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 8009af0:	6a3b      	ldr	r3, [r7, #32]
 8009af2:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8009af6:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8009afa:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 8009afc:	693b      	ldr	r3, [r7, #16]
 8009afe:	095b      	lsrs	r3, r3, #5
 8009b00:	6a3a      	ldr	r2, [r7, #32]
 8009b02:	fb02 f303 	mul.w	r3, r2, r3
 8009b06:	11da      	asrs	r2, r3, #7
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	601a      	str	r2, [r3, #0]
}
 8009b0c:	bf00      	nop
 8009b0e:	3728      	adds	r7, #40	; 0x28
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}
 8009b14:	0c0a0804 	.word	0x0c0a0804
 8009b18:	01e84800 	.word	0x01e84800

08009b1c <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	b087      	sub	sp, #28
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	4603      	mov	r3, r0
 8009b24:	60b9      	str	r1, [r7, #8]
 8009b26:	607a      	str	r2, [r7, #4]
 8009b28:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 8009b2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b32:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 8009b34:	697b      	ldr	r3, [r7, #20]
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	371c      	adds	r7, #28
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bc80      	pop	{r7}
 8009b3e:	4770      	bx	lr

08009b40 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 8009b40:	b480      	push	{r7}
 8009b42:	b087      	sub	sp, #28
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	4603      	mov	r3, r0
 8009b48:	60b9      	str	r1, [r7, #8]
 8009b4a:	607a      	str	r2, [r7, #4]
 8009b4c:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 8009b52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b56:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 8009b58:	697b      	ldr	r3, [r7, #20]
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	371c      	adds	r7, #28
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bc80      	pop	{r7}
 8009b62:	4770      	bx	lr

08009b64 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 8009b64:	b480      	push	{r7}
 8009b66:	b085      	sub	sp, #20
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	60f8      	str	r0, [r7, #12]
 8009b6c:	60b9      	str	r1, [r7, #8]
 8009b6e:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 8009b70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 8009b74:	4618      	mov	r0, r3
 8009b76:	3714      	adds	r7, #20
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bc80      	pop	{r7}
 8009b7c:	4770      	bx	lr

08009b7e <RFW_DeInit>:

void RFW_DeInit( void )
{
 8009b7e:	b480      	push	{r7}
 8009b80:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 8009b82:	bf00      	nop
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bc80      	pop	{r7}
 8009b88:	4770      	bx	lr

08009b8a <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 8009b8a:	b480      	push	{r7}
 8009b8c:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 8009b8e:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bc80      	pop	{r7}
 8009b96:	4770      	bx	lr

08009b98 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 8009b98:	b480      	push	{r7}
 8009b9a:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 8009b9c:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bc80      	pop	{r7}
 8009ba4:	4770      	bx	lr

08009ba6 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 8009ba6:	b480      	push	{r7}
 8009ba8:	b083      	sub	sp, #12
 8009baa:	af00      	add	r7, sp, #0
 8009bac:	4603      	mov	r3, r0
 8009bae:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 8009bb0:	bf00      	nop
 8009bb2:	370c      	adds	r7, #12
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bc80      	pop	{r7}
 8009bb8:	4770      	bx	lr

08009bba <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 8009bba:	b480      	push	{r7}
 8009bbc:	b087      	sub	sp, #28
 8009bbe:	af00      	add	r7, sp, #0
 8009bc0:	60f8      	str	r0, [r7, #12]
 8009bc2:	460b      	mov	r3, r1
 8009bc4:	607a      	str	r2, [r7, #4]
 8009bc6:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 8009bc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009bcc:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 8009bce:	697b      	ldr	r3, [r7, #20]
}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	371c      	adds	r7, #28
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bc80      	pop	{r7}
 8009bd8:	4770      	bx	lr

08009bda <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 8009bda:	b480      	push	{r7}
 8009bdc:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 8009bde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 8009be2:	4618      	mov	r0, r3
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bc80      	pop	{r7}
 8009be8:	4770      	bx	lr

08009bea <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 8009bea:	b480      	push	{r7}
 8009bec:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 8009bee:	bf00      	nop
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bc80      	pop	{r7}
 8009bf4:	4770      	bx	lr

08009bf6 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 8009bf6:	b480      	push	{r7}
 8009bf8:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 8009bfa:	bf00      	nop
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bc80      	pop	{r7}
 8009c00:	4770      	bx	lr

08009c02 <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 8009c02:	b480      	push	{r7}
 8009c04:	b083      	sub	sp, #12
 8009c06:	af00      	add	r7, sp, #0
 8009c08:	4603      	mov	r3, r0
 8009c0a:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 8009c0c:	bf00      	nop
 8009c0e:	370c      	adds	r7, #12
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bc80      	pop	{r7}
 8009c14:	4770      	bx	lr

08009c16 <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 8009c16:	b580      	push	{r7, lr}
 8009c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 8009c1a:	f7f7 fc0e 	bl	800143a <SystemApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1_1 */
  SubghzApp_Init();
 8009c1e:	f000 f809 	bl	8009c34 <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 8009c22:	bf00      	nop
 8009c24:	bd80      	pop	{r7, pc}

08009c26 <MX_SubGHz_Phy_Process>:

void MX_SubGHz_Phy_Process(void)
{
 8009c26:	b480      	push	{r7}
 8009c28:	af00      	add	r7, sp, #0

  /* USER CODE END MX_SubGHz_Phy_Process_1 */
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_OS */

  /* USER CODE END MX_SubGHz_Phy_Process_OS */
}
 8009c2a:	bf00      	nop
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bc80      	pop	{r7}
 8009c30:	4770      	bx	lr
	...

08009c34 <SubghzApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SubghzApp_Init(void)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SubghzApp_Init_1 */

  /* USER CODE END SubghzApp_Init_1 */

  /* Radio initialization */
  RadioEvents.TxDone = OnTxDone;
 8009c38:	4b0a      	ldr	r3, [pc, #40]	; (8009c64 <SubghzApp_Init+0x30>)
 8009c3a:	4a0b      	ldr	r2, [pc, #44]	; (8009c68 <SubghzApp_Init+0x34>)
 8009c3c:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 8009c3e:	4b09      	ldr	r3, [pc, #36]	; (8009c64 <SubghzApp_Init+0x30>)
 8009c40:	4a0a      	ldr	r2, [pc, #40]	; (8009c6c <SubghzApp_Init+0x38>)
 8009c42:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 8009c44:	4b07      	ldr	r3, [pc, #28]	; (8009c64 <SubghzApp_Init+0x30>)
 8009c46:	4a0a      	ldr	r2, [pc, #40]	; (8009c70 <SubghzApp_Init+0x3c>)
 8009c48:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 8009c4a:	4b06      	ldr	r3, [pc, #24]	; (8009c64 <SubghzApp_Init+0x30>)
 8009c4c:	4a09      	ldr	r2, [pc, #36]	; (8009c74 <SubghzApp_Init+0x40>)
 8009c4e:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 8009c50:	4b04      	ldr	r3, [pc, #16]	; (8009c64 <SubghzApp_Init+0x30>)
 8009c52:	4a09      	ldr	r2, [pc, #36]	; (8009c78 <SubghzApp_Init+0x44>)
 8009c54:	611a      	str	r2, [r3, #16]

  Radio.Init(&RadioEvents);
 8009c56:	4b09      	ldr	r3, [pc, #36]	; (8009c7c <SubghzApp_Init+0x48>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	4802      	ldr	r0, [pc, #8]	; (8009c64 <SubghzApp_Init+0x30>)
 8009c5c:	4798      	blx	r3

  /* USER CODE BEGIN SubghzApp_Init_2 */

  /* USER CODE END SubghzApp_Init_2 */
}
 8009c5e:	bf00      	nop
 8009c60:	bd80      	pop	{r7, pc}
 8009c62:	bf00      	nop
 8009c64:	20000558 	.word	0x20000558
 8009c68:	08009c81 	.word	0x08009c81
 8009c6c:	08009c8d 	.word	0x08009c8d
 8009c70:	08009cb1 	.word	0x08009cb1
 8009c74:	08009cbd 	.word	0x08009cbd
 8009c78:	08009cc9 	.word	0x08009cc9
 8009c7c:	0800b260 	.word	0x0800b260

08009c80 <OnTxDone>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void OnTxDone(void)
{
 8009c80:	b480      	push	{r7}
 8009c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone */
  /* USER CODE END OnTxDone */
}
 8009c84:	bf00      	nop
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bc80      	pop	{r7}
 8009c8a:	4770      	bx	lr

08009c8c <OnRxDone>:

static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b085      	sub	sp, #20
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	60f8      	str	r0, [r7, #12]
 8009c94:	4608      	mov	r0, r1
 8009c96:	4611      	mov	r1, r2
 8009c98:	461a      	mov	r2, r3
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	817b      	strh	r3, [r7, #10]
 8009c9e:	460b      	mov	r3, r1
 8009ca0:	813b      	strh	r3, [r7, #8]
 8009ca2:	4613      	mov	r3, r2
 8009ca4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnRxDone */
  /* USER CODE END OnRxDone */
}
 8009ca6:	bf00      	nop
 8009ca8:	3714      	adds	r7, #20
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bc80      	pop	{r7}
 8009cae:	4770      	bx	lr

08009cb0 <OnTxTimeout>:

static void OnTxTimeout(void)
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout */
  /* USER CODE END OnTxTimeout */
}
 8009cb4:	bf00      	nop
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bc80      	pop	{r7}
 8009cba:	4770      	bx	lr

08009cbc <OnRxTimeout>:

static void OnRxTimeout(void)
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxTimeout */
  /* USER CODE END OnRxTimeout */
}
 8009cc0:	bf00      	nop
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bc80      	pop	{r7}
 8009cc6:	4770      	bx	lr

08009cc8 <OnRxError>:

static void OnRxError(void)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxError */
  /* USER CODE END OnRxError */
}
 8009ccc:	bf00      	nop
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bc80      	pop	{r7}
 8009cd2:	4770      	bx	lr

08009cd4 <LL_AHB2_GRP1_EnableClock>:
{
 8009cd4:	b480      	push	{r7}
 8009cd6:	b085      	sub	sp, #20
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8009cdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009ce0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009ce2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	4313      	orrs	r3, r2
 8009cea:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8009cec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009cf0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	4013      	ands	r3, r2
 8009cf6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
}
 8009cfa:	bf00      	nop
 8009cfc:	3714      	adds	r7, #20
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bc80      	pop	{r7}
 8009d02:	4770      	bx	lr

08009d04 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b086      	sub	sp, #24
 8009d08:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
#else
  /* 2/ Or implement RBI_Init here */
  int32_t retcode = 0;
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN RBI_Init_2 */
	GPIO_InitTypeDef gpio_init_structure = { 0 };
 8009d0e:	463b      	mov	r3, r7
 8009d10:	2200      	movs	r2, #0
 8009d12:	601a      	str	r2, [r3, #0]
 8009d14:	605a      	str	r2, [r3, #4]
 8009d16:	609a      	str	r2, [r3, #8]
 8009d18:	60da      	str	r2, [r3, #12]
 8009d1a:	611a      	str	r2, [r3, #16]

	/* Enable the Radio Switch Clock */
	RF_SW_CTRL3_GPIO_CLK_ENABLE();
 8009d1c:	2004      	movs	r0, #4
 8009d1e:	f7ff ffd9 	bl	8009cd4 <LL_AHB2_GRP1_EnableClock>

	/* Configure the Radio Switch pin */
	gpio_init_structure.Pin = RF_SW_CTRL1_PIN;
 8009d22:	2310      	movs	r3, #16
 8009d24:	603b      	str	r3, [r7, #0]
	gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8009d26:	2301      	movs	r3, #1
 8009d28:	607b      	str	r3, [r7, #4]
	gpio_init_structure.Pull = GPIO_NOPULL;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	60bb      	str	r3, [r7, #8]
	gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009d2e:	2303      	movs	r3, #3
 8009d30:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8009d32:	463b      	mov	r3, r7
 8009d34:	4619      	mov	r1, r3
 8009d36:	4812      	ldr	r0, [pc, #72]	; (8009d80 <RBI_Init+0x7c>)
 8009d38:	f7f8 fbac 	bl	8002494 <HAL_GPIO_Init>

	gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8009d3c:	2320      	movs	r3, #32
 8009d3e:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8009d40:	463b      	mov	r3, r7
 8009d42:	4619      	mov	r1, r3
 8009d44:	480e      	ldr	r0, [pc, #56]	; (8009d80 <RBI_Init+0x7c>)
 8009d46:	f7f8 fba5 	bl	8002494 <HAL_GPIO_Init>

	gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 8009d4a:	2308      	movs	r3, #8
 8009d4c:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 8009d4e:	463b      	mov	r3, r7
 8009d50:	4619      	mov	r1, r3
 8009d52:	480b      	ldr	r0, [pc, #44]	; (8009d80 <RBI_Init+0x7c>)
 8009d54:	f7f8 fb9e 	bl	8002494 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8009d58:	2200      	movs	r2, #0
 8009d5a:	2120      	movs	r1, #32
 8009d5c:	4808      	ldr	r0, [pc, #32]	; (8009d80 <RBI_Init+0x7c>)
 8009d5e:	f7f8 fcf9 	bl	8002754 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8009d62:	2200      	movs	r2, #0
 8009d64:	2110      	movs	r1, #16
 8009d66:	4806      	ldr	r0, [pc, #24]	; (8009d80 <RBI_Init+0x7c>)
 8009d68:	f7f8 fcf4 	bl	8002754 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	2108      	movs	r1, #8
 8009d70:	4803      	ldr	r0, [pc, #12]	; (8009d80 <RBI_Init+0x7c>)
 8009d72:	f7f8 fcef 	bl	8002754 <HAL_GPIO_WritePin>
  /* USER CODE END RBI_Init_2 */
  return retcode;
 8009d76:	697b      	ldr	r3, [r7, #20]
#endif  /* USE_BSP_DRIVER  */
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	3718      	adds	r7, #24
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd80      	pop	{r7, pc}
 8009d80:	48000800 	.word	0x48000800

08009d84 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b084      	sub	sp, #16
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
#else
  /* 2/ Or implement RBI_ConfigRFSwitch here */
  int32_t retcode = 0;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
	switch (Config) {
 8009d92:	79fb      	ldrb	r3, [r7, #7]
 8009d94:	2b03      	cmp	r3, #3
 8009d96:	d84b      	bhi.n	8009e30 <RBI_ConfigRFSwitch+0xac>
 8009d98:	a201      	add	r2, pc, #4	; (adr r2, 8009da0 <RBI_ConfigRFSwitch+0x1c>)
 8009d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d9e:	bf00      	nop
 8009da0:	08009db1 	.word	0x08009db1
 8009da4:	08009dd1 	.word	0x08009dd1
 8009da8:	08009df1 	.word	0x08009df1
 8009dac:	08009e11 	.word	0x08009e11
	case RADIO_SWITCH_OFF: {
		/* Turn off switch */
		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN,
 8009db0:	2200      	movs	r2, #0
 8009db2:	2108      	movs	r1, #8
 8009db4:	4821      	ldr	r0, [pc, #132]	; (8009e3c <RBI_ConfigRFSwitch+0xb8>)
 8009db6:	f7f8 fccd 	bl	8002754 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN,
 8009dba:	2200      	movs	r2, #0
 8009dbc:	2110      	movs	r1, #16
 8009dbe:	481f      	ldr	r0, [pc, #124]	; (8009e3c <RBI_ConfigRFSwitch+0xb8>)
 8009dc0:	f7f8 fcc8 	bl	8002754 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN,
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	2120      	movs	r1, #32
 8009dc8:	481c      	ldr	r0, [pc, #112]	; (8009e3c <RBI_ConfigRFSwitch+0xb8>)
 8009dca:	f7f8 fcc3 	bl	8002754 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		break;
 8009dce:	e030      	b.n	8009e32 <RBI_ConfigRFSwitch+0xae>
	}
	case RADIO_SWITCH_RX: {
		/*Turns On in Rx Mode the RF Switch */
		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8009dd0:	2201      	movs	r2, #1
 8009dd2:	2108      	movs	r1, #8
 8009dd4:	4819      	ldr	r0, [pc, #100]	; (8009e3c <RBI_ConfigRFSwitch+0xb8>)
 8009dd6:	f7f8 fcbd 	bl	8002754 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET);
 8009dda:	2201      	movs	r2, #1
 8009ddc:	2110      	movs	r1, #16
 8009dde:	4817      	ldr	r0, [pc, #92]	; (8009e3c <RBI_ConfigRFSwitch+0xb8>)
 8009de0:	f7f8 fcb8 	bl	8002754 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN,
 8009de4:	2200      	movs	r2, #0
 8009de6:	2120      	movs	r1, #32
 8009de8:	4814      	ldr	r0, [pc, #80]	; (8009e3c <RBI_ConfigRFSwitch+0xb8>)
 8009dea:	f7f8 fcb3 	bl	8002754 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		break;
 8009dee:	e020      	b.n	8009e32 <RBI_ConfigRFSwitch+0xae>
	}
	case RADIO_SWITCH_RFO_LP: {
		/*Turns On in Tx Low Power the RF Switch */
		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8009df0:	2201      	movs	r2, #1
 8009df2:	2108      	movs	r1, #8
 8009df4:	4811      	ldr	r0, [pc, #68]	; (8009e3c <RBI_ConfigRFSwitch+0xb8>)
 8009df6:	f7f8 fcad 	bl	8002754 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET);
 8009dfa:	2201      	movs	r2, #1
 8009dfc:	2110      	movs	r1, #16
 8009dfe:	480f      	ldr	r0, [pc, #60]	; (8009e3c <RBI_ConfigRFSwitch+0xb8>)
 8009e00:	f7f8 fca8 	bl	8002754 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 8009e04:	2201      	movs	r2, #1
 8009e06:	2120      	movs	r1, #32
 8009e08:	480c      	ldr	r0, [pc, #48]	; (8009e3c <RBI_ConfigRFSwitch+0xb8>)
 8009e0a:	f7f8 fca3 	bl	8002754 <HAL_GPIO_WritePin>
		break;
 8009e0e:	e010      	b.n	8009e32 <RBI_ConfigRFSwitch+0xae>
	}
	case RADIO_SWITCH_RFO_HP: {
		/*Turns On in Tx High Power the RF Switch */
		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8009e10:	2201      	movs	r2, #1
 8009e12:	2108      	movs	r1, #8
 8009e14:	4809      	ldr	r0, [pc, #36]	; (8009e3c <RBI_ConfigRFSwitch+0xb8>)
 8009e16:	f7f8 fc9d 	bl	8002754 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN,
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	2110      	movs	r1, #16
 8009e1e:	4807      	ldr	r0, [pc, #28]	; (8009e3c <RBI_ConfigRFSwitch+0xb8>)
 8009e20:	f7f8 fc98 	bl	8002754 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 8009e24:	2201      	movs	r2, #1
 8009e26:	2120      	movs	r1, #32
 8009e28:	4804      	ldr	r0, [pc, #16]	; (8009e3c <RBI_ConfigRFSwitch+0xb8>)
 8009e2a:	f7f8 fc93 	bl	8002754 <HAL_GPIO_WritePin>
		break;
 8009e2e:	e000      	b.n	8009e32 <RBI_ConfigRFSwitch+0xae>
	}
	default:
		break;
 8009e30:	bf00      	nop
	}
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
 8009e32:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER */
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	3710      	adds	r7, #16
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}
 8009e3c:	48000800 	.word	0x48000800

08009e40 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8009e40:	b480      	push	{r7}
 8009e42:	b083      	sub	sp, #12
 8009e44:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
#else
  /* 2/ Or implement RBI_GetTxConfig here */
  int32_t retcode = RBI_CONF_RFO;
 8009e46:	2300      	movs	r3, #0
 8009e48:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
	return RADIO_CONF_RFO_LP_HP;
 8009e4a:	2300      	movs	r3, #0
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	370c      	adds	r7, #12
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bc80      	pop	{r7}
 8009e54:	4770      	bx	lr

08009e56 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8009e56:	b480      	push	{r7}
 8009e58:	b083      	sub	sp, #12
 8009e5a:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
#else
  /* 2/ Or implement RBI_IsTCXO here */
  int32_t retcode = IS_TCXO_SUPPORTED;
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsTCXO_2 */
	return IS_TCXO_SUPPORTED;
 8009e60:	2301      	movs	r3, #1
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8009e62:	4618      	mov	r0, r3
 8009e64:	370c      	adds	r7, #12
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bc80      	pop	{r7}
 8009e6a:	4770      	bx	lr

08009e6c <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8009e6c:	b480      	push	{r7}
 8009e6e:	b083      	sub	sp, #12
 8009e70:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
#else
  /* 2/ Or implement RBI_IsDCDC here */
  int32_t retcode = IS_DCDC_SUPPORTED;
 8009e72:	2301      	movs	r3, #1
 8009e74:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsDCDC_2 */
	return IS_DCDC_SUPPORTED;
 8009e76:	2301      	movs	r3, #1
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8009e78:	4618      	mov	r0, r3
 8009e7a:	370c      	adds	r7, #12
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bc80      	pop	{r7}
 8009e80:	4770      	bx	lr

08009e82 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 8009e82:	b480      	push	{r7}
 8009e84:	b085      	sub	sp, #20
 8009e86:	af00      	add	r7, sp, #0
 8009e88:	4603      	mov	r3, r0
 8009e8a:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
#else
  /* 2/ Or implement RBI_RBI_GetRFOMaxPowerConfig here */
  int32_t ret = 0;
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_GetRFOMaxPowerConfig_2 */
// #warning user to provide its board code or to call his board driver functions
	if (Config == RBI_RFO_LP_MAXPOWER) {
 8009e90:	79fb      	ldrb	r3, [r7, #7]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d102      	bne.n	8009e9c <RBI_GetRFOMaxPowerConfig+0x1a>
		ret = 15; /*dBm*/
 8009e96:	230f      	movs	r3, #15
 8009e98:	60fb      	str	r3, [r7, #12]
 8009e9a:	e001      	b.n	8009ea0 <RBI_GetRFOMaxPowerConfig+0x1e>
	} else {
		ret = 22; /*dBm*/
 8009e9c:	2316      	movs	r3, #22
 8009e9e:	60fb      	str	r3, [r7, #12]
	}
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER  */
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	3714      	adds	r7, #20
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bc80      	pop	{r7}
 8009eaa:	4770      	bx	lr

08009eac <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 8009eac:	b480      	push	{r7}
 8009eae:	b087      	sub	sp, #28
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	60f8      	str	r0, [r7, #12]
 8009eb4:	60b9      	str	r1, [r7, #8]
 8009eb6:	4613      	mov	r3, r2
 8009eb8:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	613b      	str	r3, [r7, #16]

  while( size-- )
 8009ec2:	e007      	b.n	8009ed4 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 8009ec4:	693a      	ldr	r2, [r7, #16]
 8009ec6:	1c53      	adds	r3, r2, #1
 8009ec8:	613b      	str	r3, [r7, #16]
 8009eca:	697b      	ldr	r3, [r7, #20]
 8009ecc:	1c59      	adds	r1, r3, #1
 8009ece:	6179      	str	r1, [r7, #20]
 8009ed0:	7812      	ldrb	r2, [r2, #0]
 8009ed2:	701a      	strb	r2, [r3, #0]
  while( size-- )
 8009ed4:	88fb      	ldrh	r3, [r7, #6]
 8009ed6:	1e5a      	subs	r2, r3, #1
 8009ed8:	80fa      	strh	r2, [r7, #6]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d1f2      	bne.n	8009ec4 <UTIL_MEM_cpy_8+0x18>
    }
}
 8009ede:	bf00      	nop
 8009ee0:	bf00      	nop
 8009ee2:	371c      	adds	r7, #28
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bc80      	pop	{r7}
 8009ee8:	4770      	bx	lr

08009eea <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 8009eea:	b480      	push	{r7}
 8009eec:	b085      	sub	sp, #20
 8009eee:	af00      	add	r7, sp, #0
 8009ef0:	6078      	str	r0, [r7, #4]
 8009ef2:	460b      	mov	r3, r1
 8009ef4:	70fb      	strb	r3, [r7, #3]
 8009ef6:	4613      	mov	r3, r2
 8009ef8:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	60fb      	str	r3, [r7, #12]
  while( size-- )
 8009efe:	e004      	b.n	8009f0a <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	1c5a      	adds	r2, r3, #1
 8009f04:	60fa      	str	r2, [r7, #12]
 8009f06:	78fa      	ldrb	r2, [r7, #3]
 8009f08:	701a      	strb	r2, [r3, #0]
  while( size-- )
 8009f0a:	883b      	ldrh	r3, [r7, #0]
 8009f0c:	1e5a      	subs	r2, r3, #1
 8009f0e:	803a      	strh	r2, [r7, #0]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d1f5      	bne.n	8009f00 <UTIL_MEM_set_8+0x16>
  }
}
 8009f14:	bf00      	nop
 8009f16:	bf00      	nop
 8009f18:	3714      	adds	r7, #20
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bc80      	pop	{r7}
 8009f1e:	4770      	bx	lr

08009f20 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b084      	sub	sp, #16
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	60f8      	str	r0, [r7, #12]
 8009f28:	60b9      	str	r1, [r7, #8]
 8009f2a:	603b      	str	r3, [r7, #0]
 8009f2c:	4613      	mov	r3, r2
 8009f2e:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d023      	beq.n	8009f7e <UTIL_TIMER_Create+0x5e>
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d020      	beq.n	8009f7e <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8009f42:	4b11      	ldr	r3, [pc, #68]	; (8009f88 <UTIL_TIMER_Create+0x68>)
 8009f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f46:	68b8      	ldr	r0, [r7, #8]
 8009f48:	4798      	blx	r3
 8009f4a:	4602      	mov	r2, r0
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	2200      	movs	r2, #0
 8009f54:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	2200      	movs	r2, #0
 8009f5a:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	2200      	movs	r2, #0
 8009f60:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	683a      	ldr	r2, [r7, #0]
 8009f66:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	69ba      	ldr	r2, [r7, #24]
 8009f6c:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	79fa      	ldrb	r2, [r7, #7]
 8009f72:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	2200      	movs	r2, #0
 8009f78:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	e000      	b.n	8009f80 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 8009f7e:	2301      	movs	r3, #1
  }
}
 8009f80:	4618      	mov	r0, r3
 8009f82:	3710      	adds	r7, #16
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bd80      	pop	{r7, pc}
 8009f88:	0800b20c 	.word	0x0800b20c

08009f8c <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b08a      	sub	sp, #40	; 0x28
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8009f94:	2300      	movs	r3, #0
 8009f96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d056      	beq.n	800a04e <UTIL_TIMER_Start+0xc2>
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	f000 f929 	bl	800a1f8 <TimerExists>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	f083 0301 	eor.w	r3, r3, #1
 8009fac:	b2db      	uxtb	r3, r3
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d04d      	beq.n	800a04e <UTIL_TIMER_Start+0xc2>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	7a5b      	ldrb	r3, [r3, #9]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d149      	bne.n	800a04e <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009fba:	f3ef 8310 	mrs	r3, PRIMASK
 8009fbe:	613b      	str	r3, [r7, #16]
  return(result);
 8009fc0:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 8009fc2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8009fc4:	b672      	cpsid	i
}
 8009fc6:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	685b      	ldr	r3, [r3, #4]
 8009fcc:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 8009fce:	4b24      	ldr	r3, [pc, #144]	; (800a060 <UTIL_TIMER_Start+0xd4>)
 8009fd0:	6a1b      	ldr	r3, [r3, #32]
 8009fd2:	4798      	blx	r3
 8009fd4:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 8009fd6:	6a3a      	ldr	r2, [r7, #32]
 8009fd8:	69bb      	ldr	r3, [r7, #24]
 8009fda:	429a      	cmp	r2, r3
 8009fdc:	d201      	bcs.n	8009fe2 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 8009fde:	69bb      	ldr	r3, [r7, #24]
 8009fe0:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6a3a      	ldr	r2, [r7, #32]
 8009fe6:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2200      	movs	r2, #0
 8009fec:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2201      	movs	r2, #1
 8009ff2:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 8009ffa:	4b1a      	ldr	r3, [pc, #104]	; (800a064 <UTIL_TIMER_Start+0xd8>)
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d106      	bne.n	800a010 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 800a002:	4b17      	ldr	r3, [pc, #92]	; (800a060 <UTIL_TIMER_Start+0xd4>)
 800a004:	691b      	ldr	r3, [r3, #16]
 800a006:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f000 f96b 	bl	800a2e4 <TimerInsertNewHeadTimer>
 800a00e:	e017      	b.n	800a040 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800a010:	4b13      	ldr	r3, [pc, #76]	; (800a060 <UTIL_TIMER_Start+0xd4>)
 800a012:	699b      	ldr	r3, [r3, #24]
 800a014:	4798      	blx	r3
 800a016:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681a      	ldr	r2, [r3, #0]
 800a01c:	697b      	ldr	r3, [r7, #20]
 800a01e:	441a      	add	r2, r3
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681a      	ldr	r2, [r3, #0]
 800a028:	4b0e      	ldr	r3, [pc, #56]	; (800a064 <UTIL_TIMER_Start+0xd8>)
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	429a      	cmp	r2, r3
 800a030:	d203      	bcs.n	800a03a <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f000 f956 	bl	800a2e4 <TimerInsertNewHeadTimer>
 800a038:	e002      	b.n	800a040 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f000 f922 	bl	800a284 <TimerInsertTimer>
 800a040:	69fb      	ldr	r3, [r7, #28]
 800a042:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	f383 8810 	msr	PRIMASK, r3
}
 800a04a:	bf00      	nop
  {
 800a04c:	e002      	b.n	800a054 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 800a04e:	2301      	movs	r3, #1
 800a050:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 800a054:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a058:	4618      	mov	r0, r3
 800a05a:	3728      	adds	r7, #40	; 0x28
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}
 800a060:	0800b20c 	.word	0x0800b20c
 800a064:	20000574 	.word	0x20000574

0800a068 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b088      	sub	sp, #32
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800a070:	2300      	movs	r3, #0
 800a072:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d05b      	beq.n	800a132 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a07a:	f3ef 8310 	mrs	r3, PRIMASK
 800a07e:	60fb      	str	r3, [r7, #12]
  return(result);
 800a080:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800a082:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800a084:	b672      	cpsid	i
}
 800a086:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800a088:	4b2d      	ldr	r3, [pc, #180]	; (800a140 <UTIL_TIMER_Stop+0xd8>)
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 800a08e:	4b2c      	ldr	r3, [pc, #176]	; (800a140 <UTIL_TIMER_Stop+0xd8>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2201      	movs	r2, #1
 800a098:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 800a09a:	4b29      	ldr	r3, [pc, #164]	; (800a140 <UTIL_TIMER_Stop+0xd8>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d041      	beq.n	800a126 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800a0a8:	4b25      	ldr	r3, [pc, #148]	; (800a140 <UTIL_TIMER_Stop+0xd8>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	687a      	ldr	r2, [r7, #4]
 800a0ae:	429a      	cmp	r2, r3
 800a0b0:	d134      	bne.n	800a11c <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 800a0b2:	4b23      	ldr	r3, [pc, #140]	; (800a140 <UTIL_TIMER_Stop+0xd8>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 800a0ba:	4b21      	ldr	r3, [pc, #132]	; (800a140 <UTIL_TIMER_Stop+0xd8>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	695b      	ldr	r3, [r3, #20]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d00a      	beq.n	800a0da <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 800a0c4:	4b1e      	ldr	r3, [pc, #120]	; (800a140 <UTIL_TIMER_Stop+0xd8>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	695b      	ldr	r3, [r3, #20]
 800a0ca:	4a1d      	ldr	r2, [pc, #116]	; (800a140 <UTIL_TIMER_Stop+0xd8>)
 800a0cc:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 800a0ce:	4b1c      	ldr	r3, [pc, #112]	; (800a140 <UTIL_TIMER_Stop+0xd8>)
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f000 f8ac 	bl	800a230 <TimerSetTimeout>
 800a0d8:	e023      	b.n	800a122 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 800a0da:	4b1a      	ldr	r3, [pc, #104]	; (800a144 <UTIL_TIMER_Stop+0xdc>)
 800a0dc:	68db      	ldr	r3, [r3, #12]
 800a0de:	4798      	blx	r3
            TimerListHead = NULL;
 800a0e0:	4b17      	ldr	r3, [pc, #92]	; (800a140 <UTIL_TIMER_Stop+0xd8>)
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	601a      	str	r2, [r3, #0]
 800a0e6:	e01c      	b.n	800a122 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 800a0e8:	697a      	ldr	r2, [r7, #20]
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	429a      	cmp	r2, r3
 800a0ee:	d110      	bne.n	800a112 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 800a0f0:	697b      	ldr	r3, [r7, #20]
 800a0f2:	695b      	ldr	r3, [r3, #20]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d006      	beq.n	800a106 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 800a0f8:	697b      	ldr	r3, [r7, #20]
 800a0fa:	695b      	ldr	r3, [r3, #20]
 800a0fc:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800a0fe:	69bb      	ldr	r3, [r7, #24]
 800a100:	697a      	ldr	r2, [r7, #20]
 800a102:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 800a104:	e00d      	b.n	800a122 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 800a106:	2300      	movs	r3, #0
 800a108:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800a10a:	69bb      	ldr	r3, [r7, #24]
 800a10c:	697a      	ldr	r2, [r7, #20]
 800a10e:	615a      	str	r2, [r3, #20]
            break;
 800a110:	e007      	b.n	800a122 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 800a112:	697b      	ldr	r3, [r7, #20]
 800a114:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 800a116:	697b      	ldr	r3, [r7, #20]
 800a118:	695b      	ldr	r3, [r3, #20]
 800a11a:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 800a11c:	697b      	ldr	r3, [r7, #20]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d1e2      	bne.n	800a0e8 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 800a122:	2300      	movs	r3, #0
 800a124:	77fb      	strb	r3, [r7, #31]
 800a126:	693b      	ldr	r3, [r7, #16]
 800a128:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a12a:	68bb      	ldr	r3, [r7, #8]
 800a12c:	f383 8810 	msr	PRIMASK, r3
}
 800a130:	e001      	b.n	800a136 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 800a132:	2301      	movs	r3, #1
 800a134:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 800a136:	7ffb      	ldrb	r3, [r7, #31]
}
 800a138:	4618      	mov	r0, r3
 800a13a:	3720      	adds	r7, #32
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd80      	pop	{r7, pc}
 800a140:	20000574 	.word	0x20000574
 800a144:	0800b20c 	.word	0x0800b20c

0800a148 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b084      	sub	sp, #16
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
 800a150:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800a152:	2300      	movs	r3, #0
 800a154:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d102      	bne.n	800a162 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 800a15c:	2301      	movs	r3, #1
 800a15e:	73fb      	strb	r3, [r7, #15]
 800a160:	e014      	b.n	800a18c <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800a162:	4b0d      	ldr	r3, [pc, #52]	; (800a198 <UTIL_TIMER_SetPeriod+0x50>)
 800a164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a166:	6838      	ldr	r0, [r7, #0]
 800a168:	4798      	blx	r3
 800a16a:	4602      	mov	r2, r0
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	f000 f841 	bl	800a1f8 <TimerExists>
 800a176:	4603      	mov	r3, r0
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d007      	beq.n	800a18c <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f7ff ff73 	bl	800a068 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f7ff ff02 	bl	8009f8c <UTIL_TIMER_Start>
 800a188:	4603      	mov	r3, r0
 800a18a:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 800a18c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a18e:	4618      	mov	r0, r3
 800a190:	3710      	adds	r7, #16
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}
 800a196:	bf00      	nop
 800a198:	0800b20c 	.word	0x0800b20c

0800a19c <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b082      	sub	sp, #8
 800a1a0:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800a1a2:	4b06      	ldr	r3, [pc, #24]	; (800a1bc <UTIL_TIMER_GetCurrentTime+0x20>)
 800a1a4:	69db      	ldr	r3, [r3, #28]
 800a1a6:	4798      	blx	r3
 800a1a8:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 800a1aa:	4b04      	ldr	r3, [pc, #16]	; (800a1bc <UTIL_TIMER_GetCurrentTime+0x20>)
 800a1ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	4798      	blx	r3
 800a1b2:	4603      	mov	r3, r0
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	3708      	adds	r7, #8
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bd80      	pop	{r7, pc}
 800a1bc:	0800b20c 	.word	0x0800b20c

0800a1c0 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b084      	sub	sp, #16
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800a1c8:	4b0a      	ldr	r3, [pc, #40]	; (800a1f4 <UTIL_TIMER_GetElapsedTime+0x34>)
 800a1ca:	69db      	ldr	r3, [r3, #28]
 800a1cc:	4798      	blx	r3
 800a1ce:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800a1d0:	4b08      	ldr	r3, [pc, #32]	; (800a1f4 <UTIL_TIMER_GetElapsedTime+0x34>)
 800a1d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	4798      	blx	r3
 800a1d8:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800a1da:	4b06      	ldr	r3, [pc, #24]	; (800a1f4 <UTIL_TIMER_GetElapsedTime+0x34>)
 800a1dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1de:	68f9      	ldr	r1, [r7, #12]
 800a1e0:	68ba      	ldr	r2, [r7, #8]
 800a1e2:	1a8a      	subs	r2, r1, r2
 800a1e4:	4610      	mov	r0, r2
 800a1e6:	4798      	blx	r3
 800a1e8:	4603      	mov	r3, r0
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3710      	adds	r7, #16
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}
 800a1f2:	bf00      	nop
 800a1f4:	0800b20c 	.word	0x0800b20c

0800a1f8 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b085      	sub	sp, #20
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800a200:	4b0a      	ldr	r3, [pc, #40]	; (800a22c <TimerExists+0x34>)
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 800a206:	e008      	b.n	800a21a <TimerExists+0x22>
  {
    if( cur == TimerObject )
 800a208:	68fa      	ldr	r2, [r7, #12]
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	429a      	cmp	r2, r3
 800a20e:	d101      	bne.n	800a214 <TimerExists+0x1c>
    {
      return true;
 800a210:	2301      	movs	r3, #1
 800a212:	e006      	b.n	800a222 <TimerExists+0x2a>
    }
    cur = cur->Next;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	695b      	ldr	r3, [r3, #20]
 800a218:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d1f3      	bne.n	800a208 <TimerExists+0x10>
  }
  return false;
 800a220:	2300      	movs	r3, #0
}
 800a222:	4618      	mov	r0, r3
 800a224:	3714      	adds	r7, #20
 800a226:	46bd      	mov	sp, r7
 800a228:	bc80      	pop	{r7}
 800a22a:	4770      	bx	lr
 800a22c:	20000574 	.word	0x20000574

0800a230 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800a230:	b590      	push	{r4, r7, lr}
 800a232:	b085      	sub	sp, #20
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800a238:	4b11      	ldr	r3, [pc, #68]	; (800a280 <TimerSetTimeout+0x50>)
 800a23a:	6a1b      	ldr	r3, [r3, #32]
 800a23c:	4798      	blx	r3
 800a23e:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2201      	movs	r2, #1
 800a244:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681c      	ldr	r4, [r3, #0]
 800a24a:	4b0d      	ldr	r3, [pc, #52]	; (800a280 <TimerSetTimeout+0x50>)
 800a24c:	699b      	ldr	r3, [r3, #24]
 800a24e:	4798      	blx	r3
 800a250:	4602      	mov	r2, r0
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	4413      	add	r3, r2
 800a256:	429c      	cmp	r4, r3
 800a258:	d207      	bcs.n	800a26a <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800a25a:	4b09      	ldr	r3, [pc, #36]	; (800a280 <TimerSetTimeout+0x50>)
 800a25c:	699b      	ldr	r3, [r3, #24]
 800a25e:	4798      	blx	r3
 800a260:	4602      	mov	r2, r0
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	441a      	add	r2, r3
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800a26a:	4b05      	ldr	r3, [pc, #20]	; (800a280 <TimerSetTimeout+0x50>)
 800a26c:	689b      	ldr	r3, [r3, #8]
 800a26e:	687a      	ldr	r2, [r7, #4]
 800a270:	6812      	ldr	r2, [r2, #0]
 800a272:	4610      	mov	r0, r2
 800a274:	4798      	blx	r3
}
 800a276:	bf00      	nop
 800a278:	3714      	adds	r7, #20
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd90      	pop	{r4, r7, pc}
 800a27e:	bf00      	nop
 800a280:	0800b20c 	.word	0x0800b20c

0800a284 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 800a284:	b480      	push	{r7}
 800a286:	b085      	sub	sp, #20
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800a28c:	4b14      	ldr	r3, [pc, #80]	; (800a2e0 <TimerInsertTimer+0x5c>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800a292:	4b13      	ldr	r3, [pc, #76]	; (800a2e0 <TimerInsertTimer+0x5c>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	695b      	ldr	r3, [r3, #20]
 800a298:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 800a29a:	e012      	b.n	800a2c2 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681a      	ldr	r2, [r3, #0]
 800a2a0:	68bb      	ldr	r3, [r7, #8]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	429a      	cmp	r2, r3
 800a2a6:	d905      	bls.n	800a2b4 <TimerInsertTimer+0x30>
    {
        cur = next;
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	695b      	ldr	r3, [r3, #20]
 800a2b0:	60bb      	str	r3, [r7, #8]
 800a2b2:	e006      	b.n	800a2c2 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	687a      	ldr	r2, [r7, #4]
 800a2b8:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	68ba      	ldr	r2, [r7, #8]
 800a2be:	615a      	str	r2, [r3, #20]
        return;
 800a2c0:	e009      	b.n	800a2d6 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	695b      	ldr	r3, [r3, #20]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d1e8      	bne.n	800a29c <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	687a      	ldr	r2, [r7, #4]
 800a2ce:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	615a      	str	r2, [r3, #20]
}
 800a2d6:	3714      	adds	r7, #20
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bc80      	pop	{r7}
 800a2dc:	4770      	bx	lr
 800a2de:	bf00      	nop
 800a2e0:	20000574 	.word	0x20000574

0800a2e4 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b084      	sub	sp, #16
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800a2ec:	4b0b      	ldr	r3, [pc, #44]	; (800a31c <TimerInsertNewHeadTimer+0x38>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d002      	beq.n	800a2fe <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	68fa      	ldr	r2, [r7, #12]
 800a302:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 800a304:	4a05      	ldr	r2, [pc, #20]	; (800a31c <TimerInsertNewHeadTimer+0x38>)
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800a30a:	4b04      	ldr	r3, [pc, #16]	; (800a31c <TimerInsertNewHeadTimer+0x38>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	4618      	mov	r0, r3
 800a310:	f7ff ff8e 	bl	800a230 <TimerSetTimeout>
}
 800a314:	bf00      	nop
 800a316:	3710      	adds	r7, #16
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}
 800a31c:	20000574 	.word	0x20000574

0800a320 <_vsniprintf_r>:
 800a320:	b530      	push	{r4, r5, lr}
 800a322:	4614      	mov	r4, r2
 800a324:	2c00      	cmp	r4, #0
 800a326:	b09b      	sub	sp, #108	; 0x6c
 800a328:	4605      	mov	r5, r0
 800a32a:	461a      	mov	r2, r3
 800a32c:	da05      	bge.n	800a33a <_vsniprintf_r+0x1a>
 800a32e:	238b      	movs	r3, #139	; 0x8b
 800a330:	6003      	str	r3, [r0, #0]
 800a332:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a336:	b01b      	add	sp, #108	; 0x6c
 800a338:	bd30      	pop	{r4, r5, pc}
 800a33a:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a33e:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a342:	bf14      	ite	ne
 800a344:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800a348:	4623      	moveq	r3, r4
 800a34a:	9302      	str	r3, [sp, #8]
 800a34c:	9305      	str	r3, [sp, #20]
 800a34e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a352:	9100      	str	r1, [sp, #0]
 800a354:	9104      	str	r1, [sp, #16]
 800a356:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a35a:	4669      	mov	r1, sp
 800a35c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a35e:	f000 f8b5 	bl	800a4cc <_svfiprintf_r>
 800a362:	1c43      	adds	r3, r0, #1
 800a364:	bfbc      	itt	lt
 800a366:	238b      	movlt	r3, #139	; 0x8b
 800a368:	602b      	strlt	r3, [r5, #0]
 800a36a:	2c00      	cmp	r4, #0
 800a36c:	d0e3      	beq.n	800a336 <_vsniprintf_r+0x16>
 800a36e:	9b00      	ldr	r3, [sp, #0]
 800a370:	2200      	movs	r2, #0
 800a372:	701a      	strb	r2, [r3, #0]
 800a374:	e7df      	b.n	800a336 <_vsniprintf_r+0x16>
	...

0800a378 <vsniprintf>:
 800a378:	b507      	push	{r0, r1, r2, lr}
 800a37a:	9300      	str	r3, [sp, #0]
 800a37c:	4613      	mov	r3, r2
 800a37e:	460a      	mov	r2, r1
 800a380:	4601      	mov	r1, r0
 800a382:	4803      	ldr	r0, [pc, #12]	; (800a390 <vsniprintf+0x18>)
 800a384:	6800      	ldr	r0, [r0, #0]
 800a386:	f7ff ffcb 	bl	800a320 <_vsniprintf_r>
 800a38a:	b003      	add	sp, #12
 800a38c:	f85d fb04 	ldr.w	pc, [sp], #4
 800a390:	2000005c 	.word	0x2000005c

0800a394 <memset>:
 800a394:	4402      	add	r2, r0
 800a396:	4603      	mov	r3, r0
 800a398:	4293      	cmp	r3, r2
 800a39a:	d100      	bne.n	800a39e <memset+0xa>
 800a39c:	4770      	bx	lr
 800a39e:	f803 1b01 	strb.w	r1, [r3], #1
 800a3a2:	e7f9      	b.n	800a398 <memset+0x4>

0800a3a4 <__errno>:
 800a3a4:	4b01      	ldr	r3, [pc, #4]	; (800a3ac <__errno+0x8>)
 800a3a6:	6818      	ldr	r0, [r3, #0]
 800a3a8:	4770      	bx	lr
 800a3aa:	bf00      	nop
 800a3ac:	2000005c 	.word	0x2000005c

0800a3b0 <__libc_init_array>:
 800a3b0:	b570      	push	{r4, r5, r6, lr}
 800a3b2:	4d0d      	ldr	r5, [pc, #52]	; (800a3e8 <__libc_init_array+0x38>)
 800a3b4:	4c0d      	ldr	r4, [pc, #52]	; (800a3ec <__libc_init_array+0x3c>)
 800a3b6:	1b64      	subs	r4, r4, r5
 800a3b8:	10a4      	asrs	r4, r4, #2
 800a3ba:	2600      	movs	r6, #0
 800a3bc:	42a6      	cmp	r6, r4
 800a3be:	d109      	bne.n	800a3d4 <__libc_init_array+0x24>
 800a3c0:	4d0b      	ldr	r5, [pc, #44]	; (800a3f0 <__libc_init_array+0x40>)
 800a3c2:	4c0c      	ldr	r4, [pc, #48]	; (800a3f4 <__libc_init_array+0x44>)
 800a3c4:	f000 fc68 	bl	800ac98 <_init>
 800a3c8:	1b64      	subs	r4, r4, r5
 800a3ca:	10a4      	asrs	r4, r4, #2
 800a3cc:	2600      	movs	r6, #0
 800a3ce:	42a6      	cmp	r6, r4
 800a3d0:	d105      	bne.n	800a3de <__libc_init_array+0x2e>
 800a3d2:	bd70      	pop	{r4, r5, r6, pc}
 800a3d4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3d8:	4798      	blx	r3
 800a3da:	3601      	adds	r6, #1
 800a3dc:	e7ee      	b.n	800a3bc <__libc_init_array+0xc>
 800a3de:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3e2:	4798      	blx	r3
 800a3e4:	3601      	adds	r6, #1
 800a3e6:	e7f2      	b.n	800a3ce <__libc_init_array+0x1e>
 800a3e8:	0800b3dc 	.word	0x0800b3dc
 800a3ec:	0800b3dc 	.word	0x0800b3dc
 800a3f0:	0800b3dc 	.word	0x0800b3dc
 800a3f4:	0800b3e0 	.word	0x0800b3e0

0800a3f8 <__retarget_lock_acquire_recursive>:
 800a3f8:	4770      	bx	lr

0800a3fa <__retarget_lock_release_recursive>:
 800a3fa:	4770      	bx	lr

0800a3fc <memcpy>:
 800a3fc:	440a      	add	r2, r1
 800a3fe:	4291      	cmp	r1, r2
 800a400:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a404:	d100      	bne.n	800a408 <memcpy+0xc>
 800a406:	4770      	bx	lr
 800a408:	b510      	push	{r4, lr}
 800a40a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a40e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a412:	4291      	cmp	r1, r2
 800a414:	d1f9      	bne.n	800a40a <memcpy+0xe>
 800a416:	bd10      	pop	{r4, pc}

0800a418 <__ssputs_r>:
 800a418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a41c:	688e      	ldr	r6, [r1, #8]
 800a41e:	461f      	mov	r7, r3
 800a420:	42be      	cmp	r6, r7
 800a422:	680b      	ldr	r3, [r1, #0]
 800a424:	4682      	mov	sl, r0
 800a426:	460c      	mov	r4, r1
 800a428:	4690      	mov	r8, r2
 800a42a:	d82c      	bhi.n	800a486 <__ssputs_r+0x6e>
 800a42c:	898a      	ldrh	r2, [r1, #12]
 800a42e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a432:	d026      	beq.n	800a482 <__ssputs_r+0x6a>
 800a434:	6965      	ldr	r5, [r4, #20]
 800a436:	6909      	ldr	r1, [r1, #16]
 800a438:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a43c:	eba3 0901 	sub.w	r9, r3, r1
 800a440:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a444:	1c7b      	adds	r3, r7, #1
 800a446:	444b      	add	r3, r9
 800a448:	106d      	asrs	r5, r5, #1
 800a44a:	429d      	cmp	r5, r3
 800a44c:	bf38      	it	cc
 800a44e:	461d      	movcc	r5, r3
 800a450:	0553      	lsls	r3, r2, #21
 800a452:	d527      	bpl.n	800a4a4 <__ssputs_r+0x8c>
 800a454:	4629      	mov	r1, r5
 800a456:	f000 f957 	bl	800a708 <_malloc_r>
 800a45a:	4606      	mov	r6, r0
 800a45c:	b360      	cbz	r0, 800a4b8 <__ssputs_r+0xa0>
 800a45e:	6921      	ldr	r1, [r4, #16]
 800a460:	464a      	mov	r2, r9
 800a462:	f7ff ffcb 	bl	800a3fc <memcpy>
 800a466:	89a3      	ldrh	r3, [r4, #12]
 800a468:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a46c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a470:	81a3      	strh	r3, [r4, #12]
 800a472:	6126      	str	r6, [r4, #16]
 800a474:	6165      	str	r5, [r4, #20]
 800a476:	444e      	add	r6, r9
 800a478:	eba5 0509 	sub.w	r5, r5, r9
 800a47c:	6026      	str	r6, [r4, #0]
 800a47e:	60a5      	str	r5, [r4, #8]
 800a480:	463e      	mov	r6, r7
 800a482:	42be      	cmp	r6, r7
 800a484:	d900      	bls.n	800a488 <__ssputs_r+0x70>
 800a486:	463e      	mov	r6, r7
 800a488:	6820      	ldr	r0, [r4, #0]
 800a48a:	4632      	mov	r2, r6
 800a48c:	4641      	mov	r1, r8
 800a48e:	f000 fb86 	bl	800ab9e <memmove>
 800a492:	68a3      	ldr	r3, [r4, #8]
 800a494:	1b9b      	subs	r3, r3, r6
 800a496:	60a3      	str	r3, [r4, #8]
 800a498:	6823      	ldr	r3, [r4, #0]
 800a49a:	4433      	add	r3, r6
 800a49c:	6023      	str	r3, [r4, #0]
 800a49e:	2000      	movs	r0, #0
 800a4a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4a4:	462a      	mov	r2, r5
 800a4a6:	f000 fb4b 	bl	800ab40 <_realloc_r>
 800a4aa:	4606      	mov	r6, r0
 800a4ac:	2800      	cmp	r0, #0
 800a4ae:	d1e0      	bne.n	800a472 <__ssputs_r+0x5a>
 800a4b0:	6921      	ldr	r1, [r4, #16]
 800a4b2:	4650      	mov	r0, sl
 800a4b4:	f000 fb9e 	bl	800abf4 <_free_r>
 800a4b8:	230c      	movs	r3, #12
 800a4ba:	f8ca 3000 	str.w	r3, [sl]
 800a4be:	89a3      	ldrh	r3, [r4, #12]
 800a4c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4c4:	81a3      	strh	r3, [r4, #12]
 800a4c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a4ca:	e7e9      	b.n	800a4a0 <__ssputs_r+0x88>

0800a4cc <_svfiprintf_r>:
 800a4cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4d0:	4698      	mov	r8, r3
 800a4d2:	898b      	ldrh	r3, [r1, #12]
 800a4d4:	061b      	lsls	r3, r3, #24
 800a4d6:	b09d      	sub	sp, #116	; 0x74
 800a4d8:	4607      	mov	r7, r0
 800a4da:	460d      	mov	r5, r1
 800a4dc:	4614      	mov	r4, r2
 800a4de:	d50e      	bpl.n	800a4fe <_svfiprintf_r+0x32>
 800a4e0:	690b      	ldr	r3, [r1, #16]
 800a4e2:	b963      	cbnz	r3, 800a4fe <_svfiprintf_r+0x32>
 800a4e4:	2140      	movs	r1, #64	; 0x40
 800a4e6:	f000 f90f 	bl	800a708 <_malloc_r>
 800a4ea:	6028      	str	r0, [r5, #0]
 800a4ec:	6128      	str	r0, [r5, #16]
 800a4ee:	b920      	cbnz	r0, 800a4fa <_svfiprintf_r+0x2e>
 800a4f0:	230c      	movs	r3, #12
 800a4f2:	603b      	str	r3, [r7, #0]
 800a4f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a4f8:	e0d0      	b.n	800a69c <_svfiprintf_r+0x1d0>
 800a4fa:	2340      	movs	r3, #64	; 0x40
 800a4fc:	616b      	str	r3, [r5, #20]
 800a4fe:	2300      	movs	r3, #0
 800a500:	9309      	str	r3, [sp, #36]	; 0x24
 800a502:	2320      	movs	r3, #32
 800a504:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a508:	f8cd 800c 	str.w	r8, [sp, #12]
 800a50c:	2330      	movs	r3, #48	; 0x30
 800a50e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a6b4 <_svfiprintf_r+0x1e8>
 800a512:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a516:	f04f 0901 	mov.w	r9, #1
 800a51a:	4623      	mov	r3, r4
 800a51c:	469a      	mov	sl, r3
 800a51e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a522:	b10a      	cbz	r2, 800a528 <_svfiprintf_r+0x5c>
 800a524:	2a25      	cmp	r2, #37	; 0x25
 800a526:	d1f9      	bne.n	800a51c <_svfiprintf_r+0x50>
 800a528:	ebba 0b04 	subs.w	fp, sl, r4
 800a52c:	d00b      	beq.n	800a546 <_svfiprintf_r+0x7a>
 800a52e:	465b      	mov	r3, fp
 800a530:	4622      	mov	r2, r4
 800a532:	4629      	mov	r1, r5
 800a534:	4638      	mov	r0, r7
 800a536:	f7ff ff6f 	bl	800a418 <__ssputs_r>
 800a53a:	3001      	adds	r0, #1
 800a53c:	f000 80a9 	beq.w	800a692 <_svfiprintf_r+0x1c6>
 800a540:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a542:	445a      	add	r2, fp
 800a544:	9209      	str	r2, [sp, #36]	; 0x24
 800a546:	f89a 3000 	ldrb.w	r3, [sl]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	f000 80a1 	beq.w	800a692 <_svfiprintf_r+0x1c6>
 800a550:	2300      	movs	r3, #0
 800a552:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a556:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a55a:	f10a 0a01 	add.w	sl, sl, #1
 800a55e:	9304      	str	r3, [sp, #16]
 800a560:	9307      	str	r3, [sp, #28]
 800a562:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a566:	931a      	str	r3, [sp, #104]	; 0x68
 800a568:	4654      	mov	r4, sl
 800a56a:	2205      	movs	r2, #5
 800a56c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a570:	4850      	ldr	r0, [pc, #320]	; (800a6b4 <_svfiprintf_r+0x1e8>)
 800a572:	f7f5 fe05 	bl	8000180 <memchr>
 800a576:	9a04      	ldr	r2, [sp, #16]
 800a578:	b9d8      	cbnz	r0, 800a5b2 <_svfiprintf_r+0xe6>
 800a57a:	06d0      	lsls	r0, r2, #27
 800a57c:	bf44      	itt	mi
 800a57e:	2320      	movmi	r3, #32
 800a580:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a584:	0711      	lsls	r1, r2, #28
 800a586:	bf44      	itt	mi
 800a588:	232b      	movmi	r3, #43	; 0x2b
 800a58a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a58e:	f89a 3000 	ldrb.w	r3, [sl]
 800a592:	2b2a      	cmp	r3, #42	; 0x2a
 800a594:	d015      	beq.n	800a5c2 <_svfiprintf_r+0xf6>
 800a596:	9a07      	ldr	r2, [sp, #28]
 800a598:	4654      	mov	r4, sl
 800a59a:	2000      	movs	r0, #0
 800a59c:	f04f 0c0a 	mov.w	ip, #10
 800a5a0:	4621      	mov	r1, r4
 800a5a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a5a6:	3b30      	subs	r3, #48	; 0x30
 800a5a8:	2b09      	cmp	r3, #9
 800a5aa:	d94d      	bls.n	800a648 <_svfiprintf_r+0x17c>
 800a5ac:	b1b0      	cbz	r0, 800a5dc <_svfiprintf_r+0x110>
 800a5ae:	9207      	str	r2, [sp, #28]
 800a5b0:	e014      	b.n	800a5dc <_svfiprintf_r+0x110>
 800a5b2:	eba0 0308 	sub.w	r3, r0, r8
 800a5b6:	fa09 f303 	lsl.w	r3, r9, r3
 800a5ba:	4313      	orrs	r3, r2
 800a5bc:	9304      	str	r3, [sp, #16]
 800a5be:	46a2      	mov	sl, r4
 800a5c0:	e7d2      	b.n	800a568 <_svfiprintf_r+0x9c>
 800a5c2:	9b03      	ldr	r3, [sp, #12]
 800a5c4:	1d19      	adds	r1, r3, #4
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	9103      	str	r1, [sp, #12]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	bfbb      	ittet	lt
 800a5ce:	425b      	neglt	r3, r3
 800a5d0:	f042 0202 	orrlt.w	r2, r2, #2
 800a5d4:	9307      	strge	r3, [sp, #28]
 800a5d6:	9307      	strlt	r3, [sp, #28]
 800a5d8:	bfb8      	it	lt
 800a5da:	9204      	strlt	r2, [sp, #16]
 800a5dc:	7823      	ldrb	r3, [r4, #0]
 800a5de:	2b2e      	cmp	r3, #46	; 0x2e
 800a5e0:	d10c      	bne.n	800a5fc <_svfiprintf_r+0x130>
 800a5e2:	7863      	ldrb	r3, [r4, #1]
 800a5e4:	2b2a      	cmp	r3, #42	; 0x2a
 800a5e6:	d134      	bne.n	800a652 <_svfiprintf_r+0x186>
 800a5e8:	9b03      	ldr	r3, [sp, #12]
 800a5ea:	1d1a      	adds	r2, r3, #4
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	9203      	str	r2, [sp, #12]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	bfb8      	it	lt
 800a5f4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a5f8:	3402      	adds	r4, #2
 800a5fa:	9305      	str	r3, [sp, #20]
 800a5fc:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800a6b8 <_svfiprintf_r+0x1ec>
 800a600:	7821      	ldrb	r1, [r4, #0]
 800a602:	2203      	movs	r2, #3
 800a604:	4650      	mov	r0, sl
 800a606:	f7f5 fdbb 	bl	8000180 <memchr>
 800a60a:	b138      	cbz	r0, 800a61c <_svfiprintf_r+0x150>
 800a60c:	9b04      	ldr	r3, [sp, #16]
 800a60e:	eba0 000a 	sub.w	r0, r0, sl
 800a612:	2240      	movs	r2, #64	; 0x40
 800a614:	4082      	lsls	r2, r0
 800a616:	4313      	orrs	r3, r2
 800a618:	3401      	adds	r4, #1
 800a61a:	9304      	str	r3, [sp, #16]
 800a61c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a620:	4826      	ldr	r0, [pc, #152]	; (800a6bc <_svfiprintf_r+0x1f0>)
 800a622:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a626:	2206      	movs	r2, #6
 800a628:	f7f5 fdaa 	bl	8000180 <memchr>
 800a62c:	2800      	cmp	r0, #0
 800a62e:	d038      	beq.n	800a6a2 <_svfiprintf_r+0x1d6>
 800a630:	4b23      	ldr	r3, [pc, #140]	; (800a6c0 <_svfiprintf_r+0x1f4>)
 800a632:	bb1b      	cbnz	r3, 800a67c <_svfiprintf_r+0x1b0>
 800a634:	9b03      	ldr	r3, [sp, #12]
 800a636:	3307      	adds	r3, #7
 800a638:	f023 0307 	bic.w	r3, r3, #7
 800a63c:	3308      	adds	r3, #8
 800a63e:	9303      	str	r3, [sp, #12]
 800a640:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a642:	4433      	add	r3, r6
 800a644:	9309      	str	r3, [sp, #36]	; 0x24
 800a646:	e768      	b.n	800a51a <_svfiprintf_r+0x4e>
 800a648:	fb0c 3202 	mla	r2, ip, r2, r3
 800a64c:	460c      	mov	r4, r1
 800a64e:	2001      	movs	r0, #1
 800a650:	e7a6      	b.n	800a5a0 <_svfiprintf_r+0xd4>
 800a652:	2300      	movs	r3, #0
 800a654:	3401      	adds	r4, #1
 800a656:	9305      	str	r3, [sp, #20]
 800a658:	4619      	mov	r1, r3
 800a65a:	f04f 0c0a 	mov.w	ip, #10
 800a65e:	4620      	mov	r0, r4
 800a660:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a664:	3a30      	subs	r2, #48	; 0x30
 800a666:	2a09      	cmp	r2, #9
 800a668:	d903      	bls.n	800a672 <_svfiprintf_r+0x1a6>
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d0c6      	beq.n	800a5fc <_svfiprintf_r+0x130>
 800a66e:	9105      	str	r1, [sp, #20]
 800a670:	e7c4      	b.n	800a5fc <_svfiprintf_r+0x130>
 800a672:	fb0c 2101 	mla	r1, ip, r1, r2
 800a676:	4604      	mov	r4, r0
 800a678:	2301      	movs	r3, #1
 800a67a:	e7f0      	b.n	800a65e <_svfiprintf_r+0x192>
 800a67c:	ab03      	add	r3, sp, #12
 800a67e:	9300      	str	r3, [sp, #0]
 800a680:	462a      	mov	r2, r5
 800a682:	4b10      	ldr	r3, [pc, #64]	; (800a6c4 <_svfiprintf_r+0x1f8>)
 800a684:	a904      	add	r1, sp, #16
 800a686:	4638      	mov	r0, r7
 800a688:	f3af 8000 	nop.w
 800a68c:	1c42      	adds	r2, r0, #1
 800a68e:	4606      	mov	r6, r0
 800a690:	d1d6      	bne.n	800a640 <_svfiprintf_r+0x174>
 800a692:	89ab      	ldrh	r3, [r5, #12]
 800a694:	065b      	lsls	r3, r3, #25
 800a696:	f53f af2d 	bmi.w	800a4f4 <_svfiprintf_r+0x28>
 800a69a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a69c:	b01d      	add	sp, #116	; 0x74
 800a69e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6a2:	ab03      	add	r3, sp, #12
 800a6a4:	9300      	str	r3, [sp, #0]
 800a6a6:	462a      	mov	r2, r5
 800a6a8:	4b06      	ldr	r3, [pc, #24]	; (800a6c4 <_svfiprintf_r+0x1f8>)
 800a6aa:	a904      	add	r1, sp, #16
 800a6ac:	4638      	mov	r0, r7
 800a6ae:	f000 f919 	bl	800a8e4 <_printf_i>
 800a6b2:	e7eb      	b.n	800a68c <_svfiprintf_r+0x1c0>
 800a6b4:	0800b3a0 	.word	0x0800b3a0
 800a6b8:	0800b3a6 	.word	0x0800b3a6
 800a6bc:	0800b3aa 	.word	0x0800b3aa
 800a6c0:	00000000 	.word	0x00000000
 800a6c4:	0800a419 	.word	0x0800a419

0800a6c8 <sbrk_aligned>:
 800a6c8:	b570      	push	{r4, r5, r6, lr}
 800a6ca:	4e0e      	ldr	r6, [pc, #56]	; (800a704 <sbrk_aligned+0x3c>)
 800a6cc:	460c      	mov	r4, r1
 800a6ce:	6831      	ldr	r1, [r6, #0]
 800a6d0:	4605      	mov	r5, r0
 800a6d2:	b911      	cbnz	r1, 800a6da <sbrk_aligned+0x12>
 800a6d4:	f000 fa7e 	bl	800abd4 <_sbrk_r>
 800a6d8:	6030      	str	r0, [r6, #0]
 800a6da:	4621      	mov	r1, r4
 800a6dc:	4628      	mov	r0, r5
 800a6de:	f000 fa79 	bl	800abd4 <_sbrk_r>
 800a6e2:	1c43      	adds	r3, r0, #1
 800a6e4:	d00a      	beq.n	800a6fc <sbrk_aligned+0x34>
 800a6e6:	1cc4      	adds	r4, r0, #3
 800a6e8:	f024 0403 	bic.w	r4, r4, #3
 800a6ec:	42a0      	cmp	r0, r4
 800a6ee:	d007      	beq.n	800a700 <sbrk_aligned+0x38>
 800a6f0:	1a21      	subs	r1, r4, r0
 800a6f2:	4628      	mov	r0, r5
 800a6f4:	f000 fa6e 	bl	800abd4 <_sbrk_r>
 800a6f8:	3001      	adds	r0, #1
 800a6fa:	d101      	bne.n	800a700 <sbrk_aligned+0x38>
 800a6fc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a700:	4620      	mov	r0, r4
 800a702:	bd70      	pop	{r4, r5, r6, pc}
 800a704:	200006b8 	.word	0x200006b8

0800a708 <_malloc_r>:
 800a708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a70c:	1ccd      	adds	r5, r1, #3
 800a70e:	f025 0503 	bic.w	r5, r5, #3
 800a712:	3508      	adds	r5, #8
 800a714:	2d0c      	cmp	r5, #12
 800a716:	bf38      	it	cc
 800a718:	250c      	movcc	r5, #12
 800a71a:	2d00      	cmp	r5, #0
 800a71c:	4607      	mov	r7, r0
 800a71e:	db01      	blt.n	800a724 <_malloc_r+0x1c>
 800a720:	42a9      	cmp	r1, r5
 800a722:	d905      	bls.n	800a730 <_malloc_r+0x28>
 800a724:	230c      	movs	r3, #12
 800a726:	603b      	str	r3, [r7, #0]
 800a728:	2600      	movs	r6, #0
 800a72a:	4630      	mov	r0, r6
 800a72c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a730:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a804 <_malloc_r+0xfc>
 800a734:	f000 f9f8 	bl	800ab28 <__malloc_lock>
 800a738:	f8d8 3000 	ldr.w	r3, [r8]
 800a73c:	461c      	mov	r4, r3
 800a73e:	bb5c      	cbnz	r4, 800a798 <_malloc_r+0x90>
 800a740:	4629      	mov	r1, r5
 800a742:	4638      	mov	r0, r7
 800a744:	f7ff ffc0 	bl	800a6c8 <sbrk_aligned>
 800a748:	1c43      	adds	r3, r0, #1
 800a74a:	4604      	mov	r4, r0
 800a74c:	d155      	bne.n	800a7fa <_malloc_r+0xf2>
 800a74e:	f8d8 4000 	ldr.w	r4, [r8]
 800a752:	4626      	mov	r6, r4
 800a754:	2e00      	cmp	r6, #0
 800a756:	d145      	bne.n	800a7e4 <_malloc_r+0xdc>
 800a758:	2c00      	cmp	r4, #0
 800a75a:	d048      	beq.n	800a7ee <_malloc_r+0xe6>
 800a75c:	6823      	ldr	r3, [r4, #0]
 800a75e:	4631      	mov	r1, r6
 800a760:	4638      	mov	r0, r7
 800a762:	eb04 0903 	add.w	r9, r4, r3
 800a766:	f000 fa35 	bl	800abd4 <_sbrk_r>
 800a76a:	4581      	cmp	r9, r0
 800a76c:	d13f      	bne.n	800a7ee <_malloc_r+0xe6>
 800a76e:	6821      	ldr	r1, [r4, #0]
 800a770:	1a6d      	subs	r5, r5, r1
 800a772:	4629      	mov	r1, r5
 800a774:	4638      	mov	r0, r7
 800a776:	f7ff ffa7 	bl	800a6c8 <sbrk_aligned>
 800a77a:	3001      	adds	r0, #1
 800a77c:	d037      	beq.n	800a7ee <_malloc_r+0xe6>
 800a77e:	6823      	ldr	r3, [r4, #0]
 800a780:	442b      	add	r3, r5
 800a782:	6023      	str	r3, [r4, #0]
 800a784:	f8d8 3000 	ldr.w	r3, [r8]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d038      	beq.n	800a7fe <_malloc_r+0xf6>
 800a78c:	685a      	ldr	r2, [r3, #4]
 800a78e:	42a2      	cmp	r2, r4
 800a790:	d12b      	bne.n	800a7ea <_malloc_r+0xe2>
 800a792:	2200      	movs	r2, #0
 800a794:	605a      	str	r2, [r3, #4]
 800a796:	e00f      	b.n	800a7b8 <_malloc_r+0xb0>
 800a798:	6822      	ldr	r2, [r4, #0]
 800a79a:	1b52      	subs	r2, r2, r5
 800a79c:	d41f      	bmi.n	800a7de <_malloc_r+0xd6>
 800a79e:	2a0b      	cmp	r2, #11
 800a7a0:	d917      	bls.n	800a7d2 <_malloc_r+0xca>
 800a7a2:	1961      	adds	r1, r4, r5
 800a7a4:	42a3      	cmp	r3, r4
 800a7a6:	6025      	str	r5, [r4, #0]
 800a7a8:	bf18      	it	ne
 800a7aa:	6059      	strne	r1, [r3, #4]
 800a7ac:	6863      	ldr	r3, [r4, #4]
 800a7ae:	bf08      	it	eq
 800a7b0:	f8c8 1000 	streq.w	r1, [r8]
 800a7b4:	5162      	str	r2, [r4, r5]
 800a7b6:	604b      	str	r3, [r1, #4]
 800a7b8:	4638      	mov	r0, r7
 800a7ba:	f104 060b 	add.w	r6, r4, #11
 800a7be:	f000 f9b9 	bl	800ab34 <__malloc_unlock>
 800a7c2:	f026 0607 	bic.w	r6, r6, #7
 800a7c6:	1d23      	adds	r3, r4, #4
 800a7c8:	1af2      	subs	r2, r6, r3
 800a7ca:	d0ae      	beq.n	800a72a <_malloc_r+0x22>
 800a7cc:	1b9b      	subs	r3, r3, r6
 800a7ce:	50a3      	str	r3, [r4, r2]
 800a7d0:	e7ab      	b.n	800a72a <_malloc_r+0x22>
 800a7d2:	42a3      	cmp	r3, r4
 800a7d4:	6862      	ldr	r2, [r4, #4]
 800a7d6:	d1dd      	bne.n	800a794 <_malloc_r+0x8c>
 800a7d8:	f8c8 2000 	str.w	r2, [r8]
 800a7dc:	e7ec      	b.n	800a7b8 <_malloc_r+0xb0>
 800a7de:	4623      	mov	r3, r4
 800a7e0:	6864      	ldr	r4, [r4, #4]
 800a7e2:	e7ac      	b.n	800a73e <_malloc_r+0x36>
 800a7e4:	4634      	mov	r4, r6
 800a7e6:	6876      	ldr	r6, [r6, #4]
 800a7e8:	e7b4      	b.n	800a754 <_malloc_r+0x4c>
 800a7ea:	4613      	mov	r3, r2
 800a7ec:	e7cc      	b.n	800a788 <_malloc_r+0x80>
 800a7ee:	230c      	movs	r3, #12
 800a7f0:	603b      	str	r3, [r7, #0]
 800a7f2:	4638      	mov	r0, r7
 800a7f4:	f000 f99e 	bl	800ab34 <__malloc_unlock>
 800a7f8:	e797      	b.n	800a72a <_malloc_r+0x22>
 800a7fa:	6025      	str	r5, [r4, #0]
 800a7fc:	e7dc      	b.n	800a7b8 <_malloc_r+0xb0>
 800a7fe:	605b      	str	r3, [r3, #4]
 800a800:	deff      	udf	#255	; 0xff
 800a802:	bf00      	nop
 800a804:	200006b4 	.word	0x200006b4

0800a808 <_printf_common>:
 800a808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a80c:	4616      	mov	r6, r2
 800a80e:	4699      	mov	r9, r3
 800a810:	688a      	ldr	r2, [r1, #8]
 800a812:	690b      	ldr	r3, [r1, #16]
 800a814:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a818:	4293      	cmp	r3, r2
 800a81a:	bfb8      	it	lt
 800a81c:	4613      	movlt	r3, r2
 800a81e:	6033      	str	r3, [r6, #0]
 800a820:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a824:	4607      	mov	r7, r0
 800a826:	460c      	mov	r4, r1
 800a828:	b10a      	cbz	r2, 800a82e <_printf_common+0x26>
 800a82a:	3301      	adds	r3, #1
 800a82c:	6033      	str	r3, [r6, #0]
 800a82e:	6823      	ldr	r3, [r4, #0]
 800a830:	0699      	lsls	r1, r3, #26
 800a832:	bf42      	ittt	mi
 800a834:	6833      	ldrmi	r3, [r6, #0]
 800a836:	3302      	addmi	r3, #2
 800a838:	6033      	strmi	r3, [r6, #0]
 800a83a:	6825      	ldr	r5, [r4, #0]
 800a83c:	f015 0506 	ands.w	r5, r5, #6
 800a840:	d106      	bne.n	800a850 <_printf_common+0x48>
 800a842:	f104 0a19 	add.w	sl, r4, #25
 800a846:	68e3      	ldr	r3, [r4, #12]
 800a848:	6832      	ldr	r2, [r6, #0]
 800a84a:	1a9b      	subs	r3, r3, r2
 800a84c:	42ab      	cmp	r3, r5
 800a84e:	dc26      	bgt.n	800a89e <_printf_common+0x96>
 800a850:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a854:	1e13      	subs	r3, r2, #0
 800a856:	6822      	ldr	r2, [r4, #0]
 800a858:	bf18      	it	ne
 800a85a:	2301      	movne	r3, #1
 800a85c:	0692      	lsls	r2, r2, #26
 800a85e:	d42b      	bmi.n	800a8b8 <_printf_common+0xb0>
 800a860:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a864:	4649      	mov	r1, r9
 800a866:	4638      	mov	r0, r7
 800a868:	47c0      	blx	r8
 800a86a:	3001      	adds	r0, #1
 800a86c:	d01e      	beq.n	800a8ac <_printf_common+0xa4>
 800a86e:	6823      	ldr	r3, [r4, #0]
 800a870:	6922      	ldr	r2, [r4, #16]
 800a872:	f003 0306 	and.w	r3, r3, #6
 800a876:	2b04      	cmp	r3, #4
 800a878:	bf02      	ittt	eq
 800a87a:	68e5      	ldreq	r5, [r4, #12]
 800a87c:	6833      	ldreq	r3, [r6, #0]
 800a87e:	1aed      	subeq	r5, r5, r3
 800a880:	68a3      	ldr	r3, [r4, #8]
 800a882:	bf0c      	ite	eq
 800a884:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a888:	2500      	movne	r5, #0
 800a88a:	4293      	cmp	r3, r2
 800a88c:	bfc4      	itt	gt
 800a88e:	1a9b      	subgt	r3, r3, r2
 800a890:	18ed      	addgt	r5, r5, r3
 800a892:	2600      	movs	r6, #0
 800a894:	341a      	adds	r4, #26
 800a896:	42b5      	cmp	r5, r6
 800a898:	d11a      	bne.n	800a8d0 <_printf_common+0xc8>
 800a89a:	2000      	movs	r0, #0
 800a89c:	e008      	b.n	800a8b0 <_printf_common+0xa8>
 800a89e:	2301      	movs	r3, #1
 800a8a0:	4652      	mov	r2, sl
 800a8a2:	4649      	mov	r1, r9
 800a8a4:	4638      	mov	r0, r7
 800a8a6:	47c0      	blx	r8
 800a8a8:	3001      	adds	r0, #1
 800a8aa:	d103      	bne.n	800a8b4 <_printf_common+0xac>
 800a8ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a8b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8b4:	3501      	adds	r5, #1
 800a8b6:	e7c6      	b.n	800a846 <_printf_common+0x3e>
 800a8b8:	18e1      	adds	r1, r4, r3
 800a8ba:	1c5a      	adds	r2, r3, #1
 800a8bc:	2030      	movs	r0, #48	; 0x30
 800a8be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a8c2:	4422      	add	r2, r4
 800a8c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a8c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a8cc:	3302      	adds	r3, #2
 800a8ce:	e7c7      	b.n	800a860 <_printf_common+0x58>
 800a8d0:	2301      	movs	r3, #1
 800a8d2:	4622      	mov	r2, r4
 800a8d4:	4649      	mov	r1, r9
 800a8d6:	4638      	mov	r0, r7
 800a8d8:	47c0      	blx	r8
 800a8da:	3001      	adds	r0, #1
 800a8dc:	d0e6      	beq.n	800a8ac <_printf_common+0xa4>
 800a8de:	3601      	adds	r6, #1
 800a8e0:	e7d9      	b.n	800a896 <_printf_common+0x8e>
	...

0800a8e4 <_printf_i>:
 800a8e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a8e8:	7e0f      	ldrb	r7, [r1, #24]
 800a8ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a8ec:	2f78      	cmp	r7, #120	; 0x78
 800a8ee:	4691      	mov	r9, r2
 800a8f0:	4680      	mov	r8, r0
 800a8f2:	460c      	mov	r4, r1
 800a8f4:	469a      	mov	sl, r3
 800a8f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a8fa:	d807      	bhi.n	800a90c <_printf_i+0x28>
 800a8fc:	2f62      	cmp	r7, #98	; 0x62
 800a8fe:	d80a      	bhi.n	800a916 <_printf_i+0x32>
 800a900:	2f00      	cmp	r7, #0
 800a902:	f000 80d4 	beq.w	800aaae <_printf_i+0x1ca>
 800a906:	2f58      	cmp	r7, #88	; 0x58
 800a908:	f000 80c0 	beq.w	800aa8c <_printf_i+0x1a8>
 800a90c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a910:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a914:	e03a      	b.n	800a98c <_printf_i+0xa8>
 800a916:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a91a:	2b15      	cmp	r3, #21
 800a91c:	d8f6      	bhi.n	800a90c <_printf_i+0x28>
 800a91e:	a101      	add	r1, pc, #4	; (adr r1, 800a924 <_printf_i+0x40>)
 800a920:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a924:	0800a97d 	.word	0x0800a97d
 800a928:	0800a991 	.word	0x0800a991
 800a92c:	0800a90d 	.word	0x0800a90d
 800a930:	0800a90d 	.word	0x0800a90d
 800a934:	0800a90d 	.word	0x0800a90d
 800a938:	0800a90d 	.word	0x0800a90d
 800a93c:	0800a991 	.word	0x0800a991
 800a940:	0800a90d 	.word	0x0800a90d
 800a944:	0800a90d 	.word	0x0800a90d
 800a948:	0800a90d 	.word	0x0800a90d
 800a94c:	0800a90d 	.word	0x0800a90d
 800a950:	0800aa95 	.word	0x0800aa95
 800a954:	0800a9bd 	.word	0x0800a9bd
 800a958:	0800aa4f 	.word	0x0800aa4f
 800a95c:	0800a90d 	.word	0x0800a90d
 800a960:	0800a90d 	.word	0x0800a90d
 800a964:	0800aab7 	.word	0x0800aab7
 800a968:	0800a90d 	.word	0x0800a90d
 800a96c:	0800a9bd 	.word	0x0800a9bd
 800a970:	0800a90d 	.word	0x0800a90d
 800a974:	0800a90d 	.word	0x0800a90d
 800a978:	0800aa57 	.word	0x0800aa57
 800a97c:	682b      	ldr	r3, [r5, #0]
 800a97e:	1d1a      	adds	r2, r3, #4
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	602a      	str	r2, [r5, #0]
 800a984:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a988:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a98c:	2301      	movs	r3, #1
 800a98e:	e09f      	b.n	800aad0 <_printf_i+0x1ec>
 800a990:	6820      	ldr	r0, [r4, #0]
 800a992:	682b      	ldr	r3, [r5, #0]
 800a994:	0607      	lsls	r7, r0, #24
 800a996:	f103 0104 	add.w	r1, r3, #4
 800a99a:	6029      	str	r1, [r5, #0]
 800a99c:	d501      	bpl.n	800a9a2 <_printf_i+0xbe>
 800a99e:	681e      	ldr	r6, [r3, #0]
 800a9a0:	e003      	b.n	800a9aa <_printf_i+0xc6>
 800a9a2:	0646      	lsls	r6, r0, #25
 800a9a4:	d5fb      	bpl.n	800a99e <_printf_i+0xba>
 800a9a6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a9aa:	2e00      	cmp	r6, #0
 800a9ac:	da03      	bge.n	800a9b6 <_printf_i+0xd2>
 800a9ae:	232d      	movs	r3, #45	; 0x2d
 800a9b0:	4276      	negs	r6, r6
 800a9b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a9b6:	485a      	ldr	r0, [pc, #360]	; (800ab20 <_printf_i+0x23c>)
 800a9b8:	230a      	movs	r3, #10
 800a9ba:	e012      	b.n	800a9e2 <_printf_i+0xfe>
 800a9bc:	682b      	ldr	r3, [r5, #0]
 800a9be:	6820      	ldr	r0, [r4, #0]
 800a9c0:	1d19      	adds	r1, r3, #4
 800a9c2:	6029      	str	r1, [r5, #0]
 800a9c4:	0605      	lsls	r5, r0, #24
 800a9c6:	d501      	bpl.n	800a9cc <_printf_i+0xe8>
 800a9c8:	681e      	ldr	r6, [r3, #0]
 800a9ca:	e002      	b.n	800a9d2 <_printf_i+0xee>
 800a9cc:	0641      	lsls	r1, r0, #25
 800a9ce:	d5fb      	bpl.n	800a9c8 <_printf_i+0xe4>
 800a9d0:	881e      	ldrh	r6, [r3, #0]
 800a9d2:	4853      	ldr	r0, [pc, #332]	; (800ab20 <_printf_i+0x23c>)
 800a9d4:	2f6f      	cmp	r7, #111	; 0x6f
 800a9d6:	bf0c      	ite	eq
 800a9d8:	2308      	moveq	r3, #8
 800a9da:	230a      	movne	r3, #10
 800a9dc:	2100      	movs	r1, #0
 800a9de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a9e2:	6865      	ldr	r5, [r4, #4]
 800a9e4:	60a5      	str	r5, [r4, #8]
 800a9e6:	2d00      	cmp	r5, #0
 800a9e8:	bfa2      	ittt	ge
 800a9ea:	6821      	ldrge	r1, [r4, #0]
 800a9ec:	f021 0104 	bicge.w	r1, r1, #4
 800a9f0:	6021      	strge	r1, [r4, #0]
 800a9f2:	b90e      	cbnz	r6, 800a9f8 <_printf_i+0x114>
 800a9f4:	2d00      	cmp	r5, #0
 800a9f6:	d04b      	beq.n	800aa90 <_printf_i+0x1ac>
 800a9f8:	4615      	mov	r5, r2
 800a9fa:	fbb6 f1f3 	udiv	r1, r6, r3
 800a9fe:	fb03 6711 	mls	r7, r3, r1, r6
 800aa02:	5dc7      	ldrb	r7, [r0, r7]
 800aa04:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800aa08:	4637      	mov	r7, r6
 800aa0a:	42bb      	cmp	r3, r7
 800aa0c:	460e      	mov	r6, r1
 800aa0e:	d9f4      	bls.n	800a9fa <_printf_i+0x116>
 800aa10:	2b08      	cmp	r3, #8
 800aa12:	d10b      	bne.n	800aa2c <_printf_i+0x148>
 800aa14:	6823      	ldr	r3, [r4, #0]
 800aa16:	07de      	lsls	r6, r3, #31
 800aa18:	d508      	bpl.n	800aa2c <_printf_i+0x148>
 800aa1a:	6923      	ldr	r3, [r4, #16]
 800aa1c:	6861      	ldr	r1, [r4, #4]
 800aa1e:	4299      	cmp	r1, r3
 800aa20:	bfde      	ittt	le
 800aa22:	2330      	movle	r3, #48	; 0x30
 800aa24:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aa28:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800aa2c:	1b52      	subs	r2, r2, r5
 800aa2e:	6122      	str	r2, [r4, #16]
 800aa30:	f8cd a000 	str.w	sl, [sp]
 800aa34:	464b      	mov	r3, r9
 800aa36:	aa03      	add	r2, sp, #12
 800aa38:	4621      	mov	r1, r4
 800aa3a:	4640      	mov	r0, r8
 800aa3c:	f7ff fee4 	bl	800a808 <_printf_common>
 800aa40:	3001      	adds	r0, #1
 800aa42:	d14a      	bne.n	800aada <_printf_i+0x1f6>
 800aa44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aa48:	b004      	add	sp, #16
 800aa4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa4e:	6823      	ldr	r3, [r4, #0]
 800aa50:	f043 0320 	orr.w	r3, r3, #32
 800aa54:	6023      	str	r3, [r4, #0]
 800aa56:	4833      	ldr	r0, [pc, #204]	; (800ab24 <_printf_i+0x240>)
 800aa58:	2778      	movs	r7, #120	; 0x78
 800aa5a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800aa5e:	6823      	ldr	r3, [r4, #0]
 800aa60:	6829      	ldr	r1, [r5, #0]
 800aa62:	061f      	lsls	r7, r3, #24
 800aa64:	f851 6b04 	ldr.w	r6, [r1], #4
 800aa68:	d402      	bmi.n	800aa70 <_printf_i+0x18c>
 800aa6a:	065f      	lsls	r7, r3, #25
 800aa6c:	bf48      	it	mi
 800aa6e:	b2b6      	uxthmi	r6, r6
 800aa70:	07df      	lsls	r7, r3, #31
 800aa72:	bf48      	it	mi
 800aa74:	f043 0320 	orrmi.w	r3, r3, #32
 800aa78:	6029      	str	r1, [r5, #0]
 800aa7a:	bf48      	it	mi
 800aa7c:	6023      	strmi	r3, [r4, #0]
 800aa7e:	b91e      	cbnz	r6, 800aa88 <_printf_i+0x1a4>
 800aa80:	6823      	ldr	r3, [r4, #0]
 800aa82:	f023 0320 	bic.w	r3, r3, #32
 800aa86:	6023      	str	r3, [r4, #0]
 800aa88:	2310      	movs	r3, #16
 800aa8a:	e7a7      	b.n	800a9dc <_printf_i+0xf8>
 800aa8c:	4824      	ldr	r0, [pc, #144]	; (800ab20 <_printf_i+0x23c>)
 800aa8e:	e7e4      	b.n	800aa5a <_printf_i+0x176>
 800aa90:	4615      	mov	r5, r2
 800aa92:	e7bd      	b.n	800aa10 <_printf_i+0x12c>
 800aa94:	682b      	ldr	r3, [r5, #0]
 800aa96:	6826      	ldr	r6, [r4, #0]
 800aa98:	6961      	ldr	r1, [r4, #20]
 800aa9a:	1d18      	adds	r0, r3, #4
 800aa9c:	6028      	str	r0, [r5, #0]
 800aa9e:	0635      	lsls	r5, r6, #24
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	d501      	bpl.n	800aaa8 <_printf_i+0x1c4>
 800aaa4:	6019      	str	r1, [r3, #0]
 800aaa6:	e002      	b.n	800aaae <_printf_i+0x1ca>
 800aaa8:	0670      	lsls	r0, r6, #25
 800aaaa:	d5fb      	bpl.n	800aaa4 <_printf_i+0x1c0>
 800aaac:	8019      	strh	r1, [r3, #0]
 800aaae:	2300      	movs	r3, #0
 800aab0:	6123      	str	r3, [r4, #16]
 800aab2:	4615      	mov	r5, r2
 800aab4:	e7bc      	b.n	800aa30 <_printf_i+0x14c>
 800aab6:	682b      	ldr	r3, [r5, #0]
 800aab8:	1d1a      	adds	r2, r3, #4
 800aaba:	602a      	str	r2, [r5, #0]
 800aabc:	681d      	ldr	r5, [r3, #0]
 800aabe:	6862      	ldr	r2, [r4, #4]
 800aac0:	2100      	movs	r1, #0
 800aac2:	4628      	mov	r0, r5
 800aac4:	f7f5 fb5c 	bl	8000180 <memchr>
 800aac8:	b108      	cbz	r0, 800aace <_printf_i+0x1ea>
 800aaca:	1b40      	subs	r0, r0, r5
 800aacc:	6060      	str	r0, [r4, #4]
 800aace:	6863      	ldr	r3, [r4, #4]
 800aad0:	6123      	str	r3, [r4, #16]
 800aad2:	2300      	movs	r3, #0
 800aad4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aad8:	e7aa      	b.n	800aa30 <_printf_i+0x14c>
 800aada:	6923      	ldr	r3, [r4, #16]
 800aadc:	462a      	mov	r2, r5
 800aade:	4649      	mov	r1, r9
 800aae0:	4640      	mov	r0, r8
 800aae2:	47d0      	blx	sl
 800aae4:	3001      	adds	r0, #1
 800aae6:	d0ad      	beq.n	800aa44 <_printf_i+0x160>
 800aae8:	6823      	ldr	r3, [r4, #0]
 800aaea:	079b      	lsls	r3, r3, #30
 800aaec:	d413      	bmi.n	800ab16 <_printf_i+0x232>
 800aaee:	68e0      	ldr	r0, [r4, #12]
 800aaf0:	9b03      	ldr	r3, [sp, #12]
 800aaf2:	4298      	cmp	r0, r3
 800aaf4:	bfb8      	it	lt
 800aaf6:	4618      	movlt	r0, r3
 800aaf8:	e7a6      	b.n	800aa48 <_printf_i+0x164>
 800aafa:	2301      	movs	r3, #1
 800aafc:	4632      	mov	r2, r6
 800aafe:	4649      	mov	r1, r9
 800ab00:	4640      	mov	r0, r8
 800ab02:	47d0      	blx	sl
 800ab04:	3001      	adds	r0, #1
 800ab06:	d09d      	beq.n	800aa44 <_printf_i+0x160>
 800ab08:	3501      	adds	r5, #1
 800ab0a:	68e3      	ldr	r3, [r4, #12]
 800ab0c:	9903      	ldr	r1, [sp, #12]
 800ab0e:	1a5b      	subs	r3, r3, r1
 800ab10:	42ab      	cmp	r3, r5
 800ab12:	dcf2      	bgt.n	800aafa <_printf_i+0x216>
 800ab14:	e7eb      	b.n	800aaee <_printf_i+0x20a>
 800ab16:	2500      	movs	r5, #0
 800ab18:	f104 0619 	add.w	r6, r4, #25
 800ab1c:	e7f5      	b.n	800ab0a <_printf_i+0x226>
 800ab1e:	bf00      	nop
 800ab20:	0800b3b1 	.word	0x0800b3b1
 800ab24:	0800b3c2 	.word	0x0800b3c2

0800ab28 <__malloc_lock>:
 800ab28:	4801      	ldr	r0, [pc, #4]	; (800ab30 <__malloc_lock+0x8>)
 800ab2a:	f7ff bc65 	b.w	800a3f8 <__retarget_lock_acquire_recursive>
 800ab2e:	bf00      	nop
 800ab30:	200006b0 	.word	0x200006b0

0800ab34 <__malloc_unlock>:
 800ab34:	4801      	ldr	r0, [pc, #4]	; (800ab3c <__malloc_unlock+0x8>)
 800ab36:	f7ff bc60 	b.w	800a3fa <__retarget_lock_release_recursive>
 800ab3a:	bf00      	nop
 800ab3c:	200006b0 	.word	0x200006b0

0800ab40 <_realloc_r>:
 800ab40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab44:	4680      	mov	r8, r0
 800ab46:	4614      	mov	r4, r2
 800ab48:	460e      	mov	r6, r1
 800ab4a:	b921      	cbnz	r1, 800ab56 <_realloc_r+0x16>
 800ab4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab50:	4611      	mov	r1, r2
 800ab52:	f7ff bdd9 	b.w	800a708 <_malloc_r>
 800ab56:	b92a      	cbnz	r2, 800ab64 <_realloc_r+0x24>
 800ab58:	f000 f84c 	bl	800abf4 <_free_r>
 800ab5c:	4625      	mov	r5, r4
 800ab5e:	4628      	mov	r0, r5
 800ab60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab64:	f000 f890 	bl	800ac88 <_malloc_usable_size_r>
 800ab68:	4284      	cmp	r4, r0
 800ab6a:	4607      	mov	r7, r0
 800ab6c:	d802      	bhi.n	800ab74 <_realloc_r+0x34>
 800ab6e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ab72:	d812      	bhi.n	800ab9a <_realloc_r+0x5a>
 800ab74:	4621      	mov	r1, r4
 800ab76:	4640      	mov	r0, r8
 800ab78:	f7ff fdc6 	bl	800a708 <_malloc_r>
 800ab7c:	4605      	mov	r5, r0
 800ab7e:	2800      	cmp	r0, #0
 800ab80:	d0ed      	beq.n	800ab5e <_realloc_r+0x1e>
 800ab82:	42bc      	cmp	r4, r7
 800ab84:	4622      	mov	r2, r4
 800ab86:	4631      	mov	r1, r6
 800ab88:	bf28      	it	cs
 800ab8a:	463a      	movcs	r2, r7
 800ab8c:	f7ff fc36 	bl	800a3fc <memcpy>
 800ab90:	4631      	mov	r1, r6
 800ab92:	4640      	mov	r0, r8
 800ab94:	f000 f82e 	bl	800abf4 <_free_r>
 800ab98:	e7e1      	b.n	800ab5e <_realloc_r+0x1e>
 800ab9a:	4635      	mov	r5, r6
 800ab9c:	e7df      	b.n	800ab5e <_realloc_r+0x1e>

0800ab9e <memmove>:
 800ab9e:	4288      	cmp	r0, r1
 800aba0:	b510      	push	{r4, lr}
 800aba2:	eb01 0402 	add.w	r4, r1, r2
 800aba6:	d902      	bls.n	800abae <memmove+0x10>
 800aba8:	4284      	cmp	r4, r0
 800abaa:	4623      	mov	r3, r4
 800abac:	d807      	bhi.n	800abbe <memmove+0x20>
 800abae:	1e43      	subs	r3, r0, #1
 800abb0:	42a1      	cmp	r1, r4
 800abb2:	d008      	beq.n	800abc6 <memmove+0x28>
 800abb4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800abb8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800abbc:	e7f8      	b.n	800abb0 <memmove+0x12>
 800abbe:	4402      	add	r2, r0
 800abc0:	4601      	mov	r1, r0
 800abc2:	428a      	cmp	r2, r1
 800abc4:	d100      	bne.n	800abc8 <memmove+0x2a>
 800abc6:	bd10      	pop	{r4, pc}
 800abc8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800abcc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800abd0:	e7f7      	b.n	800abc2 <memmove+0x24>
	...

0800abd4 <_sbrk_r>:
 800abd4:	b538      	push	{r3, r4, r5, lr}
 800abd6:	4d06      	ldr	r5, [pc, #24]	; (800abf0 <_sbrk_r+0x1c>)
 800abd8:	2300      	movs	r3, #0
 800abda:	4604      	mov	r4, r0
 800abdc:	4608      	mov	r0, r1
 800abde:	602b      	str	r3, [r5, #0]
 800abe0:	f7f6 fc52 	bl	8001488 <_sbrk>
 800abe4:	1c43      	adds	r3, r0, #1
 800abe6:	d102      	bne.n	800abee <_sbrk_r+0x1a>
 800abe8:	682b      	ldr	r3, [r5, #0]
 800abea:	b103      	cbz	r3, 800abee <_sbrk_r+0x1a>
 800abec:	6023      	str	r3, [r4, #0]
 800abee:	bd38      	pop	{r3, r4, r5, pc}
 800abf0:	200006bc 	.word	0x200006bc

0800abf4 <_free_r>:
 800abf4:	b538      	push	{r3, r4, r5, lr}
 800abf6:	4605      	mov	r5, r0
 800abf8:	2900      	cmp	r1, #0
 800abfa:	d041      	beq.n	800ac80 <_free_r+0x8c>
 800abfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac00:	1f0c      	subs	r4, r1, #4
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	bfb8      	it	lt
 800ac06:	18e4      	addlt	r4, r4, r3
 800ac08:	f7ff ff8e 	bl	800ab28 <__malloc_lock>
 800ac0c:	4a1d      	ldr	r2, [pc, #116]	; (800ac84 <_free_r+0x90>)
 800ac0e:	6813      	ldr	r3, [r2, #0]
 800ac10:	b933      	cbnz	r3, 800ac20 <_free_r+0x2c>
 800ac12:	6063      	str	r3, [r4, #4]
 800ac14:	6014      	str	r4, [r2, #0]
 800ac16:	4628      	mov	r0, r5
 800ac18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac1c:	f7ff bf8a 	b.w	800ab34 <__malloc_unlock>
 800ac20:	42a3      	cmp	r3, r4
 800ac22:	d908      	bls.n	800ac36 <_free_r+0x42>
 800ac24:	6820      	ldr	r0, [r4, #0]
 800ac26:	1821      	adds	r1, r4, r0
 800ac28:	428b      	cmp	r3, r1
 800ac2a:	bf01      	itttt	eq
 800ac2c:	6819      	ldreq	r1, [r3, #0]
 800ac2e:	685b      	ldreq	r3, [r3, #4]
 800ac30:	1809      	addeq	r1, r1, r0
 800ac32:	6021      	streq	r1, [r4, #0]
 800ac34:	e7ed      	b.n	800ac12 <_free_r+0x1e>
 800ac36:	461a      	mov	r2, r3
 800ac38:	685b      	ldr	r3, [r3, #4]
 800ac3a:	b10b      	cbz	r3, 800ac40 <_free_r+0x4c>
 800ac3c:	42a3      	cmp	r3, r4
 800ac3e:	d9fa      	bls.n	800ac36 <_free_r+0x42>
 800ac40:	6811      	ldr	r1, [r2, #0]
 800ac42:	1850      	adds	r0, r2, r1
 800ac44:	42a0      	cmp	r0, r4
 800ac46:	d10b      	bne.n	800ac60 <_free_r+0x6c>
 800ac48:	6820      	ldr	r0, [r4, #0]
 800ac4a:	4401      	add	r1, r0
 800ac4c:	1850      	adds	r0, r2, r1
 800ac4e:	4283      	cmp	r3, r0
 800ac50:	6011      	str	r1, [r2, #0]
 800ac52:	d1e0      	bne.n	800ac16 <_free_r+0x22>
 800ac54:	6818      	ldr	r0, [r3, #0]
 800ac56:	685b      	ldr	r3, [r3, #4]
 800ac58:	6053      	str	r3, [r2, #4]
 800ac5a:	4408      	add	r0, r1
 800ac5c:	6010      	str	r0, [r2, #0]
 800ac5e:	e7da      	b.n	800ac16 <_free_r+0x22>
 800ac60:	d902      	bls.n	800ac68 <_free_r+0x74>
 800ac62:	230c      	movs	r3, #12
 800ac64:	602b      	str	r3, [r5, #0]
 800ac66:	e7d6      	b.n	800ac16 <_free_r+0x22>
 800ac68:	6820      	ldr	r0, [r4, #0]
 800ac6a:	1821      	adds	r1, r4, r0
 800ac6c:	428b      	cmp	r3, r1
 800ac6e:	bf04      	itt	eq
 800ac70:	6819      	ldreq	r1, [r3, #0]
 800ac72:	685b      	ldreq	r3, [r3, #4]
 800ac74:	6063      	str	r3, [r4, #4]
 800ac76:	bf04      	itt	eq
 800ac78:	1809      	addeq	r1, r1, r0
 800ac7a:	6021      	streq	r1, [r4, #0]
 800ac7c:	6054      	str	r4, [r2, #4]
 800ac7e:	e7ca      	b.n	800ac16 <_free_r+0x22>
 800ac80:	bd38      	pop	{r3, r4, r5, pc}
 800ac82:	bf00      	nop
 800ac84:	200006b4 	.word	0x200006b4

0800ac88 <_malloc_usable_size_r>:
 800ac88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac8c:	1f18      	subs	r0, r3, #4
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	bfbc      	itt	lt
 800ac92:	580b      	ldrlt	r3, [r1, r0]
 800ac94:	18c0      	addlt	r0, r0, r3
 800ac96:	4770      	bx	lr

0800ac98 <_init>:
 800ac98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac9a:	bf00      	nop
 800ac9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac9e:	bc08      	pop	{r3}
 800aca0:	469e      	mov	lr, r3
 800aca2:	4770      	bx	lr

0800aca4 <_fini>:
 800aca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aca6:	bf00      	nop
 800aca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acaa:	bc08      	pop	{r3}
 800acac:	469e      	mov	lr, r3
 800acae:	4770      	bx	lr
